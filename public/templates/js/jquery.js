
/*! jQuery v3.4.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(C,e){"use strict";var t=[],E=C.document,r=Object.getPrototypeOf,s=t.slice,g=t.concat,u=t.push,i=t.indexOf,n={},o=n.toString,v=n.hasOwnProperty,a=v.toString,l=a.call(Object),y={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},x=function(e){return null!=e&&e===e.window},c={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||E).createElement("script");if(o.text=e,t)for(r in c)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[o.call(e)]||"object":typeof e}var f="3.4.1",k=function(e,t){return new k.fn.init(e,t)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function d(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!x(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}k.fn=k.prototype={jquery:f,constructor:k,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=k.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return k.each(this,e)},map:function(n){return this.pushStack(k.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:t.sort,splice:t.splice},k.extend=k.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||m(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(l&&r&&(k.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||k.isPlainObject(n)?n:{},i=!1,a[t]=k.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},k.extend({expando:"jQuery"+(f+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==o.call(e))&&(!(t=r(e))||"function"==typeof(n=v.call(t,"constructor")&&t.constructor)&&a.call(n)===l)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(d(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(p,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(d(Object(e))?k.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(d(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return g.apply([],a)},guid:1,support:y}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=t[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){var e,d,b,o,i,h,f,g,w,u,l,T,C,a,E,v,s,c,y,k="sizzle"+1*new Date,m=n.document,S=0,r=0,p=ue(),x=ue(),N=ue(),A=ue(),D=function(e,t){return e===t&&(l=!0),0},j={}.hasOwnProperty,t=[],q=t.pop,L=t.push,H=t.push,O=t.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",W="\\["+M+"*("+I+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+M+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+W+")*)|.*)\\)|)",F=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),_=new RegExp("^"+M+"*,"+M+"*"),z=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp(M+"|>"),X=new RegExp($),V=new RegExp("^"+I+"$"),G={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+W),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){T()},ae=be(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{H.apply(t=O.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){H={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function se(t,e,n,r){var i,o,a,s,u,l,c,f=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!r&&((e?e.ownerDocument||e:m)!==C&&T(e),e=e||C,E)){if(11!==p&&(u=Z.exec(t)))if(i=u[1]){if(9===p){if(!(a=e.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&y(e,a)&&a.id===i)return n.push(a),n}else{if(u[2])return H.apply(n,e.getElementsByTagName(t)),n;if((i=u[3])&&d.getElementsByClassName&&e.getElementsByClassName)return H.apply(n,e.getElementsByClassName(i)),n}if(d.qsa&&!A[t+" "]&&(!v||!v.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,f=e,1===p&&U.test(t)){(s=e.getAttribute("id"))?s=s.replace(re,ie):e.setAttribute("id",s=k),o=(l=h(t)).length;while(o--)l[o]="#"+s+" "+xe(l[o]);c=l.join(","),f=ee.test(t)&&ye(e.parentNode)||e}try{return H.apply(n,f.querySelectorAll(c)),n}catch(e){A(t,!0)}finally{s===k&&e.removeAttribute("id")}}}return g(t.replace(B,"$1"),e,n,r)}function ue(){var r=[];return function e(t,n){return r.push(t+" ")>b.cacheLength&&delete e[r.shift()],e[t+" "]=n}}function le(e){return e[k]=!0,e}function ce(e){var t=C.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){var n=e.split("|"),r=n.length;while(r--)b.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function de(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function he(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function ge(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function ve(a){return le(function(o){return o=+o,le(function(e,t){var n,r=a([],e.length,o),i=r.length;while(i--)e[n=r[i]]&&(e[n]=!(t[n]=e[n]))})})}function ye(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}for(e in d=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},T=se.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:m;return r!==C&&9===r.nodeType&&r.documentElement&&(a=(C=r).documentElement,E=!i(C),m!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",oe,!1):n.attachEvent&&n.attachEvent("onunload",oe)),d.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),d.getElementsByTagName=ce(function(e){return e.appendChild(C.createComment("")),!e.getElementsByTagName("*").length}),d.getElementsByClassName=K.test(C.getElementsByClassName),d.getById=ce(function(e){return a.appendChild(e).id=k,!C.getElementsByName||!C.getElementsByName(k).length}),d.getById?(b.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var n=e.replace(te,ne);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},b.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&E){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),b.find.TAG=d.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):d.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},b.find.CLASS=d.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&E)return t.getElementsByClassName(e)},s=[],v=[],(d.qsa=K.test(C.querySelectorAll))&&(ce(function(e){a.appendChild(e).innerHTML="<a id='"+k+"'></a><select id='"+k+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+k+"-]").length||v.push("~="),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+k+"+*").length||v.push(".#.+[+~]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=C.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")})),(d.matchesSelector=K.test(c=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ce(function(e){d.disconnectedMatch=c.call(e,"*"),c.call(e,"[s!='']:x"),s.push("!=",$)}),v=v.length&&new RegExp(v.join("|")),s=s.length&&new RegExp(s.join("|")),t=K.test(a.compareDocumentPosition),y=t||K.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return l=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!d.sortDetached&&t.compareDocumentPosition(e)===n?e===C||e.ownerDocument===m&&y(m,e)?-1:t===C||t.ownerDocument===m&&y(m,t)?1:u?P(u,e)-P(u,t):0:4&n?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===C?-1:t===C?1:i?-1:o?1:u?P(u,e)-P(u,t):0;if(i===o)return pe(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?pe(a[r],s[r]):a[r]===m?-1:s[r]===m?1:0}),C},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==C&&T(e),d.matchesSelector&&E&&!A[t+" "]&&(!s||!s.test(t))&&(!v||!v.test(t)))try{var n=c.call(e,t);if(n||d.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){A(t,!0)}return 0<se(t,C,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!==C&&T(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==C&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&j.call(b.attrHandle,t.toLowerCase())?n(e,t,!E):void 0;return void 0!==r?r:d.attributes||!E?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],r=0,i=0;if(l=!d.detectDuplicates,u=!d.sortStable&&e.slice(0),e.sort(D),l){while(t=e[i++])t===e[i]&&(r=n.push(i));while(r--)e.splice(n[r],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else while(t=e[r++])n+=o(t);return n},(b=se.selectors={cacheLength:50,createPseudo:le,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=p[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&p(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,i){return function(e){var t=se.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===i:"!="===r?t!==i:"^="===r?i&&0===t.indexOf(i):"*="===r?i&&-1<t.indexOf(i):"$="===r?i&&t.slice(-i.length)===i:"~="===r?-1<(" "+t.replace(F," ")+" ").indexOf(i):"|="===r&&(t===i||t.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,v){var y="nth"!==h.slice(0,3),m="last"!==h.slice(-4),x="of-type"===e;return 1===g&&0===v?function(e){return!!e.parentNode}:function(e,t,n){var r,i,o,a,s,u,l=y!==m?"nextSibling":"previousSibling",c=e.parentNode,f=x&&e.nodeName.toLowerCase(),p=!n&&!x,d=!1;if(c){if(y){while(l){a=e;while(a=a[l])if(x?a.nodeName.toLowerCase()===f:1===a.nodeType)return!1;u=l="only"===h&&!u&&"nextSibling"}return!0}if(u=[m?c.firstChild:c.lastChild],m&&p){d=(s=(r=(i=(o=(a=c)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1])&&r[2],a=s&&c.childNodes[s];while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if(1===a.nodeType&&++d&&a===e){i[h]=[S,s,d];break}}else if(p&&(d=s=(r=(i=(o=(a=e)[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]||[])[0]===S&&r[1]),!1===d)while(a=++s&&a&&a[l]||(d=s=0)||u.pop())if((x?a.nodeName.toLowerCase()===f:1===a.nodeType)&&++d&&(p&&((i=(o=a[k]||(a[k]={}))[a.uniqueID]||(o[a.uniqueID]={}))[h]=[S,d]),a===e))break;return(d-=v)===g||d%g==0&&0<=d/g}}},PSEUDO:function(e,o){var t,a=b.pseudos[e]||b.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[k]?a(o):1<a.length?(t=[e,e,"",o],b.setFilters.hasOwnProperty(e.toLowerCase())?le(function(e,t){var n,r=a(e,o),i=r.length;while(i--)e[n=P(e,r[i])]=!(t[n]=r[i])}):function(e){return a(e,0,t)}):a}},pseudos:{not:le(function(e){var r=[],i=[],s=f(e.replace(B,"$1"));return s[k]?le(function(e,t,n,r){var i,o=s(e,null,r,[]),a=e.length;while(a--)(i=o[a])&&(e[a]=!(t[a]=i))}):function(e,t,n){return r[0]=e,s(r,null,n,i),r[0]=null,!i.pop()}}),has:le(function(t){return function(e){return 0<se(t,e).length}}),contains:le(function(t){return t=t.replace(te,ne),function(e){return-1<(e.textContent||o(e)).indexOf(t)}}),lang:le(function(n){return V.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(te,ne).toLowerCase(),function(e){var t;do{if(t=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ge(!1),disabled:ge(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve(function(){return[0]}),last:ve(function(e,t){return[t-1]}),eq:ve(function(e,t,n){return[n<0?n+t:n]}),even:ve(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ve(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ve(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:ve(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[e]=de(e);for(e in{submit:!0,reset:!0})b.pseudos[e]=he(e);function me(){}function xe(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(s,e,t){var u=e.dir,l=e.next,c=l||u,f=t&&"parentNode"===c,p=r++;return e.first?function(e,t,n){while(e=e[u])if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,i,o,a=[S,p];if(n){while(e=e[u])if((1===e.nodeType||f)&&s(e,t,n))return!0}else while(e=e[u])if(1===e.nodeType||f)if(i=(o=e[k]||(e[k]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[u]||e;else{if((r=i[c])&&r[0]===S&&r[1]===p)return a[2]=r[2];if((i[c]=a)[2]=s(e,t,n))return!0}return!1}}function we(i){return 1<i.length?function(e,t,n){var r=i.length;while(r--)if(!i[r](e,t,n))return!1;return!0}:i[0]}function Te(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Ce(d,h,g,v,y,e){return v&&!v[k]&&(v=Ce(v)),y&&!y[k]&&(y=Ce(y,e)),le(function(e,t,n,r){var i,o,a,s=[],u=[],l=t.length,c=e||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(h||"*",n.nodeType?[n]:n,[]),f=!d||!e&&h?c:Te(c,s,d,n,r),p=g?y||(e?d:l||v)?[]:t:f;if(g&&g(f,p,n,r),v){i=Te(p,u),v(i,[],n,r),o=i.length;while(o--)(a=i[o])&&(p[u[o]]=!(f[u[o]]=a))}if(e){if(y||d){if(y){i=[],o=p.length;while(o--)(a=p[o])&&i.push(f[o]=a);y(null,p=[],i,r)}o=p.length;while(o--)(a=p[o])&&-1<(i=y?P(e,a):s[o])&&(e[i]=!(t[i]=a))}}else p=Te(p===t?p.splice(l,p.length):p),y?y(null,t,p,r):H.apply(t,p)})}function Ee(e){for(var i,t,n,r=e.length,o=b.relative[e[0].type],a=o||b.relative[" "],s=o?1:0,u=be(function(e){return e===i},a,!0),l=be(function(e){return-1<P(i,e)},a,!0),c=[function(e,t,n){var r=!o&&(n||t!==w)||((i=t).nodeType?u(e,t,n):l(e,t,n));return i=null,r}];s<r;s++)if(t=b.relative[e[s].type])c=[be(we(c),t)];else{if((t=b.filter[e[s].type].apply(null,e[s].matches))[k]){for(n=++s;n<r;n++)if(b.relative[e[n].type])break;return Ce(1<s&&we(c),1<s&&xe(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(B,"$1"),t,s<n&&Ee(e.slice(s,n)),n<r&&Ee(e=e.slice(n)),n<r&&xe(e))}c.push(t)}return we(c)}return me.prototype=b.filters=b.pseudos,b.setFilters=new me,h=se.tokenize=function(e,t){var n,r,i,o,a,s,u,l=x[e+" "];if(l)return t?0:l.slice(0);a=e,s=[],u=b.preFilter;while(a){for(o in n&&!(r=_.exec(a))||(r&&(a=a.slice(r[0].length)||a),s.push(i=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),i.push({value:n,type:r[0].replace(B," ")}),a=a.slice(n.length)),b.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),i.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):x(e,s).slice(0)},f=se.compile=function(e,t){var n,v,y,m,x,r,i=[],o=[],a=N[e+" "];if(!a){t||(t=h(e)),n=t.length;while(n--)(a=Ee(t[n]))[k]?i.push(a):o.push(a);(a=N(e,(v=o,m=0<(y=i).length,x=0<v.length,r=function(e,t,n,r,i){var o,a,s,u=0,l="0",c=e&&[],f=[],p=w,d=e||x&&b.find.TAG("*",i),h=S+=null==p?1:Math.random()||.1,g=d.length;for(i&&(w=t===C||t||i);l!==g&&null!=(o=d[l]);l++){if(x&&o){a=0,t||o.ownerDocument===C||(T(o),n=!E);while(s=v[a++])if(s(o,t||C,n)){r.push(o);break}i&&(S=h)}m&&((o=!s&&o)&&u--,e&&c.push(o))}if(u+=l,m&&l!==u){a=0;while(s=y[a++])s(c,f,t,n);if(e){if(0<u)while(l--)c[l]||f[l]||(f[l]=q.call(r));f=Te(f)}H.apply(r,f),i&&!e&&0<f.length&&1<u+y.length&&se.uniqueSort(r)}return i&&(S=h,w=p),c},m?le(r):r))).selector=e}return a},g=se.select=function(e,t,n,r){var i,o,a,s,u,l="function"==typeof e&&e,c=!r&&h(e=l.selector||e);if(n=n||[],1===c.length){if(2<(o=c[0]=c[0].slice(0)).length&&"ID"===(a=o[0]).type&&9===t.nodeType&&E&&b.relative[o[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(te,ne),t)||[])[0]))return n;l&&(t=t.parentNode),e=e.slice(o.shift().value.length)}i=G.needsContext.test(e)?0:o.length;while(i--){if(a=o[i],b.relative[s=a.type])break;if((u=b.find[s])&&(r=u(a.matches[0].replace(te,ne),ee.test(o[0].type)&&ye(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&xe(o)))return H.apply(n,r),n;break}}}return(l||f(e,c))(r,t,!E,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},d.sortStable=k.split("").sort(D).join("")===k,d.detectDuplicates=!!l,T(),d.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(C.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||fe("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),d.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||fe("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||fe(R,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),se}(C);k.find=h,k.expr=h.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=h.uniqueSort,k.text=h.getText,k.isXMLDoc=h.isXML,k.contains=h.contains,k.escapeSelector=h.escape;var T=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&k(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},N=k.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,n,r){return m(n)?k.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?k.grep(e,function(e){return e===n!==r}):"string"!=typeof n?k.grep(e,function(e){return-1<i.call(n,e)!==r}):k.filter(n,e,r)}k.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?k.find.matchesSelector(r,e)?[r]:[]:k.find.matches(e,k.grep(t,function(e){return 1===e.nodeType}))},k.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(k(e).filter(function(){for(t=0;t<r;t++)if(k.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)k.find(e,i[t],n);return 1<r?k.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&N.test(e)?k(e):e||[],!1).length}});var q,L=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:L.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof k?t[0]:t,k.merge(this,k.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:E,!0)),D.test(r[1])&&k.isPlainObject(t))for(r in t)m(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=E.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(k):k.makeArray(e,this)}).prototype=k.fn,q=k(E);var H=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}k.fn.extend({has:function(e){var t=k(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(k.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&k(e);if(!N.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&k.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(1<o.length?k.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?i.call(k(e),this[0]):i.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),k.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return T(e,"parentNode")},parentsUntil:function(e,t,n){return T(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return T(e,"nextSibling")},prevAll:function(e){return T(e,"previousSibling")},nextUntil:function(e,t,n){return T(e,"nextSibling",n)},prevUntil:function(e,t,n){return T(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(A(e,"template")&&(e=e.content||e),k.merge([],e.childNodes))}},function(r,i){k.fn[r]=function(e,t){var n=k.map(this,i,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=k.filter(t,n)),1<this.length&&(O[r]||k.uniqueSort(n),H.test(r)&&n.reverse()),this.pushStack(n)}});var R=/[^\x20\t\r\n\f]+/g;function M(e){return e}function I(e){throw e}function W(e,t,n,r){var i;try{e&&m(i=e.promise)?i.call(e).done(t).fail(n):e&&m(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}k.Callbacks=function(r){var e,n;r="string"==typeof r?(e=r,n={},k.each(e.match(R)||[],function(e,t){n[t]=!0}),n):k.extend({},r);var i,t,o,a,s=[],u=[],l=-1,c=function(){for(a=a||r.once,o=i=!0;u.length;l=-1){t=u.shift();while(++l<s.length)!1===s[l].apply(t[0],t[1])&&r.stopOnFalse&&(l=s.length,t=!1)}r.memory||(t=!1),i=!1,a&&(s=t?[]:"")},f={add:function(){return s&&(t&&!i&&(l=s.length-1,u.push(t)),function n(e){k.each(e,function(e,t){m(t)?r.unique&&f.has(t)||s.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!i&&c()),this},remove:function(){return k.each(arguments,function(e,t){var n;while(-1<(n=k.inArray(t,s,n)))s.splice(n,1),n<=l&&l--}),this},has:function(e){return e?-1<k.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=u=[],s=t="",this},disabled:function(){return!s},lock:function(){return a=u=[],t||i||(s=t=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),i||c()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!o}};return f},k.extend({Deferred:function(e){var o=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",a={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return a.then(null,e)},pipe:function(){var i=arguments;return k.Deferred(function(r){k.each(o,function(e,t){var n=m(i[t[4]])&&i[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&m(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),i=null}).promise()},then:function(t,n,r){var u=0;function l(i,o,a,s){return function(){var n=this,r=arguments,e=function(){var e,t;if(!(i<u)){if((e=a.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,m(t)?s?t.call(e,l(u,o,M,s),l(u,o,I,s)):(u++,t.call(e,l(u,o,M,s),l(u,o,I,s),l(u,o,M,o.notifyWith))):(a!==M&&(n=void 0,r=[e]),(s||o.resolveWith)(n,r))}},t=s?e:function(){try{e()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,t.stackTrace),u<=i+1&&(a!==I&&(n=void 0,r=[e]),o.rejectWith(n,r))}};i?t():(k.Deferred.getStackHook&&(t.stackTrace=k.Deferred.getStackHook()),C.setTimeout(t))}}return k.Deferred(function(e){o[0][3].add(l(0,e,m(r)?r:M,e.notifyWith)),o[1][3].add(l(0,e,m(t)?t:M)),o[2][3].add(l(0,e,m(n)?n:I))}).promise()},promise:function(e){return null!=e?k.extend(e,a):a}},s={};return k.each(o,function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add(function(){i=r},o[3-e][2].disable,o[3-e][3].disable,o[0][2].lock,o[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),i=s.call(arguments),o=k.Deferred(),a=function(t){return function(e){r[t]=this,i[t]=1<arguments.length?s.call(arguments):e,--n||o.resolveWith(r,i)}};if(n<=1&&(W(e,o.done(a(t)).resolve,o.reject,!n),"pending"===o.state()||m(i[t]&&i[t].then)))return o.then();while(t--)W(i[t],a(t),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(e,t){C.console&&C.console.warn&&e&&$.test(e.name)&&C.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},k.readyException=function(e){C.setTimeout(function(){throw e})};var F=k.Deferred();function B(){E.removeEventListener("DOMContentLoaded",B),C.removeEventListener("load",B),k.ready()}k.fn.ready=function(e){return F.then(e)["catch"](function(e){k.readyException(e)}),this},k.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--k.readyWait:k.isReady)||(k.isReady=!0)!==e&&0<--k.readyWait||F.resolveWith(E,[k])}}),k.ready.then=F.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(k.ready):(E.addEventListener("DOMContentLoaded",B),C.addEventListener("load",B));var _=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===w(n))for(s in i=!0,n)_(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,m(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(k(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},z=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function V(e){return e.replace(z,"ms-").replace(U,X)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Y(){this.expando=k.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[V(t)]=n;else for(r in t)i[V(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][V(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(V):(t=V(t))in r?[t]:t.match(R)||[]).length;while(n--)delete r[t[n]]}(void 0===t||k.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!k.isEmptyObject(t)}};var Q=new Y,J=new Y,K=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var r,i;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n="true"===(i=n)||"false"!==i&&("null"===i?null:i===+i+""?+i:K.test(i)?JSON.parse(i):i)}catch(e){}J.set(e,t,n)}else n=void 0;return n}k.extend({hasData:function(e){return J.hasData(e)||Q.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),k.fn.extend({data:function(n,e){var t,r,i,o=this[0],a=o&&o.attributes;if(void 0===n){if(this.length&&(i=J.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){t=a.length;while(t--)a[t]&&0===(r=a[t].name).indexOf("data-")&&(r=V(r.slice(5)),ee(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof n?this.each(function(){J.set(this,n)}):_(this,function(e){var t;if(o&&void 0===e)return void 0!==(t=J.get(o,n))?t:void 0!==(t=ee(o,n))?t:void 0;this.each(function(){J.set(this,n,e)})},null,e,1<arguments.length,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),k.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,k.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=k.queue(e,t),r=n.length,i=n.shift(),o=k._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){k.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(e){return this.each(function(){k.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=k.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],ie=E.documentElement,oe=function(e){return k.contains(e.ownerDocument,e)},ae={composed:!0};ie.getRootNode&&(oe=function(e){return k.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===k.css(e,"display")},ue=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function le(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return k.css(e,t,"")},u=s(),l=n&&n[3]||(k.cssNumber[t]?"":"px"),c=e.nodeType&&(k.cssNumber[t]||"px"!==l&&+u)&&ne.exec(k.css(e,t));if(c&&c[3]!==l){u/=2,l=l||c[3],c=+u||1;while(a--)k.style(e,t,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,k.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ce={};function fe(e,t){for(var n,r,i,o,a,s,u,l=[],c=0,f=e.length;c<f;c++)(r=e[c]).style&&(n=r.style.display,t?("none"===n&&(l[c]=Q.get(r,"display")||null,l[c]||(r.style.display="")),""===r.style.display&&se(r)&&(l[c]=(u=a=o=void 0,a=(i=r).ownerDocument,s=i.nodeName,(u=ce[s])||(o=a.body.appendChild(a.createElement(s)),u=k.css(o,"display"),o.parentNode.removeChild(o),"none"===u&&(u="block"),ce[s]=u)))):"none"!==n&&(l[c]="none",Q.set(r,"display",n)));for(c=0;c<f;c++)null!=l[c]&&(e[c].style.display=l[c]);return e}k.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?k(this).show():k(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ve(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&A(e,t)?k.merge([e],n):n}function ye(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var me,xe,be=/<|&#?\w+;/;function we(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===w(o))k.merge(p,o.nodeType?[o]:o);else if(be.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+k.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;k.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&-1<k.inArray(o,r))i&&i.push(o);else if(l=oe(o),a=ve(f.appendChild(o),"script"),l&&ye(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}me=E.createDocumentFragment().appendChild(E.createElement("div")),(xe=E.createElement("input")).setAttribute("type","radio"),xe.setAttribute("checked","checked"),xe.setAttribute("name","t"),me.appendChild(xe),y.checkClone=me.cloneNode(!0).cloneNode(!0).lastChild.checked,me.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!me.cloneNode(!0).lastChild.defaultValue;var Te=/^key/,Ce=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ee=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Se(){return!1}function Ne(e,t){return e===function(){try{return E.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ae(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return k().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),e.each(function(){k.event.add(this,t,i,r,n)})}function De(e,i,o){o?(Q.set(e,i,!1),k.event.add(e,i,{namespace:!1,handler:function(e){var t,n,r=Q.get(this,i);if(1&e.isTrigger&&this[i]){if(r.length)(k.event.special[i]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),Q.set(this,i,r),t=o(this,i),this[i](),r!==(n=Q.get(this,i))||t?Q.set(this,i,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Q.set(this,i,{value:k.event.trigger(k.extend(r[0],k.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,i)&&k.event.add(e,i,ke)}k.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.get(t);if(v){n.handler&&(n=(o=n).handler,i=o.selector),i&&k.find.matchesSelector(ie,i),n.guid||(n.guid=k.guid++),(u=v.events)||(u=v.events={}),(a=v.handle)||(a=v.handle=function(e){return"undefined"!=typeof k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(R)||[""]).length;while(l--)d=g=(s=Ee.exec(e[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=k.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=k.event.special[d]||{},c=k.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&k.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,h,a)||t.addEventListener&&t.addEventListener(d,a)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),k.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,v=Q.hasData(e)&&Q.get(e);if(v&&(u=v.events)){l=(t=(t||"").match(R)||[""]).length;while(l--)if(d=g=(s=Ee.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d){f=k.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||k.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)k.event.remove(e,d+t[l],n,r,!0);k.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=k.event.fix(e),u=new Array(arguments.length),l=(Q.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){a=k.event.handlers.call(this,s,l),t=0;while((i=a[t++])&&!s.isPropagationStopped()){s.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!s.isImmediatePropagationStopped())s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((k.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&1<=e.button))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?-1<k(i,this).index(l):k.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:m(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[k.expando]?e:new k.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click",ke),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&Q.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},k.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},k.Event=function(e,t){if(!(this instanceof k.Event))return new k.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&k.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ce.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(e,t){k.event.special[e]={setup:function(){return De(this,e,Ne),!1},trigger:function(){return De(this,e),!0},delegateType:t}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){k.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=e.relatedTarget,r=e.handleObj;return n&&(n===this||k.contains(this,n))||(e.type=r.origType,t=r.handler.apply(this,arguments),e.type=i),t}}}),k.fn.extend({on:function(e,t,n,r){return Ae(this,e,t,n,r)},one:function(e,t,n,r){return Ae(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,k(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){k.event.remove(this,e,n,t)})}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,qe=/<script|<style|<link/i,Le=/checked\s*(?:[^=]|=\s*.checked.)/i,He=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&k(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),l=o.events))for(i in delete a.handle,a.events={},l)for(n=0,r=l[i].length;n<r;n++)k.event.add(t,i,l[i][n]);J.hasData(e)&&(s=J.access(e),u=k.extend({},s),J.set(t,u))}}function Ie(n,r,i,o){r=g.apply([],r);var e,t,a,s,u,l,c=0,f=n.length,p=f-1,d=r[0],h=m(d);if(h||1<f&&"string"==typeof d&&!y.checkClone&&Le.test(d))return n.each(function(e){var t=n.eq(e);h&&(r[0]=d.call(this,e,t.html())),Ie(t,r,i,o)});if(f&&(t=(e=we(r,n[0].ownerDocument,!1,n,o)).firstChild,1===e.childNodes.length&&(e=t),t||o)){for(s=(a=k.map(ve(e,"script"),Pe)).length;c<f;c++)u=e,c!==p&&(u=k.clone(u,!0,!0),s&&k.merge(a,ve(u,"script"))),i.call(n[c],u,c);if(s)for(l=a[a.length-1].ownerDocument,k.map(a,Re),c=0;c<s;c++)u=a[c],he.test(u.type||"")&&!Q.access(u,"globalEval")&&k.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?k._evalUrl&&!u.noModule&&k._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(He,""),u,l))}return n}function We(e,t,n){for(var r,i=t?k.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||k.cleanData(ve(r)),r.parentNode&&(n&&oe(r)&&ye(ve(r,"script")),r.parentNode.removeChild(r));return e}k.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,l,c=e.cloneNode(!0),f=oe(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||k.isXMLDoc(e)))for(a=ve(c),r=0,i=(o=ve(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(l=u.nodeName.toLowerCase())&&pe.test(s.type)?u.checked=s.checked:"input"!==l&&"textarea"!==l||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||ve(e),a=a||ve(c),r=0,i=o.length;r<i;r++)Me(o[r],a[r]);else Me(e,c);return 0<(a=ve(c,"script")).length&&ye(a,!f&&ve(e,"script")),c},cleanData:function(e){for(var t,n,r,i=k.event.special,o=0;void 0!==(n=e[o]);o++)if(G(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?k.event.remove(n,r):k.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),k.fn.extend({detach:function(e){return We(this,e,!0)},remove:function(e){return We(this,e)},text:function(e){return _(this,function(e){return void 0===e?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(k.cleanData(ve(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return k.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!qe.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=k.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(k.cleanData(ve(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;k.inArray(this,n)<0&&(k.cleanData(ve(this)),t&&t.replaceChild(e,this))},n)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){k.fn[e]=function(e){for(var t,n=[],r=k(e),i=r.length-1,o=0;o<=i;o++)t=o===i?this:this.clone(!0),k(r[o])[a](t),u.apply(n,t.get());return this.pushStack(n)}});var $e=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=C),t.getComputedStyle(e)},Be=new RegExp(re.join("|"),"i");function _e(e,t,n){var r,i,o,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||oe(e)||(a=k.style(e,t)),!y.pixelBoxStyles()&&$e.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(s).appendChild(u);var e=C.getComputedStyle(u);n="1%"!==e.top,a=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),r=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ie.removeChild(s),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,i,o,a,s=E.createElement("div"),u=E.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),i}}))}();var Ue=["Webkit","Moz","ms"],Xe=E.createElement("div").style,Ve={};function Ge(e){var t=k.cssProps[e]||Ve[e];return t||(e in Xe?e:Ve[e]=function(e){var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;while(n--)if((e=Ue[n]+t)in Xe)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ke={letterSpacing:"0",fontWeight:"400"};function Ze(e,t,n){var r=ne.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function et(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=k.css(e,n+re[a],!0,i)),r?("content"===n&&(u-=k.css(e,"padding"+re[a],!0,i)),"margin"!==n&&(u-=k.css(e,"border"+re[a]+"Width",!0,i))):(u+=k.css(e,"padding"+re[a],!0,i),"padding"!==n?u+=k.css(e,"border"+re[a]+"Width",!0,i):s+=k.css(e,"border"+re[a]+"Width",!0,i));return!r&&0<=o&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))||0),u}function tt(e,t,n){var r=Fe(e),i=(!y.boxSizingReliable()||n)&&"border-box"===k.css(e,"boxSizing",!1,r),o=i,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&i||"auto"===a||!parseFloat(a)&&"inline"===k.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===k.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+et(e,t,n||(i?"border":"content"),o,r,a)+"px"}function nt(e,t,n,r,i){return new nt.prototype.init(e,t,n,r,i)}k.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=V(t),u=Qe.test(t),l=e.style;if(u||(t=Ge(s)),a=k.cssHooks[t]||k.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"===(o=typeof n)&&(i=ne.exec(n))&&i[1]&&(n=le(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(k.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=V(t);return Qe.test(t)||(t=Ge(s)),(a=k.cssHooks[t]||k.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=_e(e,t,r)),"normal"===i&&t in Ke&&(i=Ke[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),k.each(["height","width"],function(e,u){k.cssHooks[u]={get:function(e,t,n){if(t)return!Ye.test(k.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?tt(e,u,n):ue(e,Je,function(){return tt(e,u,n)})},set:function(e,t,n){var r,i=Fe(e),o=!y.scrollboxSize()&&"absolute"===i.position,a=(o||n)&&"border-box"===k.css(e,"boxSizing",!1,i),s=n?et(e,u,n,a,i):0;return a&&o&&(s-=Math.ceil(e["offset"+u[0].toUpperCase()+u.slice(1)]-parseFloat(i[u])-et(e,u,"border",!1,i)-.5)),s&&(r=ne.exec(t))&&"px"!==(r[3]||"px")&&(e.style[u]=t,t=k.css(e,u)),Ze(0,t,s)}}}),k.cssHooks.marginLeft=ze(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(i,o){k.cssHooks[i+o]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[i+re[t]+o]=r[t]||r[t-2]||r[0];return n}},"margin"!==i&&(k.cssHooks[i+o].set=Ze)}),k.fn.extend({css:function(e,t){return _(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=Fe(e),i=t.length;a<i;a++)o[t[a]]=k.css(e,t[a],!1,r);return o}return void 0!==n?k.style(e,t,n):k.css(e,t)},e,t,1<arguments.length)}}),((k.Tween=nt).prototype={constructor:nt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||k.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var e=nt.propHooks[this.prop];return e&&e.get?e.get(this):nt.propHooks._default.get(this)},run:function(e){var t,n=nt.propHooks[this.prop];return this.options.duration?this.pos=t=k.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):nt.propHooks._default.set(this),this}}).init.prototype=nt.prototype,(nt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=k.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){k.fx.step[e.prop]?k.fx.step[e.prop](e):1!==e.elem.nodeType||!k.cssHooks[e.prop]&&null==e.elem.style[Ge(e.prop)]?e.elem[e.prop]=e.now:k.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=nt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},k.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},k.fx=nt.prototype.init,k.fx.step={};var rt,it,ot,at,st=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function lt(){it&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(lt):C.setTimeout(lt,k.fx.interval),k.fx.tick())}function ct(){return C.setTimeout(function(){rt=void 0}),rt=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=re[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function pt(e,t,n){for(var r,i=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function dt(o,e,t){var n,a,r=0,i=dt.prefilters.length,s=k.Deferred().always(function(){delete u.elem}),u=function(){if(a)return!1;for(var e=rt||ct(),t=Math.max(0,l.startTime+l.duration-e),n=1-(t/l.duration||0),r=0,i=l.tweens.length;r<i;r++)l.tweens[r].run(n);return s.notifyWith(o,[l,n,t]),n<1&&i?t:(i||s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l]),!1)},l=s.promise({elem:o,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},t),originalProperties:e,originalOptions:t,startTime:rt||ct(),duration:t.duration,tweens:[],createTween:function(e,t){var n=k.Tween(o,l.opts,e,t,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(n),n},stop:function(e){var t=0,n=e?l.tweens.length:0;if(a)return this;for(a=!0;t<n;t++)l.tweens[t].run(1);return e?(s.notifyWith(o,[l,1,0]),s.resolveWith(o,[l,e])):s.rejectWith(o,[l,e]),this}}),c=l.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=V(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=k.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(c,l.opts.specialEasing);r<i;r++)if(n=dt.prefilters[r].call(l,o,c,l.opts))return m(n.stop)&&(k._queueHooks(l.elem,l.opts.queue).stop=n.stop.bind(n)),n;return k.map(c,pt,l),m(l.opts.start)&&l.opts.start.call(o,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),k.fx.timer(k.extend(u,{elem:o,anim:l,queue:l.opts.queue})),l}k.Animation=k.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(R);for(var n,r=0,i=e.length;r<i;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&se(e),v=Q.get(e,"fxshow");for(r in n.queue||(null==(a=k._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,k.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||k.style(e,r)}if((u=!k.isEmptyObject(t))||!k.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=v&&v.display)&&(l=Q.get(e,"display")),"none"===(c=k.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=k.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===k.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?"hidden"in v&&(g=v.hidden):v=Q.access(e,"fxshow",{display:l}),o&&(v.hidden=!g),g&&fe([e],!0),p.done(function(){for(r in g||fe([e]),Q.remove(e,"fxshow"),d)k.style(e,r,d[r])})),u=pt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),k.speed=function(e,t,n){var r=e&&"object"==typeof e?k.extend({},e):{complete:n||!n&&t||m(e)&&e,duration:e,easing:n&&t||t&&!m(t)&&t};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var i=k.isEmptyObject(t),o=k.speed(e,n,r),a=function(){var e=dt(this,k.extend({},t),o);(i||Q.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(i,e,o){var a=function(e){var t=e.stop;delete e.stop,t(o)};return"string"!=typeof i&&(o=e,e=i,i=void 0),e&&!1!==i&&this.queue(i||"fx",[]),this.each(function(){var e=!0,t=null!=i&&i+"queueHooks",n=k.timers,r=Q.get(this);if(t)r[t]&&r[t].stop&&a(r[t]);else for(t in r)r[t]&&r[t].stop&&ut.test(t)&&a(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=i&&n[t].queue!==i||(n[t].anim.stop(o),e=!1,n.splice(t,1));!e&&o||k.dequeue(this,i)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=Q.get(this),n=t[a+"queue"],r=t[a+"queueHooks"],i=k.timers,o=n?n.length:0;for(t.finish=!0,k.queue(this,a,[]),r&&r.stop&&r.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===a&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<o;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),k.each(["toggle","show","hide"],function(e,r){var i=k.fn[r];k.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(ft(r,!0),e,t,n)}}),k.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){k.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),k.timers=[],k.fx.tick=function(){var e,t=0,n=k.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||k.fx.stop(),rt=void 0},k.fx.timer=function(e){k.timers.push(e),k.fx.start()},k.fx.interval=13,k.fx.start=function(){it||(it=!0,lt())},k.fx.stop=function(){it=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(r,e){return r=k.fx&&k.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=C.setTimeout(e,r);t.stop=function(){C.clearTimeout(n)}})},ot=E.createElement("input"),at=E.createElement("select").appendChild(E.createElement("option")),ot.type="checkbox",y.checkOn=""!==ot.value,y.optSelected=at.selected,(ot=E.createElement("input")).value="t",ot.type="radio",y.radioValue="t"===ot.value;var ht,gt=k.expr.attrHandle;k.fn.extend({attr:function(e,t){return _(this,k.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){k.removeAttr(this,e)})}}),k.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?k.prop(e,t,n):(1===o&&k.isXMLDoc(e)||(i=k.attrHooks[t.toLowerCase()]||(k.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void k.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=k.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(R);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?k.removeAttr(e,n):e.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(e,t){var a=gt[t]||k.find.attr;gt[t]=function(e,t,n){var r,i,o=t.toLowerCase();return n||(i=gt[o],gt[o]=r,r=null!=a(e,t,n)?o:null,gt[o]=i),r}});var vt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function mt(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}k.fn.extend({prop:function(e,t){return _(this,k.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[k.propFix[e]||e]})}}),k.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(e)||(t=k.propFix[t]||t,i=k.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=k.find.attr(e,"tabindex");return t?parseInt(t,10):vt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),y.optSelected||(k.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).addClass(t.call(this,e,xt(this)))});if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,i,o,a,s,u=0;if(m(t))return this.each(function(e){k(this).removeClass(t.call(this,e,xt(this)))});if(!arguments.length)return this.attr("class","");if((e=bt(t)).length)while(n=this[u++])if(i=xt(n),r=1===n.nodeType&&" "+mt(i)+" "){a=0;while(o=e[a++])while(-1<r.indexOf(" "+o+" "))r=r.replace(" "+o+" "," ");i!==(s=mt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(i,t){var o=typeof i,a="string"===o||Array.isArray(i);return"boolean"==typeof t&&a?t?this.addClass(i):this.removeClass(i):m(i)?this.each(function(e){k(this).toggleClass(i.call(this,e,xt(this),t),t)}):this.each(function(){var e,t,n,r;if(a){t=0,n=k(this),r=bt(i);while(e=r[t++])n.hasClass(e)?n.removeClass(e):n.addClass(e)}else void 0!==i&&"boolean"!==o||((e=xt(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===i?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&-1<(" "+mt(xt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;k.fn.extend({val:function(n){var r,e,i,t=this[0];return arguments.length?(i=m(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=i?n.call(this,e,k(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=k.map(t,function(e){return null==e?"":e+""})),(r=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&void 0!==r.set(this,t,"value")||(this.value=t))})):t?(r=k.valHooks[t.type]||k.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&void 0!==(e=r.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(e){var t=k.find.attr(e,"value");return null!=t?t:mt(k.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=k(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=k.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=-1<k.inArray(k.valHooks.option.get(r),o))&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<k.inArray(k(e).val(),t)}},y.checkOn||(k.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in C;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};k.extend(k.event,{trigger:function(e,t,n,r){var i,o,a,s,u,l,c,f,p=[n||E],d=v.call(e,"type")?e.type:e,h=v.call(e,"namespace")?e.namespace.split("."):[];if(o=f=a=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!Tt.test(d+k.event.triggered)&&(-1<d.indexOf(".")&&(d=(h=d.split(".")).shift(),h.sort()),u=d.indexOf(":")<0&&"on"+d,(e=e[k.expando]?e:new k.Event(d,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:k.makeArray(t,[e]),c=k.event.special[d]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!x(n)){for(s=c.delegateType||d,Tt.test(s+d)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||E)&&p.push(a.defaultView||a.parentWindow||C)}i=0;while((o=p[i++])&&!e.isPropagationStopped())f=o,e.type=1<i?s:c.bindType||d,(l=(Q.get(o,"events")||{})[e.type]&&Q.get(o,"handle"))&&l.apply(o,t),(l=u&&o[u])&&l.apply&&G(o)&&(e.result=l.apply(o,t),!1===e.result&&e.preventDefault());return e.type=d,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!G(n)||u&&m(n[d])&&!x(n)&&((a=n[u])&&(n[u]=null),k.event.triggered=d,e.isPropagationStopped()&&f.addEventListener(d,Ct),n[d](),e.isPropagationStopped()&&f.removeEventListener(d,Ct),k.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(e,t,n){var r=k.extend(new k.Event,n,{type:e,isSimulated:!0});k.event.trigger(r,null,t)}}),k.fn.extend({trigger:function(e,t){return this.each(function(){k.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return k.event.trigger(e,t,n,!0)}}),y.focusin||k.each({focus:"focusin",blur:"focusout"},function(n,r){var i=function(e){k.event.simulate(r,e.target,k.event.fix(e))};k.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Q.access(e,r);t||e.addEventListener(n,i,!0),Q.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Q.access(e,r)-1;t?Q.access(e,r,t):(e.removeEventListener(n,i,!0),Q.remove(e,r))}}});var Et=C.location,kt=Date.now(),St=/\?/;k.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new C.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+e),t};var Nt=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,jt=/^(?:input|select|textarea|keygen)/i;function qt(n,e,r,i){var t;if(Array.isArray(e))k.each(e,function(e,t){r||Nt.test(n)?i(n,t):qt(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,i)});else if(r||"object"!==w(e))i(n,e);else for(t in e)qt(n+"["+t+"]",e[t],r,i)}k.param=function(e,t){var n,r=[],i=function(e,t){var n=m(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!k.isPlainObject(e))k.each(e,function(){i(this.name,this.value)});else for(n in e)qt(n,e[n],t,i);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=k.prop(this,"elements");return e?k.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!k(this).is(":disabled")&&jt.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var Lt=/%20/g,Ht=/#.*$/,Ot=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,Mt=/^\/\//,It={},Wt={},$t="*/".concat("*"),Ft=E.createElement("a");function Bt(o){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,i=e.toLowerCase().match(R)||[];if(m(t))while(n=i[r++])"+"===n[0]?(n=n.slice(1)||"*",(o[n]=o[n]||[]).unshift(t)):(o[n]=o[n]||[]).push(t)}}function _t(t,i,o,a){var s={},u=t===Wt;function l(e){var r;return s[e]=!0,k.each(t[e]||[],function(e,t){var n=t(i,o,a);return"string"!=typeof n||u||s[n]?u?!(r=n):void 0:(i.dataTypes.unshift(n),l(n),!1)}),r}return l(i.dataTypes[0])||!s["*"]&&l("*")}function zt(e,t){var n,r,i=k.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&k.extend(!0,e,r),e}Ft.href=Et.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,k.ajaxSettings),t):zt(k.ajaxSettings,e)},ajaxPrefilter:Bt(It),ajaxTransport:Bt(Wt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,f,p,n,d,r,h,g,i,o,v=k.ajaxSetup({},t),y=v.context||v,m=v.context&&(y.nodeType||y.jquery)?k(y):k.event,x=k.Deferred(),b=k.Callbacks("once memory"),w=v.statusCode||{},a={},s={},u="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(h){if(!n){n={};while(t=Pt.exec(p))n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2])}t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return h?p:null},setRequestHeader:function(e,t){return null==h&&(e=s[e.toLowerCase()]=s[e.toLowerCase()]||e,a[e]=t),this},overrideMimeType:function(e){return null==h&&(v.mimeType=e),this},statusCode:function(e){var t;if(e)if(h)T.always(e[T.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),l(0,t),this}};if(x.promise(T),v.url=((e||v.url||Et.href)+"").replace(Mt,Et.protocol+"//"),v.type=t.method||t.type||v.method||v.type,v.dataTypes=(v.dataType||"*").toLowerCase().match(R)||[""],null==v.crossDomain){r=E.createElement("a");try{r.href=v.url,r.href=r.href,v.crossDomain=Ft.protocol+"//"+Ft.host!=r.protocol+"//"+r.host}catch(e){v.crossDomain=!0}}if(v.data&&v.processData&&"string"!=typeof v.data&&(v.data=k.param(v.data,v.traditional)),_t(It,v,t,T),h)return T;for(i in(g=k.event&&v.global)&&0==k.active++&&k.event.trigger("ajaxStart"),v.type=v.type.toUpperCase(),v.hasContent=!Rt.test(v.type),f=v.url.replace(Ht,""),v.hasContent?v.data&&v.processData&&0===(v.contentType||"").indexOf("application/x-www-form-urlencoded")&&(v.data=v.data.replace(Lt,"+")):(o=v.url.slice(f.length),v.data&&(v.processData||"string"==typeof v.data)&&(f+=(St.test(f)?"&":"?")+v.data,delete v.data),!1===v.cache&&(f=f.replace(Ot,"$1"),o=(St.test(f)?"&":"?")+"_="+kt+++o),v.url=f+o),v.ifModified&&(k.lastModified[f]&&T.setRequestHeader("If-Modified-Since",k.lastModified[f]),k.etag[f]&&T.setRequestHeader("If-None-Match",k.etag[f])),(v.data&&v.hasContent&&!1!==v.contentType||t.contentType)&&T.setRequestHeader("Content-Type",v.contentType),T.setRequestHeader("Accept",v.dataTypes[0]&&v.accepts[v.dataTypes[0]]?v.accepts[v.dataTypes[0]]+("*"!==v.dataTypes[0]?", "+$t+"; q=0.01":""):v.accepts["*"]),v.headers)T.setRequestHeader(i,v.headers[i]);if(v.beforeSend&&(!1===v.beforeSend.call(y,T,v)||h))return T.abort();if(u="abort",b.add(v.complete),T.done(v.success),T.fail(v.error),c=_t(Wt,v,t,T)){if(T.readyState=1,g&&m.trigger("ajaxSend",[T,v]),h)return T;v.async&&0<v.timeout&&(d=C.setTimeout(function(){T.abort("timeout")},v.timeout));try{h=!1,c.send(a,l)}catch(e){if(h)throw e;l(-1,e)}}else l(-1,"No Transport");function l(e,t,n,r){var i,o,a,s,u,l=t;h||(h=!0,d&&C.clearTimeout(d),c=void 0,p=r||"",T.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(s=function(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(v,T,n)),s=function(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(v,s,T,i),i?(v.ifModified&&((u=T.getResponseHeader("Last-Modified"))&&(k.lastModified[f]=u),(u=T.getResponseHeader("etag"))&&(k.etag[f]=u)),204===e||"HEAD"===v.type?l="nocontent":304===e?l="notmodified":(l=s.state,o=s.data,i=!(a=s.error))):(a=l,!e&&l||(l="error",e<0&&(e=0))),T.status=e,T.statusText=(t||l)+"",i?x.resolveWith(y,[o,l,T]):x.rejectWith(y,[T,l,a]),T.statusCode(w),w=void 0,g&&m.trigger(i?"ajaxSuccess":"ajaxError",[T,v,i?o:a]),b.fireWith(y,[T,l]),g&&(m.trigger("ajaxComplete",[T,v]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return k.get(e,t,n,"json")},getScript:function(e,t){return k.get(e,void 0,t,"script")}}),k.each(["get","post"],function(e,i){k[i]=function(e,t,n,r){return m(t)&&(r=r||n,n=t,t=void 0),k.ajax(k.extend({url:e,type:i,dataType:r,data:t,success:n},k.isPlainObject(e)&&e))}}),k._evalUrl=function(e,t){return k.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){k.globalEval(e,t)}})},k.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=k(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return m(n)?this.each(function(e){k(this).wrapInner(n.call(this,e))}):this.each(function(){var e=k(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=m(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(e){return!k.expr.pseudos.visible(e)},k.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=k.ajaxSettings.xhr();y.cors=!!Xt&&"withCredentials"in Xt,y.ajax=Xt=!!Xt,k.ajaxTransport(function(i){var o,a;if(y.cors||Xt&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=a=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(Ut[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),a=r.onerror=r.ontimeout=o("error"),void 0!==r.onabort?r.onabort=a:r.onreadystatechange=function(){4===r.readyState&&C.setTimeout(function(){o&&a()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}),k.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return k.globalEval(e),e}}}),k.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),k.ajaxTransport("script",function(n){var r,i;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=k("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",i=function(e){r.remove(),i=null,e&&t("error"===e.type?404:200,e.type)}),E.head.appendChild(r[0])},abort:function(){i&&i()}}});var Vt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||k.expando+"_"+kt++;return this[e]=!0,e}}),k.ajaxPrefilter("json jsonp",function(e,t,n){var r,i,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(St.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||k.error(r+" was not called"),o[0]},e.dataTypes[0]="json",i=C[r],C[r]=function(){o=arguments},n.always(function(){void 0===i?k(C).removeProp(r):C[r]=i,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&m(i)&&i(o[0]),o=i=void 0}),"script"}),y.createHTMLDocument=((Vt=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),k.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,t.head.appendChild(r)):t=E),o=!n&&[],(i=D.exec(e))?[t.createElement(i[1])]:(i=we([e],t,o),o&&o.length&&k(o).remove(),k.merge([],i.childNodes)));var r,i,o},k.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return-1<s&&(r=mt(e.slice(s)),e=e.slice(0,s)),m(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),0<a.length&&k.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?k("<div>").append(k.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){k.fn[t]=function(e){return this.on(t,e)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l=k.css(e,"position"),c=k(e),f={};"static"===l&&(e.style.position="relative"),s=c.offset(),o=k.css(e,"top"),u=k.css(e,"left"),("absolute"===l||"fixed"===l)&&-1<(o+u).indexOf("auto")?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),m(t)&&(t=t.call(e,n,k.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):c.css(f)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===k.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===k.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=k(e).offset()).top+=k.css(e,"borderTopWidth",!0),i.left+=k.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-k.css(r,"marginTop",!0),left:t.left-i.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===k.css(e,"position"))e=e.offsetParent;return e||ie})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,i){var o="pageYOffset"===i;k.fn[t]=function(e){return _(this,function(e,t,n){var r;if(x(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===n)return r?r[i]:e[t];r?r.scrollTo(o?r.pageXOffset:n,o?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),k.each(["top","left"],function(e,n){k.cssHooks[n]=ze(y.pixelPosition,function(e,t){if(t)return t=_e(e,n),$e.test(t)?k(e).position()[n]+"px":t})}),k.each({Height:"height",Width:"width"},function(a,s){k.each({padding:"inner"+a,content:s,"":"outer"+a},function(r,o){k.fn[o]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),i=r||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var r;return x(e)?0===o.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+a],r["scroll"+a],e.body["offset"+a],r["offset"+a],r["client"+a])):void 0===n?k.css(e,t,i):k.style(e,t,n,i)},s,n?e:void 0,n)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){k.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),k.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),k.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),k.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||k.guid++,i},k.holdReady=function(e){e?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=m,k.isWindow=x,k.camelCase=V,k.type=w,k.now=Date.now,k.isNumeric=function(e){var t=k.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return k});var Qt=C.jQuery,Jt=C.$;return k.noConflict=function(e){return C.$===k&&(C.$=Jt),e&&C.jQuery===k&&(C.jQuery=Qt),k},e||(C.jQuery=C.$=k),k});


(function($){
	$.fn.live=function(event, callback){
		if (!callback){
			return;
		}

		$(document.body).on(event, this, callback);
	};
})(jQuery);

(function($){var a=$.fn.jquery.split("."),b;for(b in a)a[b]=parseInt(a[b]);if(!$.browser&&(1<a[0]||9<=a[1])){a={browser:void 0,version:void 0,mobile:!1};navigator&&navigator.userAgent&&(a.ua=navigator.userAgent,a.webkit=/WebKit/i.test(a.ua),a.browserArray="MSIE Chrome Opera Kindle Silk BlackBerry PlayBook Android Safari Mozilla Nokia".split(" "),/Sony[^ ]*/i.test(a.ua)?a.mobile="Sony":/RIM Tablet/i.test(a.ua)?a.mobile="RIM Tablet":/BlackBerry/i.test(a.ua)?a.mobile="BlackBerry":/iPhone/i.test(a.ua)?
		a.mobile="iPhone":/iPad/i.test(a.ua)?a.mobile="iPad":/iPod/i.test(a.ua)?a.mobile="iPod":/Opera Mini/i.test(a.ua)?a.mobile="Opera Mini":/IEMobile/i.test(a.ua)?a.mobile="IEMobile":/BB[0-9]{1,}; Touch/i.test(a.ua)?a.mobile="BlackBerry":/Nokia/i.test(a.ua)?a.mobile="Nokia":/Android/i.test(a.ua)&&(a.mobile="Android"),/MSIE|Trident/i.test(a.ua)?(a.browser="MSIE",a.version=/MSIE/i.test(navigator.userAgent)&&0<parseFloat(a.ua.split("MSIE")[1].match(/[0-9\.]{1,}/)[0])?parseFloat(a.ua.split("MSIE")[1].match(/[0-9\.]{1,}/)[0]):
		"Edge",/Trident/i.test(a.ua)&&/rv:([0-9]{1,}[\.0-9]{0,})/.test(a.ua)&&(a.version=parseFloat(a.ua.match(/rv:([0-9]{1,}[\.0-9]{0,})/)[1].match(/[0-9\.]{1,}/)[0]))):/Chrome/.test(a.ua)?(a.browser="Chrome",a.version=parseFloat(a.ua.split("Chrome/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):/Opera/.test(a.ua)?(a.browser="Opera",a.version=parseFloat(a.ua.split("Version/")[1].match(/[0-9\.]{1,}/)[0])):/Kindle|Silk|KFTT|KFOT|KFJWA|KFJWI|KFSOWI|KFTHWA|KFTHWI|KFAPWA|KFAPWI/i.test(a.ua)?(a.mobile="Kindle",
		/Silk/i.test(a.ua)?(a.browser="Silk",a.version=parseFloat(a.ua.split("Silk/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):/Kindle/i.test(a.ua)&&/Version/i.test(a.ua)&&(a.browser="Kindle",a.version=parseFloat(a.ua.split("Version/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0]))):/BlackBerry/.test(a.ua)?(a.browser="BlackBerry",a.version=parseFloat(a.ua.split("/")[1].match(/[0-9\.]{1,}/)[0])):/PlayBook/.test(a.ua)?(a.browser="PlayBook",a.version=parseFloat(a.ua.split("Version/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):
		/BB[0-9]{1,}; Touch/.test(a.ua)?(a.browser="Blackberry",a.version=parseFloat(a.ua.split("Version/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):/Android/.test(a.ua)?(a.browser="Android",a.version=parseFloat(a.ua.split("Version/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):/Safari/.test(a.ua)?(a.browser="Safari",a.version=parseFloat(a.ua.split("Version/")[1].split("Safari")[0].match(/[0-9\.]{1,}/)[0])):/Firefox/.test(a.ua)?(a.browser="Mozilla",a.version=parseFloat(a.ua.split("Firefox/")[1].match(/[0-9\.]{1,}/)[0])):
		/Nokia/.test(a.ua)&&(a.browser="Nokia",a.version=parseFloat(a.ua.split("Browser")[1].match(/[0-9\.]{1,}/)[0])));if(a.browser)for(var c in a.browserArray)a[a.browserArray[c].toLowerCase()]=a.browser==a.browserArray[c];$.extend(!0,$.browser={},a)}})(jQuery);
		/* - - - - - - - - - - - - - - - - - - - */




/*! jQuery UI - v1.12.1 - 2017-03-10
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/draggable.js, widgets/droppable.js, widgets/resizable.js, widgets/selectable.js, widgets/sortable.js, widgets/autocomplete.js, widgets/datepicker.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/slider.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)})(function(t){function e(t){for(var e=t.css("visibility");"inherit"===e;)t=t.parent(),e=t.css("visibility");return"hidden"!==e}function i(t){for(var e,i;t.length&&t[0]!==document;){if (e=t.css("position"),("absolute"===e||"relative"===e||"fixed"===e)&&(i=parseInt(t.css("zIndex"),10),!isNaN(i)&&0!==i))return i;t=t.parent()}return 0}function s(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},t.extend(this._defaults,this.regional[""]),this.regional.en=t.extend(!0,{},this.regional[""]),this.regional["en-US"]=t.extend(!0,{},this.regional.en),this.dpDiv=n(t("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var i="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",i,function(){t(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).removeClass("ui-datepicker-next-hover")}).on("mouseover",i,o)}function o(){t.datepicker._isDisabledDatepicker(u.inline?u.dpDiv.parent()[0]:u.input[0])||(t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),t(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&t(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&t(this).addClass("ui-datepicker-next-hover"))}function a(e,i){t.extend(e,i);for(var s in i)null==i[s]&&(e[s]=i[s]);return e}t.ui=t.ui||{},t.ui.version="1.12.1";var r=0,l=Array.prototype.slice;t.cleanData=function(e){return function(i){var s,n,o;for(o=0;null!=(n=i[o]);o++)try{s=t._data(n,"events"),s&&s.remove&&t(n).triggerHandler("remove")}catch(a){}e(i)}}(t.cleanData),t.widget=function(e,i,s){var n,o,a,r={},l=e.split(".")[0];e=e.split(".")[1];var h=l+"-"+e;return s||(s=i,i=t.Widget),t.isArray(s)&&(s=t.extend.apply(null,[{}].concat(s))),t.expr[":"][h.toLowerCase()]=function(e){return!!t.data(e,h)},t[l]=t[l]||{},n=t[l][e],o=t[l][e]=function(t,e){return this._createWidget?(arguments.length&&this._createWidget(t,e),void 0):new o(t,e)},t.extend(o,n,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),a=new i,a.options=t.widget.extend({},a.options),t.each(s,function(e,s){return t.isFunction(s)?(r[e]=function(){function t(){return i.prototype[e].apply(this,arguments)}function n(t){return i.prototype[e].apply(this,t)}return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=n,e=s.apply(this,arguments),this._super=i,this._superApply=o,e}}(),void 0):(r[e]=s,void 0)}),o.prototype=t.widget.extend(a,{widgetEventPrefix:n?a.widgetEventPrefix||e:e},r,{constructor:o,namespace:l,widgetName:e,widgetFullName:h}),n?(t.each(n._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,o,i._proto)}),delete n._childConstructors):i._childConstructors.push(o),t.widget.bridge(e,o),o},t.widget.extend=function(e){for(var i,s,n=l.call(arguments,1),o=0,a=n.length;a>o;o++)for(i in n[o])s=n[o][i],n[o].hasOwnProperty(i)&&void 0!==s&&(e[i]=t.isPlainObject(s)?t.isPlainObject(e[i])?t.widget.extend({},e[i],s):t.widget.extend({},s):s);return e},t.widget.bridge=function(e,i){var s=i.prototype.widgetFullName||e;t.fn[e]=function(n){var o="string"==typeof n,a=l.call(arguments,1),r=this;return o?this.length||"instance"!==n?this.each(function(){var i,o=t.data(this,s);return"instance"===n?(r=o,!1):o?t.isFunction(o[n])&&"_"!==n.charAt(0)?(i=o[n].apply(o,a),i!==o&&void 0!==i?(r=i&&i.jquery?r.pushStack(i.get()):i,!1):void 0):t.error("no such method '"+n+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; "+"attempted to call method '"+n+"'")}):r=void 0:(a.length&&(n=t.widget.extend.apply(null,[n].concat(a))),this.each(function(){var e=t.data(this,s);e?(e.option(n||{}),e._init&&e._init()):t.data(this,s,new i(n,this))})),r}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,i){i=t(i||this.defaultElement||this)[0],this.element=t(i),this.uuid=r++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),this.classesElementLookup={},i!==this&&(t.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===i&&this.destroy()}}),this.document=t(i.style?i.ownerDocument:i.document||i),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){var e=this;this._destroy(),t.each(this.classesElementLookup,function(t,i){e._removeClass(i,t)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var s,n,o,a=e;if (0===arguments.length)return t.widget.extend({},this.options);if ("string"==typeof e)if (a={},s=e.split("."),e=s.shift(),s.length){for(n=a[e]=t.widget.extend({},this.options[e]),o=0;s.length-1>o;o++)n[s[o]]=n[s[o]]||{},n=n[s[o]];if (e=s.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=i}else{if (1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=i}return this._setOptions(a),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return"classes"===t&&this._setOptionClasses(e),this.options[t]=e,"disabled"===t&&this._setOptionDisabled(e),this},_setOptionClasses:function(e){var i,s,n;for(i in e)n=this.classesElementLookup[i],e[i]!==this.options.classes[i]&&n&&n.length&&(s=t(n.get()),this._removeClass(n,i),s.addClass(this._classes({element:s,keys:i,classes:e,add:!0})))},_setOptionDisabled:function(t){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!t),t&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(e){function i(i,o){var a,r;for(r=0;i.length>r;r++)a=n.classesElementLookup[i[r]]||t(),a=e.add?t(t.unique(a.get().concat(e.element.get()))):t(a.not(e.element).get()),n.classesElementLookup[i[r]]=a,s.push(i[r]),o&&e.classes[i[r]]&&s.push(e.classes[i[r]])}var s=[],n=this;return e=t.extend({element:this.element,classes:this.options.classes||{}},e),this._on(e.element,{remove:"_untrackClassesElement"}),e.keys&&i(e.keys.match(/\S+/g)||[],!0),e.extra&&i(e.extra.match(/\S+/g)||[]),s.join(" ")},_untrackClassesElement:function(e){var i=this;t.each(i.classesElementLookup,function(s,n){-1!==t.inArray(e.target,n)&&(i.classesElementLookup[s]=t(n.not(e.target).get()))})},_removeClass:function(t,e,i){return this._toggleClass(t,e,i,!1)},_addClass:function(t,e,i){return this._toggleClass(t,e,i,!0)},_toggleClass:function(t,e,i,s){s="boolean"==typeof s?s:i;var n="string"==typeof t||null===t,o={extra:n?e:i,keys:n?t:e,element:n?this.element:t,add:s};return o.element.toggleClass(this._classes(o),s),this},_on:function(e,i,s){var n,o=this;"boolean"!=typeof e&&(s=i,i=e,e=!1),s?(i=n=t(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),t.each(s,function(s,a){function r(){return e||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof a?o[a]:a).apply(o,arguments):void 0}"string"!=typeof a&&(r.guid=a.guid=a.guid||r.guid||t.guid++);var l=s.match(/^([\w:-]*)\s*(.*)$/),h=l[1]+o.eventNamespace,c=l[2];c?n.on(h,c,r):i.on(h,r)})},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(i).off(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(t(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(t(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(t(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,i,s){var n,o,a=this.options[e];if (s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(a)&&a.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var a,r=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),a=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),a&&t.effects&&t.effects.effect[r]?s[e](n):r!==e&&s[r]?s[r](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}}),t.widget,function(){function e(t,e,i){return[parseFloat(t[0])*(u.test(t[0])?e/100:1),parseFloat(t[1])*(u.test(t[1])?i/100:1)]}function i(e,i){return parseInt(t.css(e,i),10)||0}function s(e){var i=e[0];return 9===i.nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:t.isWindow(i)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:i.preventDefault?{width:0,height:0,offset:{top:i.pageY,left:i.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()}}var n,o=Math.max,a=Math.abs,r=/left|center|right/,l=/top|center|bottom/,h=/[\+\-]\d+(\.[\d]+)?%?/,c=/^\w+/,u=/%$/,d=t.fn.position;t.position={scrollbarWidth:function(){if (void 0!==n)return n;var e,i,s=t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return t("body").append(s),e=o.offsetWidth,s.css("overflow","scroll"),i=o.offsetWidth,e===i&&(i=s[0].clientWidth),s.remove(),n=e-i},getScrollInfo:function(e){var i=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),s=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),n="scroll"===i||"auto"===i&&e.width<e.element[0].scrollWidth,o="scroll"===s||"auto"===s&&e.height<e.element[0].scrollHeight;return{width:o?t.position.scrollbarWidth():0,height:n?t.position.scrollbarWidth():0}},getWithinInfo:function(e){var i=t(e||window),s=t.isWindow(i[0]),n=!!i[0]&&9===i[0].nodeType,o=!s&&!n;return{element:i,isWindow:s,isDocument:n,offset:o?t(e).offset():{left:0,top:0},scrollLeft:i.scrollLeft(),scrollTop:i.scrollTop(),width:i.outerWidth(),height:i.outerHeight()}}},t.fn.position=function(n){if (!n||!n.of)return d.apply(this,arguments);n=t.extend({},n);var u,p,f,g,m,_,v=t(n.of),b=t.position.getWithinInfo(n.within),y=t.position.getScrollInfo(b),w=(n.collision||"flip").split(" "),k={};return _=s(v),v[0].preventDefault&&(n.at="left top"),p=_.width,f=_.height,g=_.offset,m=t.extend({},g),t.each(["my","at"],function(){var t,e,i=(n[this]||"").split(" ");1===i.length&&(i=r.test(i[0])?i.concat(["center"]):l.test(i[0])?["center"].concat(i):["center","center"]),i[0]=r.test(i[0])?i[0]:"center",i[1]=l.test(i[1])?i[1]:"center",t=h.exec(i[0]),e=h.exec(i[1]),k[this]=[t?t[0]:0,e?e[0]:0],n[this]=[c.exec(i[0])[0],c.exec(i[1])[0]]}),1===w.length&&(w[1]=w[0]),"right"===n.at[0]?m.left+=p:"center"===n.at[0]&&(m.left+=p/2),"bottom"===n.at[1]?m.top+=f:"center"===n.at[1]&&(m.top+=f/2),u=e(k.at,p,f),m.left+=u[0],m.top+=u[1],this.each(function(){var s,r,l=t(this),h=l.outerWidth(),c=l.outerHeight(),d=i(this,"marginLeft"),_=i(this,"marginTop"),x=h+d+i(this,"marginRight")+y.width,C=c+_+i(this,"marginBottom")+y.height,D=t.extend({},m),T=e(k.my,l.outerWidth(),l.outerHeight());"right"===n.my[0]?D.left-=h:"center"===n.my[0]&&(D.left-=h/2),"bottom"===n.my[1]?D.top-=c:"center"===n.my[1]&&(D.top-=c/2),D.left+=T[0],D.top+=T[1],s={marginLeft:d,marginTop:_},t.each(["left","top"],function(e,i){t.ui.position[w[e]]&&t.ui.position[w[e]][i](D,{targetWidth:p,targetHeight:f,elemWidth:h,elemHeight:c,collisionPosition:s,collisionWidth:x,collisionHeight:C,offset:[u[0]+T[0],u[1]+T[1]],my:n.my,at:n.at,within:b,elem:l})}),n.using&&(r=function(t){var e=g.left-D.left,i=e+p-h,s=g.top-D.top,r=s+f-c,u={target:{element:v,left:g.left,top:g.top,width:p,height:f},element:{element:l,left:D.left,top:D.top,width:h,height:c},horizontal:0>i?"left":e>0?"right":"center",vertical:0>r?"top":s>0?"bottom":"middle"};h>p&&p>a(e+i)&&(u.horizontal="center"),c>f&&f>a(s+r)&&(u.vertical="middle"),u.important=o(a(e),a(i))>o(a(s),a(r))?"horizontal":"vertical",n.using.call(this,t,u)}),l.offset(t.extend(D,{using:r}))})},t.ui.position={fit:{left:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollLeft:s.offset.left,a=s.width,r=t.left-e.collisionPosition.marginLeft,l=n-r,h=r+e.collisionWidth-a-n;e.collisionWidth>a?l>0&&0>=h?(i=t.left+l+e.collisionWidth-a-n,t.left+=l-i):t.left=h>0&&0>=l?n:l>h?n+a-e.collisionWidth:n:l>0?t.left+=l:h>0?t.left-=h:t.left=o(t.left-r,t.left)},top:function(t,e){var i,s=e.within,n=s.isWindow?s.scrollTop:s.offset.top,a=e.within.height,r=t.top-e.collisionPosition.marginTop,l=n-r,h=r+e.collisionHeight-a-n;e.collisionHeight>a?l>0&&0>=h?(i=t.top+l+e.collisionHeight-a-n,t.top+=l-i):t.top=h>0&&0>=l?n:l>h?n+a-e.collisionHeight:n:l>0?t.top+=l:h>0?t.top-=h:t.top=o(t.top-r,t.top)}},flip:{left:function(t,e){var i,s,n=e.within,o=n.offset.left+n.scrollLeft,r=n.width,l=n.isWindow?n.scrollLeft:n.offset.left,h=t.left-e.collisionPosition.marginLeft,c=h-l,u=h+e.collisionWidth-r-l,d="left"===e.my[0]?-e.elemWidth:"right"===e.my[0]?e.elemWidth:0,p="left"===e.at[0]?e.targetWidth:"right"===e.at[0]?-e.targetWidth:0,f=-2*e.offset[0];0>c?(i=t.left+d+p+f+e.collisionWidth-r-o,(0>i||a(c)>i)&&(t.left+=d+p+f)):u>0&&(s=t.left-e.collisionPosition.marginLeft+d+p+f-l,(s>0||u>a(s))&&(t.left+=d+p+f))},top:function(t,e){var i,s,n=e.within,o=n.offset.top+n.scrollTop,r=n.height,l=n.isWindow?n.scrollTop:n.offset.top,h=t.top-e.collisionPosition.marginTop,c=h-l,u=h+e.collisionHeight-r-l,d="top"===e.my[1],p=d?-e.elemHeight:"bottom"===e.my[1]?e.elemHeight:0,f="top"===e.at[1]?e.targetHeight:"bottom"===e.at[1]?-e.targetHeight:0,g=-2*e.offset[1];0>c?(s=t.top+p+f+g+e.collisionHeight-r-o,(0>s||a(c)>s)&&(t.top+=p+f+g)):u>0&&(i=t.top-e.collisionPosition.marginTop+p+f+g-l,(i>0||u>a(i))&&(t.top+=p+f+g))}},flipfit:{left:function(){t.ui.position.flip.left.apply(this,arguments),t.ui.position.fit.left.apply(this,arguments)},top:function(){t.ui.position.flip.top.apply(this,arguments),t.ui.position.fit.top.apply(this,arguments)}}}}(),t.ui.position,t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,s){return!!t.data(e,s[3])}}),t.fn.extend({disableSelection:function(){var t="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.on(t+".ui-disableSelection",function(t){t.preventDefault()})}}(),enableSelection:function(){return this.off(".ui-disableSelection")}}),t.ui.focusable=function(i,s){var n,o,a,r,l,h=i.nodeName.toLowerCase();return"area"===h?(n=i.parentNode,o=n.name,i.href&&o&&"map"===n.nodeName.toLowerCase()?(a=t("img[usemap='#"+o+"']"),a.length>0&&a.is(":visible")):!1):(/^(input|select|textarea|button|object)$/.test(h)?(r=!i.disabled,r&&(l=t(i).closest("fieldset")[0],l&&(r=!l.disabled))):r="a"===h?i.href||s:s,r&&t(i).is(":visible")&&e(t(i)))},t.extend(t.expr[":"],{focusable:function(e){return t.ui.focusable(e,null!=t.attr(e,"tabindex"))}}),t.ui.focusable,t.fn.form=function(){return"string"==typeof this[0].form?this.closest("form"):t(this[0].form)},t.ui.formResetMixin={_formResetHandler:function(){var e=t(this);setTimeout(function(){var i=e.data("ui-form-reset-instances");t.each(i,function(){this.refresh()})})},_bindFormResetHandler:function(){if (this.form=this.element.form(),this.form.length){var t=this.form.data("ui-form-reset-instances")||[];t.length||this.form.on("reset.ui-form-reset",this._formResetHandler),t.push(this),this.form.data("ui-form-reset-instances",t)}},_unbindFormResetHandler:function(){if (this.form.length){var e=this.form.data("ui-form-reset-instances");e.splice(t.inArray(this,e),1),e.length?this.form.data("ui-form-reset-instances",e):this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset")}}},"1.7"===t.fn.jquery.substring(0,3)&&(t.each(["Width","Height"],function(e,i){function s(e,i,s,o){return t.each(n,function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),o&&(i-=parseFloat(t.css(e,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],o=i.toLowerCase(),a={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+i]=function(e){return void 0===e?a["inner"+i].call(this):this.each(function(){t(this).css(o,s(this,e)+"px")})},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?a["outer"+i].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,n)+"px")})}}),t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38},t.ui.escapeSelector=function(){var t=/([!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g;return function(e){return e.replace(t,"\\$1")}}(),t.fn.labels=function(){var e,i,s,n,o;return this[0].labels&&this[0].labels.length?this.pushStack(this[0].labels):(n=this.eq(0).parents("label"),s=this.attr("id"),s&&(e=this.eq(0).parents().last(),o=e.add(e.length?e.siblings():this.siblings()),i="label[for='"+t.ui.escapeSelector(s)+"']",n=n.add(o.find(i).addBack(i))),this.pushStack(n))},t.fn.scrollParent=function(e){var i=this.css("position"),s="absolute"===i,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=t(this);return s&&"static"===e.css("position")?!1:n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},t.extend(t.expr[":"],{tabbable:function(e){var i=t.attr(e,"tabindex"),s=null!=i;return(!s||i>=0)&&t.ui.focusable(e,s)}}),t.fn.extend({uniqueId:function(){var t=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++t)})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")})}}),t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var h=!1;t(document).on("mouseup",function(){h=!1}),t.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.on("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).on("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if (!h){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,s=1===e.which,n="string"==typeof this.options.cancel&&e.target.nodeName?t(e.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(e)!==!1,!this._mouseStarted)?(e.preventDefault(),!0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),h=!0,!0)):!0}},_mouseMove:function(e){if (this._mouseMoved){if (t.ui.ie&&(!document.documentMode||9>document.documentMode)&&!e.button)return this._mouseUp(e);if (!e.which)if (e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if (!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,h=!1,e.preventDefault()},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.ui.plugin={add:function(e,i,s){var n,o=t.ui[e].prototype;for(n in s)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,s[n]])},call:function(t,e,i,s){var n,o=t.plugins[e];if (o&&(s||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(n=0;o.length>n;n++)t.options[o[n][0]]&&o[n][1].apply(t.element,i)}},t.ui.safeActiveElement=function(t){var e;try{e=t.activeElement}catch(i){e=t.body}return e||(e=t.body),e.nodeName||(e=t.body),e},t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")},t.widget("ui.draggable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(t,e){this._super(t,e),"handle"===t&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){return(this.helper||this.element).is(".ui-draggable-dragging")?(this.destroyOnClear=!0,void 0):(this._removeHandleClassName(),this._mouseDestroy(),void 0)},_mouseCapture:function(e){var i=this.options;return this.helper||i.disabled||t(e.target).closest(".ui-resizable-handle").length>0?!1:(this.handle=this._getHandle(e),this.handle?(this._blurActiveElement(e),this._blockFrames(i.iframeFix===!0?"iframe":i.iframeFix),!0):!1)},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=t(this);return t("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var i=t.ui.safeActiveElement(this.document[0]),s=t(e.target);s.closest(i).length||t.ui.safeBlur(i)},_mouseStart:function(e){var i=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),t.ui.ddmanager&&(t.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=this.helper.parents().filter(function(){return"fixed"===t(this).css("position")}).length>0,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this._setContainment(),this._trigger("start",e)===!1?(this._clear(),!1):(this._cacheHelperProportions(),t.ui.ddmanager&&!i.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),t.ui.ddmanager&&t.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(t){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:t.pageX-this.offset.left,top:t.pageY-this.offset.top}},_mouseDrag:function(e,i){if (this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!i){var s=this._uiHash();if (this._trigger("drag",e,s)===!1)return this._mouseUp(new t.Event("mouseup",e)),!1;this.position=s.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var i=this,s=!1;return t.ui.ddmanager&&!this.options.dropBehaviour&&(s=t.ui.ddmanager.drop(this,e)),this.dropped&&(s=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!s||"valid"===this.options.revert&&s||this.options.revert===!0||t.isFunction(this.options.revert)&&this.options.revert.call(this.element,s)?t(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){i._trigger("stop",e)!==!1&&i._clear()}):this._trigger("stop",e)!==!1&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),t.ui.ddmanager&&t.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),t.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new t.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return this.options.handle?!!t(e.target).closest(this.element.find(this.options.handle)).length:!0},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper),n=s?t(i.helper.apply(this.element[0],[e])):"clone"===i.helper?this.element.clone().removeAttr("id"):this.element;return n.parents("body").length||n.appendTo("parent"===i.appendTo?this.element[0].parentNode:i.appendTo),s&&n[0]===this.element[0]&&this._setPositionRelative(),n[0]===this.element[0]||/(fixed|absolute)/.test(n.css("position"))||n.css("position","absolute"),n},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(t){return/(html|body)/i.test(t.tagName)||t===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),i=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==i&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if ("relative"!==this.cssPosition)return{top:0,left:0};var t=this.element.position(),e=this._isRootNode(this.scrollParent[0]);return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+(e?0:this.scrollParent.scrollTop()),left:t.left-(parseInt(this.helper.css("left"),10)||0)+(e?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options,o=this.document[0];return this.relativeContainer=null,n.containment?"window"===n.containment?(this.containment=[t(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,t(window).scrollLeft()+t(window).width()-this.helperProportions.width-this.margins.left,t(window).scrollTop()+(t(window).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):"document"===n.containment?(this.containment=[0,0,t(o).width()-this.helperProportions.width-this.margins.left,(t(o).height()||o.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top],void 0):n.containment.constructor===Array?(this.containment=n.containment,void 0):("parent"===n.containment&&(n.containment=this.helper[0].parentNode),i=t(n.containment),s=i[0],s&&(e=/(scroll|auto)/.test(i.css("overflow")),this.containment=[(parseInt(i.css("borderLeftWidth"),10)||0)+(parseInt(i.css("paddingLeft"),10)||0),(parseInt(i.css("borderTopWidth"),10)||0)+(parseInt(i.css("paddingTop"),10)||0),(e?Math.max(s.scrollWidth,s.offsetWidth):s.offsetWidth)-(parseInt(i.css("borderRightWidth"),10)||0)-(parseInt(i.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(s.scrollHeight,s.offsetHeight):s.offsetHeight)-(parseInt(i.css("borderBottomWidth"),10)||0)-(parseInt(i.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=i),void 0):(this.containment=null,void 0)
},_convertPositionTo:function(t,e){e||(e=this.position);var i="absolute"===t?1:-1,s=this._isRootNode(this.scrollParent[0]);return{top:e.top+this.offset.relative.top*i+this.offset.parent.top*i-("fixed"===this.cssPosition?-this.offset.scroll.top:s?0:this.offset.scroll.top)*i,left:e.left+this.offset.relative.left*i+this.offset.parent.left*i-("fixed"===this.cssPosition?-this.offset.scroll.left:s?0:this.offset.scroll.left)*i}},_generatePosition:function(t,e){var i,s,n,o,a=this.options,r=this._isRootNode(this.scrollParent[0]),l=t.pageX,h=t.pageY;return r&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),e&&(this.containment&&(this.relativeContainer?(s=this.relativeContainer.offset(),i=[this.containment[0]+s.left,this.containment[1]+s.top,this.containment[2]+s.left,this.containment[3]+s.top]):i=this.containment,t.pageX-this.offset.click.left<i[0]&&(l=i[0]+this.offset.click.left),t.pageY-this.offset.click.top<i[1]&&(h=i[1]+this.offset.click.top),t.pageX-this.offset.click.left>i[2]&&(l=i[2]+this.offset.click.left),t.pageY-this.offset.click.top>i[3]&&(h=i[3]+this.offset.click.top)),a.grid&&(n=a.grid[1]?this.originalPageY+Math.round((h-this.originalPageY)/a.grid[1])*a.grid[1]:this.originalPageY,h=i?n-this.offset.click.top>=i[1]||n-this.offset.click.top>i[3]?n:n-this.offset.click.top>=i[1]?n-a.grid[1]:n+a.grid[1]:n,o=a.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/a.grid[0])*a.grid[0]:this.originalPageX,l=i?o-this.offset.click.left>=i[0]||o-this.offset.click.left>i[2]?o:o-this.offset.click.left>=i[0]?o-a.grid[0]:o+a.grid[0]:o),"y"===a.axis&&(l=this.originalPageX),"x"===a.axis&&(h=this.originalPageY)),{top:h-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:r?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:r?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,i,s){return s=s||this._uiHash(),t.ui.plugin.call(this,e,[i,s,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),s.offset=this.positionAbs),t.Widget.prototype._trigger.call(this,e,i,s)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),t.ui.plugin.add("draggable","connectToSortable",{start:function(e,i,s){var n=t.extend({},i,{item:s.element});s.sortables=[],t(s.options.connectToSortable).each(function(){var i=t(this).sortable("instance");i&&!i.options.disabled&&(s.sortables.push(i),i.refreshPositions(),i._trigger("activate",e,n))})},stop:function(e,i,s){var n=t.extend({},i,{item:s.element});s.cancelHelperRemoval=!1,t.each(s.sortables,function(){var t=this;t.isOver?(t.isOver=0,s.cancelHelperRemoval=!0,t.cancelHelperRemoval=!1,t._storedCSS={position:t.placeholder.css("position"),top:t.placeholder.css("top"),left:t.placeholder.css("left")},t._mouseStop(e),t.options.helper=t.options._helper):(t.cancelHelperRemoval=!0,t._trigger("deactivate",e,n))})},drag:function(e,i,s){t.each(s.sortables,function(){var n=!1,o=this;o.positionAbs=s.positionAbs,o.helperProportions=s.helperProportions,o.offset.click=s.offset.click,o._intersectsWith(o.containerCache)&&(n=!0,t.each(s.sortables,function(){return this.positionAbs=s.positionAbs,this.helperProportions=s.helperProportions,this.offset.click=s.offset.click,this!==o&&this._intersectsWith(this.containerCache)&&t.contains(o.element[0],this.element[0])&&(n=!1),n})),n?(o.isOver||(o.isOver=1,s._parent=i.helper.parent(),o.currentItem=i.helper.appendTo(o.element).data("ui-sortable-item",!0),o.options._helper=o.options.helper,o.options.helper=function(){return i.helper[0]},e.target=o.currentItem[0],o._mouseCapture(e,!0),o._mouseStart(e,!0,!0),o.offset.click.top=s.offset.click.top,o.offset.click.left=s.offset.click.left,o.offset.parent.left-=s.offset.parent.left-o.offset.parent.left,o.offset.parent.top-=s.offset.parent.top-o.offset.parent.top,s._trigger("toSortable",e),s.dropped=o.element,t.each(s.sortables,function(){this.refreshPositions()}),s.currentItem=s.element,o.fromOutside=s),o.currentItem&&(o._mouseDrag(e),i.position=o.position)):o.isOver&&(o.isOver=0,o.cancelHelperRemoval=!0,o.options._revert=o.options.revert,o.options.revert=!1,o._trigger("out",e,o._uiHash(o)),o._mouseStop(e,!0),o.options.revert=o.options._revert,o.options.helper=o.options._helper,o.placeholder&&o.placeholder.remove(),i.helper.appendTo(s._parent),s._refreshOffsets(e),i.position=s._generatePosition(e,!0),s._trigger("fromSortable",e),s.dropped=!1,t.each(s.sortables,function(){this.refreshPositions()}))})}}),t.ui.plugin.add("draggable","cursor",{start:function(e,i,s){var n=t("body"),o=s.options;n.css("cursor")&&(o._cursor=n.css("cursor")),n.css("cursor",o.cursor)},stop:function(e,i,s){var n=s.options;n._cursor&&t("body").css("cursor",n._cursor)}}),t.ui.plugin.add("draggable","opacity",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("opacity")&&(o._opacity=n.css("opacity")),n.css("opacity",o.opacity)},stop:function(e,i,s){var n=s.options;n._opacity&&t(i.helper).css("opacity",n._opacity)}}),t.ui.plugin.add("draggable","scroll",{start:function(t,e,i){i.scrollParentNotHidden||(i.scrollParentNotHidden=i.helper.scrollParent(!1)),i.scrollParentNotHidden[0]!==i.document[0]&&"HTML"!==i.scrollParentNotHidden[0].tagName&&(i.overflowOffset=i.scrollParentNotHidden.offset())},drag:function(e,i,s){var n=s.options,o=!1,a=s.scrollParentNotHidden[0],r=s.document[0];a!==r&&"HTML"!==a.tagName?(n.axis&&"x"===n.axis||(s.overflowOffset.top+a.offsetHeight-e.pageY<n.scrollSensitivity?a.scrollTop=o=a.scrollTop+n.scrollSpeed:e.pageY-s.overflowOffset.top<n.scrollSensitivity&&(a.scrollTop=o=a.scrollTop-n.scrollSpeed)),n.axis&&"y"===n.axis||(s.overflowOffset.left+a.offsetWidth-e.pageX<n.scrollSensitivity?a.scrollLeft=o=a.scrollLeft+n.scrollSpeed:e.pageX-s.overflowOffset.left<n.scrollSensitivity&&(a.scrollLeft=o=a.scrollLeft-n.scrollSpeed))):(n.axis&&"x"===n.axis||(e.pageY-t(r).scrollTop()<n.scrollSensitivity?o=t(r).scrollTop(t(r).scrollTop()-n.scrollSpeed):t(window).height()-(e.pageY-t(r).scrollTop())<n.scrollSensitivity&&(o=t(r).scrollTop(t(r).scrollTop()+n.scrollSpeed))),n.axis&&"y"===n.axis||(e.pageX-t(r).scrollLeft()<n.scrollSensitivity?o=t(r).scrollLeft(t(r).scrollLeft()-n.scrollSpeed):t(window).width()-(e.pageX-t(r).scrollLeft())<n.scrollSensitivity&&(o=t(r).scrollLeft(t(r).scrollLeft()+n.scrollSpeed)))),o!==!1&&t.ui.ddmanager&&!n.dropBehaviour&&t.ui.ddmanager.prepareOffsets(s,e)}}),t.ui.plugin.add("draggable","snap",{start:function(e,i,s){var n=s.options;s.snapElements=[],t(n.snap.constructor!==String?n.snap.items||":data(ui-draggable)":n.snap).each(function(){var e=t(this),i=e.offset();this!==s.element[0]&&s.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:i.top,left:i.left})})},drag:function(e,i,s){var n,o,a,r,l,h,c,u,d,p,f=s.options,g=f.snapTolerance,m=i.offset.left,_=m+s.helperProportions.width,v=i.offset.top,b=v+s.helperProportions.height;for(d=s.snapElements.length-1;d>=0;d--)l=s.snapElements[d].left-s.margins.left,h=l+s.snapElements[d].width,c=s.snapElements[d].top-s.margins.top,u=c+s.snapElements[d].height,l-g>_||m>h+g||c-g>b||v>u+g||!t.contains(s.snapElements[d].item.ownerDocument,s.snapElements[d].item)?(s.snapElements[d].snapping&&s.options.snap.release&&s.options.snap.release.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=!1):("inner"!==f.snapMode&&(n=g>=Math.abs(c-b),o=g>=Math.abs(u-v),a=g>=Math.abs(l-_),r=g>=Math.abs(h-m),n&&(i.position.top=s._convertPositionTo("relative",{top:c-s.helperProportions.height,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l-s.helperProportions.width}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h}).left)),p=n||o||a||r,"outer"!==f.snapMode&&(n=g>=Math.abs(c-v),o=g>=Math.abs(u-b),a=g>=Math.abs(l-m),r=g>=Math.abs(h-_),n&&(i.position.top=s._convertPositionTo("relative",{top:c,left:0}).top),o&&(i.position.top=s._convertPositionTo("relative",{top:u-s.helperProportions.height,left:0}).top),a&&(i.position.left=s._convertPositionTo("relative",{top:0,left:l}).left),r&&(i.position.left=s._convertPositionTo("relative",{top:0,left:h-s.helperProportions.width}).left)),!s.snapElements[d].snapping&&(n||o||a||r||p)&&s.options.snap.snap&&s.options.snap.snap.call(s.element,e,t.extend(s._uiHash(),{snapItem:s.snapElements[d].item})),s.snapElements[d].snapping=n||o||a||r||p)}}),t.ui.plugin.add("draggable","stack",{start:function(e,i,s){var n,o=s.options,a=t.makeArray(t(o.stack)).sort(function(e,i){return(parseInt(t(e).css("zIndex"),10)||0)-(parseInt(t(i).css("zIndex"),10)||0)});a.length&&(n=parseInt(t(a[0]).css("zIndex"),10)||0,t(a).each(function(e){t(this).css("zIndex",n+e)}),this.css("zIndex",n+a.length))}}),t.ui.plugin.add("draggable","zIndex",{start:function(e,i,s){var n=t(i.helper),o=s.options;n.css("zIndex")&&(o._zIndex=n.css("zIndex")),n.css("zIndex",o.zIndex)},stop:function(e,i,s){var n=s.options;n._zIndex&&t(i.helper).css("zIndex",n._zIndex)}}),t.ui.draggable,t.widget("ui.droppable",{version:"1.12.1",widgetEventPrefix:"drop",options:{accept:"*",addClasses:!0,greedy:!1,scope:"default",tolerance:"intersect",activate:null,deactivate:null,drop:null,out:null,over:null},_create:function(){var e,i=this.options,s=i.accept;this.isover=!1,this.isout=!0,this.accept=t.isFunction(s)?s:function(t){return t.is(s)},this.proportions=function(){return arguments.length?(e=arguments[0],void 0):e?e:e={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight}},this._addToManager(i.scope),i.addClasses&&this._addClass("ui-droppable")},_addToManager:function(e){t.ui.ddmanager.droppables[e]=t.ui.ddmanager.droppables[e]||[],t.ui.ddmanager.droppables[e].push(this)},_splice:function(t){for(var e=0;t.length>e;e++)t[e]===this&&t.splice(e,1)},_destroy:function(){var e=t.ui.ddmanager.droppables[this.options.scope];this._splice(e)},_setOption:function(e,i){if ("accept"===e)this.accept=t.isFunction(i)?i:function(t){return t.is(i)};else if ("scope"===e){var s=t.ui.ddmanager.droppables[this.options.scope];this._splice(s),this._addToManager(i)}this._super(e,i)},_activate:function(e){var i=t.ui.ddmanager.current;this._addActiveClass(),i&&this._trigger("activate",e,this.ui(i))},_deactivate:function(e){var i=t.ui.ddmanager.current;this._removeActiveClass(),i&&this._trigger("deactivate",e,this.ui(i))},_over:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._addHoverClass(),this._trigger("over",e,this.ui(i)))},_out:function(e){var i=t.ui.ddmanager.current;i&&(i.currentItem||i.element)[0]!==this.element[0]&&this.accept.call(this.element[0],i.currentItem||i.element)&&(this._removeHoverClass(),this._trigger("out",e,this.ui(i)))},_drop:function(e,i){var s=i||t.ui.ddmanager.current,n=!1;return s&&(s.currentItem||s.element)[0]!==this.element[0]?(this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function(){var i=t(this).droppable("instance");return i.options.greedy&&!i.options.disabled&&i.options.scope===s.options.scope&&i.accept.call(i.element[0],s.currentItem||s.element)&&c(s,t.extend(i,{offset:i.element.offset()}),i.options.tolerance,e)?(n=!0,!1):void 0}),n?!1:this.accept.call(this.element[0],s.currentItem||s.element)?(this._removeActiveClass(),this._removeHoverClass(),this._trigger("drop",e,this.ui(s)),this.element):!1):!1},ui:function(t){return{draggable:t.currentItem||t.element,helper:t.helper,position:t.position,offset:t.positionAbs}},_addHoverClass:function(){this._addClass("ui-droppable-hover")},_removeHoverClass:function(){this._removeClass("ui-droppable-hover")},_addActiveClass:function(){this._addClass("ui-droppable-active")},_removeActiveClass:function(){this._removeClass("ui-droppable-active")}});var c=t.ui.intersect=function(){function t(t,e,i){return t>=e&&e+i>t}return function(e,i,s,n){if (!i.offset)return!1;var o=(e.positionAbs||e.position.absolute).left+e.margins.left,a=(e.positionAbs||e.position.absolute).top+e.margins.top,r=o+e.helperProportions.width,l=a+e.helperProportions.height,h=i.offset.left,c=i.offset.top,u=h+i.proportions().width,d=c+i.proportions().height;switch(s){case"fit":return o>=h&&u>=r&&a>=c&&d>=l;case"intersect":return o+e.helperProportions.width/2>h&&u>r-e.helperProportions.width/2&&a+e.helperProportions.height/2>c&&d>l-e.helperProportions.height/2;case"pointer":return t(n.pageY,c,i.proportions().height)&&t(n.pageX,h,i.proportions().width);case"touch":return(a>=c&&d>=a||l>=c&&d>=l||c>a&&l>d)&&(o>=h&&u>=o||r>=h&&u>=r||h>o&&r>u);default:return!1}}}();t.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(e,i){var s,n,o=t.ui.ddmanager.droppables[e.options.scope]||[],a=i?i.type:null,r=(e.currentItem||e.element).find(":data(ui-droppable)").addBack();t:for(s=0;o.length>s;s++)if (!(o[s].options.disabled||e&&!o[s].accept.call(o[s].element[0],e.currentItem||e.element))){for(n=0;r.length>n;n++)if (r[n]===o[s].element[0]){o[s].proportions().height=0;continue t}o[s].visible="none"!==o[s].element.css("display"),o[s].visible&&("mousedown"===a&&o[s]._activate.call(o[s],i),o[s].offset=o[s].element.offset(),o[s].proportions({width:o[s].element[0].offsetWidth,height:o[s].element[0].offsetHeight}))}},drop:function(e,i){var s=!1;return t.each((t.ui.ddmanager.droppables[e.options.scope]||[]).slice(),function(){this.options&&(!this.options.disabled&&this.visible&&c(e,this,this.options.tolerance,i)&&(s=this._drop.call(this,i)||s),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],e.currentItem||e.element)&&(this.isout=!0,this.isover=!1,this._deactivate.call(this,i)))}),s},dragStart:function(e,i){e.element.parentsUntil("body").on("scroll.droppable",function(){e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)})},drag:function(e,i){e.options.refreshPositions&&t.ui.ddmanager.prepareOffsets(e,i),t.each(t.ui.ddmanager.droppables[e.options.scope]||[],function(){if (!this.options.disabled&&!this.greedyChild&&this.visible){var s,n,o,a=c(e,this,this.options.tolerance,i),r=!a&&this.isover?"isout":a&&!this.isover?"isover":null;r&&(this.options.greedy&&(n=this.options.scope,o=this.element.parents(":data(ui-droppable)").filter(function(){return t(this).droppable("instance").options.scope===n}),o.length&&(s=t(o[0]).droppable("instance"),s.greedyChild="isover"===r)),s&&"isover"===r&&(s.isover=!1,s.isout=!0,s._out.call(s,i)),this[r]=!0,this["isout"===r?"isover":"isout"]=!1,this["isover"===r?"_over":"_out"].call(this,i),s&&"isout"===r&&(s.isout=!1,s.isover=!0,s._over.call(s,i)))}})},dragStop:function(e,i){e.element.parentsUntil("body").off("scroll.droppable"),e.options.refreshPositions||t.ui.ddmanager.prepareOffsets(e,i)}},t.uiBackCompat!==!1&&t.widget("ui.droppable",t.ui.droppable,{options:{hoverClass:!1,activeClass:!1},_addActiveClass:function(){this._super(),this.options.activeClass&&this.element.addClass(this.options.activeClass)},_removeActiveClass:function(){this._super(),this.options.activeClass&&this.element.removeClass(this.options.activeClass)},_addHoverClass:function(){this._super(),this.options.hoverClass&&this.element.addClass(this.options.hoverClass)},_removeHoverClass:function(){this._super(),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass)}}),t.ui.droppable,t.widget("ui.resizable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(t){return parseFloat(t)||0},_isNumber:function(t){return!isNaN(parseFloat(t))},_hasScroll:function(e,i){if ("hidden"===t(e).css("overflow"))return!1;var s=i&&"left"===i?"scrollLeft":"scrollTop",n=!1;return e[s]>0?!0:(e[s]=1,n=e[s]>0,e[s]=0,n)},_create:function(){var e,i=this.options,s=this;this._addClass("ui-resizable"),t.extend(this,{_aspectRatio:!!i.aspectRatio,aspectRatio:i.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:i.helper||i.ghost||i.animate?i.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),i.autoHide&&t(this.element).on("mouseenter",function(){i.disabled||(s._removeClass("ui-resizable-autohide"),s._handles.show())}).on("mouseleave",function(){i.disabled||s.resizing||(s._addClass("ui-resizable-autohide"),s._handles.hide())}),this._mouseInit()},_destroy:function(){this._mouseDestroy();var e,i=function(e){t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()};return this.elementIsWrapper&&(i(this.element),e=this.element,this.originalElement.css({position:e.css("position"),width:e.outerWidth(),height:e.outerHeight(),top:e.css("top"),left:e.css("left")}).insertAfter(e),e.remove()),this.originalElement.css("resize",this.originalResizeStyle),i(this.originalElement),this},_setOption:function(t,e){switch(this._super(t,e),t){case"handles":this._removeHandles(),this._setupHandles();break;default:}},_setupHandles:function(){var e,i,s,n,o,a=this.options,r=this;if (this.handles=a.handles||(t(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=t(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),s=this.handles.split(","),this.handles={},i=0;s.length>i;i++)e=t.trim(s[i]),n="ui-resizable-"+e,o=t("<div>"),this._addClass(o,"ui-resizable-handle "+n),o.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(o);this._renderAxis=function(e){var i,s,n,o;e=e||this.element;for(i in this.handles)this.handles[i].constructor===String?this.handles[i]=this.element.children(this.handles[i]).first().show():(this.handles[i].jquery||this.handles[i].nodeType)&&(this.handles[i]=t(this.handles[i]),this._on(this.handles[i],{mousedown:r._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(s=t(this.handles[i],this.element),o=/sw|ne|nw|se|n|s/.test(i)?s.outerHeight():s.outerWidth(),n=["padding",/ne|nw|n/.test(i)?"Top":/se|sw|s/.test(i)?"Bottom":/^e$/.test(i)?"Right":"Left"].join(""),e.css(n,o),this._proportionallyResize()),this._handles=this._handles.add(this.handles[i])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",function(){r.resizing||(this.className&&(o=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),r.axis=o&&o[1]?o[1]:"se")}),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var i,s,n=!1;for(i in this.handles)s=t(this.handles[i])[0],(s===e.target||t.contains(s,e.target))&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(e){var i,s,n,o=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),i=this._num(this.helper.css("left")),s=this._num(this.helper.css("top")),o.containment&&(i+=t(o.containment).scrollLeft()||0,s+=t(o.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:i,top:s},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:i,top:s},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof o.aspectRatio?o.aspectRatio:this.originalSize.width/this.originalSize.height||1,n=t(".ui-resizable-"+this.axis).css("cursor"),t("body").css("cursor","auto"===n?this.axis+"-resize":n),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var i,s,n=this.originalMousePosition,o=this.axis,a=e.pageX-n.left||0,r=e.pageY-n.top||0,l=this._change[o];return this._updatePrevProperties(),l?(i=l.apply(this,[e,a,r]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(i=this._updateRatio(i,e)),i=this._respectSize(i,e),this._updateCache(i),this._propagate("resize",e),s=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),t.isEmptyObject(s)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges()),!1):!1},_mouseStop:function(e){this.resizing=!1;var i,s,n,o,a,r,l,h=this.options,c=this;return this._helper&&(i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),n=s&&this._hasScroll(i[0],"left")?0:c.sizeDiff.height,o=s?0:c.sizeDiff.width,a={width:c.helper.width()-o,height:c.helper.height()-n},r=parseFloat(c.element.css("left"))+(c.position.left-c.originalPosition.left)||null,l=parseFloat(c.element.css("top"))+(c.position.top-c.originalPosition.top)||null,h.animate||this.element.css(t.extend(a,{top:l,left:r})),c.helper.height(c.size.height),c.helper.width(c.size.width),this._helper&&!h.animate&&this._proportionallyResize()),t("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var t={};return this.position.top!==this.prevPosition.top&&(t.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(t.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(t.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(t.height=this.size.height+"px"),this.helper.css(t),t},_updateVirtualBoundaries:function(t){var e,i,s,n,o,a=this.options;o={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0},(this._aspectRatio||t)&&(e=o.minHeight*this.aspectRatio,s=o.minWidth/this.aspectRatio,i=o.maxHeight*this.aspectRatio,n=o.maxWidth/this.aspectRatio,e>o.minWidth&&(o.minWidth=e),s>o.minHeight&&(o.minHeight=s),o.maxWidth>i&&(o.maxWidth=i),o.maxHeight>n&&(o.maxHeight=n)),this._vBoundaries=o},_updateCache:function(t){this.offset=this.helper.offset(),this._isNumber(t.left)&&(this.position.left=t.left),this._isNumber(t.top)&&(this.position.top=t.top),this._isNumber(t.height)&&(this.size.height=t.height),this._isNumber(t.width)&&(this.size.width=t.width)},_updateRatio:function(t){var e=this.position,i=this.size,s=this.axis;return this._isNumber(t.height)?t.width=t.height*this.aspectRatio:this._isNumber(t.width)&&(t.height=t.width/this.aspectRatio),"sw"===s&&(t.left=e.left+(i.width-t.width),t.top=null),"nw"===s&&(t.top=e.top+(i.height-t.height),t.left=e.left+(i.width-t.width)),t},_respectSize:function(t){var e=this._vBoundaries,i=this.axis,s=this._isNumber(t.width)&&e.maxWidth&&e.maxWidth<t.width,n=this._isNumber(t.height)&&e.maxHeight&&e.maxHeight<t.height,o=this._isNumber(t.width)&&e.minWidth&&e.minWidth>t.width,a=this._isNumber(t.height)&&e.minHeight&&e.minHeight>t.height,r=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,h=/sw|nw|w/.test(i),c=/nw|ne|n/.test(i);return o&&(t.width=e.minWidth),a&&(t.height=e.minHeight),s&&(t.width=e.maxWidth),n&&(t.height=e.maxHeight),o&&h&&(t.left=r-e.minWidth),s&&h&&(t.left=r-e.maxWidth),a&&c&&(t.top=l-e.minHeight),n&&c&&(t.top=l-e.maxHeight),t.width||t.height||t.left||!t.top?t.width||t.height||t.top||!t.left||(t.left=null):t.top=null,t},_getPaddingPlusBorderDimensions:function(t){for(var e=0,i=[],s=[t.css("borderTopWidth"),t.css("borderRightWidth"),t.css("borderBottomWidth"),t.css("borderLeftWidth")],n=[t.css("paddingTop"),t.css("paddingRight"),t.css("paddingBottom"),t.css("paddingLeft")];4>e;e++)i[e]=parseFloat(s[e])||0,i[e]+=parseFloat(n[e])||0;return{height:i[0]+i[2],width:i[1]+i[3]}},_proportionallyResize:function(){if (this._proportionallyResizeElements.length)for(var t,e=0,i=this.helper||this.element;this._proportionallyResizeElements.length>e;e++)t=this._proportionallyResizeElements[e],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(t)),t.css({height:i.height()-this.outerDimensions.height||0,width:i.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,i=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||t("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++i.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(t,e){return{width:this.originalSize.width+e}},w:function(t,e){var i=this.originalSize,s=this.originalPosition;return{left:s.left+e,width:i.width-e}},n:function(t,e,i){var s=this.originalSize,n=this.originalPosition;return{top:n.top+i,height:s.height-i}},s:function(t,e,i){return{height:this.originalSize.height+i}},se:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},sw:function(e,i,s){return t.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,i,s]))},ne:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,i,s]))},nw:function(e,i,s){return t.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,i,s]))}},_propagate:function(e,i){t.ui.plugin.call(this,e,[i,this.ui()]),"resize"!==e&&this._trigger(e,i,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),t.ui.plugin.add("resizable","animate",{stop:function(e){var i=t(this).resizable("instance"),s=i.options,n=i._proportionallyResizeElements,o=n.length&&/textarea/i.test(n[0].nodeName),a=o&&i._hasScroll(n[0],"left")?0:i.sizeDiff.height,r=o?0:i.sizeDiff.width,l={width:i.size.width-r,height:i.size.height-a},h=parseFloat(i.element.css("left"))+(i.position.left-i.originalPosition.left)||null,c=parseFloat(i.element.css("top"))+(i.position.top-i.originalPosition.top)||null;i.element.animate(t.extend(l,c&&h?{top:c,left:h}:{}),{duration:s.animateDuration,easing:s.animateEasing,step:function(){var s={width:parseFloat(i.element.css("width")),height:parseFloat(i.element.css("height")),top:parseFloat(i.element.css("top")),left:parseFloat(i.element.css("left"))};n&&n.length&&t(n[0]).css({width:s.width,height:s.height}),i._updateCache(s),i._propagate("resize",e)}})}}),t.ui.plugin.add("resizable","containment",{start:function(){var e,i,s,n,o,a,r,l=t(this).resizable("instance"),h=l.options,c=l.element,u=h.containment,d=u instanceof t?u.get(0):/parent/.test(u)?c.parent().get(0):u;d&&(l.containerElement=t(d),/document/.test(u)||u===document?(l.containerOffset={left:0,top:0},l.containerPosition={left:0,top:0},l.parentData={element:t(document),left:0,top:0,width:t(document).width(),height:t(document).height()||document.body.parentNode.scrollHeight}):(e=t(d),i=[],t(["Top","Right","Left","Bottom"]).each(function(t,s){i[t]=l._num(e.css("padding"+s))}),l.containerOffset=e.offset(),l.containerPosition=e.position(),l.containerSize={height:e.innerHeight()-i[3],width:e.innerWidth()-i[1]},s=l.containerOffset,n=l.containerSize.height,o=l.containerSize.width,a=l._hasScroll(d,"left")?d.scrollWidth:o,r=l._hasScroll(d)?d.scrollHeight:n,l.parentData={element:d,left:s.left,top:s.top,width:a,height:r}))},resize:function(e){var i,s,n,o,a=t(this).resizable("instance"),r=a.options,l=a.containerOffset,h=a.position,c=a._aspectRatio||e.shiftKey,u={top:0,left:0},d=a.containerElement,p=!0;d[0]!==document&&/static/.test(d.css("position"))&&(u=l),h.left<(a._helper?l.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-l.left:a.position.left-u.left),c&&(a.size.height=a.size.width/a.aspectRatio,p=!1),a.position.left=r.helper?l.left:0),h.top<(a._helper?l.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-l.top:a.position.top),c&&(a.size.width=a.size.height*a.aspectRatio,p=!1),a.position.top=a._helper?l.top:0),n=a.containerElement.get(0)===a.element.parent().get(0),o=/relative|absolute/.test(a.containerElement.css("position")),n&&o?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),i=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-u.left:a.offset.left-l.left)),s=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-u.top:a.offset.top-l.top)),i+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-i,c&&(a.size.height=a.size.width/a.aspectRatio,p=!1)),s+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-s,c&&(a.size.width=a.size.height*a.aspectRatio,p=!1)),p||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=t(this).resizable("instance"),i=e.options,s=e.containerOffset,n=e.containerPosition,o=e.containerElement,a=t(e.helper),r=a.offset(),l=a.outerWidth()-e.sizeDiff.width,h=a.outerHeight()-e.sizeDiff.height;e._helper&&!i.animate&&/relative/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:l,height:h}),e._helper&&!i.animate&&/static/.test(o.css("position"))&&t(this).css({left:r.left-n.left-s.left,width:l,height:h})}}),t.ui.plugin.add("resizable","alsoResize",{start:function(){var e=t(this).resizable("instance"),i=e.options;t(i.alsoResize).each(function(){var e=t(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})})},resize:function(e,i){var s=t(this).resizable("instance"),n=s.options,o=s.originalSize,a=s.originalPosition,r={height:s.size.height-o.height||0,width:s.size.width-o.width||0,top:s.position.top-a.top||0,left:s.position.left-a.left||0};
t(n.alsoResize).each(function(){var e=t(this),s=t(this).data("ui-resizable-alsoresize"),n={},o=e.parents(i.originalElement[0]).length?["width","height"]:["width","height","top","left"];t.each(o,function(t,e){var i=(s[e]||0)+(r[e]||0);i&&i>=0&&(n[e]=i||null)}),e.css(n)})},stop:function(){t(this).removeData("ui-resizable-alsoresize")}}),t.ui.plugin.add("resizable","ghost",{start:function(){var e=t(this).resizable("instance"),i=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:i.height,width:i.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),t.uiBackCompat!==!1&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=t(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=t(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),t.ui.plugin.add("resizable","grid",{resize:function(){var e,i=t(this).resizable("instance"),s=i.options,n=i.size,o=i.originalSize,a=i.originalPosition,r=i.axis,l="number"==typeof s.grid?[s.grid,s.grid]:s.grid,h=l[0]||1,c=l[1]||1,u=Math.round((n.width-o.width)/h)*h,d=Math.round((n.height-o.height)/c)*c,p=o.width+u,f=o.height+d,g=s.maxWidth&&p>s.maxWidth,m=s.maxHeight&&f>s.maxHeight,_=s.minWidth&&s.minWidth>p,v=s.minHeight&&s.minHeight>f;s.grid=l,_&&(p+=h),v&&(f+=c),g&&(p-=h),m&&(f-=c),/^(se|s|e)$/.test(r)?(i.size.width=p,i.size.height=f):/^(ne)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.top=a.top-d):/^(sw)$/.test(r)?(i.size.width=p,i.size.height=f,i.position.left=a.left-u):((0>=f-c||0>=p-h)&&(e=i._getPaddingPlusBorderDimensions(this)),f-c>0?(i.size.height=f,i.position.top=a.top-d):(f=c-e.height,i.size.height=f,i.position.top=a.top+o.height-f),p-h>0?(i.size.width=p,i.position.left=a.left-u):(p=h-e.width,i.size.width=p,i.position.left=a.left+o.width-p))}}),t.ui.resizable,t.widget("ui.selectable",t.ui.mouse,{version:"1.12.1",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch",selected:null,selecting:null,start:null,stop:null,unselected:null,unselecting:null},_create:function(){var e=this;this._addClass("ui-selectable"),this.dragged=!1,this.refresh=function(){e.elementPos=t(e.element[0]).offset(),e.selectees=t(e.options.filter,e.element[0]),e._addClass(e.selectees,"ui-selectee"),e.selectees.each(function(){var i=t(this),s=i.offset(),n={left:s.left-e.elementPos.left,top:s.top-e.elementPos.top};t.data(this,"selectable-item",{element:this,$element:i,left:n.left,top:n.top,right:n.left+i.outerWidth(),bottom:n.top+i.outerHeight(),startselected:!1,selected:i.hasClass("ui-selected"),selecting:i.hasClass("ui-selecting"),unselecting:i.hasClass("ui-unselecting")})})},this.refresh(),this._mouseInit(),this.helper=t("<div>"),this._addClass(this.helper,"ui-selectable-helper")},_destroy:function(){this.selectees.removeData("selectable-item"),this._mouseDestroy()},_mouseStart:function(e){var i=this,s=this.options;this.opos=[e.pageX,e.pageY],this.elementPos=t(this.element[0]).offset(),this.options.disabled||(this.selectees=t(s.filter,this.element[0]),this._trigger("start",e),t(s.appendTo).append(this.helper),this.helper.css({left:e.pageX,top:e.pageY,width:0,height:0}),s.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var s=t.data(this,"selectable-item");s.startselected=!0,e.metaKey||e.ctrlKey||(i._removeClass(s.$element,"ui-selected"),s.selected=!1,i._addClass(s.$element,"ui-unselecting"),s.unselecting=!0,i._trigger("unselecting",e,{unselecting:s.element}))}),t(e.target).parents().addBack().each(function(){var s,n=t.data(this,"selectable-item");return n?(s=!e.metaKey&&!e.ctrlKey||!n.$element.hasClass("ui-selected"),i._removeClass(n.$element,s?"ui-unselecting":"ui-selected")._addClass(n.$element,s?"ui-selecting":"ui-unselecting"),n.unselecting=!s,n.selecting=s,n.selected=s,s?i._trigger("selecting",e,{selecting:n.element}):i._trigger("unselecting",e,{unselecting:n.element}),!1):void 0}))},_mouseDrag:function(e){if (this.dragged=!0,!this.options.disabled){var i,s=this,n=this.options,o=this.opos[0],a=this.opos[1],r=e.pageX,l=e.pageY;return o>r&&(i=r,r=o,o=i),a>l&&(i=l,l=a,a=i),this.helper.css({left:o,top:a,width:r-o,height:l-a}),this.selectees.each(function(){var i=t.data(this,"selectable-item"),h=!1,c={};i&&i.element!==s.element[0]&&(c.left=i.left+s.elementPos.left,c.right=i.right+s.elementPos.left,c.top=i.top+s.elementPos.top,c.bottom=i.bottom+s.elementPos.top,"touch"===n.tolerance?h=!(c.left>r||o>c.right||c.top>l||a>c.bottom):"fit"===n.tolerance&&(h=c.left>o&&r>c.right&&c.top>a&&l>c.bottom),h?(i.selected&&(s._removeClass(i.$element,"ui-selected"),i.selected=!1),i.unselecting&&(s._removeClass(i.$element,"ui-unselecting"),i.unselecting=!1),i.selecting||(s._addClass(i.$element,"ui-selecting"),i.selecting=!0,s._trigger("selecting",e,{selecting:i.element}))):(i.selecting&&((e.metaKey||e.ctrlKey)&&i.startselected?(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,s._addClass(i.$element,"ui-selected"),i.selected=!0):(s._removeClass(i.$element,"ui-selecting"),i.selecting=!1,i.startselected&&(s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0),s._trigger("unselecting",e,{unselecting:i.element}))),i.selected&&(e.metaKey||e.ctrlKey||i.startselected||(s._removeClass(i.$element,"ui-selected"),i.selected=!1,s._addClass(i.$element,"ui-unselecting"),i.unselecting=!0,s._trigger("unselecting",e,{unselecting:i.element})))))}),!1}},_mouseStop:function(e){var i=this;return this.dragged=!1,t(".ui-unselecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-unselecting"),s.unselecting=!1,s.startselected=!1,i._trigger("unselected",e,{unselected:s.element})}),t(".ui-selecting",this.element[0]).each(function(){var s=t.data(this,"selectable-item");i._removeClass(s.$element,"ui-selecting")._addClass(s.$element,"ui-selected"),s.selecting=!1,s.selected=!0,s.startselected=!0,i._trigger("selected",e,{selected:s.element})}),this._trigger("stop",e),this.helper.remove(),!1}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&e+i>t},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),t.each(this.items,function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):void 0}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s?!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n)?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1:!1)},_mouseStart:function(e,i,s){var n,o,a=this.options;if (this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",a.cursor),this.storedStylesheet=t("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(o)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,a=this.options,r=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?r=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(r=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?r=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(r=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),r!==!1&&t.ui.ddmanager&&!a.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if (s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if (this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if (e){if (t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,a={};o&&"x"!==o||(a.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(a.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if (this.dragging){this._mouseUp(new t.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,a=o+t.width,r=t.top,l=r+t.height,h=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+h>r&&l>s+h,d="y"===this.options.axis||e+c>o&&a>e+c,p=u&&d;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?p:e+this.helperProportions.width/2>o&&a>i-this.helperProportions.width/2&&s+this.helperProportions.height/2>r&&l>n-this.helperProportions.height/2},_intersectsWithPointer:function(t){var e,i,s="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),n="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),o=s&&n;return o?(e=this._getDragVerticalDirection(),i=this._getDragHorizontalDirection(),this.floating?"right"===i||"down"===e?2:1:e&&("down"===e?2:1)):!1},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&e||"up"===s&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){r.push(this)}var s,n,o,a,r=[],l=[],h=this._connectWith();if (h&&e)for(s=h.length-1;s>=0;s--)for(o=t(h[s],this.document[0]),n=o.length-1;n>=0;n--)a=t.data(o[n],this.widgetFullName),a&&a!==this&&!a.options.disabled&&l.push([t.isFunction(a.options.items)?a.options.items.call(a.element):t(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a]);for(l.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=l.length-1;s>=0;s--)l[s][0].each(i);return t(r)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;e.length>i;i++)if (e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,a,r,l,h,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],d=this._connectWith();if (d&&this.ready)for(i=d.length-1;i>=0;i--)for(n=t(d[i],this.document[0]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(a=u[i][1],r=u[i][0],s=0,h=r.length;h>s;s++)l=t(r[s]),l.data(this.widgetName+"-item",a),c.push({item:l,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.floating=this.items.length?"x"===this.options.axis||this._isFloating(this.items[0].item):!1,this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if (this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]);return e._addClass(n,"ui-sortable-placeholder",i||e.currentItem[0].className)._removeClass(n,"ui-sortable-helper"),"tbody"===s?e._createTrPlaceholder(e.currentItem.find("tr").eq(0),t("<tr>",e.document[0]).appendTo(n)):"tr"===s?e._createTrPlaceholder(e.currentItem,n):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_createTrPlaceholder:function(e,i){var s=this;e.children().each(function(){t("<td>&#160;</td>",s.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(i)})},_contactContainers:function(e){var i,s,n,o,a,r,l,h,c,u,d=null,p=null;for(i=this.containers.length-1;i>=0;i--)if (!t.contains(this.currentItem[0],this.containers[i].element[0]))if (this._intersectsWith(this.containers[i].containerCache)){if (d&&t.contains(this.containers[i].element[0],d.element[0]))continue;d=this.containers[i],p=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if (d)if (1===this.containers.length)this.containers[p].containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1);else{for(n=1e4,o=null,c=d.floating||this._isFloating(this.currentItem),a=c?"left":"top",r=c?"width":"height",u=c?"pageX":"pageY",s=this.items.length-1;s>=0;s--)t.contains(this.containers[p].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(l=this.items[s].item.offset()[a],h=!1,e[u]-l>this.items[s][r]/2&&(h=!0),n>Math.abs(e[u]-l)&&(n=Math.abs(e[u]-l),o=this.items[s],this.direction=h?"up":"down"));if (!o&&!this.options.dropOnEmpty)return;if (this.currentContainer===this.containers[p])return this.currentContainer.containerCache.over||(this.containers[p]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1),void 0;o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[p].element,!0),this._trigger("change",e,this._uiHash()),this.containers[p]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[p],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[p]._trigger("over",e,this._uiHash(this)),this.containers[p].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if ("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===n.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===n.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,a=e.pageY,r="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,l=/(html|body)/i.test(r[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((a-this.originalPageY)/n.grid[1])*n.grid[1],a=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():l?0:r.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():l?0:r.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if (!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if (this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(s=0;n.length>s;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}}),t.widget("ui.menu",{version:"1.12.1",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-caret-1-e"},items:"> *",menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.mouseHandled=!1,this.element.uniqueId().attr({role:this.options.role,tabIndex:0}),this._addClass("ui-menu","ui-widget ui-widget-content"),this._on({"mousedown .ui-menu-item":function(t){t.preventDefault()},"click .ui-menu-item":function(e){var i=t(e.target),s=t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled&&i.not(".ui-state-disabled").length&&(this.select(e),e.isPropagationStopped()||(this.mouseHandled=!0),i.has(".ui-menu").length?this.expand(e):!this.element.is(":focus")&&s.closest(".ui-menu").length&&(this.element.trigger("focus",[!0]),this.active&&1===this.active.parents(".ui-menu").length&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(e){if (!this.previousFilter){var i=t(e.target).closest(".ui-menu-item"),s=t(e.currentTarget);i[0]===s[0]&&(this._removeClass(s.siblings().children(".ui-state-active"),null,"ui-state-active"),this.focus(e,s))}},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(t,e){var i=this.active||this.element.find(this.options.items).eq(0);
e||this.focus(t,i)},blur:function(e){this._delay(function(){var i=!t.contains(this.element[0],t.ui.safeActiveElement(this.document[0]));i&&this.collapseAll(e)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){this._closeOnDocumentClick(t)&&this.collapseAll(t),this.mouseHandled=!1}})},_destroy:function(){var e=this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),i=e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(),i.children().each(function(){var e=t(this);e.data("ui-menu-submenu-caret")&&e.remove()})},_keydown:function(e){var i,s,n,o,a=!0;switch(e.keyCode){case t.ui.keyCode.PAGE_UP:this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:this.nextPage(e);break;case t.ui.keyCode.HOME:this._move("first","first",e);break;case t.ui.keyCode.END:this._move("last","last",e);break;case t.ui.keyCode.UP:this.previous(e);break;case t.ui.keyCode.DOWN:this.next(e);break;case t.ui.keyCode.LEFT:this.collapse(e);break;case t.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:this._activate(e);break;case t.ui.keyCode.ESCAPE:this.collapse(e);break;default:a=!1,s=this.previousFilter||"",o=!1,n=e.keyCode>=96&&105>=e.keyCode?""+(e.keyCode-96):String.fromCharCode(e.keyCode),clearTimeout(this.filterTimer),n===s?o=!0:n=s+n,i=this._filterMenuItems(n),i=o&&-1!==i.index(this.active.next())?this.active.nextAll(".ui-menu-item"):i,i.length||(n=String.fromCharCode(e.keyCode),i=this._filterMenuItems(n)),i.length?(this.focus(e,i),this.previousFilter=n,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter}a&&e.preventDefault()},_activate:function(t){this.active&&!this.active.is(".ui-state-disabled")&&(this.active.children("[aria-haspopup='true']").length?this.expand(t):this.select(t))},refresh:function(){var e,i,s,n,o,a=this,r=this.options.icons.submenu,l=this.element.find(this.options.menus);this._toggleClass("ui-menu-icons",null,!!this.element.find(".ui-icon").length),s=l.filter(":not(.ui-menu)").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"}).each(function(){var e=t(this),i=e.prev(),s=t("<span>").data("ui-menu-submenu-caret",!0);a._addClass(s,"ui-menu-icon","ui-icon "+r),i.attr("aria-haspopup","true").prepend(s),e.attr("aria-labelledby",i.attr("id"))}),this._addClass(s,"ui-menu","ui-widget ui-widget-content ui-front"),e=l.add(this.element),i=e.find(this.options.items),i.not(".ui-menu-item").each(function(){var e=t(this);a._isDivider(e)&&a._addClass(e,"ui-menu-divider","ui-widget-content")}),n=i.not(".ui-menu-item, .ui-menu-divider"),o=n.children().not(".ui-menu").uniqueId().attr({tabIndex:-1,role:this._itemRole()}),this._addClass(n,"ui-menu-item")._addClass(o,"ui-menu-item-wrapper"),i.filter(".ui-state-disabled").attr("aria-disabled","true"),this.active&&!t.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},_setOption:function(t,e){if ("icons"===t){var i=this.element.find(".ui-menu-icon");this._removeClass(i,null,this.options.icons.submenu)._addClass(i,null,e.submenu)}this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t+""),this._toggleClass(null,"ui-state-disabled",!!t)},focus:function(t,e){var i,s,n;this.blur(t,t&&"focus"===t.type),this._scrollIntoView(e),this.active=e.first(),s=this.active.children(".ui-menu-item-wrapper"),this._addClass(s,null,"ui-state-active"),this.options.role&&this.element.attr("aria-activedescendant",s.attr("id")),n=this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"),this._addClass(n,null,"ui-state-active"),t&&"keydown"===t.type?this._close():this.timer=this._delay(function(){this._close()},this.delay),i=e.children(".ui-menu"),i.length&&t&&/^mouse/.test(t.type)&&this._startOpening(i),this.activeMenu=e.parent(),this._trigger("focus",t,{item:e})},_scrollIntoView:function(e){var i,s,n,o,a,r;this._hasScroll()&&(i=parseFloat(t.css(this.activeMenu[0],"borderTopWidth"))||0,s=parseFloat(t.css(this.activeMenu[0],"paddingTop"))||0,n=e.offset().top-this.activeMenu.offset().top-i-s,o=this.activeMenu.scrollTop(),a=this.activeMenu.height(),r=e.outerHeight(),0>n?this.activeMenu.scrollTop(o+n):n+r>a&&this.activeMenu.scrollTop(o+n-a+r))},blur:function(t,e){e||clearTimeout(this.timer),this.active&&(this._removeClass(this.active.children(".ui-menu-item-wrapper"),null,"ui-state-active"),this._trigger("blur",t,{item:this.active}),this.active=null)},_startOpening:function(t){clearTimeout(this.timer),"true"===t.attr("aria-hidden")&&(this.timer=this._delay(function(){this._close(),this._open(t)},this.delay))},_open:function(e){var i=t.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden","true"),e.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(i)},collapseAll:function(e,i){clearTimeout(this.timer),this.timer=this._delay(function(){var s=i?this.element:t(e&&e.target).closest(this.element.find(".ui-menu"));s.length||(s=this.element),this._close(s),this.blur(e),this._removeClass(s.find(".ui-state-active"),null,"ui-state-active"),this.activeMenu=s},this.delay)},_close:function(t){t||(t=this.active?this.active.parent():this.element),t.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false")},_closeOnDocumentClick:function(e){return!t(e.target).closest(".ui-menu").length},_isDivider:function(t){return!/[^\-\u2014\u2013\s]/.test(t.text())},collapse:function(t){var e=this.active&&this.active.parent().closest(".ui-menu-item",this.element);e&&e.length&&(this._close(),this.focus(t,e))},expand:function(t){var e=this.active&&this.active.children(".ui-menu ").find(this.options.items).first();e&&e.length&&(this._open(e.parent()),this._delay(function(){this.focus(t,e)}))},next:function(t){this._move("next","first",t)},previous:function(t){this._move("prev","last",t)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(t,e,i){var s;this.active&&(s="first"===t||"last"===t?this.active["first"===t?"prevAll":"nextAll"](".ui-menu-item").eq(-1):this.active[t+"All"](".ui-menu-item").eq(0)),s&&s.length&&this.active||(s=this.activeMenu.find(this.options.items)[e]()),this.focus(i,s)},nextPage:function(e){var i,s,n;return this.active?(this.isLastItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return i=t(this),0>i.offset().top-s-n}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items)[this.active?"last":"first"]())),void 0):(this.next(e),void 0)},previousPage:function(e){var i,s,n;return this.active?(this.isFirstItem()||(this._hasScroll()?(s=this.active.offset().top,n=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return i=t(this),i.offset().top-s+n>0}),this.focus(e,i)):this.focus(e,this.activeMenu.find(this.options.items).first())),void 0):(this.next(e),void 0)},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(e){this.active=this.active||t(e.target).closest(".ui-menu-item");var i={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(e,!0),this._trigger("select",e,i)},_filterMenuItems:function(e){var i=e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),s=RegExp("^"+i,"i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function(){return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()))})}}),t.widget("ui.autocomplete",{version:"1.12.1",defaultElement:"<input>",options:{appendTo:null,autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},requestIndex:0,pending:0,_create:function(){var e,i,s,n=this.element[0].nodeName.toLowerCase(),o="textarea"===n,a="input"===n;this.isMultiLine=o||!a&&this._isContentEditable(this.element),this.valueMethod=this.element[o||a?"val":"text"],this.isNewMenu=!0,this._addClass("ui-autocomplete-input"),this.element.attr("autocomplete","off"),this._on(this.element,{keydown:function(n){if (this.element.prop("readOnly"))return e=!0,s=!0,i=!0,void 0;e=!1,s=!1,i=!1;var o=t.ui.keyCode;switch(n.keyCode){case o.PAGE_UP:e=!0,this._move("previousPage",n);break;case o.PAGE_DOWN:e=!0,this._move("nextPage",n);break;case o.UP:e=!0,this._keyEvent("previous",n);break;case o.DOWN:e=!0,this._keyEvent("next",n);break;case o.ENTER:this.menu.active&&(e=!0,n.preventDefault(),this.menu.select(n));break;case o.TAB:this.menu.active&&this.menu.select(n);break;case o.ESCAPE:this.menu.element.is(":visible")&&(this.isMultiLine||this._value(this.term),this.close(n),n.preventDefault());break;default:i=!0,this._searchTimeout(n)}},keypress:function(s){if (e)return e=!1,(!this.isMultiLine||this.menu.element.is(":visible"))&&s.preventDefault(),void 0;if (!i){var n=t.ui.keyCode;switch(s.keyCode){case n.PAGE_UP:this._move("previousPage",s);break;case n.PAGE_DOWN:this._move("nextPage",s);break;case n.UP:this._keyEvent("previous",s);break;case n.DOWN:this._keyEvent("next",s)}}},input:function(t){return s?(s=!1,t.preventDefault(),void 0):(this._searchTimeout(t),void 0)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(t){return this.cancelBlur?(delete this.cancelBlur,void 0):(clearTimeout(this.searching),this.close(t),this._change(t),void 0)}}),this._initSource(),this.menu=t("<ul>").appendTo(this._appendTo()).menu({role:null}).hide().menu("instance"),this._addClass(this.menu.element,"ui-autocomplete","ui-front"),this._on(this.menu.element,{mousedown:function(e){e.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,this.element[0]!==t.ui.safeActiveElement(this.document[0])&&this.element.trigger("focus")})},menufocus:function(e,i){var s,n;return this.isNewMenu&&(this.isNewMenu=!1,e.originalEvent&&/^mouse/.test(e.originalEvent.type))?(this.menu.blur(),this.document.one("mousemove",function(){t(e.target).trigger(e.originalEvent)}),void 0):(n=i.item.data("ui-autocomplete-item"),!1!==this._trigger("focus",e,{item:n})&&e.originalEvent&&/^key/.test(e.originalEvent.type)&&this._value(n.value),s=i.item.attr("aria-label")||n.value,s&&t.trim(s).length&&(this.liveRegion.children().hide(),t("<div>").text(s).appendTo(this.liveRegion)),void 0)},menuselect:function(e,i){var s=i.item.data("ui-autocomplete-item"),n=this.previous;this.element[0]!==t.ui.safeActiveElement(this.document[0])&&(this.element.trigger("focus"),this.previous=n,this._delay(function(){this.previous=n,this.selectedItem=s})),!1!==this._trigger("select",e,{item:s})&&this._value(s.value),this.term=this._value(),this.close(e),this.selectedItem=s}}),this.liveRegion=t("<div>",{role:"status","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(t,e){this._super(t,e),"source"===t&&this._initSource(),"appendTo"===t&&this.menu.element.appendTo(this._appendTo()),"disabled"===t&&e&&this.xhr&&this.xhr.abort()},_isEventTargetInWidget:function(e){var i=this.menu.element[0];return e.target===this.element[0]||e.target===i||t.contains(i,e.target)},_closeOnClickOutside:function(t){this._isEventTargetInWidget(t)||this.close()},_appendTo:function(){var e=this.options.appendTo;return e&&(e=e.jquery||e.nodeType?t(e):this.document.find(e).eq(0)),e&&e[0]||(e=this.element.closest(".ui-front, dialog")),e.length||(e=this.document[0].body),e},_initSource:function(){var e,i,s=this;t.isArray(this.options.source)?(e=this.options.source,this.source=function(i,s){s(t.ui.autocomplete.filter(e,i.term))}):"string"==typeof this.options.source?(i=this.options.source,this.source=function(e,n){s.xhr&&s.xhr.abort(),s.xhr=t.ajax({url:i,data:e,dataType:"json",success:function(t){n(t)},error:function(){n([])}})}):this.source=this.options.source},_searchTimeout:function(t){clearTimeout(this.searching),this.searching=this._delay(function(){var e=this.term===this._value(),i=this.menu.element.is(":visible"),s=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;(!e||e&&!i&&!s)&&(this.selectedItem=null,this.search(null,t))},this.options.delay)},search:function(t,e){return t=null!=t?t:this._value(),this.term=this._value(),t.length<this.options.minLength?this.close(e):this._trigger("search",e)!==!1?this._search(t):void 0},_search:function(t){this.pending++,this._addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:t},this._response())},_response:function(){var e=++this.requestIndex;return t.proxy(function(t){e===this.requestIndex&&this.__response(t),this.pending--,this.pending||this._removeClass("ui-autocomplete-loading")},this)},__response:function(t){t&&(t=this._normalize(t)),this._trigger("response",null,{content:t}),!this.options.disabled&&t&&t.length&&!this.cancelSearch?(this._suggest(t),this._trigger("open")):this._close()},close:function(t){this.cancelSearch=!0,this._close(t)},_close:function(t){this._off(this.document,"mousedown"),this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",t))},_change:function(t){this.previous!==this._value()&&this._trigger("change",t,{item:this.selectedItem})},_normalize:function(e){return e.length&&e[0].label&&e[0].value?e:t.map(e,function(e){return"string"==typeof e?{label:e,value:e}:t.extend({},e,{label:e.label||e.value,value:e.value||e.label})})},_suggest:function(e){var i=this.menu.element.empty();this._renderMenu(i,e),this.isNewMenu=!0,this.menu.refresh(),i.show(),this._resizeMenu(),i.position(t.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next(),this._on(this.document,{mousedown:"_closeOnClickOutside"})},_resizeMenu:function(){var t=this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(e,i){var s=this;t.each(i,function(t,i){s._renderItemData(e,i)})},_renderItemData:function(t,e){return this._renderItem(t,e).data("ui-autocomplete-item",e)},_renderItem:function(e,i){return t("<li>").append(t("<div>").text(i.label)).appendTo(e)},_move:function(t,e){return this.menu.element.is(":visible")?this.menu.isFirstItem()&&/^previous/.test(t)||this.menu.isLastItem()&&/^next/.test(t)?(this.isMultiLine||this._value(this.term),this.menu.blur(),void 0):(this.menu[t](e),void 0):(this.search(null,e),void 0)},widget:function(){return this.menu.element},_value:function(){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(t,e){(!this.isMultiLine||this.menu.element.is(":visible"))&&(this._move(t,e),e.preventDefault())},_isContentEditable:function(t){if (!t.length)return!1;var e=t.prop("contentEditable");return"inherit"===e?this._isContentEditable(t.parent()):"true"===e}}),t.extend(t.ui.autocomplete,{escapeRegex:function(t){return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(e,i){var s=RegExp(t.ui.autocomplete.escapeRegex(i),"i");return t.grep(e,function(t){return s.test(t.label||t.value||t)})}}),t.widget("ui.autocomplete",t.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(t){return t+(t>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var i;this._superApply(arguments),this.options.disabled||this.cancelSearch||(i=e&&e.length?this.options.messages.results(e.length):this.options.messages.noResults,this.liveRegion.children().hide(),t("<div>").text(i).appendTo(this.liveRegion))}}),t.ui.autocomplete,t.extend(t.ui,{datepicker:{version:"1.12.1"}});var u;t.extend(s.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(t){return a(this._defaults,t||{}),this},_attachDatepicker:function(e,i){var s,n,o;s=e.nodeName.toLowerCase(),n="div"===s||"span"===s,e.id||(this.uuid+=1,e.id="dp"+this.uuid),o=this._newInst(t(e),n),o.settings=t.extend({},i||{}),"input"===s?this._connectDatepicker(e,o):n&&this._inlineDatepicker(e,o)},_newInst:function(e,i){var s=e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1");return{id:s,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:i,dpDiv:i?n(t("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,i){var s=t(e);i.append=t([]),i.trigger=t([]),s.hasClass(this.markerClassName)||(this._attachments(s,i),s.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(i),t.data(e,"datepicker",i),i.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,i){var s,n,o,a=this._get(i,"appendText"),r=this._get(i,"isRTL");i.append&&i.append.remove(),a&&(i.append=t("<span class='"+this._appendClass+"'>"+a+"</span>"),e[r?"before":"after"](i.append)),e.off("focus",this._showDatepicker),i.trigger&&i.trigger.remove(),s=this._get(i,"showOn"),("focus"===s||"both"===s)&&e.on("focus",this._showDatepicker),("button"===s||"both"===s)&&(n=this._get(i,"buttonText"),o=this._get(i,"buttonImage"),i.trigger=t(this._get(i,"buttonImageOnly")?t("<img/>").addClass(this._triggerClass).attr({src:o,alt:n,title:n}):t("<button type='button'></button>").addClass(this._triggerClass).html(o?t("<img/>").attr({src:o,alt:n,title:n}):n)),e[r?"before":"after"](i.trigger),i.trigger.on("click",function(){return t.datepicker._datepickerShowing&&t.datepicker._lastInput===e[0]?t.datepicker._hideDatepicker():t.datepicker._datepickerShowing&&t.datepicker._lastInput!==e[0]?(t.datepicker._hideDatepicker(),t.datepicker._showDatepicker(e[0])):t.datepicker._showDatepicker(e[0]),!1}))},_autoSize:function(t){if (this._get(t,"autoSize")&&!t.inline){var e,i,s,n,o=new Date(2009,11,20),a=this._get(t,"dateFormat");a.match(/[DM]/)&&(e=function(t){for(i=0,s=0,n=0;t.length>n;n++)t[n].length>i&&(i=t[n].length,s=n);return s},o.setMonth(e(this._get(t,a.match(/MM/)?"monthNames":"monthNamesShort"))),o.setDate(e(this._get(t,a.match(/DD/)?"dayNames":"dayNamesShort"))+20-o.getDay())),t.input.attr("size",this._formatDate(t,o).length)}},_inlineDatepicker:function(e,i){var s=t(e);s.hasClass(this.markerClassName)||(s.addClass(this.markerClassName).append(i.dpDiv),t.data(e,"datepicker",i),this._setDate(i,this._getDefaultDate(i),!0),this._updateDatepicker(i),this._updateAlternate(i),i.settings.disabled&&this._disableDatepicker(e),i.dpDiv.css("display","block"))},_dialogDatepicker:function(e,i,s,n,o){var r,l,h,c,u,d=this._dialogInst;return d||(this.uuid+=1,r="dp"+this.uuid,this._dialogInput=t("<input type='text' id='"+r+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),t("body").append(this._dialogInput),d=this._dialogInst=this._newInst(this._dialogInput,!1),d.settings={},t.data(this._dialogInput[0],"datepicker",d)),a(d.settings,n||{}),i=i&&i.constructor===Date?this._formatDate(d,i):i,this._dialogInput.val(i),this._pos=o?o.length?o:[o.pageX,o.pageY]:null,this._pos||(l=document.documentElement.clientWidth,h=document.documentElement.clientHeight,c=document.documentElement.scrollLeft||document.body.scrollLeft,u=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[l/2-100+c,h/2-150+u]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),d.settings.onSelect=s,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),t.blockUI&&t.blockUI(this.dpDiv),t.data(this._dialogInput[0],"datepicker",d),this},_destroyDatepicker:function(e){var i,s=t(e),n=t.data(e,"datepicker");s.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),t.removeData(e,"datepicker"),"input"===i?(n.append.remove(),n.trigger.remove(),s.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):("div"===i||"span"===i)&&s.removeClass(this.markerClassName).empty(),u===n&&(u=null))},_enableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!1,o.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().removeClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}))},_disableDatepicker:function(e){var i,s,n=t(e),o=t.data(e,"datepicker");n.hasClass(this.markerClassName)&&(i=e.nodeName.toLowerCase(),"input"===i?(e.disabled=!0,o.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):("div"===i||"span"===i)&&(s=n.children("."+this._inlineClass),s.children().addClass("ui-state-disabled"),s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=t.map(this._disabledInputs,function(t){return t===e?null:t}),this._disabledInputs[this._disabledInputs.length]=e)},_isDisabledDatepicker:function(t){if (!t)return!1;for(var e=0;this._disabledInputs.length>e;e++)if (this._disabledInputs[e]===t)return!0;return!1},_getInst:function(e){try{return t.data(e,"datepicker")}catch(i){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,i,s){var n,o,r,l,h=this._getInst(e);return 2===arguments.length&&"string"==typeof i?"defaults"===i?t.extend({},t.datepicker._defaults):h?"all"===i?t.extend({},h.settings):this._get(h,i):null:(n=i||{},"string"==typeof i&&(n={},n[i]=s),h&&(this._curInst===h&&this._hideDatepicker(),o=this._getDateDatepicker(e,!0),r=this._getMinMaxDate(h,"min"),l=this._getMinMaxDate(h,"max"),a(h.settings,n),null!==r&&void 0!==n.dateFormat&&void 0===n.minDate&&(h.settings.minDate=this._formatDate(h,r)),null!==l&&void 0!==n.dateFormat&&void 0===n.maxDate&&(h.settings.maxDate=this._formatDate(h,l)),"disabled"in n&&(n.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(t(e),h),this._autoSize(h),this._setDate(h,o),this._updateAlternate(h),this._updateDatepicker(h)),void 0)},_changeDatepicker:function(t,e,i){this._optionDatepicker(t,e,i)},_refreshDatepicker:function(t){var e=this._getInst(t);e&&this._updateDatepicker(e)},_setDateDatepicker:function(t,e){var i=this._getInst(t);i&&(this._setDate(i,e),this._updateDatepicker(i),this._updateAlternate(i))},_getDateDatepicker:function(t,e){var i=this._getInst(t);return i&&!i.inline&&this._setDateFromField(i,e),i?this._getDate(i):null},_doKeyDown:function(e){var i,s,n,o=t.datepicker._getInst(e.target),a=!0,r=o.dpDiv.is(".ui-datepicker-rtl");if (o._keyEvent=!0,t.datepicker._datepickerShowing)switch(e.keyCode){case 9:t.datepicker._hideDatepicker(),a=!1;break;case 13:return n=t("td."+t.datepicker._dayOverClass+":not(."+t.datepicker._currentClass+")",o.dpDiv),n[0]&&t.datepicker._selectDay(e.target,o.selectedMonth,o.selectedYear,n[0]),i=t.datepicker._get(o,"onSelect"),i?(s=t.datepicker._formatDate(o),i.apply(o.input?o.input[0]:null,[s,o])):t.datepicker._hideDatepicker(),!1;case 27:t.datepicker._hideDatepicker();break;case 33:t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 34:t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&t.datepicker._clearDate(e.target),a=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&t.datepicker._gotoToday(e.target),a=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?1:-1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?-t.datepicker._get(o,"stepBigMonths"):-t.datepicker._get(o,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,-7,"D"),a=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,r?-1:1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&t.datepicker._adjustDate(e.target,e.ctrlKey?+t.datepicker._get(o,"stepBigMonths"):+t.datepicker._get(o,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&t.datepicker._adjustDate(e.target,7,"D"),a=e.ctrlKey||e.metaKey;break;default:a=!1}else 36===e.keyCode&&e.ctrlKey?t.datepicker._showDatepicker(this):a=!1;a&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var i,s,n=t.datepicker._getInst(e.target);return t.datepicker._get(n,"constrainInput")?(i=t.datepicker._possibleChars(t.datepicker._get(n,"dateFormat")),s=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||" ">s||!i||i.indexOf(s)>-1):void 0},_doKeyUp:function(e){var i,s=t.datepicker._getInst(e.target);if (s.input.val()!==s.lastVal)try{i=t.datepicker.parseDate(t.datepicker._get(s,"dateFormat"),s.input?s.input.val():null,t.datepicker._getFormatConfig(s)),i&&(t.datepicker._setDateFromField(s),t.datepicker._updateAlternate(s),t.datepicker._updateDatepicker(s))}catch(n){}return!0},_showDatepicker:function(e){if (e=e.target||e,"input"!==e.nodeName.toLowerCase()&&(e=t("input",e.parentNode)[0]),!t.datepicker._isDisabledDatepicker(e)&&t.datepicker._lastInput!==e){var s,n,o,r,l,h,c;s=t.datepicker._getInst(e),t.datepicker._curInst&&t.datepicker._curInst!==s&&(t.datepicker._curInst.dpDiv.stop(!0,!0),s&&t.datepicker._datepickerShowing&&t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])),n=t.datepicker._get(s,"beforeShow"),o=n?n.apply(e,[e,s]):{},o!==!1&&(a(s.settings,o),s.lastVal=null,t.datepicker._lastInput=e,t.datepicker._setDateFromField(s),t.datepicker._inDialog&&(e.value=""),t.datepicker._pos||(t.datepicker._pos=t.datepicker._findPos(e),t.datepicker._pos[1]+=e.offsetHeight),r=!1,t(e).parents().each(function(){return r|="fixed"===t(this).css("position"),!r}),l={left:t.datepicker._pos[0],top:t.datepicker._pos[1]},t.datepicker._pos=null,s.dpDiv.empty(),s.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),t.datepicker._updateDatepicker(s),l=t.datepicker._checkOffset(s,l,r),s.dpDiv.css({position:t.datepicker._inDialog&&t.blockUI?"static":r?"fixed":"absolute",display:"none",left:l.left+"px",top:l.top+"px"}),s.inline||(h=t.datepicker._get(s,"showAnim"),c=t.datepicker._get(s,"duration"),s.dpDiv.css("z-index",i(t(e))+1),t.datepicker._datepickerShowing=!0,t.effects&&t.effects.effect[h]?s.dpDiv.show(h,t.datepicker._get(s,"showOptions"),c):s.dpDiv[h||"show"](h?c:null),t.datepicker._shouldFocusInput(s)&&s.input.trigger("focus"),t.datepicker._curInst=s))}},_updateDatepicker:function(e){this.maxRows=4,u=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var i,s=this._getNumberOfMonths(e),n=s[1],a=17,r=e.dpDiv.find("."+this._dayOverClass+" a");r.length>0&&o.apply(r.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),n>1&&e.dpDiv.addClass("ui-datepicker-multi-"+n).css("width",a*n+"em"),e.dpDiv[(1!==s[0]||1!==s[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===t.datepicker._curInst&&t.datepicker._datepickerShowing&&t.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(i=e.yearshtml,setTimeout(function(){i===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),i=e.yearshtml=null},0))},_shouldFocusInput:function(t){return t.input&&t.input.is(":visible")&&!t.input.is(":disabled")&&!t.input.is(":focus")},_checkOffset:function(e,i,s){var n=e.dpDiv.outerWidth(),o=e.dpDiv.outerHeight(),a=e.input?e.input.outerWidth():0,r=e.input?e.input.outerHeight():0,l=document.documentElement.clientWidth+(s?0:t(document).scrollLeft()),h=document.documentElement.clientHeight+(s?0:t(document).scrollTop());return i.left-=this._get(e,"isRTL")?n-a:0,i.left-=s&&i.left===e.input.offset().left?t(document).scrollLeft():0,i.top-=s&&i.top===e.input.offset().top+r?t(document).scrollTop():0,i.left-=Math.min(i.left,i.left+n>l&&l>n?Math.abs(i.left+n-l):0),i.top-=Math.min(i.top,i.top+o>h&&h>o?Math.abs(o+r):0),i},_findPos:function(e){for(var i,s=this._getInst(e),n=this._get(s,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||t.expr.filters.hidden(e));)e=e[n?"previousSibling":"nextSibling"];return i=t(e).offset(),[i.left,i.top]},_hideDatepicker:function(e){var i,s,n,o,a=this._curInst;!a||e&&a!==t.data(e,"datepicker")||this._datepickerShowing&&(i=this._get(a,"showAnim"),s=this._get(a,"duration"),n=function(){t.datepicker._tidyDialog(a)},t.effects&&(t.effects.effect[i]||t.effects[i])?a.dpDiv.hide(i,t.datepicker._get(a,"showOptions"),s,n):a.dpDiv["slideDown"===i?"slideUp":"fadeIn"===i?"fadeOut":"hide"](i?s:null,n),i||n(),this._datepickerShowing=!1,o=this._get(a,"onClose"),o&&o.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),t.blockUI&&(t.unblockUI(),t("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(t){t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){if (t.datepicker._curInst){var i=t(e.target),s=t.datepicker._getInst(i[0]);(i[0].id!==t.datepicker._mainDivId&&0===i.parents("#"+t.datepicker._mainDivId).length&&!i.hasClass(t.datepicker.markerClassName)&&!i.closest("."+t.datepicker._triggerClass).length&&t.datepicker._datepickerShowing&&(!t.datepicker._inDialog||!t.blockUI)||i.hasClass(t.datepicker.markerClassName)&&t.datepicker._curInst!==s)&&t.datepicker._hideDatepicker()}},_adjustDate:function(e,i,s){var n=t(e),o=this._getInst(n[0]);this._isDisabledDatepicker(n[0])||(this._adjustInstDate(o,i+("M"===s?this._get(o,"showCurrentAtPos"):0),s),this._updateDatepicker(o))},_gotoToday:function(e){var i,s=t(e),n=this._getInst(s[0]);this._get(n,"gotoCurrent")&&n.currentDay?(n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear):(i=new Date,n.selectedDay=i.getDate(),n.drawMonth=n.selectedMonth=i.getMonth(),n.drawYear=n.selectedYear=i.getFullYear()),this._notifyChange(n),this._adjustDate(s)},_selectMonthYear:function(e,i,s){var n=t(e),o=this._getInst(n[0]);o["selected"+("M"===s?"Month":"Year")]=o["draw"+("M"===s?"Month":"Year")]=parseInt(i.options[i.selectedIndex].value,10),this._notifyChange(o),this._adjustDate(n)},_selectDay:function(e,i,s,n){var o,a=t(e);t(n).hasClass(this._unselectableClass)||this._isDisabledDatepicker(a[0])||(o=this._getInst(a[0]),o.selectedDay=o.currentDay=t("a",n).html(),o.selectedMonth=o.currentMonth=i,o.selectedYear=o.currentYear=s,this._selectDate(e,this._formatDate(o,o.currentDay,o.currentMonth,o.currentYear)))},_clearDate:function(e){var i=t(e);this._selectDate(i,"")},_selectDate:function(e,i){var s,n=t(e),o=this._getInst(n[0]);i=null!=i?i:this._formatDate(o),o.input&&o.input.val(i),this._updateAlternate(o),s=this._get(o,"onSelect"),s?s.apply(o.input?o.input[0]:null,[i,o]):o.input&&o.input.trigger("change"),o.inline?this._updateDatepicker(o):(this._hideDatepicker(),this._lastInput=o.input[0],"object"!=typeof o.input[0]&&o.input.trigger("focus"),this._lastInput=null)
},_updateAlternate:function(e){var i,s,n,o=this._get(e,"altField");o&&(i=this._get(e,"altFormat")||this._get(e,"dateFormat"),s=this._getDate(e),n=this.formatDate(i,s,this._getFormatConfig(e)),t(o).val(n))},noWeekends:function(t){var e=t.getDay();return[e>0&&6>e,""]},iso8601Week:function(t){var e,i=new Date(t.getTime());return i.setDate(i.getDate()+4-(i.getDay()||7)),e=i.getTime(),i.setMonth(0),i.setDate(1),Math.floor(Math.round((e-i)/864e5)/7)+1},parseDate:function(e,i,s){if (null==e||null==i)throw"Invalid arguments";if (i="object"==typeof i?""+i:i+"",""===i)return null;var n,o,a,r,l=0,h=(s?s.shortYearCutoff:null)||this._defaults.shortYearCutoff,c="string"!=typeof h?h:(new Date).getFullYear()%100+parseInt(h,10),u=(s?s.dayNamesShort:null)||this._defaults.dayNamesShort,d=(s?s.dayNames:null)||this._defaults.dayNames,p=(s?s.monthNamesShort:null)||this._defaults.monthNamesShort,f=(s?s.monthNames:null)||this._defaults.monthNames,g=-1,m=-1,_=-1,v=-1,b=!1,y=function(t){var i=e.length>n+1&&e.charAt(n+1)===t;return i&&n++,i},w=function(t){var e=y(t),s="@"===t?14:"!"===t?20:"y"===t&&e?4:"o"===t?3:2,n="y"===t?s:1,o=RegExp("^\\d{"+n+","+s+"}"),a=i.substring(l).match(o);if (!a)throw"Missing number at position "+l;return l+=a[0].length,parseInt(a[0],10)},k=function(e,s,n){var o=-1,a=t.map(y(e)?n:s,function(t,e){return[[e,t]]}).sort(function(t,e){return-(t[1].length-e[1].length)});if (t.each(a,function(t,e){var s=e[1];return i.substr(l,s.length).toLowerCase()===s.toLowerCase()?(o=e[0],l+=s.length,!1):void 0}),-1!==o)return o+1;throw"Unknown name at position "+l},x=function(){if (i.charAt(l)!==e.charAt(n))throw"Unexpected literal at position "+l;l++};for(n=0;e.length>n;n++)if (b)"'"!==e.charAt(n)||y("'")?x():b=!1;else switch(e.charAt(n)){case"d":_=w("d");break;case"D":k("D",u,d);break;case"o":v=w("o");break;case"m":m=w("m");break;case"M":m=k("M",p,f);break;case"y":g=w("y");break;case"@":r=new Date(w("@")),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"!":r=new Date((w("!")-this._ticksTo1970)/1e4),g=r.getFullYear(),m=r.getMonth()+1,_=r.getDate();break;case"'":y("'")?x():b=!0;break;default:x()}if (i.length>l&&(a=i.substr(l),!/^\s+/.test(a)))throw"Extra/unparsed characters found in date: "+a;if (-1===g?g=(new Date).getFullYear():100>g&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(c>=g?0:-100)),v>-1)for(m=1,_=v;;){if (o=this._getDaysInMonth(g,m-1),o>=_)break;m++,_-=o}if (r=this._daylightSavingAdjust(new Date(g,m-1,_)),r.getFullYear()!==g||r.getMonth()+1!==m||r.getDate()!==_)throw"Invalid date";return r},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:1e7*60*60*24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925)),formatDate:function(t,e,i){if (!e)return"";var s,n=(i?i.dayNamesShort:null)||this._defaults.dayNamesShort,o=(i?i.dayNames:null)||this._defaults.dayNames,a=(i?i.monthNamesShort:null)||this._defaults.monthNamesShort,r=(i?i.monthNames:null)||this._defaults.monthNames,l=function(e){var i=t.length>s+1&&t.charAt(s+1)===e;return i&&s++,i},h=function(t,e,i){var s=""+e;if (l(t))for(;i>s.length;)s="0"+s;return s},c=function(t,e,i,s){return l(t)?s[e]:i[e]},u="",d=!1;if (e)for(s=0;t.length>s;s++)if (d)"'"!==t.charAt(s)||l("'")?u+=t.charAt(s):d=!1;else switch(t.charAt(s)){case"d":u+=h("d",e.getDate(),2);break;case"D":u+=c("D",e.getDay(),n,o);break;case"o":u+=h("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":u+=h("m",e.getMonth()+1,2);break;case"M":u+=c("M",e.getMonth(),a,r);break;case"y":u+=l("y")?e.getFullYear():(10>e.getFullYear()%100?"0":"")+e.getFullYear()%100;break;case"@":u+=e.getTime();break;case"!":u+=1e4*e.getTime()+this._ticksTo1970;break;case"'":l("'")?u+="'":d=!0;break;default:u+=t.charAt(s)}return u},_possibleChars:function(t){var e,i="",s=!1,n=function(i){var s=t.length>e+1&&t.charAt(e+1)===i;return s&&e++,s};for(e=0;t.length>e;e++)if (s)"'"!==t.charAt(e)||n("'")?i+=t.charAt(e):s=!1;else switch(t.charAt(e)){case"d":case"m":case"y":case"@":i+="0123456789";break;case"D":case"M":return null;case"'":n("'")?i+="'":s=!0;break;default:i+=t.charAt(e)}return i},_get:function(t,e){return void 0!==t.settings[e]?t.settings[e]:this._defaults[e]},_setDateFromField:function(t,e){if (t.input.val()!==t.lastVal){var i=this._get(t,"dateFormat"),s=t.lastVal=t.input?t.input.val():null,n=this._getDefaultDate(t),o=n,a=this._getFormatConfig(t);try{o=this.parseDate(i,s,a)||n}catch(r){s=e?"":s}t.selectedDay=o.getDate(),t.drawMonth=t.selectedMonth=o.getMonth(),t.drawYear=t.selectedYear=o.getFullYear(),t.currentDay=s?o.getDate():0,t.currentMonth=s?o.getMonth():0,t.currentYear=s?o.getFullYear():0,this._adjustInstDate(t)}},_getDefaultDate:function(t){return this._restrictMinMax(t,this._determineDate(t,this._get(t,"defaultDate"),new Date))},_determineDate:function(e,i,s){var n=function(t){var e=new Date;return e.setDate(e.getDate()+t),e},o=function(i){try{return t.datepicker.parseDate(t.datepicker._get(e,"dateFormat"),i,t.datepicker._getFormatConfig(e))}catch(s){}for(var n=(i.toLowerCase().match(/^c/)?t.datepicker._getDate(e):null)||new Date,o=n.getFullYear(),a=n.getMonth(),r=n.getDate(),l=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,h=l.exec(i);h;){switch(h[2]||"d"){case"d":case"D":r+=parseInt(h[1],10);break;case"w":case"W":r+=7*parseInt(h[1],10);break;case"m":case"M":a+=parseInt(h[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a));break;case"y":case"Y":o+=parseInt(h[1],10),r=Math.min(r,t.datepicker._getDaysInMonth(o,a))}h=l.exec(i)}return new Date(o,a,r)},a=null==i||""===i?s:"string"==typeof i?o(i):"number"==typeof i?isNaN(i)?s:n(i):new Date(i.getTime());return a=a&&"Invalid Date"==""+a?s:a,a&&(a.setHours(0),a.setMinutes(0),a.setSeconds(0),a.setMilliseconds(0)),this._daylightSavingAdjust(a)},_daylightSavingAdjust:function(t){return t?(t.setHours(t.getHours()>12?t.getHours()+2:0),t):null},_setDate:function(t,e,i){var s=!e,n=t.selectedMonth,o=t.selectedYear,a=this._restrictMinMax(t,this._determineDate(t,e,new Date));t.selectedDay=t.currentDay=a.getDate(),t.drawMonth=t.selectedMonth=t.currentMonth=a.getMonth(),t.drawYear=t.selectedYear=t.currentYear=a.getFullYear(),n===t.selectedMonth&&o===t.selectedYear||i||this._notifyChange(t),this._adjustInstDate(t),t.input&&t.input.val(s?"":this._formatDate(t))},_getDate:function(t){var e=!t.currentYear||t.input&&""===t.input.val()?null:this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return e},_attachHandlers:function(e){var i=this._get(e,"stepMonths"),s="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){t.datepicker._adjustDate(s,-i,"M")},next:function(){t.datepicker._adjustDate(s,+i,"M")},hide:function(){t.datepicker._hideDatepicker()},today:function(){t.datepicker._gotoToday(s)},selectDay:function(){return t.datepicker._selectDay(s,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return t.datepicker._selectMonthYear(s,this,"M"),!1},selectYear:function(){return t.datepicker._selectMonthYear(s,this,"Y"),!1}};t(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(t){var e,i,s,n,o,a,r,l,h,c,u,d,p,f,g,m,_,v,b,y,w,k,x,C,D,T,I,M,P,S,N,H,A,z,O,E,W,F,L,R=new Date,Y=this._daylightSavingAdjust(new Date(R.getFullYear(),R.getMonth(),R.getDate())),B=this._get(t,"isRTL"),j=this._get(t,"showButtonPanel"),q=this._get(t,"hideIfNoPrevNext"),K=this._get(t,"navigationAsDateFormat"),U=this._getNumberOfMonths(t),V=this._get(t,"showCurrentAtPos"),X=this._get(t,"stepMonths"),$=1!==U[0]||1!==U[1],G=this._daylightSavingAdjust(t.currentDay?new Date(t.currentYear,t.currentMonth,t.currentDay):new Date(9999,9,9)),J=this._getMinMaxDate(t,"min"),Q=this._getMinMaxDate(t,"max"),Z=t.drawMonth-V,te=t.drawYear;if (0>Z&&(Z+=12,te--),Q)for(e=this._daylightSavingAdjust(new Date(Q.getFullYear(),Q.getMonth()-U[0]*U[1]+1,Q.getDate())),e=J&&J>e?J:e;this._daylightSavingAdjust(new Date(te,Z,1))>e;)Z--,0>Z&&(Z=11,te--);for(t.drawMonth=Z,t.drawYear=te,i=this._get(t,"prevText"),i=K?this.formatDate(i,this._daylightSavingAdjust(new Date(te,Z-X,1)),this._getFormatConfig(t)):i,s=this._canAdjustMonth(t,-1,te,Z)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"e":"w")+"'>"+i+"</span></a>":q?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+i+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"e":"w")+"'>"+i+"</span></a>",n=this._get(t,"nextText"),n=K?this.formatDate(n,this._daylightSavingAdjust(new Date(te,Z+X,1)),this._getFormatConfig(t)):n,o=this._canAdjustMonth(t,1,te,Z)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"w":"e")+"'>"+n+"</span></a>":q?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(B?"w":"e")+"'>"+n+"</span></a>",a=this._get(t,"currentText"),r=this._get(t,"gotoCurrent")&&t.currentDay?G:Y,a=K?this.formatDate(a,r,this._getFormatConfig(t)):a,l=t.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(t,"closeText")+"</button>",h=j?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(B?l:"")+(this._isInRange(t,r)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+a+"</button>":"")+(B?"":l)+"</div>":"",c=parseInt(this._get(t,"firstDay"),10),c=isNaN(c)?0:c,u=this._get(t,"showWeek"),d=this._get(t,"dayNames"),p=this._get(t,"dayNamesMin"),f=this._get(t,"monthNames"),g=this._get(t,"monthNamesShort"),m=this._get(t,"beforeShowDay"),_=this._get(t,"showOtherMonths"),v=this._get(t,"selectOtherMonths"),b=this._getDefaultDate(t),y="",k=0;U[0]>k;k++){for(x="",this.maxRows=4,C=0;U[1]>C;C++){if (D=this._daylightSavingAdjust(new Date(te,Z,t.selectedDay)),T=" ui-corner-all",I="",$){if (I+="<div class='ui-datepicker-group",U[1]>1)switch(C){case 0:I+=" ui-datepicker-group-first",T=" ui-corner-"+(B?"right":"left");break;case U[1]-1:I+=" ui-datepicker-group-last",T=" ui-corner-"+(B?"left":"right");break;default:I+=" ui-datepicker-group-middle",T=""}I+="'>"}for(I+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+T+"'>"+(/all|left/.test(T)&&0===k?B?o:s:"")+(/all|right/.test(T)&&0===k?B?s:o:"")+this._generateMonthYearHeader(t,Z,te,J,Q,k>0||C>0,f,g)+"</div><table class='ui-datepicker-calendar'><thead>"+"<tr>",M=u?"<th class='ui-datepicker-week-col'>"+this._get(t,"weekHeader")+"</th>":"",w=0;7>w;w++)P=(w+c)%7,M+="<th scope='col'"+((w+c+6)%7>=5?" class='ui-datepicker-week-end'":"")+">"+"<span title='"+d[P]+"'>"+p[P]+"</span></th>";for(I+=M+"</tr></thead><tbody>",S=this._getDaysInMonth(te,Z),te===t.selectedYear&&Z===t.selectedMonth&&(t.selectedDay=Math.min(t.selectedDay,S)),N=(this._getFirstDayOfMonth(te,Z)-c+7)%7,H=Math.ceil((N+S)/7),A=$?this.maxRows>H?this.maxRows:H:H,this.maxRows=A,z=this._daylightSavingAdjust(new Date(te,Z,1-N)),O=0;A>O;O++){for(I+="<tr>",E=u?"<td class='ui-datepicker-week-col'>"+this._get(t,"calculateWeek")(z)+"</td>":"",w=0;7>w;w++)W=m?m.apply(t.input?t.input[0]:null,[z]):[!0,""],F=z.getMonth()!==Z,L=F&&!v||!W[0]||J&&J>z||Q&&z>Q,E+="<td class='"+((w+c+6)%7>=5?" ui-datepicker-week-end":"")+(F?" ui-datepicker-other-month":"")+(z.getTime()===D.getTime()&&Z===t.selectedMonth&&t._keyEvent||b.getTime()===z.getTime()&&b.getTime()===D.getTime()?" "+this._dayOverClass:"")+(L?" "+this._unselectableClass+" ui-state-disabled":"")+(F&&!_?"":" "+W[1]+(z.getTime()===G.getTime()?" "+this._currentClass:"")+(z.getTime()===Y.getTime()?" ui-datepicker-today":""))+"'"+(F&&!_||!W[2]?"":" title='"+W[2].replace(/'/g,"&#39;")+"'")+(L?"":" data-handler='selectDay' data-event='click' data-month='"+z.getMonth()+"' data-year='"+z.getFullYear()+"'")+">"+(F&&!_?"&#xa0;":L?"<span class='ui-state-default'>"+z.getDate()+"</span>":"<a class='ui-state-default"+(z.getTime()===Y.getTime()?" ui-state-highlight":"")+(z.getTime()===G.getTime()?" ui-state-active":"")+(F?" ui-priority-secondary":"")+"' href='#'>"+z.getDate()+"</a>")+"</td>",z.setDate(z.getDate()+1),z=this._daylightSavingAdjust(z);I+=E+"</tr>"}Z++,Z>11&&(Z=0,te++),I+="</tbody></table>"+($?"</div>"+(U[0]>0&&C===U[1]-1?"<div class='ui-datepicker-row-break'></div>":""):""),x+=I}y+=x}return y+=h,t._keyEvent=!1,y},_generateMonthYearHeader:function(t,e,i,s,n,o,a,r){var l,h,c,u,d,p,f,g,m=this._get(t,"changeMonth"),_=this._get(t,"changeYear"),v=this._get(t,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",y="";if (o||!m)y+="<span class='ui-datepicker-month'>"+a[e]+"</span>";else{for(l=s&&s.getFullYear()===i,h=n&&n.getFullYear()===i,y+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",c=0;12>c;c++)(!l||c>=s.getMonth())&&(!h||n.getMonth()>=c)&&(y+="<option value='"+c+"'"+(c===e?" selected='selected'":"")+">"+r[c]+"</option>");y+="</select>"}if (v||(b+=y+(!o&&m&&_?"":"&#xa0;")),!t.yearshtml)if (t.yearshtml="",o||!_)b+="<span class='ui-datepicker-year'>"+i+"</span>";else{for(u=this._get(t,"yearRange").split(":"),d=(new Date).getFullYear(),p=function(t){var e=t.match(/c[+\-].*/)?i+parseInt(t.substring(1),10):t.match(/[+\-].*/)?d+parseInt(t,10):parseInt(t,10);return isNaN(e)?d:e},f=p(u[0]),g=Math.max(f,p(u[1]||"")),f=s?Math.max(f,s.getFullYear()):f,g=n?Math.min(g,n.getFullYear()):g,t.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";g>=f;f++)t.yearshtml+="<option value='"+f+"'"+(f===i?" selected='selected'":"")+">"+f+"</option>";t.yearshtml+="</select>",b+=t.yearshtml,t.yearshtml=null}return b+=this._get(t,"yearSuffix"),v&&(b+=(!o&&m&&_?"":"&#xa0;")+y),b+="</div>"},_adjustInstDate:function(t,e,i){var s=t.selectedYear+("Y"===i?e:0),n=t.selectedMonth+("M"===i?e:0),o=Math.min(t.selectedDay,this._getDaysInMonth(s,n))+("D"===i?e:0),a=this._restrictMinMax(t,this._daylightSavingAdjust(new Date(s,n,o)));t.selectedDay=a.getDate(),t.drawMonth=t.selectedMonth=a.getMonth(),t.drawYear=t.selectedYear=a.getFullYear(),("M"===i||"Y"===i)&&this._notifyChange(t)},_restrictMinMax:function(t,e){var i=this._getMinMaxDate(t,"min"),s=this._getMinMaxDate(t,"max"),n=i&&i>e?i:e;return s&&n>s?s:n},_notifyChange:function(t){var e=this._get(t,"onChangeMonthYear");e&&e.apply(t.input?t.input[0]:null,[t.selectedYear,t.selectedMonth+1,t])},_getNumberOfMonths:function(t){var e=this._get(t,"numberOfMonths");return null==e?[1,1]:"number"==typeof e?[1,e]:e},_getMinMaxDate:function(t,e){return this._determineDate(t,this._get(t,e+"Date"),null)},_getDaysInMonth:function(t,e){return 32-this._daylightSavingAdjust(new Date(t,e,32)).getDate()},_getFirstDayOfMonth:function(t,e){return new Date(t,e,1).getDay()},_canAdjustMonth:function(t,e,i,s){var n=this._getNumberOfMonths(t),o=this._daylightSavingAdjust(new Date(i,s+(0>e?e:n[0]*n[1]),1));return 0>e&&o.setDate(this._getDaysInMonth(o.getFullYear(),o.getMonth())),this._isInRange(t,o)},_isInRange:function(t,e){var i,s,n=this._getMinMaxDate(t,"min"),o=this._getMinMaxDate(t,"max"),a=null,r=null,l=this._get(t,"yearRange");return l&&(i=l.split(":"),s=(new Date).getFullYear(),a=parseInt(i[0],10),r=parseInt(i[1],10),i[0].match(/[+\-].*/)&&(a+=s),i[1].match(/[+\-].*/)&&(r+=s)),(!n||e.getTime()>=n.getTime())&&(!o||e.getTime()<=o.getTime())&&(!a||e.getFullYear()>=a)&&(!r||r>=e.getFullYear())},_getFormatConfig:function(t){var e=this._get(t,"shortYearCutoff");return e="string"!=typeof e?e:(new Date).getFullYear()%100+parseInt(e,10),{shortYearCutoff:e,dayNamesShort:this._get(t,"dayNamesShort"),dayNames:this._get(t,"dayNames"),monthNamesShort:this._get(t,"monthNamesShort"),monthNames:this._get(t,"monthNames")}},_formatDate:function(t,e,i,s){e||(t.currentDay=t.selectedDay,t.currentMonth=t.selectedMonth,t.currentYear=t.selectedYear);var n=e?"object"==typeof e?e:this._daylightSavingAdjust(new Date(s,i,e)):this._daylightSavingAdjust(new Date(t.currentYear,t.currentMonth,t.currentDay));return this.formatDate(this._get(t,"dateFormat"),n,this._getFormatConfig(t))}}),t.fn.datepicker=function(e){if (!this.length)return this;t.datepicker.initialized||(t(document).on("mousedown",t.datepicker._checkExternalClick),t.datepicker.initialized=!0),0===t("#"+t.datepicker._mainDivId).length&&t("body").append(t.datepicker.dpDiv);var i=Array.prototype.slice.call(arguments,1);return"string"!=typeof e||"isDisabled"!==e&&"getDate"!==e&&"widget"!==e?"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i)):this.each(function(){"string"==typeof e?t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this].concat(i)):t.datepicker._attachDatepicker(this,e)}):t.datepicker["_"+e+"Datepicker"].apply(t.datepicker,[this[0]].concat(i))},t.datepicker=new s,t.datepicker.initialized=!1,t.datepicker.uuid=(new Date).getTime(),t.datepicker.version="1.12.1",t.datepicker,t.widget("ui.progressbar",{version:"1.12.1",options:{classes:{"ui-progressbar":"ui-corner-all","ui-progressbar-value":"ui-corner-left","ui-progressbar-complete":"ui-corner-right"},max:100,value:0,change:null,complete:null},min:0,_create:function(){this.oldValue=this.options.value=this._constrainedValue(),this.element.attr({role:"progressbar","aria-valuemin":this.min}),this._addClass("ui-progressbar","ui-widget ui-widget-content"),this.valueDiv=t("<div>").appendTo(this.element),this._addClass(this.valueDiv,"ui-progressbar-value","ui-widget-header"),this._refreshValue()},_destroy:function(){this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"),this.valueDiv.remove()},value:function(t){return void 0===t?this.options.value:(this.options.value=this._constrainedValue(t),this._refreshValue(),void 0)},_constrainedValue:function(t){return void 0===t&&(t=this.options.value),this.indeterminate=t===!1,"number"!=typeof t&&(t=0),this.indeterminate?!1:Math.min(this.options.max,Math.max(this.min,t))},_setOptions:function(t){var e=t.value;delete t.value,this._super(t),this.options.value=this._constrainedValue(e),this._refreshValue()},_setOption:function(t,e){"max"===t&&(e=Math.max(this.min,e)),this._super(t,e)},_setOptionDisabled:function(t){this._super(t),this.element.attr("aria-disabled",t),this._toggleClass(null,"ui-state-disabled",!!t)},_percentage:function(){return this.indeterminate?100:100*(this.options.value-this.min)/(this.options.max-this.min)},_refreshValue:function(){var e=this.options.value,i=this._percentage();this.valueDiv.toggle(this.indeterminate||e>this.min).width(i.toFixed(0)+"%"),this._toggleClass(this.valueDiv,"ui-progressbar-complete",null,e===this.options.max)._toggleClass("ui-progressbar-indeterminate",null,this.indeterminate),this.indeterminate?(this.element.removeAttr("aria-valuenow"),this.overlayDiv||(this.overlayDiv=t("<div>").appendTo(this.valueDiv),this._addClass(this.overlayDiv,"ui-progressbar-overlay"))):(this.element.attr({"aria-valuemax":this.options.max,"aria-valuenow":e}),this.overlayDiv&&(this.overlayDiv.remove(),this.overlayDiv=null)),this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),e===this.options.max&&this._trigger("complete")}}),t.widget("ui.slider",t.ui.mouse,{version:"1.12.1",widgetEventPrefix:"slide",options:{animate:!1,classes:{"ui-slider":"ui-corner-all","ui-slider-handle":"ui-corner-all","ui-slider-range":"ui-corner-all ui-widget-header"},distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null,change:null,slide:null,start:null,stop:null},numPages:5,_create:function(){this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this._calculateNewMax(),this._addClass("ui-slider ui-slider-"+this.orientation,"ui-widget ui-widget-content"),this._refresh(),this._animateOff=!1},_refresh:function(){this._createRange(),this._createHandles(),this._setupEvents(),this._refreshValue()},_createHandles:function(){var e,i,s=this.options,n=this.element.find(".ui-slider-handle"),o="<span tabindex='0'></span>",a=[];for(i=s.values&&s.values.length||1,n.length>i&&(n.slice(i).remove(),n=n.slice(0,i)),e=n.length;i>e;e++)a.push(o);this.handles=n.add(t(a.join("")).appendTo(this.element)),this._addClass(this.handles,"ui-slider-handle","ui-state-default"),this.handle=this.handles.eq(0),this.handles.each(function(e){t(this).data("ui-slider-handle-index",e).attr("tabIndex",0)})},_createRange:function(){var e=this.options;e.range?(e.range===!0&&(e.values?e.values.length&&2!==e.values.length?e.values=[e.values[0],e.values[0]]:t.isArray(e.values)&&(e.values=e.values.slice(0)):e.values=[this._valueMin(),this._valueMin()]),this.range&&this.range.length?(this._removeClass(this.range,"ui-slider-range-min ui-slider-range-max"),this.range.css({left:"",bottom:""})):(this.range=t("<div>").appendTo(this.element),this._addClass(this.range,"ui-slider-range")),("min"===e.range||"max"===e.range)&&this._addClass(this.range,"ui-slider-range-"+e.range)):(this.range&&this.range.remove(),this.range=null)},_setupEvents:function(){this._off(this.handles),this._on(this.handles,this._handleEvents),this._hoverable(this.handles),this._focusable(this.handles)},_destroy:function(){this.handles.remove(),this.range&&this.range.remove(),this._mouseDestroy()},_mouseCapture:function(e){var i,s,n,o,a,r,l,h,c=this,u=this.options;return u.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),i={x:e.pageX,y:e.pageY},s=this._normValueFromMouse(i),n=this._valueMax()-this._valueMin()+1,this.handles.each(function(e){var i=Math.abs(s-c.values(e));(n>i||n===i&&(e===c._lastChangedValue||c.values(e)===u.min))&&(n=i,o=t(this),a=e)}),r=this._start(e,a),r===!1?!1:(this._mouseSliding=!0,this._handleIndex=a,this._addClass(o,null,"ui-state-active"),o.trigger("focus"),l=o.offset(),h=!t(e.target).parents().addBack().is(".ui-slider-handle"),this._clickOffset=h?{left:0,top:0}:{left:e.pageX-l.left-o.width()/2,top:e.pageY-l.top-o.height()/2-(parseInt(o.css("borderTopWidth"),10)||0)-(parseInt(o.css("borderBottomWidth"),10)||0)+(parseInt(o.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(e,a,s),this._animateOff=!0,!0))},_mouseStart:function(){return!0},_mouseDrag:function(t){var e={x:t.pageX,y:t.pageY},i=this._normValueFromMouse(e);return this._slide(t,this._handleIndex,i),!1},_mouseStop:function(t){return this._removeClass(this.handles,null,"ui-state-active"),this._mouseSliding=!1,this._stop(t,this._handleIndex),this._change(t,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation="vertical"===this.options.orientation?"vertical":"horizontal"},_normValueFromMouse:function(t){var e,i,s,n,o;return"horizontal"===this.orientation?(e=this.elementSize.width,i=t.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(e=this.elementSize.height,i=t.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),s=i/e,s>1&&(s=1),0>s&&(s=0),"vertical"===this.orientation&&(s=1-s),n=this._valueMax()-this._valueMin(),o=this._valueMin()+s*n,this._trimAlignValue(o)},_uiHash:function(t,e,i){var s={handle:this.handles[t],handleIndex:t,value:void 0!==e?e:this.value()};return this._hasMultipleValues()&&(s.value=void 0!==e?e:this.values(t),s.values=i||this.values()),s},_hasMultipleValues:function(){return this.options.values&&this.options.values.length},_start:function(t,e){return this._trigger("start",t,this._uiHash(e))},_slide:function(t,e,i){var s,n,o=this.value(),a=this.values();this._hasMultipleValues()&&(n=this.values(e?0:1),o=this.values(e),2===this.options.values.length&&this.options.range===!0&&(i=0===e?Math.min(n,i):Math.max(n,i)),a[e]=i),i!==o&&(s=this._trigger("slide",t,this._uiHash(e,i,a)),s!==!1&&(this._hasMultipleValues()?this.values(e,i):this.value(i)))},_stop:function(t,e){this._trigger("stop",t,this._uiHash(e))},_change:function(t,e){this._keySliding||this._mouseSliding||(this._lastChangedValue=e,this._trigger("change",t,this._uiHash(e)))},value:function(t){return arguments.length?(this.options.value=this._trimAlignValue(t),this._refreshValue(),this._change(null,0),void 0):this._value()},values:function(e,i){var s,n,o;if (arguments.length>1)return this.options.values[e]=this._trimAlignValue(i),this._refreshValue(),this._change(null,e),void 0;if (!arguments.length)return this._values();if (!t.isArray(arguments[0]))return this._hasMultipleValues()?this._values(e):this.value();for(s=this.options.values,n=arguments[0],o=0;s.length>o;o+=1)s[o]=this._trimAlignValue(n[o]),this._change(null,o);this._refreshValue()},_setOption:function(e,i){var s,n=0;switch("range"===e&&this.options.range===!0&&("min"===i?(this.options.value=this._values(0),this.options.values=null):"max"===i&&(this.options.value=this._values(this.options.values.length-1),this.options.values=null)),t.isArray(this.options.values)&&(n=this.options.values.length),this._super(e,i),e){case"orientation":this._detectOrientation(),this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-"+this.orientation),this._refreshValue(),this.options.range&&this._refreshRange(i),this.handles.css("horizontal"===i?"bottom":"left","");break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":for(this._animateOff=!0,this._refreshValue(),s=n-1;s>=0;s--)this._change(null,s);this._animateOff=!1;break;case"step":case"min":case"max":this._animateOff=!0,this._calculateNewMax(),this._refreshValue(),this._animateOff=!1;break;case"range":this._animateOff=!0,this._refresh(),this._animateOff=!1}},_setOptionDisabled:function(t){this._super(t),this._toggleClass(null,"ui-state-disabled",!!t)},_value:function(){var t=this.options.value;return t=this._trimAlignValue(t)},_values:function(t){var e,i,s;if (arguments.length)return e=this.options.values[t],e=this._trimAlignValue(e);if (this._hasMultipleValues()){for(i=this.options.values.slice(),s=0;i.length>s;s+=1)i[s]=this._trimAlignValue(i[s]);return i}return[]},_trimAlignValue:function(t){if (this._valueMin()>=t)return this._valueMin();if (t>=this._valueMax())return this._valueMax();var e=this.options.step>0?this.options.step:1,i=(t-this._valueMin())%e,s=t-i;return 2*Math.abs(i)>=e&&(s+=i>0?e:-e),parseFloat(s.toFixed(5))},_calculateNewMax:function(){var t=this.options.max,e=this._valueMin(),i=this.options.step,s=Math.round((t-e)/i)*i;t=s+e,t>this.options.max&&(t-=i),this.max=parseFloat(t.toFixed(this._precision()))},_precision:function(){var t=this._precisionOf(this.options.step);return null!==this.options.min&&(t=Math.max(t,this._precisionOf(this.options.min))),t},_precisionOf:function(t){var e=""+t,i=e.indexOf(".");return-1===i?0:e.length-i-1},_valueMin:function(){return this.options.min},_valueMax:function(){return this.max},_refreshRange:function(t){"vertical"===t&&this.range.css({width:"",left:""}),"horizontal"===t&&this.range.css({height:"",bottom:""})},_refreshValue:function(){var e,i,s,n,o,a=this.options.range,r=this.options,l=this,h=this._animateOff?!1:r.animate,c={};this._hasMultipleValues()?this.handles.each(function(s){i=100*((l.values(s)-l._valueMin())/(l._valueMax()-l._valueMin())),c["horizontal"===l.orientation?"left":"bottom"]=i+"%",t(this).stop(1,1)[h?"animate":"css"](c,r.animate),l.options.range===!0&&("horizontal"===l.orientation?(0===s&&l.range.stop(1,1)[h?"animate":"css"]({left:i+"%"},r.animate),1===s&&l.range[h?"animate":"css"]({width:i-e+"%"},{queue:!1,duration:r.animate})):(0===s&&l.range.stop(1,1)[h?"animate":"css"]({bottom:i+"%"},r.animate),1===s&&l.range[h?"animate":"css"]({height:i-e+"%"},{queue:!1,duration:r.animate}))),e=i}):(s=this.value(),n=this._valueMin(),o=this._valueMax(),i=o!==n?100*((s-n)/(o-n)):0,c["horizontal"===this.orientation?"left":"bottom"]=i+"%",this.handle.stop(1,1)[h?"animate":"css"](c,r.animate),"min"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({width:i+"%"},r.animate),"max"===a&&"horizontal"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({width:100-i+"%"},r.animate),"min"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({height:i+"%"},r.animate),"max"===a&&"vertical"===this.orientation&&this.range.stop(1,1)[h?"animate":"css"]({height:100-i+"%"},r.animate))},_handleEvents:{keydown:function(e){var i,s,n,o,a=t(e.target).data("ui-slider-handle-index");switch(e.keyCode){case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if (e.preventDefault(),!this._keySliding&&(this._keySliding=!0,this._addClass(t(e.target),null,"ui-state-active"),i=this._start(e,a),i===!1))return}switch(o=this.options.step,s=n=this._hasMultipleValues()?this.values(a):this.value(),e.keyCode){case t.ui.keyCode.HOME:n=this._valueMin();break;case t.ui.keyCode.END:n=this._valueMax();break;case t.ui.keyCode.PAGE_UP:n=this._trimAlignValue(s+(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.PAGE_DOWN:n=this._trimAlignValue(s-(this._valueMax()-this._valueMin())/this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:if (s===this._valueMax())return;n=this._trimAlignValue(s+o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:if (s===this._valueMin())return;n=this._trimAlignValue(s-o)}this._slide(e,a,n)},keyup:function(e){var i=t(e.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(e,i),this._change(e,i),this._removeClass(t(e.target),null,"ui-state-active"))}}});var d="ui-effects-",p="ui-effects-style",f="ui-effects-animated",g=t;t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=h(),n=s._rgba=[];return i=i.toLowerCase(),f(l,function(t,o){var a,r=o.re.exec(i),l=r&&o.parse(r),h=o.space||"rgba";return l?(a=s[h](l),s[c[h].cache]=a[c[h].cache],n=s._rgba=a._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,o.transparent),s):o[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var o,a="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,l=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],h=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=h.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}
}),h.fn=t.extend(h.prototype,{parse:function(n,a,r,l){if (n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(a),a=e);var u=this,d=t.type(n),p=this._rgba=[];return a!==e&&(n=[n,a,r,l],d="array"),"string"===d?this.parse(s(n)||o._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof h?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var o=s.cache;f(s.props,function(t,e){if (!u[o]&&s.to){if ("alpha"===t||null==n[t])return;u[o]=s.to(u._rgba)}u[o][e.idx]=i(n[t],e,!0)}),u[o]&&0>t.inArray(null,u[o].slice(0,3))&&(u[o][3]=1,s.from&&(u._rgba=s.from(u[o])))}),this):e},is:function(t){var i=h(t),s=!0,n=this;return f(c,function(t,o){var a,r=i[o.cache];return r&&(a=n[o.cache]||o.to&&o.to(n._rgba)||[],f(o.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===a[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=h(t),n=s._space(),o=c[n],a=0===this.alpha()?h("transparent"):this,r=a[o.cache]||o.to(a._rgba),l=r.slice();return s=s[o.cache],f(o.props,function(t,n){var o=n.idx,a=r[o],h=s[o],c=u[n.type]||{};null!==h&&(null===a?l[o]=h:(c.mod&&(h-a>c.mod/2?a+=c.mod:a-h>c.mod/2&&(a-=c.mod)),l[o]=i((h-a)*e+a,n)))}),this[n](l)},blend:function(e){if (1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=h(e)._rgba;return h(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),h.fn.parse.prototype=h.fn,c.hsla.to=function(t){if (null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,o=t[2]/255,a=t[3],r=Math.max(s,n,o),l=Math.min(s,n,o),h=r-l,c=r+l,u=.5*c;return e=l===r?0:s===r?60*(n-o)/h+360:n===r?60*(o-s)/h+120:60*(s-n)/h+240,i=0===h?0:.5>=u?h/c:h/(2-c),[Math.round(e)%360,i,u,null==a?1:a]},c.hsla.from=function(t){if (null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],o=t[3],a=.5>=s?s*(1+i):s+i-s*i,r=2*s-a;return[Math.round(255*n(r,a,e+1/3)),Math.round(255*n(r,a,e)),Math.round(255*n(r,a,e-1/3)),o]},f(c,function(s,n){var o=n.props,a=n.cache,l=n.to,c=n.from;h.fn[s]=function(s){if (l&&!this[a]&&(this[a]=l(this._rgba)),s===e)return this[a].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[a].slice();return f(o,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=h(c(d)),n[a]=d,n):h(d)},f(o,function(e,i){h.fn[e]||(h.fn[e]=function(n){var o,a=t.type(n),l="alpha"===e?this._hsla?"hsla":"rgba":s,h=this[l](),c=h[i.idx];return"undefined"===a?c:("function"===a&&(n=n.call(this,c),a=t.type(n)),null==n&&i.empty?this:("string"===a&&(o=r.exec(n),o&&(n=c+parseFloat(o[2])*("+"===o[1]?1:-1))),h[i.idx]=n,this[l](h)))})})}),h.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var o,a,r="";if ("transparent"!==n&&("string"!==t.type(n)||(o=s(n)))){if (n=h(o||n),!d.rgba&&1!==n._rgba[3]){for(a="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&a&&a.style;)try{r=t.css(a,"backgroundColor"),a=a.parentNode}catch(l){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(l){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=h(e.elem,i),e.end=h(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},h.hook(a),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},o=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(g),function(){function e(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,o={};if (n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(o[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(o[i]=n[i]);return o}function i(e,i){var s,o,a={};for(s in i)o=i[s],e[s]!==o&&(n[s]||(t.fx.step[s]||!isNaN(parseFloat(o)))&&(a[s]=o));return a}var s=["add","remove","toggle"],n={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(g.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(n,o,a,r){var l=t.speed(o,a,r);return this.queue(function(){var o,a=t(this),r=a.attr("class")||"",h=l.children?a.find("*").addBack():a;h=h.map(function(){var i=t(this);return{el:i,start:e(this)}}),o=function(){t.each(s,function(t,e){n[e]&&a[e+"Class"](n[e])})},o(),h=h.map(function(){return this.end=e(this.el[0]),this.diff=i(this.start,this.end),this}),a.attr("class",r),h=h.map(function(){var e=this,i=t.Deferred(),s=t.extend({},l,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,h.get()).done(function(){o(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),l.complete.call(a[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,o){return s?t.effects.animateClass.call(this,{add:i},s,n,o):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,o){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,o):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(i,s,n,o,a){return"boolean"==typeof s||void 0===s?n?t.effects.animateClass.call(this,s?{add:i}:{remove:i},n,o,a):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:i},s,n,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,o){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,o)}})}(),function(){function e(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function i(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}function s(t,e){var i=e.outerWidth(),s=e.outerHeight(),n=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,o=n.exec(t)||["",0,i,s,0];return{top:parseFloat(o[1])||0,right:"auto"===o[2]?i:parseFloat(o[2]),bottom:"auto"===o[3]?s:parseFloat(o[3]),left:parseFloat(o[4])||0}}t.expr&&t.expr.filters&&t.expr.filters.animated&&(t.expr.filters.animated=function(e){return function(i){return!!t(i).data(f)||e(i)}}(t.expr.filters.animated)),t.uiBackCompat!==!1&&t.extend(t.effects,{save:function(t,e){for(var i=0,s=e.length;s>i;i++)null!==e[i]&&t.data(d+e[i],t[0].style[e[i]])},restore:function(t,e){for(var i,s=0,n=e.length;n>s;s++)null!==e[s]&&(i=t.data(d+e[s]),t.css(e[s],i))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if (e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},o=document.activeElement;try{o.id}catch(a){o=document.body}return e.wrap(s),(e[0]===o||t.contains(e[0],o))&&t(o).trigger("focus"),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,i,s){return s||(s=i,i="effect"),t.effects.effect[e]=s,t.effects.effect[e].mode=i,s},scaledDimensions:function(t,e,i){if (0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var s="horizontal"!==i?(e||100)/100:1,n="vertical"!==i?(e||100)/100:1;return{height:t.height()*n,width:t.width()*s,outerHeight:t.outerHeight()*n,outerWidth:t.outerWidth()*s}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,i){var s=t.queue();e>1&&s.splice.apply(s,[1,0].concat(s.splice(e,i))),t.dequeue()},saveStyle:function(t){t.data(p,t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data(p)||"",t.removeData(p)},mode:function(t,e){var i=t.is(":hidden");return"toggle"===e&&(e=i?"show":"hide"),(i?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createPlaceholder:function(e){var i,s=e.css("position"),n=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(s)&&(s="absolute",i=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),"float":e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data(d+"placeholder",i)),e.css({position:s,left:n.left,top:n.top}),i},removePlaceholder:function(t){var e=d+"placeholder",i=t.data(e);i&&(i.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var o=e.cssUnit(i);o[0]>0&&(n[i]=o[0]*s+o[1])}),n}}),t.fn.extend({effect:function(){function i(e){function i(){r.removeData(f),t.effects.cleanUp(r),"hide"===s.mode&&r.hide(),a()}function a(){t.isFunction(l)&&l.call(r[0]),t.isFunction(e)&&e()}var r=t(this);s.mode=c.shift(),t.uiBackCompat===!1||o?"none"===s.mode?(r[h](),a()):n.call(r[0],s,i):(r.is(":hidden")?"hide"===h:"show"===h)?(r[h](),a()):n.call(r[0],s,a)}var s=e.apply(this,arguments),n=t.effects.effect[s.effect],o=n.mode,a=s.queue,r=a||"fx",l=s.complete,h=s.mode,c=[],u=function(e){var i=t(this),s=t.effects.mode(i,h)||o;i.data(f,!0),c.push(s),o&&("show"===s||s===o&&"hide"===s)&&i.show(),o&&"none"===s||t.effects.saveStyle(i),t.isFunction(e)&&e()};return t.fx.off||!n?h?this[h](s.duration,l):this.each(function(){l&&l.call(this)}):a===!1?this.each(u).each(i):this.queue(r,u).queue(r,i)},show:function(t){return function(s){if (i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(t.fn.show),hide:function(t){return function(s){if (i(s))return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(t.fn.hide),toggle:function(t){return function(s){if (i(s)||"boolean"==typeof s)return t.apply(this,arguments);var n=e.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):s(this.css("clip"),this)},transfer:function(e,i){var s=t(this),n=t(e.to),o="fixed"===n.css("position"),a=t("body"),r=o?a.scrollTop():0,l=o?a.scrollLeft():0,h=n.offset(),c={top:h.top-r,left:h.left-l,height:n.innerHeight(),width:n.innerWidth()},u=s.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:u.top-r,left:u.left-l,height:s.innerHeight(),width:s.innerWidth(),position:o?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){d.remove(),t.isFunction(i)&&i()})}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=s(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}();var m=t.effects;t.effects.define("blind","hide",function(e,i){var s={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},n=t(this),o=e.direction||"up",a=n.cssClip(),r={clip:t.extend({},a)},l=t.effects.createPlaceholder(n);r.clip[s[o][0]]=r.clip[s[o][1]],"show"===e.mode&&(n.cssClip(r.clip),l&&l.css(t.effects.clipToBox(r)),r.clip=a),l&&l.animate(t.effects.clipToBox(r),e.duration,e.easing),n.animate(r,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("bounce",function(e,i){var s,n,o,a=t(this),r=e.mode,l="hide"===r,h="show"===r,c=e.direction||"up",u=e.distance,d=e.times||5,p=2*d+(h||l?1:0),f=e.duration/p,g=e.easing,m="up"===c||"down"===c?"top":"left",_="up"===c||"left"===c,v=0,b=a.queue().length;for(t.effects.createPlaceholder(a),o=a.css(m),u||(u=a["top"===m?"outerHeight":"outerWidth"]()/3),h&&(n={opacity:1},n[m]=o,a.css("opacity",0).css(m,_?2*-u:2*u).animate(n,f,g)),l&&(u/=Math.pow(2,d-1)),n={},n[m]=o;d>v;v++)s={},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g).animate(n,f,g),u=l?2*u:u/2;l&&(s={opacity:0},s[m]=(_?"-=":"+=")+u,a.animate(s,f,g)),a.queue(i),t.effects.unshift(a,b,p+1)}),t.effects.define("clip","hide",function(e,i){var s,n={},o=t(this),a=e.direction||"vertical",r="both"===a,l=r||"horizontal"===a,h=r||"vertical"===a;s=o.cssClip(),n.clip={top:h?(s.bottom-s.top)/2:s.top,right:l?(s.right-s.left)/2:s.right,bottom:h?(s.bottom-s.top)/2:s.bottom,left:l?(s.right-s.left)/2:s.left},t.effects.createPlaceholder(o),"show"===e.mode&&(o.cssClip(n.clip),n.clip=s),o.animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("drop","hide",function(e,i){var s,n=t(this),o=e.mode,a="show"===o,r=e.direction||"left",l="up"===r||"down"===r?"top":"left",h="up"===r||"left"===r?"-=":"+=",c="+="===h?"-=":"+=",u={opacity:0};t.effects.createPlaceholder(n),s=e.distance||n["top"===l?"outerHeight":"outerWidth"](!0)/2,u[l]=h+s,a&&(n.css(u),u[l]=c+s,u.opacity=1),n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("explode","hide",function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),i()}var o,a,r,l,h,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=e.mode,g="show"===f,m=p.show().css("visibility","hidden").offset(),_=Math.ceil(p.outerWidth()/d),v=Math.ceil(p.outerHeight()/u),b=[];for(o=0;u>o;o++)for(l=m.top+o*v,c=o-(u-1)/2,a=0;d>a;a++)r=m.left+a*_,h=a-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-a*_,top:-o*v}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:_,height:v,left:r+(g?h*_:0),top:l+(g?c*v:0),opacity:g?0:1}).animate({left:r+(g?0:h*_),top:l+(g?0:c*v),opacity:g?1:0},e.duration||500,e.easing,s)}),t.effects.define("fade","toggle",function(e,i){var s="show"===e.mode;t(this).css("opacity",s?0:1).animate({opacity:s?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("fold","hide",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=e.size||15,l=/([0-9]+)%/.exec(r),h=!!e.horizFirst,c=h?["right","bottom"]:["bottom","right"],u=e.duration/2,d=t.effects.createPlaceholder(s),p=s.cssClip(),f={clip:t.extend({},p)},g={clip:t.extend({},p)},m=[p[c[0]],p[c[1]]],_=s.queue().length;l&&(r=parseInt(l[1],10)/100*m[a?0:1]),f.clip[c[0]]=r,g.clip[c[0]]=r,g.clip[c[1]]=0,o&&(s.cssClip(g.clip),d&&d.css(t.effects.clipToBox(g)),g.clip=p),s.queue(function(i){d&&d.animate(t.effects.clipToBox(f),u,e.easing).animate(t.effects.clipToBox(g),u,e.easing),i()}).animate(f,u,e.easing).animate(g,u,e.easing).queue(i),t.effects.unshift(s,_,4)}),t.effects.define("highlight","show",function(e,i){var s=t(this),n={backgroundColor:s.css("backgroundColor")};"hide"===e.mode&&(n.opacity=0),t.effects.saveStyle(s),s.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(n,{queue:!1,duration:e.duration,easing:e.easing,complete:i})}),t.effects.define("size",function(e,i){var s,n,o,a=t(this),r=["fontSize"],l=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],h=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],c=e.mode,u="effect"!==c,d=e.scale||"both",p=e.origin||["middle","center"],f=a.css("position"),g=a.position(),m=t.effects.scaledDimensions(a),_=e.from||m,v=e.to||t.effects.scaledDimensions(a,0);t.effects.createPlaceholder(a),"show"===c&&(o=_,_=v,v=o),n={from:{y:_.height/m.height,x:_.width/m.width},to:{y:v.height/m.height,x:v.width/m.width}},("box"===d||"both"===d)&&(n.from.y!==n.to.y&&(_=t.effects.setTransition(a,l,n.from.y,_),v=t.effects.setTransition(a,l,n.to.y,v)),n.from.x!==n.to.x&&(_=t.effects.setTransition(a,h,n.from.x,_),v=t.effects.setTransition(a,h,n.to.x,v))),("content"===d||"both"===d)&&n.from.y!==n.to.y&&(_=t.effects.setTransition(a,r,n.from.y,_),v=t.effects.setTransition(a,r,n.to.y,v)),p&&(s=t.effects.getBaseline(p,m),_.top=(m.outerHeight-_.outerHeight)*s.y+g.top,_.left=(m.outerWidth-_.outerWidth)*s.x+g.left,v.top=(m.outerHeight-v.outerHeight)*s.y+g.top,v.left=(m.outerWidth-v.outerWidth)*s.x+g.left),a.css(_),("content"===d||"both"===d)&&(l=l.concat(["marginTop","marginBottom"]).concat(r),h=h.concat(["marginLeft","marginRight"]),a.find("*[width]").each(function(){var i=t(this),s=t.effects.scaledDimensions(i),o={height:s.height*n.from.y,width:s.width*n.from.x,outerHeight:s.outerHeight*n.from.y,outerWidth:s.outerWidth*n.from.x},a={height:s.height*n.to.y,width:s.width*n.to.x,outerHeight:s.height*n.to.y,outerWidth:s.width*n.to.x};n.from.y!==n.to.y&&(o=t.effects.setTransition(i,l,n.from.y,o),a=t.effects.setTransition(i,l,n.to.y,a)),n.from.x!==n.to.x&&(o=t.effects.setTransition(i,h,n.from.x,o),a=t.effects.setTransition(i,h,n.to.x,a)),u&&t.effects.saveStyle(i),i.css(o),i.animate(a,e.duration,e.easing,function(){u&&t.effects.restoreStyle(i)})})),a.animate(v,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=a.offset();0===v.opacity&&a.css("opacity",_.opacity),u||(a.css("position","static"===f?"relative":f).offset(e),t.effects.saveStyle(a)),i()}})}),t.effects.define("scale",function(e,i){var s=t(this),n=e.mode,o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"effect"!==n?0:100),a=t.extend(!0,{from:t.effects.scaledDimensions(s),to:t.effects.scaledDimensions(s,o,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(a.from.opacity=1,a.to.opacity=0),t.effects.effect.size.call(this,a,i)}),t.effects.define("puff","hide",function(e,i){var s=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,s,i)}),t.effects.define("pulsate","show",function(e,i){var s=t(this),n=e.mode,o="show"===n,a="hide"===n,r=o||a,l=2*(e.times||5)+(r?1:0),h=e.duration/l,c=0,u=1,d=s.queue().length;for((o||!s.is(":visible"))&&(s.css("opacity",0).show(),c=1);l>u;u++)s.animate({opacity:c},h,e.easing),c=1-c;s.animate({opacity:c},h,e.easing),s.queue(i),t.effects.unshift(s,d,l+1)}),t.effects.define("shake",function(e,i){var s=1,n=t(this),o=e.direction||"left",a=e.distance||20,r=e.times||3,l=2*r+1,h=Math.round(e.duration/l),c="up"===o||"down"===o?"top":"left",u="up"===o||"left"===o,d={},p={},f={},g=n.queue().length;for(t.effects.createPlaceholder(n),d[c]=(u?"-=":"+=")+a,p[c]=(u?"+=":"-=")+2*a,f[c]=(u?"-=":"+=")+2*a,n.animate(d,h,e.easing);r>s;s++)n.animate(p,h,e.easing).animate(f,h,e.easing);n.animate(p,h,e.easing).animate(d,h/2,e.easing).queue(i),t.effects.unshift(n,g,l+1)}),t.effects.define("slide","show",function(e,i){var s,n,o=t(this),a={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},r=e.mode,l=e.direction||"left",h="up"===l||"down"===l?"top":"left",c="up"===l||"left"===l,u=e.distance||o["top"===h?"outerHeight":"outerWidth"](!0),d={};t.effects.createPlaceholder(o),s=o.cssClip(),n=o.position()[h],d[h]=(c?-1:1)*u+n,d.clip=o.cssClip(),d.clip[a[l][1]]=d.clip[a[l][0]],"show"===r&&(o.cssClip(d.clip),o.css(h,d[h]),d.clip=s,d[h]=n),o.animate(d,{queue:!1,duration:e.duration,easing:e.easing,complete:i})});var m;t.uiBackCompat!==!1&&(m=t.effects.define("transfer",function(e,i){t(this).transfer(e,i)}))});



/**
 * Class Inheritance
 * @param descendant
 * @param parent
 * @example viewer.js
 */
function inherits(descendant, parent) {
	var keys = [];

	// Only iterate the keys if we were given an object, and
	// a special check for null, as typeof null == "object"
	if (typeof parent === "object" && parent !== null) {	
		// Use a standard for in loop
		for (var x in parent) {
			// A for in will iterate over members on the prototype
			// chain as well, but Object.getOwnPropertyNames returns
			// only those directly on the object, so use hasOwnProperty.
			if (parent.hasOwnProperty(x)) {
				keys.push(x);
			}
		}
	}
	
	for (var i=0; i<keys.length; i++){
		descendant[keys[i]]=parent[keys[i]];
	}
	
	descendant["parent"]=parent;
};









if (!String.prototype.padStart){
	String.prototype.padStart = function padStart(targetLength,padString) {
		targetLength = targetLength>>0; //truncate if number or convert non-number to 0;
		padString = String((typeof padString !== 'undefined' ? padString : ' '));
		if (this.length > targetLength) {
			return String(this);
		}
		else {
			targetLength = targetLength-this.length;
			if (targetLength > padString.length) {
				padString += padString.repeat(targetLength/padString.length); //append to original to ensure we are longer than needed
			}
			return padString.slice(0,targetLength) + String(this);
		}
	};
}
 

/*! VelocityJS.org (1.2.3). (C) 2014 Julian Shapiro. MIT @license: en.wikipedia.org/wiki/MIT_License */
/*! VelocityJS.org jQuery Shim (1.0.1). (C) 2014 The jQuery Foundation. MIT @license: en.wikipedia.org/wiki/MIT_License. */
!function(a){function b(a){var b=a.length,d=c.type(a);return"function"===d||c.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===d||0===b||"number"==typeof b&&b>0&&b-1 in a}if (!a.jQuery){var c=function(a,b){return new c.fn.init(a,b)};c.isWindow=function(a){return null!=a&&a==a.window},c.type=function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?e[g.call(a)]||"object":typeof a},c.isArray=Array.isArray||function(a){return"array"===c.type(a)},c.isPlainObject=function(a){var b;if (!a||"object"!==c.type(a)||a.nodeType||c.isWindow(a))return!1;try{if (a.constructor&&!f.call(a,"constructor")&&!f.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(d){return!1}for(b in a);return void 0===b||f.call(a,b)},c.each=function(a,c,d){var e,f=0,g=a.length,h=b(a);if (d){if (h)for(;g>f&&(e=c.apply(a[f],d),e!==!1);f++);else for(f in a)if (e=c.apply(a[f],d),e===!1)break}else if (h)for(;g>f&&(e=c.call(a[f],f,a[f]),e!==!1);f++);else for(f in a)if (e=c.call(a[f],f,a[f]),e===!1)break;return a},c.data=function(a,b,e){if (void 0===e){var f=a[c.expando],g=f&&d[f];if (void 0===b)return g;if (g&&b in g)return g[b]}else if (void 0!==b){var f=a[c.expando]||(a[c.expando]=++c.uuid);return d[f]=d[f]||{},d[f][b]=e,e}},c.removeData=function(a,b){var e=a[c.expando],f=e&&d[e];f&&c.each(b,function(a,b){delete f[b]})},c.extend=function(){var a,b,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;for("boolean"==typeof h&&(k=h,h=arguments[i]||{},i++),"object"!=typeof h&&"function"!==c.type(h)&&(h={}),i===j&&(h=this,i--);j>i;i++)if (null!=(f=arguments[i]))for(e in f)a=h[e],d=f[e],h!==d&&(k&&d&&(c.isPlainObject(d)||(b=c.isArray(d)))?(b?(b=!1,g=a&&c.isArray(a)?a:[]):g=a&&c.isPlainObject(a)?a:{},h[e]=c.extend(k,g,d)):void 0!==d&&(h[e]=d));return h},c.queue=function(a,d,e){function f(a,c){var d=c||[];return null!=a&&(b(Object(a))?!function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;)a[e++]=b[d++];if (c!==c)for(;void 0!==b[d];)a[e++]=b[d++];return a.length=e,a}(d,"string"==typeof a?[a]:a):[].push.call(d,a)),d}if (a){d=(d||"fx")+"queue";var g=c.data(a,d);return e?(!g||c.isArray(e)?g=c.data(a,d,f(e)):g.push(e),g):g||[]}},c.dequeue=function(a,b){c.each(a.nodeType?[a]:a,function(a,d){b=b||"fx";var e=c.queue(d,b),f=e.shift();"inprogress"===f&&(f=e.shift()),f&&("fx"===b&&e.unshift("inprogress"),f.call(d,function(){c.dequeue(d,b)}))})},c.fn=c.prototype={init:function(a){if (a.nodeType)return this[0]=a,this;throw new Error("Not a DOM node.")},offset:function(){var b=this[0].getBoundingClientRect?this[0].getBoundingClientRect():{top:0,left:0};return{top:b.top+(a.pageYOffset||document.scrollTop||0)-(document.clientTop||0),left:b.left+(a.pageXOffset||document.scrollLeft||0)-(document.clientLeft||0)}},position:function(){function a(){for(var a=this.offsetParent||document;a&&"html"===!a.nodeType.toLowerCase&&"static"===a.style.position;)a=a.offsetParent;return a||document}var b=this[0],a=a.apply(b),d=this.offset(),e=/^(?:body|html)$/i.test(a.nodeName)?{top:0,left:0}:c(a).offset();return d.top-=parseFloat(b.style.marginTop)||0,d.left-=parseFloat(b.style.marginLeft)||0,a.style&&(e.top+=parseFloat(a.style.borderTopWidth)||0,e.left+=parseFloat(a.style.borderLeftWidth)||0),{top:d.top-e.top,left:d.left-e.left}}};var d={};c.expando="velocity"+(new Date).getTime(),c.uuid=0;for(var e={},f=e.hasOwnProperty,g=e.toString,h="Boolean Number String Function Array Date RegExp Object Error".split(" "),i=0;i<h.length;i++)e["[object "+h[i]+"]"]=h[i].toLowerCase();c.fn.init.prototype=c.fn,a.Velocity={Utilities:c}}}(window),function(a){"object"==typeof module&&"object"==typeof module.exports?module.exports=a():"function"==typeof define&&define.amd?define(a):a()}(function(){return function(a,b,c,d){function e(a){for(var b=-1,c=a?a.length:0,d=[];++b<c;){var e=a[b];e&&d.push(e)}return d}function f(a){return p.isWrapped(a)?a=[].slice.call(a):p.isNode(a)&&(a=[a]),a}function g(a){var b=m.data(a,"velocity");return null===b?d:b}function h(a){return function(b){return Math.round(b*a)*(1/a)}}function i(a,c,d,e){function f(a,b){return 1-3*b+3*a}function g(a,b){return 3*b-6*a}function h(a){return 3*a}function i(a,b,c){return((f(b,c)*a+g(b,c))*a+h(b))*a}function j(a,b,c){return 3*f(b,c)*a*a+2*g(b,c)*a+h(b)}function k(b,c){for(var e=0;p>e;++e){var f=j(c,a,d);if (0===f)return c;var g=i(c,a,d)-b;c-=g/f}return c}function l(){for(var b=0;t>b;++b)x[b]=i(b*u,a,d)}function m(b,c,e){var f,g,h=0;do g=c+(e-c)/2,f=i(g,a,d)-b,f>0?e=g:c=g;while(Math.abs(f)>r&&++h<s);return g}function n(b){for(var c=0,e=1,f=t-1;e!=f&&x[e]<=b;++e)c+=u;--e;var g=(b-x[e])/(x[e+1]-x[e]),h=c+g*u,i=j(h,a,d);return i>=q?k(b,h):0==i?h:m(b,c,c+u)}function o(){y=!0,(a!=c||d!=e)&&l()}var p=4,q=.001,r=1e-7,s=10,t=11,u=1/(t-1),v="Float32Array"in b;if (4!==arguments.length)return!1;for(var w=0;4>w;++w)if ("number"!=typeof arguments[w]||isNaN(arguments[w])||!isFinite(arguments[w]))return!1;a=Math.min(a,1),d=Math.min(d,1),a=Math.max(a,0),d=Math.max(d,0);var x=v?new Float32Array(t):new Array(t),y=!1,z=function(b){return y||o(),a===c&&d===e?b:0===b?0:1===b?1:i(n(b),c,e)};z.getControlPoints=function(){return[{x:a,y:c},{x:d,y:e}]};var A="generateBezier("+[a,c,d,e]+")";return z.toString=function(){return A},z}function j(a,b){var c=a;return p.isString(a)?t.Easings[a]||(c=!1):c=p.isArray(a)&&1===a.length?h.apply(null,a):p.isArray(a)&&2===a.length?u.apply(null,a.concat([b])):p.isArray(a)&&4===a.length?i.apply(null,a):!1,c===!1&&(c=t.Easings[t.defaults.easing]?t.defaults.easing:s),c}function k(a){if (a){var b=(new Date).getTime(),c=t.State.calls.length;c>1e4&&(t.State.calls=e(t.State.calls));for(var f=0;c>f;f++)if (t.State.calls[f]){var h=t.State.calls[f],i=h[0],j=h[2],n=h[3],o=!!n,q=null;n||(n=t.State.calls[f][3]=b-16);for(var r=Math.min((b-n)/j.duration,1),s=0,u=i.length;u>s;s++){var w=i[s],y=w.element;if (g(y)){var z=!1;if (j.display!==d&&null!==j.display&&"none"!==j.display){if ("flex"===j.display){var A=["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex"];m.each(A,function(a,b){v.setPropertyValue(y,"display",b)})}v.setPropertyValue(y,"display",j.display)}j.visibility!==d&&"hidden"!==j.visibility&&v.setPropertyValue(y,"visibility",j.visibility);for(var B in w)if ("element"!==B){var C,D=w[B],E=p.isString(D.easing)?t.Easings[D.easing]:D.easing;if (1===r)C=D.endValue;else{var F=D.endValue-D.startValue;if (C=D.startValue+F*E(r,j,F),!o&&C===D.currentValue)continue}if (D.currentValue=C,"tween"===B)q=C;else{if (v.Hooks.registered[B]){var G=v.Hooks.getRoot(B),H=g(y).rootPropertyValueCache[G];H&&(D.rootPropertyValue=H)}var I=v.setPropertyValue(y,B,D.currentValue+(0===parseFloat(C)?"":D.unitType),D.rootPropertyValue,D.scrollData);v.Hooks.registered[B]&&(g(y).rootPropertyValueCache[G]=v.Normalizations.registered[G]?v.Normalizations.registered[G]("extract",null,I[1]):I[1]),"transform"===I[0]&&(z=!0)}}j.mobileHA&&g(y).transformCache.translate3d===d&&(g(y).transformCache.translate3d="(0px, 0px, 0px)",z=!0),z&&v.flushTransformCache(y)}}j.display!==d&&"none"!==j.display&&(t.State.calls[f][2].display=!1),j.visibility!==d&&"hidden"!==j.visibility&&(t.State.calls[f][2].visibility=!1),j.progress&&j.progress.call(h[1],h[1],r,Math.max(0,n+j.duration-b),n,q),1===r&&l(f)}}t.State.isTicking&&x(k)}function l(a,b){if (!t.State.calls[a])return!1;for(var c=t.State.calls[a][0],e=t.State.calls[a][1],f=t.State.calls[a][2],h=t.State.calls[a][4],i=!1,j=0,k=c.length;k>j;j++){var l=c[j].element;if (b||f.loop||("none"===f.display&&v.setPropertyValue(l,"display",f.display),"hidden"===f.visibility&&v.setPropertyValue(l,"visibility",f.visibility)),f.loop!==!0&&(m.queue(l)[1]===d||!/\.velocityQueueEntryFlag/i.test(m.queue(l)[1]))&&g(l)){g(l).isAnimating=!1,g(l).rootPropertyValueCache={};var n=!1;m.each(v.Lists.transforms3D,function(a,b){var c=/^scale/.test(b)?1:0,e=g(l).transformCache[b];g(l).transformCache[b]!==d&&new RegExp("^\\("+c+"[^.]").test(e)&&(n=!0,delete g(l).transformCache[b])}),f.mobileHA&&(n=!0,delete g(l).transformCache.translate3d),n&&v.flushTransformCache(l),v.Values.removeClass(l,"velocity-animating")}if (!b&&f.complete&&!f.loop&&j===k-1)try{f.complete.call(e,e)}catch(o){setTimeout(function(){throw o},1)}h&&f.loop!==!0&&h(e),g(l)&&f.loop===!0&&!b&&(m.each(g(l).tweensContainer,function(a,b){/^rotate/.test(a)&&360===parseFloat(b.endValue)&&(b.endValue=0,b.startValue=360),/^backgroundPosition/.test(a)&&100===parseFloat(b.endValue)&&"%"===b.unitType&&(b.endValue=0,b.startValue=100)}),t(l,"reverse",{loop:!0,delay:f.delay})),f.queue!==!1&&m.dequeue(l,f.queue)}t.State.calls[a]=!1;for(var p=0,q=t.State.calls.length;q>p;p++)if (t.State.calls[p]!==!1){i=!0;break}i===!1&&(t.State.isTicking=!1,delete t.State.calls,t.State.calls=[])}var m,n=function(){if (c.documentMode)return c.documentMode;for(var a=7;a>4;a--){var b=c.createElement("div");if (b.innerHTML="<!--[if IE "+a+"]><span></span><![endif]-->",b.getElementsByTagName("span").length)return b=null,a}return d}(),o=function(){var a=0;return b.webkitRequestAnimationFrame||b.mozRequestAnimationFrame||function(b){var c,d=(new Date).getTime();return c=Math.max(0,16-(d-a)),a=d+c,setTimeout(function(){b(d+c)},c)}}(),p={isString:function(a){return"string"==typeof a},isArray:Array.isArray||function(a){return"[object Array]"===Object.prototype.toString.call(a)},isFunction:function(a){return"[object Function]"===Object.prototype.toString.call(a)},isNode:function(a){return a&&a.nodeType},isNodeList:function(a){return"object"==typeof a&&/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(a))&&a.length!==d&&(0===a.length||"object"==typeof a[0]&&a[0].nodeType>0)},isWrapped:function(a){return a&&(a.jquery||b.Zepto&&b.Zepto.zepto.isZ(a))},isSVG:function(a){return b.SVGElement&&a instanceof b.SVGElement},isEmptyObject:function(a){for(var b in a)return!1;return!0}},q=!1;if (a.fn&&a.fn.jquery?(m=a,q=!0):m=b.Velocity.Utilities,8>=n&&!q)throw new Error("Velocity: IE8 and below require jQuery to be loaded before Velocity.");if (7>=n)return void(jQuery.fn.velocity=jQuery.fn.animate);var r=400,s="swing",t={State:{isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isAndroid:/Android/i.test(navigator.userAgent),isGingerbread:/Android 2\.3\.[3-7]/i.test(navigator.userAgent),isChrome:b.chrome,isFirefox:/Firefox/i.test(navigator.userAgent),prefixElement:c.createElement("div"),prefixMatches:{},scrollAnchor:null,scrollPropertyLeft:null,scrollPropertyTop:null,isTicking:!1,calls:[]},CSS:{},Utilities:m,Redirects:{},Easings:{},Promise:b.Promise,defaults:{queue:"",duration:r,easing:s,begin:d,complete:d,progress:d,display:d,visibility:d,loop:!1,delay:!1,mobileHA:!0,_cacheValues:!0},init:function(a){m.data(a,"velocity",{isSVG:p.isSVG(a),isAnimating:!1,computedStyle:null,tweensContainer:null,rootPropertyValueCache:{},transformCache:{}})},hook:null,mock:!1,version:{major:1,minor:2,patch:2},debug:!1};b.pageYOffset!==d?(t.State.scrollAnchor=b,t.State.scrollPropertyLeft="pageXOffset",t.State.scrollPropertyTop="pageYOffset"):(t.State.scrollAnchor=c.documentElement||c.body.parentNode||c.body,t.State.scrollPropertyLeft="scrollLeft",t.State.scrollPropertyTop="scrollTop");var u=function(){function a(a){return-a.tension*a.x-a.friction*a.v}function b(b,c,d){var e={x:b.x+d.dx*c,v:b.v+d.dv*c,tension:b.tension,friction:b.friction};return{dx:e.v,dv:a(e)}}function c(c,d){var e={dx:c.v,dv:a(c)},f=b(c,.5*d,e),g=b(c,.5*d,f),h=b(c,d,g),i=1/6*(e.dx+2*(f.dx+g.dx)+h.dx),j=1/6*(e.dv+2*(f.dv+g.dv)+h.dv);return c.x=c.x+i*d,c.v=c.v+j*d,c}return function d(a,b,e){var f,g,h,i={x:-1,v:0,tension:null,friction:null},j=[0],k=0,l=1e-4,m=.016;for(a=parseFloat(a)||500,b=parseFloat(b)||20,e=e||null,i.tension=a,i.friction=b,f=null!==e,f?(k=d(a,b),g=k/e*m):g=m;;)if (h=c(h||i,g),j.push(1+h.x),k+=16,!(Math.abs(h.x)>l&&Math.abs(h.v)>l))break;return f?function(a){return j[a*(j.length-1)|0]}:k}}();t.Easings={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},spring:function(a){return 1-Math.cos(4.5*a*Math.PI)*Math.exp(6*-a)}},m.each([["ease",[.25,.1,.25,1]],["ease-in",[.42,0,1,1]],["ease-out",[0,0,.58,1]],["ease-in-out",[.42,0,.58,1]],["easeInSine",[.47,0,.745,.715]],["easeOutSine",[.39,.575,.565,1]],["easeInOutSine",[.445,.05,.55,.95]],["easeInQuad",[.55,.085,.68,.53]],["easeOutQuad",[.25,.46,.45,.94]],["easeInOutQuad",[.455,.03,.515,.955]],["easeInCubic",[.55,.055,.675,.19]],["easeOutCubic",[.215,.61,.355,1]],["easeInOutCubic",[.645,.045,.355,1]],["easeInQuart",[.895,.03,.685,.22]],["easeOutQuart",[.165,.84,.44,1]],["easeInOutQuart",[.77,0,.175,1]],["easeInQuint",[.755,.05,.855,.06]],["easeOutQuint",[.23,1,.32,1]],["easeInOutQuint",[.86,0,.07,1]],["easeInExpo",[.95,.05,.795,.035]],["easeOutExpo",[.19,1,.22,1]],["easeInOutExpo",[1,0,0,1]],["easeInCirc",[.6,.04,.98,.335]],["easeOutCirc",[.075,.82,.165,1]],["easeInOutCirc",[.785,.135,.15,.86]]],function(a,b){t.Easings[b[0]]=i.apply(null,b[1])});var v=t.CSS={RegEx:{isHex:/^#([A-f\d]{3}){1,2}$/i,valueUnwrap:/^[A-z]+\((.*)\)$/i,wrappedValueAlreadyExtracted:/[0-9.]+ [0-9.]+ [0-9.]+( [0-9.]+)?/,valueSplit:/([A-z]+\(.+\))|(([A-z0-9#-.]+?)(?=\s|$))/gi},Lists:{colors:["fill","stroke","stopColor","color","backgroundColor","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","outlineColor"],transformsBase:["translateX","translateY","scale","scaleX","scaleY","skewX","skewY","rotateZ"],transforms3D:["transformPerspective","translateZ","scaleZ","rotateX","rotateY"]},Hooks:{templates:{textShadow:["Color X Y Blur","black 0px 0px 0px"],boxShadow:["Color X Y Blur Spread","black 0px 0px 0px 0px"],clip:["Top Right Bottom Left","0px 0px 0px 0px"],backgroundPosition:["X Y","0% 0%"],transformOrigin:["X Y Z","50% 50% 0px"],perspectiveOrigin:["X Y","50% 50%"]},registered:{},register:function(){for(var a=0;a<v.Lists.colors.length;a++){var b="color"===v.Lists.colors[a]?"0 0 0 1":"255 255 255 1";v.Hooks.templates[v.Lists.colors[a]]=["Red Green Blue Alpha",b]}var c,d,e;if (n)for(c in v.Hooks.templates){d=v.Hooks.templates[c],e=d[0].split(" ");var f=d[1].match(v.RegEx.valueSplit);"Color"===e[0]&&(e.push(e.shift()),f.push(f.shift()),v.Hooks.templates[c]=[e.join(" "),f.join(" ")])}for(c in v.Hooks.templates){d=v.Hooks.templates[c],e=d[0].split(" ");for(var a in e){var g=c+e[a],h=a;v.Hooks.registered[g]=[c,h]}}},getRoot:function(a){var b=v.Hooks.registered[a];return b?b[0]:a},cleanRootPropertyValue:function(a,b){return v.RegEx.valueUnwrap.test(b)&&(b=b.match(v.RegEx.valueUnwrap)[1]),v.Values.isCSSNullValue(b)&&(b=v.Hooks.templates[a][1]),b},extractValue:function(a,b){var c=v.Hooks.registered[a];if (c){var d=c[0],e=c[1];return b=v.Hooks.cleanRootPropertyValue(d,b),b.toString().match(v.RegEx.valueSplit)[e]}return b},injectValue:function(a,b,c){var d=v.Hooks.registered[a];if (d){var e,f,g=d[0],h=d[1];return c=v.Hooks.cleanRootPropertyValue(g,c),e=c.toString().match(v.RegEx.valueSplit),e[h]=b,f=e.join(" ")}return c}},Normalizations:{registered:{clip:function(a,b,c){switch(a){case"name":return"clip";case"extract":var d;return v.RegEx.wrappedValueAlreadyExtracted.test(c)?d=c:(d=c.toString().match(v.RegEx.valueUnwrap),d=d?d[1].replace(/,(\s+)?/g," "):c),d;case"inject":return"rect("+c+")"}},blur:function(a,b,c){switch(a){case"name":return t.State.isFirefox?"filter":"-webkit-filter";case"extract":var d=parseFloat(c);if (!d&&0!==d){var e=c.toString().match(/blur\(([0-9]+[A-z]+)\)/i);d=e?e[1]:0}return d;case"inject":return parseFloat(c)?"blur("+c+")":"none"}},opacity:function(a,b,c){if (8>=n)switch(a){case"name":return"filter";case"extract":var d=c.toString().match(/alpha\(opacity=(.*)\)/i);return c=d?d[1]/100:1;case"inject":return b.style.zoom=1,parseFloat(c)>=1?"":"alpha(opacity="+parseInt(100*parseFloat(c),10)+")"}else switch(a){case"name":return"opacity";case"extract":return c;case"inject":return c}}},register:function(){9>=n||t.State.isGingerbread||(v.Lists.transformsBase=v.Lists.transformsBase.concat(v.Lists.transforms3D));for(var a=0;a<v.Lists.transformsBase.length;a++)!function(){var b=v.Lists.transformsBase[a];v.Normalizations.registered[b]=function(a,c,e){switch(a){case"name":return"transform";case"extract":return g(c)===d||g(c).transformCache[b]===d?/^scale/i.test(b)?1:0:g(c).transformCache[b].replace(/[()]/g,"");case"inject":var f=!1;switch(b.substr(0,b.length-1)){case"translate":f=!/(%|px|em|rem|vw|vh|\d)$/i.test(e);break;case"scal":case"scale":t.State.isAndroid&&g(c).transformCache[b]===d&&1>e&&(e=1),f=!/(\d)$/i.test(e);break;case"skew":f=!/(deg|\d)$/i.test(e);break;case"rotate":f=!/(deg|\d)$/i.test(e)}return f||(g(c).transformCache[b]="("+e+")"),g(c).transformCache[b]}}}();for(var a=0;a<v.Lists.colors.length;a++)!function(){var b=v.Lists.colors[a];v.Normalizations.registered[b]=function(a,c,e){switch(a){case"name":return b;case"extract":var f;if (v.RegEx.wrappedValueAlreadyExtracted.test(e))f=e;else{var g,h={black:"rgb(0, 0, 0)",blue:"rgb(0, 0, 255)",gray:"rgb(128, 128, 128)",green:"rgb(0, 128, 0)",red:"rgb(255, 0, 0)",white:"rgb(255, 255, 255)"};/^[A-z]+$/i.test(e)?g=h[e]!==d?h[e]:h.black:v.RegEx.isHex.test(e)?g="rgb("+v.Values.hexToRgb(e).join(" ")+")":/^rgba?\(/i.test(e)||(g=h.black),f=(g||e).toString().match(v.RegEx.valueUnwrap)[1].replace(/,(\s+)?/g," ")}return 8>=n||3!==f.split(" ").length||(f+=" 1"),f;case"inject":return 8>=n?4===e.split(" ").length&&(e=e.split(/\s+/).slice(0,3).join(" ")):3===e.split(" ").length&&(e+=" 1"),(8>=n?"rgb":"rgba")+"("+e.replace(/\s+/g,",").replace(/\.(\d)+(?=,)/g,"")+")"}}}()}},Names:{camelCase:function(a){return a.replace(/-(\w)/g,function(a,b){return b.toUpperCase()})},SVGAttribute:function(a){var b="width|height|x|y|cx|cy|r|rx|ry|x1|x2|y1|y2";return(n||t.State.isAndroid&&!t.State.isChrome)&&(b+="|transform"),new RegExp("^("+b+")$","i").test(a)},prefixCheck:function(a){if (t.State.prefixMatches[a])return[t.State.prefixMatches[a],!0];for(var b=["","Webkit","Moz","ms","O"],c=0,d=b.length;d>c;c++){var e;if (e=0===c?a:b[c]+a.replace(/^\w/,function(a){return a.toUpperCase()}),p.isString(t.State.prefixElement.style[e]))return t.State.prefixMatches[a]=e,[e,!0]}return[a,!1]}},Values:{hexToRgb:function(a){var b,c=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,d=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;return a=a.replace(c,function(a,b,c,d){return b+b+c+c+d+d}),b=d.exec(a),b?[parseInt(b[1],16),parseInt(b[2],16),parseInt(b[3],16)]:[0,0,0]},isCSSNullValue:function(a){return 0==a||/^(none|auto|transparent|(rgba\(0, ?0, ?0, ?0\)))$/i.test(a)},getUnitType:function(a){return/^(rotate|skew)/i.test(a)?"deg":/(^(scale|scaleX|scaleY|scaleZ|alpha|flexGrow|flexHeight|zIndex|fontWeight)$)|((opacity|red|green|blue|alpha)$)/i.test(a)?"":"px"},getDisplayType:function(a){var b=a&&a.tagName.toString().toLowerCase();return/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|var|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i.test(b)?"inline":/^(li)$/i.test(b)?"list-item":/^(tr)$/i.test(b)?"table-row":/^(table)$/i.test(b)?"table":/^(tbody)$/i.test(b)?"table-row-group":"block"},addClass:function(a,b){a.classList?a.classList.add(b):a.className+=(a.className.length?" ":"")+b},removeClass:function(a,b){a.classList?a.classList.remove(b):a.className=a.className.toString().replace(new RegExp("(^|\\s)"+b.split(" ").join("|")+"(\\s|$)","gi")," ")}},getPropertyValue:function(a,c,e,f){function h(a,c){function e(){j&&v.setPropertyValue(a,"display","none")}var i=0;if (8>=n)i=m.css(a,c);else{var j=!1;if (/^(width|height)$/.test(c)&&0===v.getPropertyValue(a,"display")&&(j=!0,v.setPropertyValue(a,"display",v.Values.getDisplayType(a))),!f){if ("height"===c&&"border-box"!==v.getPropertyValue(a,"boxSizing").toString().toLowerCase()){var k=a.offsetHeight-(parseFloat(v.getPropertyValue(a,"borderTopWidth"))||0)-(parseFloat(v.getPropertyValue(a,"borderBottomWidth"))||0)-(parseFloat(v.getPropertyValue(a,"paddingTop"))||0)-(parseFloat(v.getPropertyValue(a,"paddingBottom"))||0);return e(),k}if ("width"===c&&"border-box"!==v.getPropertyValue(a,"boxSizing").toString().toLowerCase()){var l=a.offsetWidth-(parseFloat(v.getPropertyValue(a,"borderLeftWidth"))||0)-(parseFloat(v.getPropertyValue(a,"borderRightWidth"))||0)-(parseFloat(v.getPropertyValue(a,"paddingLeft"))||0)-(parseFloat(v.getPropertyValue(a,"paddingRight"))||0);return e(),l}}var o;o=g(a)===d?b.getComputedStyle(a,null):g(a).computedStyle?g(a).computedStyle:g(a).computedStyle=b.getComputedStyle(a,null),"borderColor"===c&&(c="borderTopColor"),i=9===n&&"filter"===c?o.getPropertyValue(c):o[c],(""===i||null===i)&&(i=a.style[c]),e()}if ("auto"===i&&/^(top|right|bottom|left)$/i.test(c)){var p=h(a,"position");("fixed"===p||"absolute"===p&&/top|left/i.test(c))&&(i=m(a).position()[c]+"px")}return i}var i;if (v.Hooks.registered[c]){var j=c,k=v.Hooks.getRoot(j);e===d&&(e=v.getPropertyValue(a,v.Names.prefixCheck(k)[0])),v.Normalizations.registered[k]&&(e=v.Normalizations.registered[k]("extract",a,e)),i=v.Hooks.extractValue(j,e)}else if (v.Normalizations.registered[c]){var l,o;l=v.Normalizations.registered[c]("name",a),"transform"!==l&&(o=h(a,v.Names.prefixCheck(l)[0]),v.Values.isCSSNullValue(o)&&v.Hooks.templates[c]&&(o=v.Hooks.templates[c][1])),i=v.Normalizations.registered[c]("extract",a,o)}if (!/^[\d-]/.test(i))if (g(a)&&g(a).isSVG&&v.Names.SVGAttribute(c))if (/^(height|width)$/i.test(c))try{i=a.getBBox()[c]}catch(p){i=0}else i=a.getAttribute(c);else i=h(a,v.Names.prefixCheck(c)[0]);return v.Values.isCSSNullValue(i)&&(i=0),t.debug>=2&&console.log("Get "+c+": "+i),i},setPropertyValue:function(a,c,d,e,f){var h=c;if ("scroll"===c)f.container?f.container["scroll"+f.direction]=d:"Left"===f.direction?b.scrollTo(d,f.alternateValue):b.scrollTo(f.alternateValue,d);else if (v.Normalizations.registered[c]&&"transform"===v.Normalizations.registered[c]("name",a))v.Normalizations.registered[c]("inject",a,d),h="transform",d=g(a).transformCache[c];else{if (v.Hooks.registered[c]){var i=c,j=v.Hooks.getRoot(c);e=e||v.getPropertyValue(a,j),d=v.Hooks.injectValue(i,d,e),c=j}if (v.Normalizations.registered[c]&&(d=v.Normalizations.registered[c]("inject",a,d),c=v.Normalizations.registered[c]("name",a)),h=v.Names.prefixCheck(c)[0],8>=n)try{a.style[h]=d}catch(k){t.debug&&console.log("Browser does not support ["+d+"] for ["+h+"]")}else g(a)&&g(a).isSVG&&v.Names.SVGAttribute(c)?a.setAttribute(c,d):a.style[h]=d;t.debug>=2&&console.log("Set "+c+" ("+h+"): "+d)}return[h,d]},flushTransformCache:function(a){function b(b){return parseFloat(v.getPropertyValue(a,b))}var c="";if ((n||t.State.isAndroid&&!t.State.isChrome)&&g(a).isSVG){var d={translate:[b("translateX"),b("translateY")],skewX:[b("skewX")],skewY:[b("skewY")],scale:1!==b("scale")?[b("scale"),b("scale")]:[b("scaleX"),b("scaleY")],rotate:[b("rotateZ"),0,0]};m.each(g(a).transformCache,function(a){/^translate/i.test(a)?a="translate":/^scale/i.test(a)?a="scale":/^rotate/i.test(a)&&(a="rotate"),d[a]&&(c+=a+"("+d[a].join(" ")+") ",delete d[a])})}else{var e,f;m.each(g(a).transformCache,function(b){return e=g(a).transformCache[b],"transformPerspective"===b?(f=e,!0):(9===n&&"rotateZ"===b&&(b="rotate"),void(c+=b+e+" "))}),f&&(c="perspective"+f+" "+c)}v.setPropertyValue(a,"transform",c)}};v.Hooks.register(),v.Normalizations.register(),t.hook=function(a,b,c){var e=d;return a=f(a),m.each(a,function(a,f){if (g(f)===d&&t.init(f),c===d)e===d&&(e=t.CSS.getPropertyValue(f,b));else{var h=t.CSS.setPropertyValue(f,b,c);"transform"===h[0]&&t.CSS.flushTransformCache(f),e=h}}),e};var w=function(){function a(){return h?B.promise||null:i}function e(){function a(){function a(a,b){var c=d,e=d,g=d;return p.isArray(a)?(c=a[0],!p.isArray(a[1])&&/^[\d-]/.test(a[1])||p.isFunction(a[1])||v.RegEx.isHex.test(a[1])?g=a[1]:(p.isString(a[1])&&!v.RegEx.isHex.test(a[1])||p.isArray(a[1]))&&(e=b?a[1]:j(a[1],h.duration),a[2]!==d&&(g=a[2]))):c=a,b||(e=e||h.easing),p.isFunction(c)&&(c=c.call(f,y,x)),p.isFunction(g)&&(g=g.call(f,y,x)),[c||0,e,g]}function l(a,b){var c,d;return d=(b||"0").toString().toLowerCase().replace(/[%A-z]+$/,function(a){return c=a,""}),c||(c=v.Values.getUnitType(a)),[d,c]}function n(){var a={myParent:f.parentNode||c.body,position:v.getPropertyValue(f,"position"),fontSize:v.getPropertyValue(f,"fontSize")},d=a.position===I.lastPosition&&a.myParent===I.lastParent,e=a.fontSize===I.lastFontSize;I.lastParent=a.myParent,I.lastPosition=a.position,I.lastFontSize=a.fontSize;var h=100,i={};if (e&&d)i.emToPx=I.lastEmToPx,i.percentToPxWidth=I.lastPercentToPxWidth,i.percentToPxHeight=I.lastPercentToPxHeight;else{var j=g(f).isSVG?c.createElementNS("http://www.w3.org/2000/svg","rect"):c.createElement("div");t.init(j),a.myParent.appendChild(j),m.each(["overflow","overflowX","overflowY"],function(a,b){t.CSS.setPropertyValue(j,b,"hidden")}),t.CSS.setPropertyValue(j,"position",a.position),t.CSS.setPropertyValue(j,"fontSize",a.fontSize),t.CSS.setPropertyValue(j,"boxSizing","content-box"),m.each(["minWidth","maxWidth","width","minHeight","maxHeight","height"],function(a,b){t.CSS.setPropertyValue(j,b,h+"%")}),t.CSS.setPropertyValue(j,"paddingLeft",h+"em"),i.percentToPxWidth=I.lastPercentToPxWidth=(parseFloat(v.getPropertyValue(j,"width",null,!0))||1)/h,i.percentToPxHeight=I.lastPercentToPxHeight=(parseFloat(v.getPropertyValue(j,"height",null,!0))||1)/h,i.emToPx=I.lastEmToPx=(parseFloat(v.getPropertyValue(j,"paddingLeft"))||1)/h,a.myParent.removeChild(j)}return null===I.remToPx&&(I.remToPx=parseFloat(v.getPropertyValue(c.body,"fontSize"))||16),null===I.vwToPx&&(I.vwToPx=parseFloat(b.innerWidth)/100,I.vhToPx=parseFloat(b.innerHeight)/100),i.remToPx=I.remToPx,i.vwToPx=I.vwToPx,i.vhToPx=I.vhToPx,t.debug>=1&&console.log("Unit ratios: "+JSON.stringify(i),f),i}if (h.begin&&0===y)try{h.begin.call(o,o)}catch(r){setTimeout(function(){throw r},1)}if ("scroll"===C){var u,w,z,A=/^x$/i.test(h.axis)?"Left":"Top",D=parseFloat(h.offset)||0;h.container?p.isWrapped(h.container)||p.isNode(h.container)?(h.container=h.container[0]||h.container,u=h.container["scroll"+A],z=u+m(f).position()[A.toLowerCase()]+D):h.container=null:(u=t.State.scrollAnchor[t.State["scrollProperty"+A]],w=t.State.scrollAnchor[t.State["scrollProperty"+("Left"===A?"Top":"Left")]],z=m(f).offset()[A.toLowerCase()]+D),i={scroll:{rootPropertyValue:!1,startValue:u,currentValue:u,endValue:z,unitType:"",easing:h.easing,scrollData:{container:h.container,direction:A,alternateValue:w}},element:f},t.debug&&console.log("tweensContainer (scroll): ",i.scroll,f)}else if ("reverse"===C){if (!g(f).tweensContainer)return void m.dequeue(f,h.queue);"none"===g(f).opts.display&&(g(f).opts.display="auto"),"hidden"===g(f).opts.visibility&&(g(f).opts.visibility="visible"),g(f).opts.loop=!1,g(f).opts.begin=null,g(f).opts.complete=null,s.easing||delete h.easing,s.duration||delete h.duration,h=m.extend({},g(f).opts,h);var E=m.extend(!0,{},g(f).tweensContainer);for(var F in E)if ("element"!==F){var G=E[F].startValue;E[F].startValue=E[F].currentValue=E[F].endValue,E[F].endValue=G,p.isEmptyObject(s)||(E[F].easing=h.easing),t.debug&&console.log("reverse tweensContainer ("+F+"): "+JSON.stringify(E[F]),f)}i=E}else if ("start"===C){var E;g(f).tweensContainer&&g(f).isAnimating===!0&&(E=g(f).tweensContainer),m.each(q,function(b,c){if (RegExp("^"+v.Lists.colors.join("$|^")+"$").test(b)){var e=a(c,!0),f=e[0],g=e[1],h=e[2];if (v.RegEx.isHex.test(f)){for(var i=["Red","Green","Blue"],j=v.Values.hexToRgb(f),k=h?v.Values.hexToRgb(h):d,l=0;l<i.length;l++){var m=[j[l]];g&&m.push(g),k!==d&&m.push(k[l]),q[b+i[l]]=m}delete q[b]}}});for(var H in q){var K=a(q[H]),L=K[0],M=K[1],N=K[2];H=v.Names.camelCase(H);var O=v.Hooks.getRoot(H),P=!1;if (g(f).isSVG||"tween"===O||v.Names.prefixCheck(O)[1]!==!1||v.Normalizations.registered[O]!==d){(h.display!==d&&null!==h.display&&"none"!==h.display||h.visibility!==d&&"hidden"!==h.visibility)&&/opacity|filter/.test(H)&&!N&&0!==L&&(N=0),h._cacheValues&&E&&E[H]?(N===d&&(N=E[H].endValue+E[H].unitType),P=g(f).rootPropertyValueCache[O]):v.Hooks.registered[H]?N===d?(P=v.getPropertyValue(f,O),N=v.getPropertyValue(f,H,P)):P=v.Hooks.templates[O][1]:N===d&&(N=v.getPropertyValue(f,H));var Q,R,S,T=!1;if (Q=l(H,N),N=Q[0],S=Q[1],Q=l(H,L),L=Q[0].replace(/^([+-\/*])=/,function(a,b){return T=b,""}),R=Q[1],N=parseFloat(N)||0,L=parseFloat(L)||0,"%"===R&&(/^(fontSize|lineHeight)$/.test(H)?(L/=100,R="em"):/^scale/.test(H)?(L/=100,R=""):/(Red|Green|Blue)$/i.test(H)&&(L=L/100*255,R="")),/[\/*]/.test(T))R=S;else if (S!==R&&0!==N)if (0===L)R=S;else{e=e||n();var U=/margin|padding|left|right|width|text|word|letter/i.test(H)||/X$/.test(H)||"x"===H?"x":"y";switch(S){case"%":N*="x"===U?e.percentToPxWidth:e.percentToPxHeight;break;case"px":break;default:N*=e[S+"ToPx"]}switch(R){case"%":N*=1/("x"===U?e.percentToPxWidth:e.percentToPxHeight);break;case"px":break;default:N*=1/e[R+"ToPx"]}}switch(T){case"+":L=N+L;break;case"-":L=N-L;break;case"*":L=N*L;break;case"/":L=N/L}i[H]={rootPropertyValue:P,startValue:N,currentValue:N,endValue:L,unitType:R,easing:M},t.debug&&console.log("tweensContainer ("+H+"): "+JSON.stringify(i[H]),f)}else t.debug&&console.log("Skipping ["+O+"] due to a lack of browser support.")}i.element=f}i.element&&(v.Values.addClass(f,"velocity-animating"),J.push(i),""===h.queue&&(g(f).tweensContainer=i,g(f).opts=h),g(f).isAnimating=!0,y===x-1?(t.State.calls.push([J,o,h,null,B.resolver]),t.State.isTicking===!1&&(t.State.isTicking=!0,k())):y++)}var e,f=this,h=m.extend({},t.defaults,s),i={};switch(g(f)===d&&t.init(f),parseFloat(h.delay)&&h.queue!==!1&&m.queue(f,h.queue,function(a){t.velocityQueueEntryFlag=!0,g(f).delayTimer={setTimeout:setTimeout(a,parseFloat(h.delay)),next:a}}),h.duration.toString().toLowerCase()){case"fast":h.duration=200;break;case"normal":h.duration=r;break;case"slow":h.duration=600;break;default:h.duration=parseFloat(h.duration)||1}t.mock!==!1&&(t.mock===!0?h.duration=h.delay=1:(h.duration*=parseFloat(t.mock)||1,h.delay*=parseFloat(t.mock)||1)),h.easing=j(h.easing,h.duration),h.begin&&!p.isFunction(h.begin)&&(h.begin=null),h.progress&&!p.isFunction(h.progress)&&(h.progress=null),h.complete&&!p.isFunction(h.complete)&&(h.complete=null),h.display!==d&&null!==h.display&&(h.display=h.display.toString().toLowerCase(),"auto"===h.display&&(h.display=t.CSS.Values.getDisplayType(f))),h.visibility!==d&&null!==h.visibility&&(h.visibility=h.visibility.toString().toLowerCase()),h.mobileHA=h.mobileHA&&t.State.isMobile&&!t.State.isGingerbread,h.queue===!1?h.delay?setTimeout(a,h.delay):a():m.queue(f,h.queue,function(b,c){return c===!0?(B.promise&&B.resolver(o),!0):(t.velocityQueueEntryFlag=!0,void a(b))}),""!==h.queue&&"fx"!==h.queue||"inprogress"===m.queue(f)[0]||m.dequeue(f)}var h,i,n,o,q,s,u=arguments[0]&&(arguments[0].p||m.isPlainObject(arguments[0].properties)&&!arguments[0].properties.names||p.isString(arguments[0].properties));if (p.isWrapped(this)?(h=!1,n=0,o=this,i=this):(h=!0,n=1,o=u?arguments[0].elements||arguments[0].e:arguments[0]),o=f(o)){u?(q=arguments[0].properties||arguments[0].p,s=arguments[0].options||arguments[0].o):(q=arguments[n],s=arguments[n+1]);var x=o.length,y=0;if (!/^(stop|finish|finishAll)$/i.test(q)&&!m.isPlainObject(s)){var z=n+1;s={};for(var A=z;A<arguments.length;A++)p.isArray(arguments[A])||!/^(fast|normal|slow)$/i.test(arguments[A])&&!/^\d/.test(arguments[A])?p.isString(arguments[A])||p.isArray(arguments[A])?s.easing=arguments[A]:p.isFunction(arguments[A])&&(s.complete=arguments[A]):s.duration=arguments[A]}var B={promise:null,resolver:null,rejecter:null};h&&t.Promise&&(B.promise=new t.Promise(function(a,b){B.resolver=a,B.rejecter=b}));var C;switch(q){case"scroll":C="scroll";break;case"reverse":C="reverse";break;case"finish":case"finishAll":case"stop":m.each(o,function(a,b){g(b)&&g(b).delayTimer&&(clearTimeout(g(b).delayTimer.setTimeout),g(b).delayTimer.next&&g(b).delayTimer.next(),delete g(b).delayTimer),"finishAll"!==q||s!==!0&&!p.isString(s)||(m.each(m.queue(b,p.isString(s)?s:""),function(a,b){p.isFunction(b)&&b()}),m.queue(b,p.isString(s)?s:"",[]))});var D=[];return m.each(t.State.calls,function(a,b){b&&m.each(b[1],function(c,e){var f=s===d?"":s;return f===!0||b[2].queue===f||s===d&&b[2].queue===!1?void m.each(o,function(c,d){d===e&&((s===!0||p.isString(s))&&(m.each(m.queue(d,p.isString(s)?s:""),function(a,b){p.isFunction(b)&&b(null,!0)
}),m.queue(d,p.isString(s)?s:"",[])),"stop"===q?(g(d)&&g(d).tweensContainer&&f!==!1&&m.each(g(d).tweensContainer,function(a,b){b.endValue=b.currentValue}),D.push(a)):("finish"===q||"finishAll"===q)&&(b[2].duration=1))}):!0})}),"stop"===q&&(m.each(D,function(a,b){l(b,!0)}),B.promise&&B.resolver(o)),a();default:if (!m.isPlainObject(q)||p.isEmptyObject(q)){if (p.isString(q)&&t.Redirects[q]){var E=m.extend({},s),F=E.duration,G=E.delay||0;return E.backwards===!0&&(o=m.extend(!0,[],o).reverse()),m.each(o,function(a,b){parseFloat(E.stagger)?E.delay=G+parseFloat(E.stagger)*a:p.isFunction(E.stagger)&&(E.delay=G+E.stagger.call(b,a,x)),E.drag&&(E.duration=parseFloat(F)||(/^(callout|transition)/.test(q)?1e3:r),E.duration=Math.max(E.duration*(E.backwards?1-a/x:(a+1)/x),.75*E.duration,200)),t.Redirects[q].call(b,b,E||{},a,x,o,B.promise?B:d)}),a()}var H="Velocity: First argument ("+q+") was not a property map, a known action, or a registered redirect. Aborting.";return B.promise?B.rejecter(new Error(H)):console.log(H),a()}C="start"}var I={lastParent:null,lastPosition:null,lastFontSize:null,lastPercentToPxWidth:null,lastPercentToPxHeight:null,lastEmToPx:null,remToPx:null,vwToPx:null,vhToPx:null},J=[];m.each(o,function(a,b){p.isNode(b)&&e.call(b)});var K,E=m.extend({},t.defaults,s);if (E.loop=parseInt(E.loop),K=2*E.loop-1,E.loop)for(var L=0;K>L;L++){var M={delay:E.delay,progress:E.progress};L===K-1&&(M.display=E.display,M.visibility=E.visibility,M.complete=E.complete),w(o,"reverse",M)}return a()}};t=m.extend(w,t),t.animate=w;var x=b.requestAnimationFrame||o;return t.State.isMobile||c.hidden===d||c.addEventListener("visibilitychange",function(){c.hidden?(x=function(a){return setTimeout(function(){a(!0)},16)},k()):x=b.requestAnimationFrame||o}),a.Velocity=t,a!==b&&(a.fn.velocity=w,a.fn.velocity.defaults=t.defaults),m.each(["Down","Up"],function(a,b){t.Redirects["slide"+b]=function(a,c,e,f,g,h){var i=m.extend({},c),j=i.begin,k=i.complete,l={height:"",marginTop:"",marginBottom:"",paddingTop:"",paddingBottom:""},n={};i.display===d&&(i.display="Down"===b?"inline"===t.CSS.Values.getDisplayType(a)?"inline-block":"block":"none"),i.begin=function(){j&&j.call(g,g);for(var c in l){n[c]=a.style[c];var d=t.CSS.getPropertyValue(a,c);l[c]="Down"===b?[d,0]:[0,d]}n.overflow=a.style.overflow,a.style.overflow="hidden"},i.complete=function(){for(var b in n)a.style[b]=n[b];k&&k.call(g,g),h&&h.resolver(g)},t(a,l,i)}}),m.each(["In","Out"],function(a,b){t.Redirects["fade"+b]=function(a,c,e,f,g,h){var i=m.extend({},c),j={opacity:"In"===b?1:0},k=i.complete;i.complete=e!==f-1?i.begin=null:function(){k&&k.call(g,g),h&&h.resolver(g)},i.display===d&&(i.display="In"===b?"auto":"none"),t(this,j,i)}}),t}(window.jQuery||window.Zepto||window,window,document)});


/**
 * @desc The basic AP Framework.
 * @depend jQuery, jQuery UI (autoComplete, datePicker)
 * @depend ap.css (wrapping CSS for jquery UI autocomplete and date picker).
 * @returns {AP}
 */
var AP=new function _AP(){
	this.config={};
	this.__printing=0;
	this.blockRedirection=null;
	this.transition="";
	
	
	this.key={enter: 13, tab: 9, backspace: 8, escape: 27, prev: 37, next: 39, left: 37, right: 39, up: 38, down: 40};
	this.keycode=function(e, str){
		return (e.keycode==this.key[str]);
	};


	this.EVENTS={PAGE_UNLOAD: 'page.unload',
		PAGE:{
			INIT: 'page.init',
			UNLOAD: 'page.unload',
			RELOAD: 'page.reload',
			AFTERLOAD: 'page.afterload'
	}};


	this.display=function(data, options){
		options=$.extend({},{emotion: false, tag: true, script: true}, options);
		return data;
	};




	/**
	 * @desc Call user function with parameter
	 */
	this.fn=function(fn, data){
		var __fn=eval(fn);
		__fn(data);
	};


	/**
	 * @desc Call user object function with parameter
	 */
	this.call=function(fn){
		fn();
	};


	this.__ts=[];
	this.__rts=[];

	/**
	 * @desc Temporary timeout (all timeouts are clear in the next page)
	 */
	this.timeout=function(fn, total_time){
		var tx=setTimeout(function(){
			fn();
		}, total_time);
		
		AP.__ts.push(tx);
		
		return tx;
	};


	/**
	 * @desc Temporary timeout (all timeouts are clear in the next page)
	 */
	this.rtimeout=function(fn, total_time){
		var intv=setInterval(function(){
			fn.apply(intv);
		}, total_time);
		
		AP.__rts.push(intv);
		return intv;
	};


	/**
	 * @desc Call a function once. The function is marked by its name, where fn is the actually
	 * function.
	 * @example
	 * 	AP.once("alertme", function(){alert(1)}); // This is called
	 *  AP.once("alertme", function(){alert(1)}); // This is not called as alertme has been called earlier.
	 */
	this.once_list=[];
	this.once=function(name, fn){
		if (this.array.within(name, this.once_list)){
			return;
		}
		this.once_list.push(name);
		fn();
	};



	this.alert=function(content, buttons, icon, opts){
		opts=$.extend({}, opts);

		if (!icon){
			icon='s48-ap-error';
		}

		var icon_html="<div class='icon' style='width:42px;'>"+icon+"</div>";
		if (AP.word.match(icon, /^([a-zA-Z0-9\s\-\_]+)$/)){
			icon_html="<span class='"+icon+"' style='font-size:42px;'></span>";
		}

		AP.dialog("#alert")
			.temp(false)
			.engine(AP.config.alertDialogEngine)
			.style("__apalert")
			.title("Success").temp(false)
			.buttons(buttons)
			.content("<table><tr><td class='icon'> "+icon_html+"</td> <td class='text'>"+content+"</td></tr></table>")
			.cond(Client.native, function(){
				this.width(450)
			})
			.closable(opts.closable)
			.show()
		;
	};



	this.alertSuccess=function(content, callback){
		var cb=function(){
			AP.dialog("#alert").hide();
		};
		if (callback){
			cb=function(){
				AP.dialog("#alert").hide();
				callback();
			};
		}
		AP.dialog("#alert")
			.temp(false)
			.engine(AP.config.alertDialogEngine)
			.style("__apalert")
			.title("Success").temp(false)
			.button("OK", cb,'ss')
			.content("<table><tr><td class='icon'> <span class='ficon ficon-check-circle' style='font-size:42px; color:#36b918'></span></td> <td class='text'>"+content+"</td></tr></table>")
			.show()
			;
	};



	this.alertWarning=function(content, callback){
		var cb=function(){
			AP.dialog("#alert").hide();
		};
		if (callback){
			cb=function(){
				AP.dialog("#alert").hide();
				callback();
			};
		}
		AP.dialog("#alert")
			.temp(false)
			.engine(AP.config.alertDialogEngine)
			.style("__apalert")
			.title("Success").temp(false)
			.button("OK", cb,'er')
			.content("<table><tr><td class='icon'> <span class='ficon ficon-exclamation-circle' style='font-size:42px; color:#c65144'></span></td> <td class='text'>"+content+"</td></tr></table>")
			.show();
	};


	this.alertError=function(content, extra_messages, callback){
		if (AP.word.empty(content)){
			content="There's something wrong in our system. We are working on it and we'll get it fixed as we can.";
		}

		var text=content;
		var cb=function(){
			AP.dialog("#alert").hide();
		};

		if (extra_messages && AP.isObject(extra_messages)){
			if (extra_messages[content]){
				text=extra_messages[content];
			}

			if (callback){
				cb=function(){
					AP.dialog("#alert").hide();
					callback();
				};
			}
		}else{
			if (extra_messages && !callback){
				cb=function(){
					AP.dialog("#alert").hide();
					extra_messages();
				};
			}
		}

		text=AP.error.translate(text);

		AP.dialog("#alert")
			.temp(false)
			.engine(AP.config.alertDialogEngine)
			.style("__apalert")
			.title("Error").temp(false)
			.button("OK", cb,'er alert-button')
			.content("<table><tr><td class='icon'> <span class='-ap icon-help-with-circle' style='font-size:40px; color:#666'></span></td> <td class='text'>"+text+"</td></tr></table>")
			.show()
		;
	};


	this.alertWaiting=function(content, fn){
		AP.dialog("#alert")
		.temp(false)
		.engine(AP.config.alertDialogEngine)
		.style("__apalert")
		.title("Waiting").temp(false)
		.button("Refresh", function(){
			AP.xRefresh();
		})
		.content("<table><tr><td class='icon'> <span class='s48-ap-question'></span></td> <td class='text'>"+content+"</td></tr></table>")
		.show()
		;

		if (fn){
			fn();
		}
	};



	this.confirm=function(content, fn){
		AP.dialog("#alert")
		.temp(false)
		.engine(AP.config.alertDialogEngine)
		.style("__apalert")
		.title("Confirm").temp(false)
		.button("Close", function(){
			AP.dialog("#alert").hide();
		},'er confirm-button')
		.button("OK", function(){
			AP.dialog("#alert").hide();
			fn();
		},'ss confirm-button')
		.content("<table><tr><td class='icon'> <span class='ficon ficon-exclamation-circle' style='font-size:42px; color:#c65144'></span></td> <td class='text'>"+content+"</td></tr></table>")
		.show()
		;
	};



	this.hideAlert=function(){
		AP.dialog("#alert").hide();
	};



	this.ajaxAlert=function(notShowTitle){
		if (!$('#ajaxalert').length){
			AP.add('ajaxalert');
			AP.dialog("#ajaxalert")
			.temp(false)
			.engine(AP.config.ajaxAlertDialogEngine)
			.show();
		}else{
			if (notShowTitle) {
				AP.dialog("#ajaxalert").title("").show();
			} else {
				AP.dialog("#ajaxalert").show();
			}
		}
	};

	this.ajaxShow=function(txt){
		if (!txt){
			txt="Processing";
		}
		this.ajaxAlert(true);
		// $.log(txt);
		$("#ajaxalert").prev().html(txt);
	};

	this.ajaxHide=function(){
		AP.dialog("#ajaxalert").hide();
	};



	/**
	 * @desc The default handler for ajax code returned from the server.
	 * @todo Add Dialog Here.
	 */
	this.handler=function(code){
		AP.alertError(code.message);
	};


	/**
	 * @desc The default success handler for ajax code returned from the server.
	 * @todo Add Dialog Here.
	 */
	this.successHandler=function(code){
		AP.alertSuccess(code.message);
	};


	/**
	 * @desc The default error handler for ajax code returned from the server.
	 * @todo Add Dialog Here.
	 */
	this.errorHandler=function(code){
		AP.alertError(code.message);
	};



	/**
	 * @desc Class's binary lock
	 */
	this.__lock=false;

	/**
	 * @desc Lock the ajax mechanisum.
	 */
	this.lock=function(){
		this.__lock=true;
	};

	this.undone_url="";
	this.undone_data="";


	this.ajax_data={};
	this.ajaxSetup=function(data){
		this.ajax_data=data;
	};

	
	/**
	 * @desc Making a post to the server.
	 * @param handler: The callback after retrieving the data from the server. if
	 * omitted, the default handler is called.
	 */
	this.post=function(url, data, handler, use_lock){
		if (!this.word.isURL(url)){
			if (Client.native){
				url=M.api()+'/'+url;

				if (data && AP.data.isObject(data)){
					var params=M.params();
					for (var key in params){
						M.formData(data, key, params[key]);
					}
				}

				M.formData(data, '__code', Client.code);
			}else{
				url=Client.ajax_url+'/'+url;
			}

		}

		var $this=null;

		if (use_lock && use_lock==true){
			if (this.__lock){
				if (Client.env==0 || Client.env=='0'){
					AP.alertError("Be patient! Your request is processed right now.");
				}
				return;
			}
			this.lock();
		}

		if (!handler){
			handler=this.hander;
		}

		if (AP.isAssocArray(data) && !Client.native){
			data.__code=Client.code;
			if (Client.base_network && Client.base_network.id){
				if (!data.__base_network){
					data.__base_network=Client.base_network.id;
				}
			}
			if (Client.network && Client.network.id){
				if (!data.__network){
					data.__network=Client.network.id;
				}
			}
			if (Client.user && Client.user.id){
				if (!data.__user){
					data.__user=Client.user.id;
				}
			}

			for (var key in this.ajax_data){
				data[key]=this.ajax_data[key];
			}
		}

		AP.sys.fire("ajax.pre.update",data);

		if (url==this.undone_url && AP.data.equal(data, this.undone_data)){
			// $.log(url);
			// AP.alertError("We are processing your request ....");
			$.log("[Abusive URL: "+url+"], with Data:");
			$.log(data);
			return false;
		}

		this.undone_url=url;
		this.undone_data=data;

		
		if (Client.native){
			var ajax_data={
				'url': url,
				'data': data,
				type: 'POST',
				success: function(text){
					AP.__lock=false;
					AP.undone_url="";
					AP.undone_data="";
					var c=parseCode(text);


					if (c.message=="FLAG.SYSTEM.REQUIRED.REFRESH" || c.command=="LOGIN"){
						return AP.alertError("Please refresh to continue.", function(){
							AP.refresh();
						});
					}
					handler(c);
				},
				error: function(text){
					AP.__lock=false;
					AP.undone_url="";
					AP.undone_data="";
					var c=parseCode(text);
					handler(c);
				}
			};

			if (isFormData(data)) {
				// hack to fix safari bug where ajax fails if file input is empty
				if ((navigator.userAgent.match(/iPhone|iPad|iPod/i)) || (navigator.userAgent.search("Safari") >= 0 && navigator.userAgent.search("Chrome") < 0)) {
					// Safari < 10.13.4 does not support FormData.entries()
					try {
						var formDataEntries = data.entries(), formDataIter = formDataEntries.next(), pair;
						while (!formDataIter.done) {
							pair = formDataIter.value;
							if (Object.prototype.toString.call(pair[1]) === '[object File]' && pair[1].name == '' && pair[1].size == 0) {
								data.delete(pair[0]);
								formDataEntries = data.entries();
								formDataIter = formDataEntries.next();
							} else {
								formDataIter = formDataEntries.next();
							}

						}
					} catch(e) {}
				}

				ajax_data.processData = false;
				ajax_data.contentType = false;

			}

			$.ajax(ajax_data);
		}else{
			$.post(url, data, function(text){
				AP.__lock=false;
				AP.undone_url="";
				AP.undone_data="";
				var c=parseCode(text);

				if (c.message=="FLAG.SYSTEM.REQUIRED.REFRESH" || c.command=="LOGIN"){
					return AP.alertError("Please refresh to continue.", function(){
						AP.refresh();
					});
				}
				
				handler(c);
			}).fail(function(text){
				AP.__lock=false;
				AP.undone_url="";
				AP.undone_data="";
				var c=parseCode(text);
				handler(c);
			});
		}
	};


	/**
	 * @desc Similar to post, but create a get method.
	 */
	this.get=function(url, handler, checker){
		return this.post(url, {}, handler, checker);
	};
	
	
	this.es6Post=function(url, data, handler){
		if (AP.isAssocArray(data) && !Client.native){
			data.__code=Client.code;
		}
		
		var formData = new FormData();
		for (var k in data) {
		    formData.append(k, data[k]);
		}
		
		if (!this.word.isURL(url)){
			url=Client.ajax_url+'/'+url;
		}
		
		fetch(url, {
			method: 'POST',
			headers: {"Content-Type": "application/x-www-form-urlencoded; charset=utf-8"},
			body:  new URLSearchParams(data)
		})
		.then(res => res.text()) // parse response as JSON (can be res.text() for plain response)
		.then(function(data){
			// $.log(data);
			// UI.ajaxHide();
			var c=parseCode(data);
			handler(c);
		})
		.catch(err => {
			console.log(err);
		});
	};



	this.crossPost=function(url, data, success_callback, error_handler){
		data.ext=url;
		data.ts=AP.T.timeStamp();
		data.__code=Client.code;
		$.ajax({
			  type: 'post',
			  url: Client.ajax_url+"/share/cross",
			  data: data,
			  success: function(obj){
				  success_callback(obj);
			  },
			  error: function(){
				  if (error_handler){
					  error_handler();
				  }
			  },
			  dataType: 'JSON'
		});
	};

	/**
	 * @desc Submit frame in the regular way.
	 */
	this.__submit=function(selector){
		ap_editSubmission(selector);
		$(selector).submit();
	};


	/**
	 * @desc Submit a form to the server using Ajax. Based on the elements of the form,
	 * the system will decide the corresponding method (DIRECT AJAX or FRAME).
	 * @param selector The form Selector.
	 * @returns Null
	 */
	this.submit=function(selector, callback, extra_data){
		var elem="";

		if (!AP.data.isString(selector)){
			var id;
			if (!$(selector).attr('id')){
				id=AP.uuid();
				$(selector).attr('id', id);
			}else{
				id=$(selector).attr('id');
			}

			elem="#"+id;
		}else{
			elem=selector;
		}


		if (!extra_data){
			extra_data={};
		}

		if (Client.native){
			var params=M.params();
			for (var key in params){
				extra_data[key]=params[key];
			}
		}

		for (var key in this.ajax_data){
			extra_data[key]=this.ajax_data[key];
		}

		if ($(elem).find('input[type=file]').length && !Client.native){
			return this.submitFrame(elem, callback, extra_data);
		}else{
			return this.submitAjax(elem, callback, extra_data);
		}
	};


	/**
	 * @desc Submit a form via ajax.
	 */
	this.submitAjax=function(selector, callback, extra_data){
		if (!extra_data){
			extra_data={};
		}

		var text="";
		if (!$(selector).flag("__init_code")){
			var text="<input type='hidden' name='__code' value='"+Client.code+"' /> ";
			$(selector).append(text);
			AP.sys.fire('form.pre.submit', selector);
		}

		if (!callback){
			callback=this.handler;
		}

		ap_editSubmission(selector);

		var data=$(selector).serialize();
		
		var target=$(selector).attr('action');



		if (Client.native){
			var formData = new FormData($(selector)[0]);
			if (extra_data){
				for (var k in extra_data){
					formData.append(k, extra_data[k]);
				}
			}

			this.post(target, formData, function(code){
				code.__form=assoc($(selector).serializeArray());
				for (var k in extra_data){
					code.__form[k]=extra_data[k];
				}
				callback(code);
				ap_reeditSubmission(selector);
			}, true);

		}else{
			if (extra_data){
				for (var k in extra_data){
					data+="&"+k+"="+extra_data[k];
				}
			}

			this.post(target, data, function(code){
				code.__form=assoc($(selector).serializeArray());
				callback(code);
				ap_reeditSubmission(selector);
			}, true);
		}
	};



	/**
	 * @desc Submit as iframe.
	 */
	this.submitFrame=function(selector, success, extra_data){
		if (!success){
			success=this.handler;
		}

		ap_setupFrameUpload(selector, function(code){
			$(selector).unlock();
			code.__form=assoc($(selector).serializeArray());
			success(code);
			ap_reeditSubmission(selector);
		}, extra_data);


		if ($(selector).lock()){
			this.__submit(selector);
		}else{
			AP.alertError("Be patient! Your request is processed right now.");
		}

	};



	this.getJSONP=function(url, success, error){
		var callback='APJSONCALLBACK';
		var uuid=AP.uuid();
		APJSONREG(uuid, success, error);
		var furl=url+"?callback="+callback+"&fx="+uuid;
		if (url.indexOf('?')>0){
			furl=url+"&callback="+callback+"&fx="+uuid;
		}

		$.apScript(furl,null,uuid);
	};



	/**
	 * @desc This is a very simple version of post, when we do not worry
	 * so much about callback function. The functions is very useful for case
	 * such as using AJAX to count pageview, or make a Like action.
	 */
	this.touch=function(url, success){
		if (!success){
			success=this.successHandler;
		}
		this.post(url,{}, function(code){
			if (code.good()){
				success(code);
			}else{
				AP.handler(code);
			}
		});
	};


	/**
	 * @desc This is a simpler version of touch with one exception: on error,
	 * the system doesn't notify the user.
	 */
	this.silent=function(url, success){
		if (!success){
			success=this.handler;
		}
		this.post(url,{}, function(code){
			if (code.good()){
				success(code);
			}
		});
	};




	/**
	 * @desc Redirect to a specific link. If link is not started with http, we
	 * makes it a valid link within the current host.
	 */
	this.redirect=function(link){
		if (!link){
			window.location.href=window.location.href;
		}

		if (Client.native){
			window.location.href=link;
			return;
		}

		if (this.word.prefix(link,'http')){
			window.location.href=link;
		}else{
			window.location.href=Client.url+"/"+link;
		}
	};


	/**
	 * @desc Refresh the whole page.
	 */
	this.refresh=function(){
		if (Client.native){
			location.reload();
		}

		return this.redirect(window.location.href);
	};


	/**
	 * @desc Refresh the whole page.
	 */
	this.xRefresh=function(callback){
		if (Client.native){
			return M.xRefresh();
		}

		var url=window.location.href;
		if (AP.word.prefix(url, Client.url)){
			AP.loadURL(url, {direct_load: true});
		}else{
			AP.loadURL(AP.current_url, {direct_load: true});
		}


		if (callback){
			AP.sys.once(AP.EVENTS.PAGE_UNLOAD, callback);
		}
	};



	this.__urlref=null;

	/**
	 * @desc To an internal URL. URL must be relative.
	 */
	this.toURL=function(url, callback, ref){
		if (ref){
			this.__urlref=ref;
		}

		if (Client.native){
			return AP.nativeRedirect(url);
		}

		if (AP.word.isURL(url)){
			if (!AP.word.prefix(url, Client.url)){
				window.open(url);
				return;
			}
		}

		// Remove the HTTP
		if (AP.word.prefix(url, Client.url)){
			url=url.substr(Client.url.length+1);
		}

		// Quick redirect
		if (!AP.word.isURL(url) && this.rewriteRedirect(url)){
			return;
		}

		if (AP.transition && AP.transition.length){
			AP.confirm(AP.transition, function(){
				AP.transition="";
				AP.toURL(url, callback, ref)
			});
			
			return;
		}
		
		
		if (url.indexOf('__nhash=1')!=-1){
		}else{
			if (AP.__history){
				history.pushState({url: Client.url+"/"+url},"",Client.url+"/"+url);
			}else{
				AP.setHash(url);
			}
		}

		if (!AP.word.isURL(url)){
			url=Client.url+"/"+url;
		}

		if (this.__must_reset){
			if (AP.__reset_callback){
				AP.__reset_callback();
			}

			AP.redirect(url);
			return;
		}

		AP.loadURL(url,{direct_load: true});

		if (callback){
			AP.sys.once(AP.EVENTS.PAGE_UNLOAD, callback);
		}
	};


	this.setHash=function(url){
		AP.current_url=Client.url+'/'+url;
		AP._last_hash=url;
		window.location.hash='!/'+url;
	};


	this.nativeRedirect=function(url, skip_hash_change){
		var parts=url.split("?");

		if (parts.length<2){
			Query.reset();
			M.redirect(url, skip_hash_change);
		}else{
			var d=queryStringToArray(parts[1]);
			Query.reset();
			for (var k in d){
				Query.set(k, d[k]);
			}
			M.redirect(parts[0], skip_hash_change);
		}
	};



	this._callback={};
	/**
	 * @desc Register a callback for a group. The group (name) will be
	 * the key of callback. When AP.triggerCallback is called, the set of
	 * callbacks will be cleared on the group.
	 */
	this.callback=function(group, fn){
		if (!this._callback[group]){
			this._callback[group]=[];
		}
		this._callback[group].push(fn);
	};


	/**
	 * @desc Trigger the callback on the group action.
	 */
	this.triggerCallback=function(group){
		if (!this._callback[group]){
			return;
		}
		for (var i=0; i<this._callback[group].length; i++){
			var fn=this._callback[group][i];
			fn();
		}
		this._callback[group]=[];
	};




	/**
	 * @desc Check if a variable name exists.
	 */
	this.isset=function(varname){
		return(typeof(window[varname])!='undefined');
	};


	/**
	 * @desc Apply a transform function on the array. It is very much
	 * similar to array_walk in PHP world.
	 */
	this.transform=function(arr, transform_fn){
		var b=[];
		for (var i=0; i<arr.length; i++){
			var temp=transform_fn(arr[i],i);
			if (temp!==null){
				b.push(temp);
			}
		}
		return b;
	};


	this.select=function(arr, transform_fn){
		if (!arr){
			return [];
		}
		return this.transform(arr, transform_fn);
	};


	/**
	 * @desc Apply a transform function on the array, append results at bottom
	 * to make a longer string.
	 */
	this.render=function(arr, transform_fn, limit){
		if (!limit){
			limit=0;
		}
		if (!this.isArray(arr)){
			return;
		}
		var m=arr.length;
		if (limit >0 && limit <m){
			m=limit;
		}
		var text="";
		for (var i=0; i<m; i++){
			text+=transform_fn(arr[i],i, m);
		}
		return text;
	};


	/**
	 * @desc Apply a transform function on the object, append results at bottom
	 * to make a longer string.
	 */
	this.renderObject=function(obj, render_fn, limit){
		var text="";
		for (var key in obj){
			text+=render_fn(key, obj[key]);
		}
		return text;
	};



	/**
	 * @desc Apply function to each part of the array.
	 */
	this.each=function(data, callback){
		for (var i=0; i<data.length; i++){
			callback(data[i]);
		}
	};


	/**
	 * @desc Create an associate array, where key are variables.
	 * Keys and values are placed in sequence as arguments of the function.
	 */
	this.assoc=function(){
		var r={};
		for (var i=0; i<arguments.length/2; i++){
			r[arguments[2*i]]=arguments[2*i+1];
		}
		return r;
	};


	/**
	 * @desc Encode the data so that it's Okay to pass via AJAX and URL.
	 */
	this.encodeURI=function(str){
		try { return encodeURIComponent(str); } catch(e){}
		try { return encodeURI(str); } catch(e){}
		return espace(str);
	};

	
	this.urlEncode=this.encodeURI;
	

	/**
	 * @desc Move history forward.
	 */
	this.next=function(){
		return history.go(1);
	};

	/**
	 * @desc Move history forward.
	 */
	this.back=function(){
		return history.go(-1);
	};

	this.pageError=function(){
		if (window.performance && window.performance.navigation.type == 2){
			// location.reload(true);
		}
	};
	

	/**
	 * @desc Create an event listener
	 */
	this.on=function(event, fx, $this){
		this.event.bind(event, fx, $this);
		return this;
	};


	this.rebind=function(event, fx, $this){
		this.event.rebind(event, fx, $this);
		return this;
	};



	/**
	 * @desc Create an event listener
	 */
	this.onAll=function(event, fx, $this){
		this.event.bindAll(event, fx, $this);
		return this;
	};


	/**
	 * @desc Trigger an event
	 */
	this.trigger=function(event){
		this.event.trigger(event);
		return this;
	};


	/**
	 * @desc Trigger an event
	 */
	this.fire=function(event, data){
		this.event.trigger(event, data);
		return this;
	};

	this.fireLate=function(event,time){
		if (!time){
			time=200;
		}
		var Event=this.event;
		setTimeout(function(){
			Event.trigger(event);
		},time);
		return this;
	};

	this.live=function(event, fx){
		this.on(event,fx);
		$.log(this.event.__fired);
		if (this.event.fired(event)){
			this.release(event);
		}
	};


	/**
	 * @desc Trigger an event (and dequeue)
	 */
	this.release=function(event){
		this.event.release(event);
		return this;
	};


	this.autoRelease=function(event, cond){
		if (cond){
			return this.release(event);
		};
	};


	this.removeListener=function(event){
		this.event.removeListener(event);
	};


	/**
	 * @desc Getting the url of the thumbnail.
	 */
	this.thumb=function(source, prefix){
		if (!prefix){
			prefix="1.";
		}else{
			prefix=prefix+".";
		}

		if (typeof source == 'undefined' || !source) {
			return "";
		}

		var path=source.split("/");
		if (path.length<=0){
			return source;
		}
		path[path.length-1]=prefix+path[path.length-1];
		return path.join("/");
	};

	this.xthumb=function(source){
		return this.thumb(source, "0");
	};

	this.zthumb=function(source){
		return this.thumb(source, "2");
	};


	/**
	 * @desc Check data type.
	 */
	this.isArray=function(data){
		return $.isArray(data);
	};
	this.isAssocArray=function(data){
		return typeof(data)=='object' && isNaN(data);
	};
	this.isObject=function(data){
		return typeof(data)=='object' && isNaN(data);
	};
	this.isFunction=function(data){
		return $.isFunction(data);
	};
	this.isInt=function(data){
		return !isNaN(data)&&parseInt(data)==data;
	};
	this.isString=function(data){
		return typeof(data)=='string' && isNaN(data);
	};
	this.isEmpty=function(data){
		if (!data || data.length <=0){
			return true;
		}
		return false;
	};


	this.js_list=Client.js;
	this.css_list=Client.css;


	/**
	 * @desc Loading external css.
	 */
	this.css=function(source){
		if (AP.array.within(source, this.css_list)){
			return;
		}
		this.css_list.push(source);

		if (!this.word.isURL(source)){
			source=Client.url+'/css/'+source;
		}

		$.log("[CSS: "+source+"]");

		var css = jQuery("<link>");
		css.attr({
			rel:  "stylesheet",
			type: "text/css",
			href: source
		});
		$("head").append(css);

	};


	this.cssx=function(css){
		if (Client.pageData.__lazycss && Client.pageData.__lazycss=="none"){
			return;
		}
		this.css(css);
	};

	/**
	 * @desc Loading external js file.
	 * @return Boolean
	 */
	this.js=function(source,callback,id){
		if (this.array.within(source, this.js_list)){
			return false;
		}


		this.js_list.push(source);

		if (!this.word.isURL(source)){
			source=Client.url+'/js/'+source;
		}
		$.log("[JS: "+source+"]");

		$.apScript(source,callback,id);
		return true;
	};


	this.jsx=function(source, callback, id){
		if (Client.pageData.__lazyjs && Client.pageData.__lazyjs=="none"){
			return;
		}
		if (this.array.within(source, this.js_list)){
			if (callback){
				callback();
			}
			return false;
		}


		this.js_list.push(source);

		if (!this.word.isURL(source)){
			source=Client.url+'/js/'+source;
		}
		$.log("[JS: "+source+"]");

		$.apScript(source,callback,id);
		return true;
	};



	/**
	 * @desc Setting continuous Request
	 */
	this._continuous=false;
	this._in_continuous_request=false;

	this._last_hash='';
	this.current_url=window.location.href;

	this.__history=false;
	if (history && history.pushState){
		this.__history=true;
	};

	this.adaptive=function(url1, url2){
		return true;
	};

	this.setURL=function(url){
		if (this.__history){
			history.pushState({url: Client.url+"/"+url},"",Client.url+"/"+url);
		}
	};

	this.updateURLParams=function(params){
		var ps=params;
		if (AP.data.isString(ps)){
			ps=queryStringToArray(params);
		}

		for (var key in ps){
			if (ps[key]==="null"){
				ps[key]=null;
			}
		}

		var checked={};

		var url=Client.path.current;
		url=url.replace(/(\&*)([\w\-]+)\=([\w\-]+)/g, function(match, p0, p1, p2){
			checked[p1]=1;

			if (p1 in ps && ps[p1]===null ){
				return "";
			}

			if (ps[p1]){
				return p0+p1+"="+ps[p1];
			}
			return p0+p1+"="+p2;
		});

		var extra="";
		for (var key in ps){
			if (!checked[key] && ps[key]!=null){
				extra+=key+"="+ps[key]+"&";
			}
		};

		if (extra.length){
			extra=extra.substr(0, extra.length-1);

			if (url.indexOf("?")==-1){
				url=url+"?"+extra;
			}else{
				url=url+"&"+extra;
			}
		}



		if (url.charAt(url.length-1)=="?"){
			url=url.substr(0, url.length-1);
		}


		return AP.toURL(url);
	}


	this.setURLParams=function(params, redirect){
		var ps=params;
		if (AP.data.isString(ps)){
			ps=queryStringToArray(params);
		}

		var orgs=shallowClone(ps);

		var checked={};

		var url=window.location.href;
		url=url.substr(Client.url.length+1);

		url=url.replace(/(\&*)([\w\-]+)\=([\w\-\%\(\)\.\@\/]+)/g, function(match, p0, p1, p2){
			checked[p1]=1;
			if (p1 in ps && ps[p1]===null){
				return "";
			}
			if (ps[p1]){
				return p0+p1+"="+ps[p1];
			}
			return p0+p1+"="+p2;
		});

		var extra="";

		for (var key in ps){
			if (!checked[key]){
				if (key in orgs && orgs[key]==null){
					Query.unset(key);
				}else{
					Query.set(key, ps[key]);
					extra+=key+"="+ps[key]+"&";
				}
			}else{
				Query.set(key, ps[key]);
			}
		};

		if (extra.length){
			extra=extra.substr(0, extra.length-1);

			if (url.indexOf("?")==-1){
				url=url+"?"+extra;
			}else{
				url=url+"&"+extra;
			}
		}


		if (url.charAt(url.length-1)=="?"){
			url=url.substr(0, url.length-1);
		}

		
		if (Client.url+"/"+url == document.location.href){
			return;
		}
		
		if (redirect){
			return AP.toURL(url);
		}else{
			return AP.setURL(url);
		}

	}



	this.initContinuousRequest=function(){
		if (this._continuous==false){
			var hash=window.location.hash;
			if (hash && hash.substr(0,2)=='#!' && !AP._in_continuous_request ){
				hash=hash.substring(3);
				AP.redirect(Client.url+'/'+hash);
			}
		}

		this._continuous=true;
		if (!this.__history){
			setInterval(function(){
				if (AP._in_continuous_request){
					return;
				}
				var hash=window.location.hash;
				if (!hash){
					if (AP._last_hash && AP._last_hash.length>=2){
						var nhash=getHash(window.location.href);
						if (nhash){
							window.location.hash='!/'+nhash.join('/');
							return;
						}
					}
					return;
				}

				hash=hash.substring(3);
				if (hash && hash!=AP._last_hash){
					AP._in_continuous_request=true;
					AP.current_url=Client.url+'/'+hash;
					AP.loadURL(AP.current_url);
					AP._last_hash=hash;
				}
			},500);
		}
	};

	this.__popstate_set=false;


	this.setContinuousRequest=function(container){
		if (Client.continuous && Client.continuous==-1){
			return;
		}

		if (this.__history  && !this.__popstate_set){
			history.replaceState({url: window.location.href},'');

			window.onpopstate=function(e){
				if (e.state){
					// Check hostname
					var url=AP.current_url;
					var hostname=document.location.hostname;
					if (Client.https){
						hostname="https://"+hostname;
					}else{
						hostname="http://"+hostname;
					}

					if (!AP.word.prefix(url, hostname)){
						return;
					}else if (!AP.adaptive(url, e.state.url)){
						AP.redirect(e.state.url);
						return;
					}else{
						$.log("[State: "+url+" -> "+document.location.href+"]");
						AP.loadURL(e.state.url,{direct_load: true});
					}
				}
			};
			this.__popstate_set=true;
		}


		if (!container){
			container='';
		}

		$("a", container).each(function(){
			if ($(this).hasClass('blank') || ($(this).attr('target')=='_blank')|| $(this).hasClass('__ap_processed')){
				// No follow or well-done
				return true;
			}
			
			var href=$(this).attr("href");
			if (!href){
				return;
			}

			// Check hostname
			var hostname=$(this).prop('hostname');
			if (hostname!=document.location.hostname){
				return;
			}

			if (!AP.adaptive(href, AP.current_url)){
				return;
			}

			var curl=window.location.href;

			var url;
			var idx=href.indexOf('#');
			if (idx>=0){
				var hash=href.substr(idx+1);
				if (hash.substr(0,2)=='!/'){
					url=hash.substr(2);
				}
			}else{
				url=ap_getHash(href);
				if (!url){
					return;
				}
				url=url.join('/');
			}
			
			if (!url){
				return;
			}


			$(this).addClass('__ap_processed');
			$(this).click(function(event){
				if ($(this).data("href") && $(this).data("url")){
					// event.preventDefault();
					// return false;
				}
				
				event.preventDefault();
				if (url.indexOf('__nhash=1')!=-1){
				}else{
					if (AP.__history){
						history.pushState({url: Client.url+"/"+url},"",Client.url+"/"+url);
					}else{
						window.location.hash="!/"+url;
						AP._last_hash=url;
					}
				}

				AP.loadURL(Client.url+'/'+url,{direct_load: true});

				return false;
			});

		});
	};



	/**
	 * @desc Similar to continuous AJAX request, but this function load
	 * data to the overlay and don't reset the hash.
	 */
	this.load=function(url){
		return AP.loadURL(url, {model: 'overlay'});
	};


	this.__must_reset=false;
	this.__reset_callback=false;

	this.requireReset=function(reset_callback){
		this.__reset_callback=reset_callback;
		this.__must_reset=true;
	};


	this.loadURL=function(url, options){
		AP._in_continuous_request=true;

		$("#ajax-load").show();
		$(document.body).addClass("__onload");
		AP.sys.fire("page.pre.transition");

		var data;

		if (Client.__s){
			data={'from': AP._last_hash, '__s': Client.__s};
		}else{
			data={'from': AP._last_hash, '__s': '0'};
		}

		data._rt=Client.rt;

//		if (Client.pageData.accepted_caches && Client.pageData.accepted_caches.length){
//			$.extend(data, {'__lc':Client.pageData.accepted_caches.join()});
//		}

		// Get all current caches
		var cc=Client.getCurrentCachesKey();
		if (cc && cc.length){
			$.extend(data, {'__lc':cc.join()});
		}


		if (options){
			$.extend(data, options);
		}else{
			options={};
		}





		AP.post(url,data, function(code){
			if (code.direct_request_prevented && (code.direct_request_prevented==1 || code.direct_request_prevented=='1')){
				AP.redirect(url);
				return;
			}

			AP.current_url=url;

			if (!code.good() && (code.message=='FORCE_REFRESH' || code.message=='BAD_XCODE')){
				AP.redirect(url);
				return;
			}



			$(document.body).removeClass("__onload");

			if (code.good()){
				$.log('[Load URL: '+url+"]");

				// track the page view
				// track the page view
				if (typeof ga !== 'undefined'){
					ga('send','pageview', {
						page: url,
						title: code._title
					});
				}else if (typeof _gaq !== 'undefined'){
					_gaq.push(['_trackPageview', url]);
				}


				// First, loading calling the reset function
				var rs=code._init;
				var _rs=eval(rs);
				_rs(function(){
					if (!AP._in_continuous_request && !options.direct_load){
						return;
					}

					// Remove page data

					if (!options.keep_page_data){
						AP.pageData={};
						Client.pageData={};
					}
					
					AP.pageConfig.reset();
					SE.reset();
					
					if (code._log){
						console.log("[Log: "+url+"]");
						console.log(code._log);
					}

					AP.hotkey.clear();
					AP._in_continuous_request=false;

					// Next, setting other components
					AP.html.title(code._title);

					// Next, loading css and javascript
					for (var i=0; i<code._css.length; i++){
						AP.css(code._css[i]);
					}

					// Accept only one javascript
					var called=false;


					if (code._js && code._js.length >0){
						called=AP.js(code._js[code._js.length-1], function(){
							if (code._page_data){
								eval(code._page_data);
							}

							AP.updatePageData();

							AP.fn(code._update, code._html);

							if (code._inpage_js){
								eval(code._inpage_js);
							}
						});
					}

					if (!called){
						if (code._page_data){
							eval(code._page_data);
						}

						AP.updatePageData();

						AP.fn(code._update, code._html);
						if (code._inpage_js){
							eval(code._inpage_js);
						}
					}


					if (Client.pageData.accepted_caches){
						Client.deleteCachesExcept(Client.pageData.accepted_caches);
					}else{
						Client.deleteCachesExcept();
					}

					$("#ajax-load").hide();
				});
			}else{
				$("#ajax-load").hide();

				if (code.data && code.data.force_redirect){
					AP.redirect(code.data.force_redirect);
					return;
				}

				AP._in_continuous_request=false;
			}
		}, true);
	};


	this.loadInlineURL=function(url, data, canvas, options){
		UI.ajaxShow();
		AP.post(url, data, function(code){
			UI.ajaxHide();

			if (!code.good()){
				if (options.error){
					options.error();
				}

				return AP.alertError(code.message);
			}

			if (options.start) options.start();
			AP.blockRediretion=null;
			
			AP.setTempData(code);
			$(canvas).html(code.html);

			if (code._page_data){
				for (var key in code._page_data){
					Client.pageData[key]=code._page_data[key];
				}
			}

			// AP.hotkey.clear();
			if (code.__js && code.__js.length){
				eval(code.__js);
			}

			if (options.end) options.end();
		});
	};


	this.initPageData=function(){
		return this.updatePageData();
	};


	this.updatePageData=function(){
		if (Client.pageData.network){
			Client.network=Client.pageData.network;
		}else{
			Client.network=null;
		}

		if (Client.pageData.user){
			Client.user=Client.pageData.user;
		}else{
			Client.user=null;
		}

		// Clear all events (notice: static event should be called via AP.sys
		AP.event.clear();
	};


	this.resetPageData=function(){
		// Clear MapData
		if (AP.mapData){
			AP.mapData={};
		}

		if (Client){
			Client.tempData={};
		}


		for (var i=0; i<AP.__ts.length; i++){
			if (AP.__ts[i]){
				clearTimeout(AP.__ts[i]);
			}
		}

		for (var i=0; i<AP.__rts.length; i++){
			if (AP.__rts[i]){
				clearTimeout(AP.__rts[i]);
			}
		}

		AP.__ts=[];
		AP.__rts=[];

		$("#ap-temp iframe.__temp").each(function(){
			$(this).remove();
		});

		$("#ap-temp").children('.__temp').remove();
		$(".__temp").remove();
		$(".__tempx").empty();

		$("#apdialogs").hide();

		$(document).unbind('keydown');

		$(document).unbind('.__temp');
		$(window).unbind('.__temp');
		
		AP.blockRediretion=null;
	};


	this.purify=function(txt){
		var temp=txt+"";
		
		if (!temp || !temp.length){
			return "";
		}

		temp=temp.replace(/<[^>]*>?/gm, '');
		temp=temp.replace(/<>/gm,'');
		temp=temp.replace(/^\s+|\s+$/gm,'');
		
		return temp;
	};


	/**
	 * Get HTML, and handle via a specific callback
	 */
	this.getHTML=function(url, callback, options){
		if (!options){
			options={};
		}

		options=$.extend({showAjaxLoader: true}, options);

		if (options.showAjaxLoader){
			$("#ajax-load").show();
		}
		if (!AP.word.prefix(url,'http')){
			url=Client.url+'/'+url;
		}

		AP.post(url,{}, function(code){
			if (code.direct_request_prevented && (code.direct_request_prevented==1 || code.direct_request_prevented=='1')){
				AP.redirect(url);
				return;
			}

			if (code.good()){
				$.log('[Loading] URL '+url);

				// Next, setting other components
				if (code._title){
					AP.html.title(code._title);
				}

				// Next, loading css and javascript
				for (var i=0; i<code._css.length; i++){
					AP.css(code._css[i]);
				}

				// Accept only one javascript
				var called=false;

				if (code._js && code._js.length >0){
					called=AP.js(code._js[code._js.length-1], function(){
						if (code._page_data){
							eval(code._page_data);
						}
						callback(code._html);
						if (code._inpage_js){
							eval(code._inpage_js);
						}
					});
				}
				if (!called){
					if (code._page_data){
						eval(code._page_data);
					}
					callback(code._html);
					if (code._inpage_js){
						eval(code._inpage_js);
					}
				}

				if (options.showAjaxLoader){
					$("#ajax-load").hide();
				}
			}else{
				if (options.showAjaxLoader){
					$("#ajax-load").hide();
				}
			}
		});
	};


	
	this.putTemplate=function(val, placeholder){
		$(placeholder).replaceWith("<span>"+val+"</span>");
	};


	/**
	 * @desc Extend client with data
	 */
	this.appData = function(data){
		for (var key in data){
			// Client=$.extend({}, Client, data);
			if (key != 'user' && key != 'network'){
				Client[key]=data[key];
			}else{
				if (Client[key] && !Client['previous_'+key]){
					Client['previous_'+key]=Client[key];
				}
				Client[key]=data[key];
			}


			// Cleanup application data of previous request if needed
		}
	};



	/**
	 * @desc Add wrapper to the document.body. Wrapper is hidden.
	 * @example
	 * 		AP.add("#alert, #dialog");
	 * 		AP.add("alert, dialog");
	 *	  Both generate the same ids.
	 */
	this.add= function(){
		for (var i=0; i<arguments.length; i++){
			var id=arguments[i];
			if (AP.word.prefix(id,'#')){
				id=id.substr(1);
			}
			$(document.body).append("<div id='"+id+"' style='display:none'></div>");
		}
	};


	/**
	 * @desc Generate an unique ID. This is useful when we want to create random IDs
	 * without conflict.
	 */
	var uuidLists=[];
	this.uuid=function(){
		return '_uuid'+(Math.floor(Math.random()*100000))+"_"+(Math.floor(Math.random()*100000))+"_"+AP.time.timeStamp();
	};



	/**
	 * @desc Just a placeholder function.
	 */
	this.nothing=function(){
		return;
	};


	this.test=function(){
		if (Client.native ||parseInt(Client.env) || arguments.length<2){
			return;
		}

		var code=arguments[0];
		var fn=arguments[1];

		$(document).on('keypress', function(e){
			var tag = e.target.tagName.toLowerCase();
			if (tag != 'input' && tag != 'textarea'){
				if (e.keyCode==code+48){
					fn();
					e.preventDefault();
				}
			}
		});
	}



	/**
	 * @desc Apply an action consecutively on all action
	 */
	this.chain=function(data, fn){
		__chainUp(data, 0, fn);
	};


	function __chainUp(data, index, fn){
		if (index>=data.length){
			return;
		}

		fn(data[index], function(){
			chainUp(data, index+1, fn);
		});
	};



	/**
	 * @desc THE PRIVATE METHODS
	 */

	var ap_getHash=function(href){
		return getHash(href);
	};



	var ap_editSubmission=function(elem){
		// Refreshing editor
		$(elem).find('.__apeditor').each(function(){
			nicEditors.findEditor($(this).attr('id')).saveContent();
		});

		$(elem).find("input, textarea").each(function(){
			if ($(this)[0].title && $(this)[0].title==$(this).val()){
				$(this).val("");
			};
		});

		
		$(elem).find("input[name='__code']").val(Client.code);

		if (!$(elem).hasClass('__apform_fixed')){
			$(elem).addClass('__apform_fixed');
			var text="";
			if (Client.base_network && Client.base_network.id>=1 && !$("input[name='__base_network']", $(elem)).length){
				text+="<input type='hidden' name='__base_network' value='"+Client.base_network.id+"'/>";
			}
			if (Client.network && Client.network.id>=1 && !$("input[name='__network']", $(elem)).length){
				text+="<input type='hidden' name='__network' value='"+Client.network.id+"'/>";
			}
			$(elem).append(text);
		}
	};


	var ap_reeditSubmission=function(elem){

		$(elem).find("input, textarea, select").each(function(){
			if (!$(this).hasClass('__injected')){
				$(this).restore();
			}
		});
	};


	this.iframe_counter=0;


	var ap_setupFrameUpload=function(selector, callback, extra_data){
		if ($(selector).flag("iframe_setup")){
			// Still need to fix extra_data

			if (extra_data){
				for (var key in extra_data){
					if ($(selector).find("input[name="+key+"]").length){
						$(selector).find("input[name="+key+"]").val(extra_data[key]);
					}else{
						$("<input type='hidden' name='"+key+"' class='__injected' value='"+extra_data[key]+"'/>").appendTo(selector);
					}
				}
			}
			return;
		}

		var counter=$('iframe._upload').length;
		var action=$(selector).attr('action');

		var temp=true;
		if ($(selector).hasClass('__xtemp')){
			temp=false;
		}

		var name="__iframeupload_"+AP.iframe_counter;
		AP.iframe_counter++;

		var pm_token=null;
		if (!AP.word.prefix(action, "http://") && !AP.word.prefix(action, "https://")){
			$(selector).attr('action',Client.ajax_url+"/"+action);
		}else{
			if (!AP.word.prefix(action, Client.ajax_url)){
				pm_token=AP.uuid();
				extra_data["pm_token"]=pm_token;
				$(selector).data("pm_token", pm_token);
			}
		}


		var ec="";
		if (temp){
			ec=" __temp";
		}
		var elem="<iframe class='_upload "+ec+"' id='"+name+"' name='"+name+"' src='about:blank' onload='return false;'/>";

		if (pm_token){
			$(elem).appendTo($("#ap-temp")).bind("load", function(){
			});

			AP.cors.register(action, pm_token, callback);
		}else{
			$(elem).appendTo($("#ap-temp")).bind("load", function(){
			  	ap_handleFrame(name, callback);
			});
		}




		$(selector).attr('enctype', "multipart/form-data");
		$(selector).attr('target',name);
		$(selector).attr('method','POST');

		$(selector)[0].target=name;
		$(selector)[0].enctype="multipart/form-data";
		if (!AP.word.prefix(action, "http://") && !AP.word.prefix(action, "https://")){
			$(selector)[0].action=Client.ajax_url+"/"+action;
		}
		$(selector)[0].method='POST';

		var text="<input type='hidden' name='__code' class='__injected' value='"+Client.code+"' />";
		if (Client.user && Client.user.id>=1){
			text+="<input type='hidden' name='__user' class='__injected' value='"+Client.user.id+"' />";
		}
		if (Client.base_network && Client.base_network.id>=1){
			text+="<input type='hidden' name='__base_network' class='__injected' value='"+Client.base_network.id+"'/>";
		}
		if (Client.network && Client.network.id>=1){
			text+="<input type='hidden' name='__network' class='__injected' value='"+Client.network.id+"'/>";
		}

		if (extra_data){
			for (var key in extra_data){
				text+="<input type='hidden' name='"+key+"' class='__injected' value='"+extra_data[key]+"'/>";
			}
		}

		if (AP.sys.ie()){
			text+="<input type='hidden' class='__injected' name='__apupload' value='1'/>";
			text+="<input type='hidden' class='__injected' name='__apiefix' value='1'/>";
		}else{
			text+="<input type='hidden' class='__injected' name='__via' value='__frame'/>";
		}

		$(selector).append(text);

		AP.sys.fire("form.pre.submit", selector);
	};


	var ap_handleFrame=function(name, callback){
		var txt=ap_getFrameText(name);

		if (txt && txt.length && txt.length>=2){
			var obj=parseCode(txt);
			if (callback){
				callback(obj);
			}
		}else{
			callback(new Code({code:0, message:"Unknown error (*)", data:null}));
		}
	};


	var ap_getFrameText=function(name){
		return $("#"+name).contents().find('html').text();
		// return window.frames[name].document.getElementsByTagName("body")[0].innerHTML;
	};

};


var Query=new function __Query(){
	this.__data={};
	this.init=function(data){
		this.__data=data;
	};

	this.get=function(key){
		if (key in this.__data){
			return this.__data[key];
		}
		return null;
	};

	this.getFlat=function(key){
		var val=this.get(key);
		if (val==null){
			return "";
		}

		return val;
	};

	this.getInt=function(key){
		var val=this.get(key);
		if (!val){
			return 0;
		}
		return parseInt(val);
	};

	this.set=function(key, val){
		this.__data[key]=val;
	};

	this.unset=function(key){
		delete this.__data[key];
	};

	this.setDefault=function(key, val){
		if (key in this.__data){
		}else{
			this.__data[key]=val;
		}
	};

	this.reset=function(){
		this.__data={};
	};

	this.all=function(){
		return this.__data;
	};

	
	/**
	 * @desc Safe release, to external variable, no side-effect
	 */
	this.release=function(){
		var obj= shallowClone(this.__data);
		delete obj.env;
		return obj;
	};
	
	this.text=function(){
		var txt="";

		for (var key in this.__data){
			if (key=="env"){
				continue;
			}

			txt+="&"+key+"="+this.__data[key];
		}

		return txt;
	};
};



AP.rules=[];

AP.rewrite=function(pattern, replace, callback, query_string_append){
	AP.rules.push({'pattern': pattern, 'replace': replace, 'callback': callback, 'qsa': query_string_append});
};


/**
 * @desc Check if an URL is matched by a particular rewrite rule
 * @param url
 */
AP.rewriteCheck=function(url){
	for (var i=0; i<AP.rules.length; i++){
		var temp=AP.rules[i];

		if (url.match(RegExp(temp.pattern))){
			var next=url.replace(new RegExp(temp.pattern), temp.replace);
			var fn=temp.callback;
			var paths=next.split("?");
			if (paths.length<2){
				return true;
			}else{
				var qs=queryStringToArray(paths[1]);
				return true;
			}
		}

	}

	return null;
};


/**
 * @desc Check if an URL is matched by a particular rewrite rule, and apply function directly
 * @param url
 */
AP.rewriteRedirect=function(url){
	for (var i=0; i<AP.rules.length; i++){
		var temp=AP.rules[i];

		if (url.match(RegExp(temp.pattern))){
			var qs={};
			var original_qs=url.split("?");
			if (original_qs.length==2 && temp.qsa){
				qs=queryStringToArray(original_qs[1]);
			}

			var next=url.replace(new RegExp(temp.pattern), temp.replace);
			var fn=temp.callback;
			var paths=next.split("?");

			if (paths.length<2){
				fn.call(AP.__urlref, qs);
				return true;
			}else{
				var new_qs=queryStringToArray(paths[1]);
				for (var key in new_qs){
					qs[key]=new_qs[key];
				}
				fn.call(AP.__urlref, qs);
				return true;
			}
		}

	}

	return null;
};




AP.config={};


AP.event=new function __APEvent(){
	this.events={};
	this.__fired={};

	this.clear=function(){
		this.events={};
		this.__fired={};
	};

	this.removeListener=function(ev){
		if (this.events[ev] && this.events[ev].length){
			this.events[ev]=[];
			delete this.events[ev];
		}
	};

	this.trigger=function(ev, data){
		if (this.events[ev] && this.events[ev].length){
			for (var i=0; i<this.events[ev].length; i++){
				var fn=this.events[ev][i];
				if (!fn){
					break;
				}

				if (fn._caller){
					fn.apply(fn._caller, data);
				}else{
					if (AP.data.isArray(data)){
						fn.apply(undefined, data);
					}else{
						fn(data);
					}

				}
			}
		}

		this.__fired[ev]=1;
		return this;
	};


	this.release=function(ev){
		if (this.events[ev] && this.events[ev].length){
			while (true){
				var fn=this.events[ev].shift();
				if (!fn){
					break;
				}

				if (fn._caller){
					fn.apply(fn._caller);
				}else{
					fn();
				}
			}
		}

		this.__fired[ev]=1;
		return this;
	};


	this.bind=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}

		if (_caller){
			fx._caller=_caller;
		}

		this.events[ev].push(fx);

		return this;
	};


	/**
	 * @desc Reset all current binds and rebind
	 */
	this.rebind=function(ev, fx, _caller){
		this.events[ev]=[];

		if (_caller){
			fx._caller=_caller;
		}

		this.events[ev].push(fx);

		return this;
	};



	this.bindAll=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}

		if (_caller){
			fx._caller=_caller;
		}

		this.events[ev]=[fx]; // Replace

		return this;
	};


	this.fired=function(ev){
		if (this.__fired[ev]){
			return true;
		}
		return false;
	};
};






function range(from, to, space){
	if (!space || typeof space=="undefined"){
		space=1;
	}

	var r=[];
	if (from<to){
		for (var i=from; i<=to; i=i+space){
			r.push(""+i);
		}
		return r;
	}else{
		for (var i=from; i>=to; i=i-space){
			r.push(""+i);
		}
		return r;
	}

};


function undone(msg){
	if (msg){
		AP.alertError(msg);
	}else{
		AP.alertError("This feature is either disabled or not ready for public yet. Please try again later.");
	}
};



//GetPageScroll() by quirksmode.com
function getViewport() {
	var xScroll, yScroll;
	if (self.pageYOffset) {
	  yScroll = self.pageYOffset;
	  xScroll = self.pageXOffset;
	} else if (document.documentElement && document.documentElement.scrollTop) {
	  yScroll = document.documentElement.scrollTop;
	  xScroll = document.documentElement.scrollLeft;
	} else if (document.body) {
	  yScroll = document.body.scrollTop;
	  xScroll = document.body.scrollLeft;
	}
	return new Array(xScroll,yScroll);
}


/**
 * @desc Getting the upload filename.
 */
function getUploadFN(str){
	str=str.replace(/\\/g,'/');
	var parts=str.split("/");
	if (!parts || parts.length<1){
		return false;
	}
	return parts[parts.length-1];
}



/**
 * @desc Get hash from an url.
 * @returns Array
 */
function getHash(href){
	if (!href){
		return null;
	}
	if (href.indexOf('#')!=-1){
		return null;
	}

	var path=href.split("//", 2);
	if (!path || path.length!=2){
		return;
	}
	var sub_path=path[1];
	var url=sub_path.split("/");
	if (!url || url.length<2){
		return;
	}
	url=AP.array.sub(url, 1);
	return url;
};


function safe(txt){
	return AP.purify(txt);
};

function inline(content, max_length){
	if (!max_length){
		max_length=255;
	}
	
	return AP.word.shorten(AP.purify(content),max_length," ");
};

function purify(txt){
	var str=safe(txt);
	var defaultDiacriticsRemovalMap = [
			{'base':'A', 'letters':/[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g},
			{'base':'AA','letters':/[\uA732]/g},
			{'base':'AE','letters':/[\u00C6\u01FC\u01E2]/g},
			{'base':'AO','letters':/[\uA734]/g},
			{'base':'AU','letters':/[\uA736]/g},
			{'base':'AV','letters':/[\uA738\uA73A]/g},
			{'base':'AY','letters':/[\uA73C]/g},
			{'base':'B', 'letters':/[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g},
			{'base':'C', 'letters':/[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g},
			{'base':'D', 'letters':/[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g},
			{'base':'DZ','letters':/[\u01F1\u01C4]/g},
			{'base':'Dz','letters':/[\u01F2\u01C5]/g},
			{'base':'E', 'letters':/[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g},
			{'base':'F', 'letters':/[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g},
			{'base':'G', 'letters':/[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g},
			{'base':'H', 'letters':/[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g},
			{'base':'I', 'letters':/[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g},
			{'base':'J', 'letters':/[\u004A\u24BF\uFF2A\u0134\u0248]/g},
			{'base':'K', 'letters':/[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g},
			{'base':'L', 'letters':/[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g},
			{'base':'LJ','letters':/[\u01C7]/g},
			{'base':'Lj','letters':/[\u01C8]/g},
			{'base':'M', 'letters':/[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g},
			{'base':'N', 'letters':/[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g},
			{'base':'NJ','letters':/[\u01CA]/g},
			{'base':'Nj','letters':/[\u01CB]/g},
			{'base':'O', 'letters':/[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g},
			{'base':'OI','letters':/[\u01A2]/g},
			{'base':'OO','letters':/[\uA74E]/g},
			{'base':'OU','letters':/[\u0222]/g},
			{'base':'P', 'letters':/[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g},
			{'base':'Q', 'letters':/[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g},
			{'base':'R', 'letters':/[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g},
			{'base':'S', 'letters':/[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g},
			{'base':'T', 'letters':/[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g},
			{'base':'TZ','letters':/[\uA728]/g},
			{'base':'U', 'letters':/[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g},
			{'base':'V', 'letters':/[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g},
			{'base':'VY','letters':/[\uA760]/g},
			{'base':'W', 'letters':/[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g},
			{'base':'X', 'letters':/[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g},
			{'base':'Y', 'letters':/[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g},
			{'base':'Z', 'letters':/[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g},
			{'base':'a', 'letters':/[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g},
			{'base':'aa','letters':/[\uA733]/g},
			{'base':'ae','letters':/[\u00E6\u01FD\u01E3]/g},
			{'base':'ao','letters':/[\uA735]/g},
			{'base':'au','letters':/[\uA737]/g},
			{'base':'av','letters':/[\uA739\uA73B]/g},
			{'base':'ay','letters':/[\uA73D]/g},
			{'base':'b', 'letters':/[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g},
			{'base':'c', 'letters':/[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g},
			{'base':'d', 'letters':/[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g},
			{'base':'dz','letters':/[\u01F3\u01C6]/g},
			{'base':'e', 'letters':/[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g},
			{'base':'f', 'letters':/[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g},
			{'base':'g', 'letters':/[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g},
			{'base':'h', 'letters':/[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g},
			{'base':'hv','letters':/[\u0195]/g},
			{'base':'i', 'letters':/[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g},
			{'base':'j', 'letters':/[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g},
			{'base':'k', 'letters':/[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g},
			{'base':'l', 'letters':/[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g},
			{'base':'lj','letters':/[\u01C9]/g},
			{'base':'m', 'letters':/[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g},
			{'base':'n', 'letters':/[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g},
			{'base':'nj','letters':/[\u01CC]/g},
			{'base':'o', 'letters':/[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g},
			{'base':'oi','letters':/[\u01A3]/g},
			{'base':'ou','letters':/[\u0223]/g},
			{'base':'oo','letters':/[\uA74F]/g},
			{'base':'p','letters':/[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g},
			{'base':'q','letters':/[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g},
			{'base':'r','letters':/[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g},
			{'base':'s','letters':/[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g},
			{'base':'t','letters':/[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g},
			{'base':'tz','letters':/[\uA729]/g},
			{'base':'u','letters':/[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g},
			{'base':'v','letters':/[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g},
			{'base':'vy','letters':/[\uA761]/g},
			{'base':'w','letters':/[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g},
			{'base':'x','letters':/[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g},
			{'base':'y','letters':/[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g},
			{'base':'z','letters':/[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g}
		  ];

	for (var i=0; i<defaultDiacriticsRemovalMap.length; i++) {
		str = str.replace(defaultDiacriticsRemovalMap[i].letters, defaultDiacriticsRemovalMap[i].base);
	}

	str=str.replace(/[\W_]+/g," ");
	str=$.trim(str);
	return str.toLowerCase();
};

function purifyStrict(str){
	var s=purify(str);
	s=s.replace(/[\W_\s]+/g,"");
	return s.toLowerCase();
};

function shallowClone(obj){
	if (!AP.data.isObject(obj)){
		return obj;
	}
	
	var temp={};
	for (var key in obj){
		temp[key]=obj[key];
	}

	return temp;
};


/*! Copyright (c) 2008 Brandon Aaron (brandon.aaron@gmail.com || http://brandonaaron.net)
 * Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
 * and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.
 */

/**
 * Gets the width of the OS scrollbar
 */
function getScrollbarWidth(){
	var jTest = $('<div style="display:none;height:50px;overflow: scroll"><div style="height:100px;"></div></div>');
    $('body').append(jTest);
    var w = jTest.innerWidth();
    jTest.css({
        overflow: 'auto',
        height: '200px'
    });
    var w2 = jTest.innerWidth();
    var c= w-w2;

	return (c > 0) ? c : 15; // fix invisible scrollbar on MacOSX
	
	var scrollbarWidth = 0;
	if (!scrollbarWidth) {
		if ( $.browser.msie ) {
			var $textarea1 = $('<textarea cols="10" rows="2"></textarea>')
					.css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body'),
				$textarea2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>')
					.css({ position: 'absolute', top: -1000, left: -1000 }).appendTo('body');
			scrollbarWidth = $textarea1.width() - $textarea2.width();
			$textarea1.add($textarea2).remove();
		} else {
			var $div = $('<div />')
				.css({ width: 100, height: 100, overflow: 'auto', position: 'absolute', top: -1000, left: -1000 })
				.prependTo('body').append('<div />').find('div')
					.css({ width: '100%', height: 200 });
			scrollbarWidth = 100 - $div.width();
			$div.parent().remove();
		}
	}
	return scrollbarWidth;
};





/**
 * @desc AJAX-returned Code Object
 * @param txt
 * @returns {Code}
 */

function parseCode(txt){
	if (AP.isObject(txt)){
		return new Code(txt);
	}

	try{
		var tmp = txt.substring(txt.indexOf('{"code"'));
		return new Code(eval("("+tmp+")"));
	}catch(e){
		return new Code({"code":0, "message":'Unknown Error',"data":null, "error":"parse error"});
	}
}




var ExitCode = new function _ExitCode(){
	this.fns={};

	/**
	 * @desc Register a callback on code
	 */
	this.reg=function(code, fn){
		this.fns[code]=fn;
	};


	/**
	 * @desc Execute the callback marked by code (and data is the param)
	 */
	this.execute=function(code, data){
		var fn=this.fns[code];
		if (fn){
			fn(data);
		}else{
			$.log("Unknown exitcode "+code);
		}
	}
};

/**
 * @desc Quickly build associcate array
 * @param data
 * @returns
 */
function assoc(data){
	if (AP.data.isArray(data)){
		var obj={};
		for (var i=0; i<data.length; i++){
			obj[data[i].name]=data[i].value;
		}
		return obj;	
	}
	
	var obj={};
	obj[arguments[0]]=arguments[1];
	return obj;
};


function mobile(){
	return (Client.mobile && Client.mobile==1);
};


function __(str, cond){
	if (cond) return str;
	return "";
};


function ___(str, other){
	if (!str || !str.length){
		return other;
	}
	return str;
};



/**
 * @desc This is the class to handle Ajax return result.
 */

function Code(obj){
	this.code=0;
	this.message='';
	this.data=null;

	if (obj){
		$.extend(this, obj);
		this.code=parseInt(this.code);
	}


	/**
	 * @desc Check if a code is good.
	 */
	this.good=function(){
		if (this.hasCode(1)) return true;
		return false;
	};

	this.notEmpty=function(){
		return !this.empty;
	};

	this.hasCode=function(code){
		if (this.code==code){
			return true;
		}
		return false;
	};


	this.hasMessage=function(message){
		if (this.message==message){
			return true;
		}
		if (AP.isInt(message) && this.message && message==parseInt(this.message)){
			return true;
		}
		return false;
	};
};



Code.init=function(txt){
	try{
		return new Code(eval("("+txt+")"));
	}
	catch(e){
		return new Code({"code":0, "message":'Unknown error',"data":null, "error":"parse_error"});
	}
};





var fxs={};
var fxe={};

function APJSONCALLBACK(data){
	if (data.fx){
		var fn=fxs[data.fx];
		var code=new Code(data);
		if (code){
			fn(code);
		}else{
			var err=fxe[data.fx];
			if (err){
				err(code);
			}
		}
		$("#"+data.fx).remove();
	}
};


function APJSONREG(fx, fn, fn_error){
	fxs[fx]=fn;
	fxe[fx]=fn_error;
};


function queryStringToArray(qs){
	var parts=qs.split("&");
	var r={};
	for (var i=0; i<parts.length; i++){
		var data=parts[i].split("=");
		if (data && data.length==2){
			r[data[0]]=data[1];
		}
	}

	return r;
};


function isFormData(data){
	return (data && Client.native && data instanceof FormData);
};







function __selfcall(ref){
	var fn=$(ref).data("action");
	fn();
};



function $$(fn){
	if (Client.env && !parseInt(Client.env)){
		fn();
	}
};




AP._locales={};

AP.locale=new function __APLocale(){
	this.get=function(key, df){
		if (AP._locales[key]){
			return AP._locales[key];
		}
		if (df){
			return df;
		}

		return null;
	}

	this.set=function(key, val){
		AP._locales[key]=val;
	};

};




AP.cors=new function __APCORS(){
	this.url=null;
	this.pm_token=null;
	this.callback=null;
	this.__init=false;

	this.register=function(url, token, callback){
		this.init();
		this.url=url;
		this.pm_token=token;
		this.callback=callback;
	};


	this.init=function(){
		// INIT ONCE
		if (this.__init){
			return;
		}

		this.__init=true;

		var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
		var apeventer = window[eventMethod];
		var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

		// Listen to message from child window
		apeventer(messageEvent, function(e) {
			if (typeof e.data.pm_token == 'undefined') return;
			if (e.data.pm_token!=AP.cors.pm_token){
				AP.alertError("Security error (invalid pm token)");
			}

			if (!AP.word.prefix(AP.cors.url, e.origin)){
				AP.alertError("Security error (invalid origin)");
			}

			var obj=parseCode(e.data);
			if (AP.cors.callback){
				AP.cors.callback(obj);
			}
		}, false);
	}
};



AP.postmessage=new function __APPostMessage(){
	this.__inited=false;
	this.__token = 0;
	this.events={};
	
	this.init=function(){
		if (this.__inited){
			return;
		}
		
		this.__inited=true;
		this.__token=AP.uuid();
		
		this.listen(function(data, domain){
			var event=data.event;
			var token=data.token;
			if (token!=AP.postmessage.token()){
				$.log("POST_MESSAGE_TOKEN_ERROR");
				return;
			}
			
			var fn=AP.postmessage.events[event];
			if (fn){
				fn(data);
			}
		});
	};
	
	this.register=function(event, callback){
		this.events[event]=callback;
	};
	
	this.token=function(){
		this.init();
		return this.__token;
	};
	
	
	this.toParent=function(data, parent_domain){
		data.token= Query.get("base_token");
		data.event= Query.get("event");
		
		parent.postMessage(data, parent_domain);
	};

	this.toAll=function(ifr_selector, data){
		$(document.body).find(ifr_selector).each(function(){
			$(this).on("load", function(){
				$(this).data("loaded", 1);
				var src=$(this).attr("src");
				var fr=$(this)[0].contentWindow;
				var domain=getDomain($(this).attr("src"));
				fr.postMessage(data, domain);
			});

			if (!$(this).is(":visible")){
				return;
			}

			var src=$(this).attr("src");
			var fr=$(this)[0].contentWindow;
			var domain=getDomain($(this).attr("src"));
			fr.postMessage(data, domain);

		});
	};

	this.toChild=function(ifr, data){
		$(ifr).each(function(){
			$(this).on("load", function(){
				$(this).data("loaded", 1);
				var src=$(this).attr("src");
				var fr=$(this)[0].contentWindow;
				var domain=getDomain($(this).attr("src"));
				fr.postMessage(data, domain);
			});

			if (!$(this).is(":visible")){
				return;
			}

			var src=$(this).attr("src");
			var fr=$(this)[0].contentWindow;
			var domain=getDomain($(this).attr("src"));
			fr.postMessage(data, domain);

		});
	};

	this.listen=function(handler){
		var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
		var eventer = window[eventMethod];
		var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

		eventer(messageEvent,function(e){
			handler(e.data, e.origin);
		},false);
	};


	function getDomain(url){
		var part=AP.word.split("/", url);
		if (part.length<2){
			return "*";
		}

		return part[0]+"//"+part[1];
	};
};


AP.cmp=new function __APCmp(){
	this.int=function(a, b){
		return parseInt(a)==parseInt(b);
	};

	this.str=function(a,b){
		return a.toLowercase()==b.toLowercase();
	}
};



function explain(txt, opts){
	if (opts && opts===true){
		opts={icon: false};
	}

	opts=$.extend({direction: 'up', width: 200, icon: true}, opts);

	if (!opts.icon){
		return "<span class='-infobox -"+opts.direction+" -w"+opts.width+"'><span class='-box block normal'>"+txt+"</span></span>";
	}

	return "&nbsp; <span class='inline relative -infow'><span class='-ap icon-help-with-circle'></span> <span class='-infobox -"+opts.direction+" -w"+opts.width+"'><span class='-box block normal'>"+txt+"</span></span></span>";
};



(function() {
	var beforePrint = function() {
		AP.__printing=1;
	};
	var afterPrint = function() {
		AP.__printing=0;
	};

	if (window.matchMedia) {
		var mediaQueryList = window.matchMedia('print');
		mediaQueryList.addListener(function(mql) {
			if (mql.matches) {
				beforePrint();
			} else {
				afterPrint();
			}
		});
	}

	window.onbeforeprint = beforePrint;
	window.onafterprint = afterPrint;
}());




AP.i18n=new function __APi18n(){
	this.confs={date_format: "dmy", time_format:"hm"};
	
	this.get=function(key){
		var confs=$.extend(this.confs, Client.i18n);
		return confs[key];
	};
	
	this.dateFormat=function(){
		var format=this.get("date_format");
		if (format=="dmy"){
			return "%d/%m/%Y";
		}else if (format=="full"){
			return "%l, %F %d, %Y";
		}else{
			return "%m/%d/%Y";
		}
	};
	
	this.date=function(ts){
		return AP.time.time(this.dateFormat(), ts);
	};
	
	this.datetime=function(ts){
		return AP.time.time("%H:%i "+this.dateFormat(), ts);
	};
	
	this.time=function(ts){
		return AP.time.time("%H:%i", ts);
	};
	
	this.readDate=function(str){
		var data=str.split("/");
		if (data.length!=3){
			return 0;
		}
		
		var day=parseInt(data[0]);
		var month=parseInt(data[1])-1;
		var year=parseInt(data[2]);
		
		var ts=new Date(year, month, day, 0, 0, 0, 0);
		return Math.floor(ts.getTime()/1000);
	};
	
	this.dateRange=function(stime, etime){
		stime=parseInt(stime);
		etime=parseInt(etime);
		
		if (etime){
			if (AP.time.sameYear(stime, etime)){
				return AP.time.time("%d/%m", stime)+" - " + AP.time.time("%d/%m/%y", etime);
			}else{
				return AP.time.time("%d/%m/%y", stime)+" - " + AP.time.time("%d/%m/%y", etime);
			}
		}else{
			if (parseInt(stime)){
				return AP.time.time("%d/%m/%y", stime)+" &#8702; ... ";
			}else{
				return "... "+" &#8702; ... ";	
			}
		}
	};
	
	
	this.timeRange=function(stime, etime){
		stime=parseInt(stime);
		etime=parseInt(etime);
		
		if (etime){
			if (AP.time.sameYear(stime, etime)){
				return AP.time.time("%H:%i %d/%m", stime)+" - " + AP.time.time("%H:%i %d/%m", etime);
			}else{
				return AP.time.time("%H:%i %d/%m", stime)+" - " + AP.time.time("%H:%i %d/%m", etime);
			}
		}else{
			return AP.time.time("%H:%i %d/%m/%y", stime)+" &#8702; ... ";
		}
	};
	
	this.range=this.dateRange;
	
	
	
	this.duration=function(total_seconds, compact){
		if (compact){
			return this.durationCompact(total_seconds);
			
		}
		
		var s=parseInt(total_seconds);
		if (s<3600){
			var m=Math.floor(s/60);
			return "<em>"+(m)+"</em>m";
		}
		
		if (s<48*3600){
			var h=Math.floor(s/3600);
			var m=Math.floor((s-h*3600)/60);
			return "<em>"+(h)+"</em>h<em>"+(m)+"</em>m";
		}
		
		var d=Math.floor(s/(24*3600));
		var h=Math.floor((s-d*24*3600)/3600);
		var m=Math.floor((s-d*24*3600-h*3600)/60);
		return "<em>"+(d)+"</em>d<em>"+(h)+"</em>h<em>"+(m)+"</em>m";
	};
	
	
	this.durationCompact=function(total_seconds){
		var s=parseInt(total_seconds);
		if (s<3600){
			var m=parseFloat(s/60).toFixed(1);
			return "<em>"+(m)+"</em>m";
		}
		
		if (s<48*3600){
			var h=parseFloat(s/3600).toFixed(1);
			return "<em>"+(h)+"</em>h";
		}
		
		var d=parseFloat(s/(24*3600)).toFixed(1);
		return "<em>"+(d)+"</em>d";
	};
	
};


AP.hotkey=new function __APHotKey(){
	this.__init=false;
	this.__dialog=false;
	this.events={};
	
	
	this.init=function(dialog){
		if (this.__init){
			return this;
		}
		
		if (!dialog){
			dialog=false;
		}
		
		this.__dialog=dialog;
		this.__init=true;
		this.bind();
		return this;
	};
	
	this.on=function(key, fn){
		this.events[key]=fn;
		return this;
	};
	
	this.clear=function(){
		this.__init=false;
		this.events={};
		
		return this;
	};
	
	
	this.moveable=function(elems, options){
		if (!options){
			options={};
		}
		
		options=$.extend({first: -1, activeClass: 'active'}, options);
		this.on("up", function(e){
			refocus(elems, -1, options);
		}).on("down", function(e){
			refocus(elems, 1, options);
		}).on("enter", function(e){
			$(elems).filter(".active").first().find(".url").click();
		});
		
		$(elems).first().addClass("active");

	};
	
	
	
	this.bind=function(){
		$(document).on('keydown.__temp', function(e){
			if (!AP.hotkey.__dialog && $("#apdialogs").is(":visible")){
				return;
			}
			
			var tag = e.target.tagName.toLowerCase();
			if (tag != 'input' && tag != 'textarea' && !$(e.target).hasClass("trumbowyg-editor")){

				var ev=findCb(AP.hotkey.events, e.which);
				if (ev){
					if (ev.delay){
						setTimeout(function(){
							ev(e);
						}, 250);	
					}else{
						ev(e);
					}
				}
			}
		});
		
		return this;
	};
	
	function findCb(evs, keycode){
		if (keycode==AP.key.right && evs["right"]){
			return evs["right"];
		}
		
		if (keycode==AP.key.left && evs["left"]){
			return evs["left"];
		}
		
		if (keycode==AP.key.down && evs["down"]){
			return evs["down"];
		}
		
		if (keycode==AP.key.up && evs["up"]){
			return evs["up"];
		}
		
		if (keycode==AP.key.enter && evs["enter"]){
			return evs["enter"];
		}
		
		var c=String.fromCharCode(keycode);
		if (c.match(/^[a-z0-9]+$/i)){
			if (evs[c.toLowerCase()]){
				evs[c.toLowerCase()].delay=1;
				return evs[c.toLowerCase()];
			}
		}
		
		return null;
	};
	
	
	function refocus(elems, pace, options){
		var $elems=$(elems);
		var $elem=$elems.filter(".active");
		var $c=null;
		
		if (!$elem.length){
			$elems.first().addClass("active");
			$c=$elems.first();
		}else{
			if (pace>0 && $elem.next().length){
				$elems.removeClass("active");
				$elem.next().addClass("active");
				$c=$elem.next();
			}else if (pace<0 && $elem.prev().length){
				$elems.removeClass("active");
				$elem.prev().addClass("active");
				$c=$elem.prev();
			}
		}
		
		if ($c && $c.length){
			var $box=$c.closest(".__apscrollbar_target");
			if (!$box.length){
				return;
			}
			var offset=$c.offset().top-$box.offset().top;
			// $.log([$c.offset().top, $box.offset().top, $box.scrollTop()]);
			// Layout.scrollTo($c, 150, 150);
		}
	};
};


function APCaret(ref){
	this.init=function(){
		
	};
};


AP.url=function(url){
	return new APURL(url);
};


function APURL(url){
	this.url=url;
	this.data={};
	
	this.q=function(key, val){
		if (val && val.length){
			this.data[key]=val;	
		}
		return this;
	};
	
	this.text=function(){
		var qs="";
		var total=0;
		for (var key in this.data){
			total++;
		}
		
		var cur=0;
		for (var key in this.data){
			cur++;
			if (cur<total){
				qs+=key+"="+this.data[key]+"&";	
			}else{
				qs+=key+"="+this.data[key];
			}
			
		}
		
		return this.url+"?"+qs;
	};
	
	
	this.current=function(){
		return window.location.href;
	};
	
	this.self=function(){
		return this.current;
	};
};


AP.currency=new function __APCurrency(){
	this.cur="vnd";
	
	/**
	 * @desc Init & set currency
	 */
	this.init=function(cur){
		this.cur=cur;
	};
	
	
	/**
	 * @desc Format a number by currency
	 */
	this.format=function(number, cur){
		if (!cur){
			cur=this.cur;
		}
		
		if (cur=="vnd"){
			return this.formatVND(number);
		}
	};
	
	
	this.full=function(number, cur){
		if (!cur){
			cur=this.cur;
		}
		
		if (cur=="vnd"){
			if (!number || number<0.001){
				return '&#8363;<em>0.00</em>';
			}
			
			return '&#8363;<em>'+AP.data.numberFormat(parseInt(number))+"</em>";
		}
	};
	
	
	/**
	 * @desc Alias of format()
	 */
	this.get=function(number, cur){
		return this.format(number, cur);
	};
	
	
	
	this.formatVND=function(number){
		if (!AP.data.isInt(number)){
			return "&#8363;0";
		}
		
		var n=parseInt(number);
		var txt=AP.data.numberFormat(n);
		
		if (n>1000000){
			txt="<b>"+(n/1000000).toFixed(2)+"</b>M";
		}else if (n>100000){
			txt="<b>"+(n/1000).toFixed(2)+"</b>K";
		}
		
		return "&#8363;"+txt;
	};
	
};


// Internal search and index engine to give O(n) operations on search
var SE=new function __SE(){
	this.data={};
	
	this.reset=function(){
		this.data={};
	};
	
	
	this.get=function(key, id){
		if (this.data["__"+key] && this.data["__"+key]["k"+id]){
			return this.data["__"+key]["k"+id];
		}
		
		return null;
	};
	
	
	/**
	 * @desc Init cache for O(1) finders
	 */
	this.cache=function(key, arr, index){
		if (!index){
			index='id';
		}
		
		this.data["__"+key]={};
		for (var i=0; i<arr.length; i++){
			this.data["__"+key]["k"+arr[i][index]]=arr[i];
		}
	};
	
	this.cached=function(key){
		if (this.data["__"+key]){
			return true;
		}
		
		return false;
	};
};


!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.Redux={})}(this,function(e){"use strict";var t=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof module?module:Function("return this")()),r=function(){return Math.random().toString(36).substring(7).split("").join(".")},n={INIT:"@@redux/INIT"+r(),REPLACE:"@@redux/REPLACE"+r(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+r()}};function o(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+r+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function i(e,t){return function(){return t(e.apply(this,arguments))}}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}e.createStore=function e(r,o,i){var u;if("function"==typeof o&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof o&&void 0===i&&(i=o,o=void 0),void 0!==i){if("function"!=typeof i)throw Error("Expected the enhancer to be a function.");return i(e)(r,o)}if("function"!=typeof r)throw Error("Expected the reducer to be a function.");var a=r,c=o,f=[],s=f,d=!1;function l(){s===f&&(s=f.slice())}function p(){if(d)throw Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function h(e){if("function"!=typeof e)throw Error("Expected the listener to be a function.");if(d)throw Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return l(),s.push(e),function(){if(t){if(d)throw Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,l();var r=s.indexOf(e);s.splice(r,1)}}}function y(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw Error("Reducers may not dispatch actions.");try{d=!0,c=a(c,e)}finally{d=!1}for(var t=f=s,r=0;t.length>r;r++)(0,t[r])();return e}return y({type:n.INIT}),(u={dispatch:y,subscribe:h,getState:p,replaceReducer:function(e){if("function"!=typeof e)throw Error("Expected the nextReducer to be a function.");a=e,y({type:n.REPLACE})}})[t]=function(){var e,r=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function t(){e.next&&e.next(p())}return t(),{unsubscribe:r(t)}}})[t]=function(){return this},e},u},e.combineReducers=function(e){for(var t=Object.keys(e),r={},i=0;t.length>i;i++){var u=t[i];"function"==typeof e[u]&&(r[u]=e[u])}var a,c=Object.keys(r);try{!function(e){Object.keys(e).forEach(function(t){var r=e[t];if(void 0===r(void 0,{type:n.INIT}))throw Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:n.PROBE_UNKNOWN_ACTION()}))throw Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+n.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(r)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,i={},u=0;c.length>u;u++){var f=c[u],s=e[f],d=(0,r[f])(s,t);if(void 0===d){var l=o(f,t);throw Error(l)}i[f]=d,n=n||d!==s}return n?i:e}},e.bindActionCreators=function(e,t){if("function"==typeof e)return i(e,t);if("object"!=typeof e||null===e)throw Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var r=Object.keys(e),n={},o=0;r.length>o;o++){var u=r[o],a=e[u];"function"==typeof a&&(n[u]=i(a,t))}return n},e.applyMiddleware=function(){for(var e=arguments.length,t=Array(e),r=0;e>r;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;arguments.length>t;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){u(e,t,r[t])})}return e}({},r,{dispatch:n=a.apply(void 0,i)(r.dispatch)})}}},e.compose=a,e.__DO_NOT_USE__ActionTypes=n,Object.defineProperty(e,"__esModule",{value:!0})});


(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory(global):typeof define==="function"&&define.amd?define(factory):factory(global)})(typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:this,function(global){"use strict";var _Base64=global.Base64;var version="2.5.0";var buffer;if(typeof module!=="undefined"&&module.exports){try{buffer=eval("require('buffer').Buffer")}catch(err){buffer=undefined}}var b64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64tab=function(bin){var t={};for(var i=0,l=bin.length;i<l;i++)t[bin.charAt(i)]=i;return t}(b64chars);var fromCharCode=String.fromCharCode;var cb_utob=function(c){if(c.length<2){var cc=c.charCodeAt(0);return cc<128?c:cc<2048?fromCharCode(192|cc>>>6)+fromCharCode(128|cc&63):fromCharCode(224|cc>>>12&15)+fromCharCode(128|cc>>>6&63)+fromCharCode(128|cc&63)}else{var cc=65536+(c.charCodeAt(0)-55296)*1024+(c.charCodeAt(1)-56320);return fromCharCode(240|cc>>>18&7)+fromCharCode(128|cc>>>12&63)+fromCharCode(128|cc>>>6&63)+fromCharCode(128|cc&63)}};var re_utob=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;var utob=function(u){return u.replace(re_utob,cb_utob)};var cb_encode=function(ccc){var padlen=[0,2,1][ccc.length%3],ord=ccc.charCodeAt(0)<<16|(ccc.length>1?ccc.charCodeAt(1):0)<<8|(ccc.length>2?ccc.charCodeAt(2):0),chars=[b64chars.charAt(ord>>>18),b64chars.charAt(ord>>>12&63),padlen>=2?"=":b64chars.charAt(ord>>>6&63),padlen>=1?"=":b64chars.charAt(ord&63)];return chars.join("")};var btoa=global.btoa?function(b){return global.btoa(b)}:function(b){return b.replace(/[\s\S]{1,3}/g,cb_encode)};var _encode=buffer?buffer.from&&Uint8Array&&buffer.from!==Uint8Array.from?function(u){return(u.constructor===buffer.constructor?u:buffer.from(u)).toString("base64")}:function(u){return(u.constructor===buffer.constructor?u:new buffer(u)).toString("base64")}:function(u){return btoa(utob(u))};var encode=function(u,urisafe){return!urisafe?_encode(String(u)):_encode(String(u)).replace(/[+\/]/g,function(m0){return m0=="+"?"-":"_"}).replace(/=/g,"")};var encodeURI=function(u){return encode(u,true)};var re_btou=new RegExp(["[À-ß][-¿]","[à-ï][-¿]{2}","[ð-÷][-¿]{3}"].join("|"),"g");var cb_btou=function(cccc){switch(cccc.length){case 4:var cp=(7&cccc.charCodeAt(0))<<18|(63&cccc.charCodeAt(1))<<12|(63&cccc.charCodeAt(2))<<6|63&cccc.charCodeAt(3),offset=cp-65536;return fromCharCode((offset>>>10)+55296)+fromCharCode((offset&1023)+56320);case 3:return fromCharCode((15&cccc.charCodeAt(0))<<12|(63&cccc.charCodeAt(1))<<6|63&cccc.charCodeAt(2));default:return fromCharCode((31&cccc.charCodeAt(0))<<6|63&cccc.charCodeAt(1))}};var btou=function(b){return b.replace(re_btou,cb_btou)};var cb_decode=function(cccc){var len=cccc.length,padlen=len%4,n=(len>0?b64tab[cccc.charAt(0)]<<18:0)|(len>1?b64tab[cccc.charAt(1)]<<12:0)|(len>2?b64tab[cccc.charAt(2)]<<6:0)|(len>3?b64tab[cccc.charAt(3)]:0),chars=[fromCharCode(n>>>16),fromCharCode(n>>>8&255),fromCharCode(n&255)];chars.length-=[0,0,2,1][padlen];return chars.join("")};var _atob=global.atob?function(a){return global.atob(a)}:function(a){return a.replace(/\S{1,4}/g,cb_decode)};var atob=function(a){return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g,""))};var _decode=buffer?buffer.from&&Uint8Array&&buffer.from!==Uint8Array.from?function(a){return(a.constructor===buffer.constructor?a:buffer.from(a,"base64")).toString()}:function(a){return(a.constructor===buffer.constructor?a:new buffer(a,"base64")).toString()}:function(a){return btou(_atob(a))};var decode=function(a){return _decode(String(a).replace(/[-_]/g,function(m0){return m0=="-"?"+":"/"}).replace(/[^A-Za-z0-9\+\/]/g,""))};var noConflict=function(){var Base64=global.Base64;global.Base64=_Base64;return Base64};global.Base64={VERSION:version,atob:atob,btoa:btoa,fromBase64:decode,toBase64:encode,utob:utob,encode:encode,encodeURI:encodeURI,btou:btou,decode:decode,noConflict:noConflict,__buffer__:buffer};if(typeof Object.defineProperty==="function"){var noEnum=function(v){return{value:v,enumerable:false,writable:true,configurable:true}};global.Base64.extendString=function(){Object.defineProperty(String.prototype,"fromBase64",noEnum(function(){return decode(this)}));Object.defineProperty(String.prototype,"toBase64",noEnum(function(urisafe){return encode(this,urisafe)}));Object.defineProperty(String.prototype,"toBase64URI",noEnum(function(){return encode(this,true)}))}}if(global["Meteor"]){Base64=global.Base64}if(typeof module!=="undefined"&&module.exports){module.exports.Base64=global.Base64}else if(typeof define==="function"&&define.amd){define([],function(){return global.Base64})}return{Base64:global.Base64}});


function md5cycle(x, k) {
var a = x[0], b = x[1], c = x[2], d = x[3];

a = ff(a, b, c, d, k[0], 7, -680876936);
d = ff(d, a, b, c, k[1], 12, -389564586);
c = ff(c, d, a, b, k[2], 17,  606105819);
b = ff(b, c, d, a, k[3], 22, -1044525330);
a = ff(a, b, c, d, k[4], 7, -176418897);
d = ff(d, a, b, c, k[5], 12,  1200080426);
c = ff(c, d, a, b, k[6], 17, -1473231341);
b = ff(b, c, d, a, k[7], 22, -45705983);
a = ff(a, b, c, d, k[8], 7,  1770035416);
d = ff(d, a, b, c, k[9], 12, -1958414417);
c = ff(c, d, a, b, k[10], 17, -42063);
b = ff(b, c, d, a, k[11], 22, -1990404162);
a = ff(a, b, c, d, k[12], 7,  1804603682);
d = ff(d, a, b, c, k[13], 12, -40341101);
c = ff(c, d, a, b, k[14], 17, -1502002290);
b = ff(b, c, d, a, k[15], 22,  1236535329);

a = gg(a, b, c, d, k[1], 5, -165796510);
d = gg(d, a, b, c, k[6], 9, -1069501632);
c = gg(c, d, a, b, k[11], 14,  643717713);
b = gg(b, c, d, a, k[0], 20, -373897302);
a = gg(a, b, c, d, k[5], 5, -701558691);
d = gg(d, a, b, c, k[10], 9,  38016083);
c = gg(c, d, a, b, k[15], 14, -660478335);
b = gg(b, c, d, a, k[4], 20, -405537848);
a = gg(a, b, c, d, k[9], 5,  568446438);
d = gg(d, a, b, c, k[14], 9, -1019803690);
c = gg(c, d, a, b, k[3], 14, -187363961);
b = gg(b, c, d, a, k[8], 20,  1163531501);
a = gg(a, b, c, d, k[13], 5, -1444681467);
d = gg(d, a, b, c, k[2], 9, -51403784);
c = gg(c, d, a, b, k[7], 14,  1735328473);
b = gg(b, c, d, a, k[12], 20, -1926607734);

a = hh(a, b, c, d, k[5], 4, -378558);
d = hh(d, a, b, c, k[8], 11, -2022574463);
c = hh(c, d, a, b, k[11], 16,  1839030562);
b = hh(b, c, d, a, k[14], 23, -35309556);
a = hh(a, b, c, d, k[1], 4, -1530992060);
d = hh(d, a, b, c, k[4], 11,  1272893353);
c = hh(c, d, a, b, k[7], 16, -155497632);
b = hh(b, c, d, a, k[10], 23, -1094730640);
a = hh(a, b, c, d, k[13], 4,  681279174);
d = hh(d, a, b, c, k[0], 11, -358537222);
c = hh(c, d, a, b, k[3], 16, -722521979);
b = hh(b, c, d, a, k[6], 23,  76029189);
a = hh(a, b, c, d, k[9], 4, -640364487);
d = hh(d, a, b, c, k[12], 11, -421815835);
c = hh(c, d, a, b, k[15], 16,  530742520);
b = hh(b, c, d, a, k[2], 23, -995338651);

a = ii(a, b, c, d, k[0], 6, -198630844);
d = ii(d, a, b, c, k[7], 10,  1126891415);
c = ii(c, d, a, b, k[14], 15, -1416354905);
b = ii(b, c, d, a, k[5], 21, -57434055);
a = ii(a, b, c, d, k[12], 6,  1700485571);
d = ii(d, a, b, c, k[3], 10, -1894986606);
c = ii(c, d, a, b, k[10], 15, -1051523);
b = ii(b, c, d, a, k[1], 21, -2054922799);
a = ii(a, b, c, d, k[8], 6,  1873313359);
d = ii(d, a, b, c, k[15], 10, -30611744);
c = ii(c, d, a, b, k[6], 15, -1560198380);
b = ii(b, c, d, a, k[13], 21,  1309151649);
a = ii(a, b, c, d, k[4], 6, -145523070);
d = ii(d, a, b, c, k[11], 10, -1120210379);
c = ii(c, d, a, b, k[2], 15,  718787259);
b = ii(b, c, d, a, k[9], 21, -343485551);

x[0] = add32(a, x[0]);
x[1] = add32(b, x[1]);
x[2] = add32(c, x[2]);
x[3] = add32(d, x[3]);

}

function cmn(q, a, b, x, s, t) {
a = add32(add32(a, q), add32(x, t));
return add32((a << s) | (a >>> (32 - s)), b);
}

function ff(a, b, c, d, x, s, t) {
return cmn((b & c) | ((~b) & d), a, b, x, s, t);
}

function gg(a, b, c, d, x, s, t) {
return cmn((b & d) | (c & (~d)), a, b, x, s, t);
}

function hh(a, b, c, d, x, s, t) {
return cmn(b ^ c ^ d, a, b, x, s, t);
}

function ii(a, b, c, d, x, s, t) {
return cmn(c ^ (b | (~d)), a, b, x, s, t);
}

function md51(s) {
txt = '';
var n = s.length,
state = [1732584193, -271733879, -1732584194, 271733878], i;
for (i=64; i<=s.length; i+=64) {
md5cycle(state, md5blk(s.substring(i-64, i)));
}
s = s.substring(i-64);
var tail = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0];
for (i=0; i<s.length; i++)
tail[i>>2] |= s.charCodeAt(i) << ((i%4) << 3);
tail[i>>2] |= 0x80 << ((i%4) << 3);
if (i > 55) {
md5cycle(state, tail);
for (i=0; i<16; i++) tail[i] = 0;
}
tail[14] = n*8;
md5cycle(state, tail);
return state;
}

/* there needs to be support for Unicode here,
 * unless we pretend that we can redefine the MD-5
 * algorithm for multi-byte characters (perhaps
 * by adding every four 16-bit characters and
 * shortening the sum to 32 bits). Otherwise
 * I suggest performing MD-5 as if every character
 * was two bytes--e.g., 0040 0025 = @%--but then
 * how will an ordinary MD-5 sum be matched?
 * There is no way to standardize text to something
 * like UTF-8 before transformation; speed cost is
 * utterly prohibitive. The JavaScript standard
 * itself needs to look at this: it should start
 * providing access to strings as preformed UTF-8
 * 8-bit unsigned value arrays.
 */
function md5blk(s) { /* I figured global was faster.   */
var md5blks = [], i; /* Andy King said do it this way. */
for (i=0; i<64; i+=4) {
md5blks[i>>2] = s.charCodeAt(i)
+ (s.charCodeAt(i+1) << 8)
+ (s.charCodeAt(i+2) << 16)
+ (s.charCodeAt(i+3) << 24);
}
return md5blks;
}

var hex_chr = '0123456789abcdef'.split('');

function rhex(n)
{
var s='', j=0;
for(; j<4; j++)
s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]
+ hex_chr[(n >> (j * 8)) & 0x0F];
return s;
}

function hex(x) {
for (var i=0; i<x.length; i++)
x[i] = rhex(x[i]);
return x.join('');
}

function md5(s) {
return hex(md51(s));
}

/* this function is much faster,
so if possible we use it. Some IEs
are the only ones I know of that
need the idiotic second function,
generated by an if clause.  */

function add32(a, b) {
return (a + b) & 0xFFFFFFFF;
}

if (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {
function add32(x, y) {
var lsw = (x & 0xFFFF) + (y & 0xFFFF),
msw = (x >> 16) + (y >> 16) + (lsw >> 16);
return (msw << 16) | (lsw & 0xFFFF);
}
}

 

AP.data=new function _APData(){
	this.isArray=function(data){
		return $.isArray(data);
	};
	this.isAssocArray=function(data){
		return typeof(data)=='object' && isNaN(data);	
	};
	this.isObject=function(data){
		return typeof(data)=='object' && isNaN(data);
	};
	this.isFunction=function(data){
		return $.isFunction(data);
	};
	this.isInt=function(data){
		return !isNaN(data)&&parseInt(data)==data;	
	};
	this.isNumber=function(data){
		return !isNaN(data)&&parseFloat(data)==data;	
	};
	this.isString=function(data){
		return typeof(data)=='string' && isNaN(data);
	};
	this.isEmpty=function(data){
		if (!data || data.length <=0){
			return true;
		}
		return false;
	};
	
	this.int=function(val){
		return parseInt(val);
	};
	
	/**
	 * Get a random integer from min to max-1
	 * @param min
	 * @param max
	 * @returns int
	 */
	this.randomInteger=function(min, max){
		return Math.floor(Math.random() * (max - min)) + min;
	};
	
	this.randomNumber=this.randomInteger;
	
	
	this.numberFormat=function(ival){
		var parts=ival.toString().split(".");
		return parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",") + (parts[1] ? "." + parts[1] : "");
	};
	
	
	this.currencyFormat=function(v){
		var c=Client.pageData.currency;
		if (!c || !c.length){
			c="VND";
		}
		if (c=="VND"){
			return AP.data.numberFormat(v)+" <sup>đ</sup>";	
		}else if (c=="GBP PENNY"){
			return "<b>&pound;"+this.globalMoneyFormat(v/100,2,".",",")+"</b>";	
		}else if (c=="USD CENT"){
			return "<b>$"+this.globalMoneyFormat(v/100,2,".",",")+"</b>";	
		}else{
			alert("Unsupported currency");
		}
		
	};
	
	
	
	this.globalMoneyFormat=function(n, c, d, t){
		var  c = isNaN(c = Math.abs(c)) ? 2 : c, 
		d = d == undefined ? "." : d, 
		t = t == undefined ? "," : t, 
		s = n < 0 ? "-" : "", 
		i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
		j = (j = i.length) > 3 ? j % 3 : 0;
	   return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
	 };
	
	
	
	this.realFormat=function(val){
		return Math.round(parseFloat(val)*10000)/10000;
	};
	
	
	this.zeroIndex=function(ival){
		ival=parseInt(ival);
		if (ival<10){
			ival="0"+ival;
		}
		return ival;
	}
	
	this.zeroPrefix=function(ival){
		return this.zeroIndex(ival);
	}
	
	/**
	 * @desc Compare two string/number x,y.
	 * @return True/false
	 */
	this.equal=function(x, y){
		if (AP.data.isInt(x)){
			x=x.toString();
		}
		if (AP.data.isInt(y)){
			y=y.toString();
		}
		
		if (AP.data.isAssocArray(x) && AP.data.isAssocArray(y)){
			return (JSON.stringify(x)==JSON.stringify(y));
		}
		
		if (AP.data.isArray(x) && AP.data.isArray(y)){
			if (x.length!=y.length){
				return false;
			}
			for (var i=0; i<x.length; i++){
				if (!AP.data.equal(x[i], y[i])){
					return false;
				}
			}
			return true;
		}
		
		return (x==y);
	};
	
	
	
	this.assoc=function(){
		return new APAssoc();
	};
};


/**
 * @desc Associate array with add() method
 * @returns
 */
function APAssoc(){
	this.data={};
	this.add=function(key, value){
		this.data[key]=value;
		return this;
	};
	
	this.assoc=function(){
		return this.data;
	};
};


	/**
	 * @desc Array manipulation and verification
	 */

	AP.array={
			
		fromObject: function(obj){
			var r=[];
			for (var key in obj){
				r[key]=obj[key];
			}
			
			return r;
		},
	
		/**
		 * @desc Check if element is an element of arr.
		 */
		within: function(element, arr, compare_fn){
			if (!arr || arr.length==0) return false;
			for (var i=0; i<arr.length; i++){
				if (compare_fn && typeof compare_fn!="undefined"){
					if (compare_fn(arr[i], element)){
						return true;
					}
				}else{
					if (arr[i]==element) return true;	
				}
				
			}
			return false;
		},
		
		/**
		 * @desc Check if the array contains the element
		 */
		contain: function(arr, element, compare_fn){
			return AP.array.within(element, arr, compare_fn);
		}, 
		
		count: function(arr, fn){
			var t=0;
			for (var i=0; i<arr.length; i++){
				t+=fn(arr[i]);
			}
			
			return t;
		},
		
		/**
		 * @desc Making a subarray, from start. If length is too big, or null, it
		 * return the subarray of maximum length.
		 */
		sub: function(arr, start, length){
			if (!length || start+length>arr.length){
				length=arr.length-start;
			}
			var b=[];
			for (var i=start; i<start+length; i++){
				b.push(arr[i]);
			}
			return b;
		},
		
		unique: function(arr, compare_fn){
			if (!compare_fn){
				compare_fn=function(e, f){
					return (parseInt(e)==parseInt(f));
				};
			}
			var r=[];
			for (var i=0; i<arr.length; i++){
				if (AP.array.contain(r, arr[i], function(e1, e2){
					return compare_fn(e1, e2);
				})){}else{
					r.push(arr[i]);
				}
			}
			
			return r;
		},
		
		uniqueObjects: function(arr, compare_fn){
			return AP.array.unique(arr, function(e1, e2){
				return e1.id==e2.id || (AP.data.isInt(e1.id) && AP.data.isInt(e2.id) && parseInt(e1.id) == parseInt(e2.id));
			});
		},
		
		find: function(arr, id){
			if (!arr || !arr.length){
				return false;
			}
			
			if (typeof id =="function"){
				for (var i=0; i<arr.length; i++){
					if (id(arr[i])){
						return arr[i];
					}
				}
				
				return null;
			}
			
			
			for (var i=0; i<arr.length; i++){
				if (arr[i]==id){
					return arr[i];
				}
			}
			return null;
		},
		
		single: function(arr, filter){
			return this.find(arr, filter); 
		},
		
		exist: function(arr, elem){
			if ($.isFunction(elem)){
				var obj=this.find(arr, elem);
				if (obj){
					return true;
				}
				return false;
			}else{
				var obj= AP.array.find(arr, function(e){
					return e==elem;
				});
				
				if (!obj){
					return false;
				}
				
				return true;
			}
		},
		
		indexOf: function(arr, elem, cmp){
			for (var i=0; i<arr.length; i++){
				if (cmp(arr[i], elem)){
					return i;
				}
			}
			
			return -1;
		},
		
		
		findObj: function(arr, id){
			if (!arr){
				return null;
			}
			
			for (var i=0; i<arr.length; i++){
				if (parseInt(arr[i].id)==parseInt(id)){
					return arr[i];
				}
				
				if (arr[i].id===id){
					return arr[i];
				}
			}
			return null;
		},
		
		
		updateObjects:function(arr, obj){
			for (var i=0; i<arr.length; i++){
				if (parseInt(arr[i].id)==parseInt(obj.id)){
					arr[i]=obj;
					return arr;
				}
			}
			
			arr.push(obj);
			
			return arr;
		},
		
		updateByID: function(arr, obj){
			return this.updateObjects(arr, obj);
		},
		
		insertByID: function(arr, obj){
			return this.updateObjects(arr, obj);
		},
		
		replaceObject: function(arr, obj){
			for (var i=0; i<arr.length; i++){
				if (parseInt(arr[i].id)==parseInt(obj.id)){
					arr[i]=obj;
					return true;
				}
			}
			
			arr.push(obj);
			
			return false;
		},
		
		
		
		/**
		 * @desc Check if prefix is a subarray of arr, starting from beginning
		 */
		prefix: function(arr, prefix){
			if (prefix.length>arr.length){
				return false;
			}
			for (var i=0; i<prefix.length; i++){
				if (!AP.data.equal(prefix[i], arr[i])){
					return false;
				}
			}
			return true;
		},
		
		
		/**
		 * @desc Check if prefix is a subarray of arr, starting from beginning
		 */
		equal: function(arr1, arr2){
			if (arr1.length!=arr2.length){
				return false;
			}
			for (var i=0; i<arr1.length; i++){
				if (!AP.data.equal(arr1[i], arr2[i])){
					return false;
				}
			}
			return true;
		},
		
		ids: function(arr){
			return this.select(arr, function(e){
				return e.id;
			});
		},
		
		cut: function(arr, max){
			if (arr.length<max){
				return arr;
			}
			
			return arr.slice(0, max);
		},
		
		usort: function(arr, sorter){
			for (var i=0; i<arr.length-1; i++){
				for (var j=i+1; j<arr.length; j++){
					if (sorter(arr[i], arr[j])>0){
						var x=arr[i];
						arr[i]=arr[j];
						arr[j]=x;
					}
				}
			}
			return arr;
		},
		
		sortObj: function(arr, field, multiplier){
			if (!multiplier){
				multiplier=1;
			}
			
			return this.usort(arr, function(e1, e2){
				return multiplier*(parseInt(e1[field]) - parseInt(e2[field]));
			}) 
		},
		
		
		reorder: function(arr, order){
			if (!order){
				order=1;
			}
			arr.sort(function(e1, e2){
				return (parseInt(e2.order)-parseInt(e1.order))*order;
			})
		},
		
		realOrder: function(arr, order){
			if (!order){
				order=1;
			}
			arr.sort(function(e1, e2){
				return (parseInt(e2.real_order)-parseInt(e1.real_order))*order;
			});
			
			return arr;
		},
		
		
		move: function(arr, elem, dir){
			for (var i=0; i<arr.length; i++){
				if (arr[i].id==elem.id){
					if (dir=="up" && i>0){
						var temp=arr[i-1];
						arr[i-1]=arr[i];
						arr[i]=temp;
					}else if (dir=="down" && i< arr.length-1){
						var temp=arr[i+1];
						arr[i+1]=arr[i];
						arr[i]=temp;
					}
						
					return;
				}
			}
		},
		
		
		
		/**
		 * @desc Unserialized a serialized string to an array.
		 */
		unserialize: function(str){
			var r={};
			var parts=str.split('&');
			for (var i=0; i<parts.length; i++){
				var x=parts[i].split("=");
				if (x.length==2){
					r[x[0]]=x[1];
				}
			}
			return r;
		},
		/**
		 * @desc Remove an element from an array
		 */
		remove: function(arr, elem, cmp_fn){
			var na=[];
			for (var i=0; i<arr.length; i++){
				if (AP.isFunction(elem)){
					if (elem(arr[i])){
					}else{
						na.push(arr[i]);
					}
				}else{
					if (cmp_fn){
						if (!cmp_fn(arr[i],elem)){
							na.push(arr[i]);
						}
					}else{
						if (!AP.data.equal(arr[i],elem)){
							na.push(arr[i]);
						}	
					}	
				}
			}
			return na;
		},
		
		removeByID: function(arr, id){
			return this.filter(arr, function(e){
				if (parseInt(e.id)==parseInt(id)){
					return false;
				}
				
				return true;
			});
		},
		
		filter: function(arr, filter){
			var na=[];
			for (var i=0; i<arr.length; i++){
				if (filter(arr[i])){
					na.push(arr[i]);
				}
			}
			return na;
		},
		
		select: function(arr, fn){
			var na=[];
			for (var i=0; i<arr.length; i++){
				var e=fn(arr[i]);
				if (e!==null){
					na.push(e);
				}
			}
			return na;
		},
		
		selectMax: function(arr, num_elems, fn){
			var temp=[];
			for (var i=0; i<arr.length; i++){
				temp.push({value: fn(arr[i]), index: i});
			}
			
			temp.sort(function(e, f){
				return f.value-e.value;
			});
			
			temp=this.cut(temp, num_elems);
			
			var r=[];
			for (var i=0; i<temp.length; i++){
				r.push(arr[temp[i].index]);
			}
			
			return r;
		},
		
		
		update: function(arr, fn){
			for (var i=0; i<arr.length; i++){
				fn(arr[i])
			}
		},
		
		join: function(array, joiner, fn){
			return AP.render(array, function(e){
				if (fn){
					return fn(e)+joiner;	
				}
				return fn(e)+joiner;
			});
		},
		
		filterQuery: function(array, keys){
			var a=array.slice(0);

			for (var i=0; i<keys.length; i++){
				var k=keys[i];
				if (Query.get(k)){
					var val=Query.get(k);
					a=AP.array.filter(a, function(e){
						return e[k]==val || e[k+"_id"]==val;
					});
				}
			}
			
			return a;
		},
		
		
		group: function(array, group_maker, group_sorter){
			var gs={};
			for (var i=0; i<array.length; i++){
				var g;
				if (AP.data.isString(group_maker)){
					g={id: array[i][group_maker]};
				}else{
					g=group_maker(array[i]);	
				}
				
				
				if (!g){
					continue;
				}
				
				if (!gs["g"+g.id]){
					gs["g"+g.id]=shallowClone(g);
					gs["g"+g.id].items=[array[i]];
				}else{
					gs["g"+g.id].items.push(array[i]);
				}
			}
			
			var r=[];
			for (var key in gs){
				r.push(gs[key]);
			}
			
			if (group_sorter){
				for (var i=0; i<r.length; i++){
					r[i].__sorter=group_sorter(r[i]);
				}
				
				return AP.array.sortObj(r, "__sorter", -1);
			}
			
			
			return r;
		},
		
	};
	
 

/**
 * @desc AP function on the Browser & General Syste,
 */
AP.sys={
	initAjax: function(){
		jQuery.ajaxSetup({async:false});
	},
			
	back: function(){
		return history.back();
	},	
	ie: function(){
		return $.browser.msie;
	},
	
	isTablet: function(){
		var ua = navigator.userAgent.toLowerCase();
		var isAndroid = ua.indexOf("android") > -1;
		var isiPad = ua.indexOf("ipad")>-1;
		return (isAndroid || isiPad);
	},
	
	isMobile:function(){
		if ('ontouchstart' in document.documentElement && navigator.userAgent.match(/Mobi/)){
			return true;
		}

		return (/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()));
	},
	
	isTouch: function(){
		return !!('ontouchstart' in window) ? 1 : 0;
	},
	
	
	/**
	 * @desc Detect flash. AP.B.flash() return true if flash is enabled, false otherwise.
	 */
	flash: function(){
		var hasFlash = false;
		try {
		  var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
		  if (fo) hasFlash = true;
		}catch(e){
		  if (navigator.mimeTypes ["application/x-shockwave-flash"] != undefined) hasFlash = true;
		}
	}, 
	
	
	/**
	 * @desc Check if the browser support file API.
	 */
	file: function(){
		if (document.querySelector && window.File && window.FileReader && window.FileList){
			return true;
		}
		return false;
	},
	
	captchaReload: function(obj){
		$(obj).attr("src", Client.url+"/captcha?ts="+new Date().getTime());
	},
	
	
	/**
	 * @desc Set and get cookie,
	 * @copyright 2006 Klaus Hartl (stilbuero.de)
	 */
	cookie:function(name, value, options){
		if (typeof value == 'undefined'){
			var cookieValue = null;
			if (document.cookie && document.cookie != '') {
				var cookies = document.cookie.split(';');
				for (var i = 0; i < cookies.length; i++) {
					var cookie = jQuery.trim(cookies[i]);
					if (cookie.substring(0, name.length + 1) == (name + '=')) {
						cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
						break;
					}
				}
			}
			return cookieValue;
		}else{
			options = options || {};
			if (value === null) {
				value = '';
				options.expires = -1000;
			}
			var expires = '';
			if (options.expires && (typeof options.expires == 'number' || options.expires.toUTCString)) {
				var date;
				if (typeof options.expires == 'number') {
					date = new Date();
					date.setTime(date.getTime() + (options.expires * 1000));
				} else {
					date = options.expires;
				}
				expires = '; expires=' + date.toUTCString();
			}
			
			
			var path = options.path ? '; path=' + (options.path) : '';
			var domain = options.domain ? '; domain=' + (options.domain) : '; domain='+ Client.domain;
			var secure = options.secure ? '; secure' : '';

			document.cookie = [name, '=', AP.encodeURI(value), expires, path, domain, secure].join('');
		}
	},
	
	
	/**
	 * @desc Create an event listener
	 */
	on :function(event, fx, $this){
		AP.sysEvent.bind(event, fx, $this);
		return this;
	},
	
	off: function(event){
		AP.sysEvent.off(event);
		return this;
	},
	
	
	/**
	 * @desc Create an event listener
	 */
	once :function(event, fx, $this){
		AP.sysEvent.bindOnce(event, fx, $this);
		return this;
	},
	
	
	/**
	 * @desc Trigger an event 
	 */
	fire: function(event, data){
		AP.sysEvent.trigger(event, data);
		return this;
	},
	
	
	/**
	 * @desc Trigger an event 
	 */
	trigger: function(event, data){
		return AP.sys.fire(event, data);
	},
	
	
	/**
	 * @desc Trigger an event (and dequeue)
	 */
	release: function(event){
		AP.sysEvent.release(event);
		return this;
	}
};	











AP.sysEvent=new function __APSysEvent(){
	this.events={};
	this.__fired={};
	
	this.clear=function(){
		this.events={}
	};
	
	
	this.trigger=function(ev, data){
		if (this.events[ev] && this.events[ev].length){
			for (var i=0; i<this.events[ev].length; i++){
				var fn=this.events[ev][i];
				if (!fn){
					break;
				}

				
				if (fn._once){
					// Remove fn from event queues
					this.events[ev].splice(i, 1);
				}
				
				if (fn._caller){
					fn.apply(fn._caller, data);
				}else{
					if (AP.data.isArray(data)){
						fn.apply(undefined, data);
					}else{
						fn(data);	
					}
				}
			}
		}
		
		return this;
	};
	
	
	this.bind=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}
		
		if (_caller){
			fx._caller=_caller;
		}
		
		this.events[ev].push(fx);
		
		return this;
	};
	
	
	this.off=function(ev){
		if (!this.events[ev]){
			this.events[ev]=[];
		}
		
		this.events[ev]=[];
		return this;
	};
	
	this.bindOnce=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}
		
		if (_caller){
			fx._caller=_caller;
		}
		
		fx._once=1;
		
		this.events[ev].push(fx);
		
		return this;
	};
	
	this.release=function(ev){
		if (this.events[ev] && this.events[ev].length){
			while (true){
				var fn=this.events[ev].shift();
				if (!fn){
					break;
				}
				
				if (fn._caller){
					fn.apply(fn._caller);
				}else{
					fn();
				}
			}
		}
		
		this.__fired[ev]=1;
		return this;
	};
	
};
 

/**
 * @desc String manipulation and verification.
 */
AP.word={
	/**
	 * @desc Check if the data is an empty string or not.
	 * @param data
	 * @return True/False
	 */
	empty: function(data){ 
		if (typeof data=='undefined'){
			return true;
		}
		if (data===false) return true;
		if (data==="") return true;
		if (data===null) return true;
		if (data.length==0) return true;
		return false;
	},
	
	/**
	 * @desc Check if data is a valid data of type string.
	 * @param data
	 * @return True/False
	 */
	good: function(data){
		return typeof(data)=='string' && isNaN(data);
	},
	
	/**
	 * @desc Check if s1 is a part of s2 somewhere.
	 * @param s1 child string
	 * @param s2 parent string
	 */
	within:function(element,origin){
		if (!element) return false;
		if (origin.indexOf(element)>=0){
			return true;
		}
		return false;
	},
	
	extractLast: function(word){
		if (!word){
			return false;
		}
		var ws=word.split("-");
		return ws[ws.length-1];
	},
	
	/**
	 * @desc Check if $pre is the prefix of $origin
	 */
	prefix:function(origin, pre){
		if (!pre || !origin){
			return false;
		}
		if (origin.substring(0, pre.length)==pre){
			return true;
		}
		return false;
	},
	
	
	/**
	 * @desc Check if $suf is the suffix of $origin
	 */
	suffix:function(origin, suf){
		if (!suf || !origin || origin.length<suf.length){
			return false;
		}
		
		if (origin.substr(origin.length-suf.length, suf.length)==suf){
			return true;
		}
		return false;
	},
	
	
	
	/**
	 * @desc Check if a string is a valid url. The test is very simple, it check
	 * if the prefix is actually http
	 */
	isURL:function(url){
		if (this.prefix(url, 'http:') || this.prefix(url, 'https:')){
			return true;
		}
		return false;
	},
	
	
	shorten: function(word, max_length, tail){
		word=safe(word);
		
		if (!tail){
			tail='...';
		}
		if (word.length <max_length){
			return word;
		}
		return word.substr(0, max_length-1)+tail;
	},
	
	
	ucw: function(data){
		return data.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase(); } );
	},
	
	ucf: function(data){
		return data.charAt(0).toUpperCase() + data.slice(1);
	}, 
	upper: function(data){
		return data.toUpperCase();
	},
	
	
	/**
	 * @desc Replace all function
	 */
	replace: function(str, search, replace){
		return str.replace(new RegExp(search, 'g'),replace);
	},
	
	replaceAll:function(search, replace, str){
		return str.split(search).join(replace);
	},

	join: function(arr, joiner, fn){
		var html="";
		for (var i=0; i<arr.length; i++){
			if (i<arr.length-1){
				html+=fn?fn(arr[i]):arr[i];
				html+=joiner;
			}else{
				html+=fn?fn(arr[i]):arr[i];
			}
		}
		return html;
	},
	
	
	/**
	 * @desc Check if filename has extension belongging to fileX.
	 */
	fileX: function(filename, allowExt){
		var parts=filename.split(".");
		if (!parts || parts.length<1){
			return false;
		}
		var ext=parts[parts.length-1];
		ext=ext.toLowerCase();
		allowExt=allowExt.toLowerCase();
		
		if (allowExt.indexOf(ext)==-1){
			return false;
		}
		return true;
	},
	
	/**
	 * @desc Split a string into array.
	 * @param splitter The string splitter
	 * @param str The original string
	 * @param boolean no_spaces Allow spacings (and ends) in result or not? Default false
	 */
	split: function(splitter, str, no_spaces){
		if (!no_spaces){
			no_spaces=false;
		}
		var parts=str.split(splitter);
		var results=[];
		for (var i=0; i<parts.length; i++){
			 var s=parts[i];
			 if (no_spaces){
				 s=$.trim(parts[i]);
			 }
			 if (s && s.length>=1){
				 results.push(s);
			 }
		}
		return results;
	},
	
	ssplit: function(str){
		return str.split( /[\s,]/ );
	},
	
	plural:function(word, count){
		if (!AP.data.isInt(count)){
			index=parseInt(count);
		}
		
		if (count<2){
			return word;
		}
		
		
		switch (word){
			case "person": 
				return "people";
			case "activity":
				return "activities";
			case "reply":
				return "replies";
			default:
				return word+"s";
		};
	},
	
	safeChar: function(word){
		var regex=/^[a-z0-9]+$/i;
		return word.match(regex);
	},
	
	match: function(word, pattern){
		return word.match(pattern);
	},
	
	quickMatch: function(w, q){
		return w.toLowerCase().indexOf(q.toLowerCase())!=-1;
	},
	
	fulltextMatch: function(w, q){
		var haystack=purify(w.toLowerCase()).replace(/\s/g,'');
		var neddle=purify(q.toLowerCase()).replace(/\s/g,'');
		
		return haystack.indexOf(neddle)!=-1;
	},
	
	capitalize: function(str){
		return str.charAt(0).toUpperCase() + str.slice(1);
	},
	
	random: function(len){
		return AP.random.word(len);
	}
};

 

/**
 * @desc The DOM/Document Manipulation.
 */
AP.html={	
	data:{},
	
	/**
	 * @desc Check if the document has some specific selector.
	 */
	contain:function(selector){
		if ($(selector).length>=1){
			return true;
		}
		return false;
	},
	
	/**
	 * @desc Alias of contain
	 */
	exist:function(selector){
		return this.contain(selector);
	},
	
	
	/**
	 * @desc Save html by caching it to data
	 * @param key
	 * @param selector
	 */
	save: function(key, selector){
		this.data[key]=$(selector).html();
	},
	
	update: function(key, selector){
		$(selector).html(this.data[key]);
	},
	
	
	/**
	 * @desc Setting the document title
	 */
	title:function(str){
		document.title = str;
	},	
	input:function(element, name){
		var $input;
		if (!name){
			$input=$(element);
		}else{
			$input=$("*[name="+name+"]", element);
		}
		
		if ($input[0] && $input[0].title==$input.val()){
			return  "";
		}else{
			return $input.val();
		}
	},
	select: function(selector, value){
		$(selector+" option[value='"+value+"']").attr('selected', 'selected');	
	},
	
	/**
	 * @desc Return the value of an input (encoded before return).
	 */
	inputAjax:function(elem,name){
		return AP.encodeURI(this.D.input(elem,name));
	},
	
	/**
	 * @desc Making input hints for all input/textarea within a given
	 * selector.
	 */
	inputHint: function(selector){
		if (!selector){
			selector='';
		}
		$(' input, textarea', selector).each(function(){
			if ($(this)[0].title || $(this).data('hint') && !$(this).hasClass('autocomplete') && !$(this).hasClass('__apcomplete_marked')){
				ap_inputHint(this);
			}
		});
	},
	
	
	hidden: function(name, value){
		return "<input type='hidden' name='"+name+"' value='"+value+"'/>";
	},
	
	focus: function(selector){
		$(selector).focus();
		this.scrollTo(selector);
	},
	
	scrollTo: function(selector, base, data){
		if (!data){
			data={};
		}
		var xoffset=0;
		data=$.extend({},{offset:0, time: 400},data);
		if (!base){
			base=ap_getScrollElement(document.body, 'html','body');
		}else{
			// xoffset=$(base).scrollTop();
		}
		
		
		var targetOffset=$(selector).position().top+xoffset+data.offset;
		if (targetOffset<=0){
			targetOffset=0;
		}
		
		// $.log(targetOffset);
		
		$(base).animate({scrollTop: targetOffset}, data.time, function() {});
	},
	
	/**
	 * @desc Binding a keypress event on a specific element.
	 */
	bind:function(selector,_key, action){
		$(selector).keydown(function (e){			
			key=0;
			if (e && e.which) key=e.which;
			else if (e && e.keyCode) key=e.keyCode;
			if (key == _key){
				action();
			}
		});
	},
	
	
	/**
	 * @desc Binding a keypress on window element.
	 */
	dbind: function(_key, action){
		$(document).keydown(function (e){
			if (AP.html.inActiveState()){
				return;
			}
			key=0;
			if (e && e.which) key=e.which;
			else if (e && e.keyCode) key=e.keyCode;
			if (key == _key){
				action();
			}
		});
	},
	
	/**
	 * @desc Bind a resize action on document.body 
	 * @param action Callback function
	 * @param persistent Boolean/ Persistent or not (over page transistion). Default is false.
	 */
	resize: function(action, persistent){		
		action();
		
		if (persistent){
			$(window).resize(function(){
				action();
			});
		}else{
			$(window).bind('resize.__temp',function(){
				action();
			});
		}
	},
	
	
	/**
	 * @desc Reset stuffs when they are added to the DOM tree.
	 */
	reset: function(container){
		$("button").click(function(event){
			event.preventDefault();
		});
	},
	
	
	/**
	 * @desc Flagging some input/select being in focus.
	 */
	activeState: false,
	
	/**
	 * @desc Check if the element is in active state or not.
	 */
	inActiveState:function(){
		return this.activeState;
	},
	
	/**
	 * @desc Initializing the active state of the document.
	 */
	initState:function(selector){
		if (!selector){
			selector="";
		}
		$(selector+" textarea,"+selector+" input").bind("focus", function(){
			AP.html.activeState=true;
		});
		$(selector+" textarea,"+selector+" input").bind("blur", function(){
			AP.html.activeState=false;
		});
	},
	
	/**
	 * @desc Embedding data (passed from sever) to HTML element.
	 */
	initData: function(selector){
		if (!selector){
			selector="";
		}
		$(" > .__data", selector).each(function(){
			var text=$(this).html();
			try{
				var obj=eval("("+text+")");
				if (obj!==null){
					for (var key in obj){
						$(this).parent().data(key, obj[key]);
					}
				}
			}catch(e){
				
			}
		});
	},
	
	
	initContextMenu: function(){
		$("<div id='__ctm'><div id='__ctmi' class='__contextmenu'></div></div>").appendTo('#master');
		$("#__ctm").clickOut(function(){
			$('#__ctm').hide();
		});
	},
	
	initTransition: function(wrapper){
		if (wrapper){
			AP.setContinuousRequest(wrapper);
		}else{
			AP.setContinuousRequest();
		}
	},
	
	initDialog: function(){
		$(document.body).append("<div id='apdialogs'></div>");
		AP.html.resize(function(){
			$("#apdialogs").css("width",$(window).width()+$.sbWidth());
		}, true);
	},
	
	
	initTooltip: function(selector){
		setTimeout(function(){
			$(".tt_auto", selector).parent().tooltip('.tt');
		},1000);
	},
	
	/**
	 * @desc Create some simple transformation on the dom tree specifically
	 * for AP JS Framework.
	 */
	init: function(selector){
		if (!selector){
			selector='';
		}
		this.initState(selector);
		setTimeout(function(){
			AP.html.inputHint(selector);
		},500);
		this.initData(selector);
		this.initTooltip(selector);
		
		this.reset(selector);
		if (!selector){
			this.initContextMenu();
			this.initDialog();
		}
	},
	
	/**
	 * @desc Init selector after insert
	 */
	initInsert: function(selector){
		this.inputHint(selector);
		this.initData(selector);
		this.initTransition(selector);
		this.initTooltip(selector);
	},
	
	options: function(selector, options){
		$(selector).html(AP.render(options, function(e){
			return "<option value='"+e.value+"'>"+e.label+"</option>";
		}));
		
		if ($(selector).data("value")){
			$(selector).val($(selector).data("value"));
		}
	},
};




var ap_getScrollElement=function(){
	for (var i = 0, argLength = arguments.length; i <argLength; i++) {
		var el = arguments[i], $scrollElement = $(el);
		
		if ($scrollElement.scrollTop()> 0) {
				return el;
		}else {
				$scrollElement.scrollTop(1);
				var isScrollable = $scrollElement.scrollTop()> 0;
				$scrollElement.scrollTop(0);
				if (isScrollable) {
					return el;
				}
		}
	}
	return [];
};


var ap_inputHint=function(element, target){
	if (!target){
		target=element;
	}
	
	if ($(element).hasClass('__hinited') || $(element).hasClass('__apcomplete_marked')){
		return;
	}
	
	$(element).addClass('__hinited');
	var $parent=$(element).parent();
	
	var pos=$parent.css("position");
	if (pos !="relative" && pos!="absolute"){
		$parent.addClass("relative");
	}
	

	var fz=$(element).css("font-size");
	var pos=$(element).position();
	var pl=$parent.css("padding-left");
	var pt=$parent.css("padding-top");
	
	var txt=$(element)[0].title;
	if ($(element).data("hint")){
		txt=$(element).data("hint");
	}
	
	$(element).before("<span class='__hinited_data __blur' style='top:"+pt+"; left:"+pl+"; font-size:"+fz+"'>"+txt+"</span>");
	
	
	setTimeout(function(){
		if ($(element).data('auto')){
			$(element).prev('.__hinited_data').css("left","auto").css("right", pl).show();
		}else{
			$(element).prev().css({top: pt, left: pl});	
		}
	},200);
	
	$(element).on('focus keyup change', function(){
		if ($(this).hasClass('apcomplete')){
			return;
		}
		if (!AP.word.empty($(this).val())){
			$(this).addClass('__activated');
			
			if ($(this).data('auto')){
				$(this).prev('.__hinited_data').css("left","auto").css("right", pl);	
			}else{
				$(this).prev('.__hinited_data').hide();
			}
			
		}else{
			$(this).removeClass('__activated');
			$(this).prev('.__hinited_data').css("left",pl).show();
		}
	}).blur(function(){
		if ($(this).hasClass('apcomplete')){
			return;
		}
		
		if (AP.word.empty($(this).val())){
			$(this).prev('.__hinited_data').show();
		}
	});

	$(element).blur();
	
};



/**
 * @desc Collection of functions to manipulate time.
 */
AP.time={
	
	/**
	 * @desc Please reset this if you want to use locale words
	 */	
	months:["January","February","March","April","May","June","July","August","September","October","November","December"],
	sMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
	days:["Monday","Tuesday", "Wednesday", "Thursday","Friday","Saturday", "Sunday"],	
	sDays:["Mon","Tue", "Wed", "Thu","Fri","Sat","Sun"],  
	tDays:["T2", "T3", "T4", "T5", "T6", "T7", "CN"],
	tvDays:["Thứ 2", "Thứ 3", "Thứ 4", "Thứ 5", "Thứ 6", "Thứ 7", "Chủ Nhật"],
		
	/**
	 * @desc Handler time function.
	 */
	time:function(pattern, time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		
		var _year =t.getFullYear();
		
		var _month=t.getMonth()+1;
				
		var month=_month;
		if (_month<10){
			month="0"+_month;
		}
		
		var _day=(t.getDay()||7)-1;
		
		var _date=t.getDate();
		
		var date=_date;
		if (_date<10){
			date="0"+_date;
		}
		
		var _hour=t.getHours();
		var _hour12=(_hour%12);
		var hour=_hour;
		if (_hour<10){
			hour="0"+_hour;
		}
		
		var _minute=t.getMinutes();	
		var _second=t.getSeconds();
		
		
		var r=pattern;
		var tday=AP.time.tDays[_day];
		var vday=AP.time.tvDays[_day];
		
		// Day & Date
		r=r.replace("%d", date);
		r=r.replace("%D", AP.time.sDays[_day]);
		r=r.replace("%j", _date);
		r=r.replace("%l", AP.time.days[_day]);
		r=r.replace("%N", _day+1);
		r=r.replace("%w", _day);
		r=r.replace("%T", tday);
		r=r.replace("%v", tday);
		r=r.replace("%V", vday);
		
		// Month
		r=r.replace("%F", AP.time.months[_month-1]);
		r=r.replace("%m", month);
		r=r.replace("%M", AP.time.sMonths[_month-1]);
		r=r.replace("%n", _month);
		r=r.replace("%t", new Date(_year, _month, 0).getDate());
		
		// Year
		r=r.replace("%L", (new Date(_year, 1,29).getMonth()==1));
		r=r.replace("%o", _year);
		r=r.replace("%Y", _year);
		r=r.replace("%y", _year.toString().substr(2));
		
		// Hour & Minute & Second
		r=r.replace("%a", (_hour<12)?"am":"pm");
		r=r.replace("%A", (_hour<12)?"AM":"PM");
		r=r.replace("%g", _hour12);
		r=r.replace("%G", _hour);
		r=r.replace("%h", (_hour12<10)?("0"+_hour12):_hour12);
		r=r.replace("%H", (_hour<10)?("0"+_hour):_hour);
		r=r.replace("%i", (_minute<10)?("0"+_minute):_minute);
		r=r.replace("%s", (_second<10)?("0"+_second):_second);
		r=r.replace("%u", t.getMilliseconds()*1000);
		
		// Timezone
		r=r.replace("%Z", -t.getTimezoneOffset()*60);
	
		return r;
	},
	
	hm: function(time){
		var h=AP.data.zeroPrefix(Math.floor(time/3600));
		var m=AP.data.zeroPrefix(Math.floor((time-h*3600)/60));
		return h+":"+m;
	},
	
	beginOfDay: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		return AP.time.timeStamp(new Date(t.getFullYear(), t.getMonth(), t.getDate()));
	},
	
	beginOfMonth: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		return AP.time.timeStamp(new Date(t.getFullYear(), t.getMonth(), 1));
	},
	
	endOfMonth: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		return AP.time.timeStamp(new Date(t.getFullYear(), t.getMonth()+1, 0));
	},
	
	
	midnight: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		return AP.time.timeStamp(new Date(t.getFullYear(), t.getMonth(), t.getDate(), 23, 59, 59));
	},
	
	beginOfWeek: function(time_stamp){
		return AP.time.firstDayOfWeek(time_stamp);
	},

	endOfWeek: function(time_stamp){
		return AP.time.firstDayOfWeek(time_stamp)+6*24*3600;
	},
	
	sameDay: function(ts1, ts2){
		return AP.time.beginOfDay(parseInt(ts1))==AP.time.beginOfDay(parseInt(ts2));
	},
	
	sameYear: function(ts1, ts2){
		return AP.time.time("%Y",ts1)==AP.time.time("%Y",ts2);
	},
	sameMonth: function(ts1, ts2){
		return AP.time.time("%m%Y",ts1)==AP.time.time("%m%Y",ts2);
	},
	sameWeek: function(ts1, ts2){
		return AP.time.firstDayOfWeek(parseInt(ts1))==AP.time.firstDayOfWeek(parseInt(ts2));
	},
	
	test: function(ts){
		return AP.time.time("%Y %m %d, %H:%i:%s", ts);
	},
	
	/**
	 * @desc Get the previous Monday
	 * @param time_stamp
	 * @returns
	 */
	firstDayOfWeek: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		
		// Get the first day of week [Return timestamp]
		var day=(t.getDay() || 7)-1;

		t.setHours(-24 * day);
		t.setSeconds(0);
		t.setMinutes(0);
		t.setHours(0);
		
		return AP.time.timeStamp(t);
	},
	
	
	/**
	 * @desc Get the first day of the current month
	 * @param time_stamp
	 * @returns
	 */
	firstDayOfMonth: function(time_stamp){
		var t;
		if (!time_stamp){
			t = new Date();
		}else{
			t = new Date(time_stamp*1000);
		}
		
		t.setDate(1);
		t.setSeconds(0);
		t.setMinutes(0);
		t.setHours(0);
		
		return AP.time.timeStamp(t);
	},
	
	
	
	timeStamp:function(d){
		if (!d){
			d=new Date();
		}
		return Math.floor(d.getTime()/1000);
	},
	
	now: function(){
		return Math.floor((new Date()).getTime()/1000);
	},
	
	date:function(time_stamp){
		return new Date(time_stamp*1000);
	},
	
	ago: function(time_stamp){
		time_stamp=parseInt(time_stamp);
		var t = this.timeStamp();
		var diff=t-time_stamp;
		
		if (diff<5){
			return lang("few seconds ago");
		}
		if (diff<60){
			return diff+" "+lang('seconds ago');
		}
		if (diff<3600){
			return Math.floor(diff/60)+" "+lang('minutes ago');
		}
		if (diff<3600*24){
			return Math.floor(diff/3600)+" "+lang('hours ago');
		}
		return Math.floor(diff/86400)+" "+lang('days ago');
	},
	
	
	late: function(actual_time, deadline){
		if (!deadline){
			deadline=0;
		}
		
		var diff=parseInt(actual_time)-parseInt(deadline);
		if (diff<0){
			return "---";
		}
		
		if (diff<5){
			return lang("few seconds");
		}
		if (diff<60){
			return diff+" "+lang('seconds');
		}
		
		if (diff<3600){
			return Math.floor(diff/60)+"m";
		}
		
		if (diff<3600*24){
			var h=Math.floor(diff/3600);
			var min=Math.floor((diff-h*3600)/60);
			return h+"h"+min+"m";
		}
		
		var h=Math.floor(diff/86400);
		
		if (h==1){
			return h+" "+lang('day');	
		}
		
		return h+" "+lang('days');
	},
	
	remain: function(deadline){
		return AP.time.late(-AP.time.now(), -deadline);
	},
	
	
	countdown: function(obj, __render){
		AP.rtimeout(function(){
			var ts="";
			
			var data=$(obj).data('timeremain');
			data=parseInt(data);
			
			if (data && data>=0){
				var d=Math.floor(data/(3600*24));
				var h=Math.floor((data -d*24*3600) /3600);
				var m=Math.floor((data-h*3600-d*24*3600)/60);
				var s=data-d*24*3600-h*3600-m*60;
				var ts=h+"h "+m+"m "+s+"s";
				if (d>0){
					ts=d+"d "+h+"h "+m+"m "+s+"s";
				}
				
				if (__render){
					ts=__render(d,h,m,s);
				}
			}
			
			
			
			$(obj).html(ts);
			
			if (data>=0){
				data=data-1;
				$(obj).data('timeremain', data);
			}
		}, 1000);
	},
	
	

	count: function(initial, callback, finish){
		var t=this.now();
		AP.rtimeout(function(){
			var c=AP.time.now();
			var rem=initial+t-c;
			if (rem<0){
				finish();
			}else{
				callback(rem);
			}
		},1000);
	},
	
	dow: function(index){
		return this.tvDays[index];
	}
};
 

AP.error={
	code:{
	CONFLICT_DATA:997, INVALID_DATA: 998, INCOMPLETE_DATA:999, 
	INVALID_USER:1001, INVALID_AUTHENTICATION:1002, LOGIN_REQUIRED:10033, DB_ERROR:1005, SV_ERROR:1006,
	INVALID_PASSWORD: 1021,
	INVALID_USERNAME:1022,
	INVALID_CHARACTER:1023,
	INVALID_CAPTCHA: 1024,
	INVALID_EMAIL:1020,
	UNKNOWN_ERROR: 990},
	
	messages:{},
	
	translate:function(msg){
		if (AP.error.messages[msg]){
			return AP.error.messages[msg];
		}
		return msg;
	}	
};


AP.random=new function __APRandom(){
	this.word=function(length){
		var text = "";
		var possible = "abcdefghjklmnpqrstuvwxyz";

		for (var i = 0; i < length; i++){
			text += possible.charAt(Math.floor(Math.random() * possible.length));
		}

		return text;
	};
	
	this.avatar=function(){
		return "<img src='http://localhost/lamp/avatars/"+this.int(1,10)+".svg'/>";
	};
	
	this.int=function(f, t_inclusive){
		return f+Math.floor(Math.random() * (t_inclusive+1-f));
	};
	
	this.number=function(from_number, to_number_inclusive){
		if (!from_number){
			from_number=0;
		}
		
		if (!to_number_inclusive){
			to_number_inclusive=100;
		}
		return this.int(from_number, to_number_inclusive);
	};
};


/**
 * @desc General jQuery plugin to support AP.
 * @author Hung Pham
 * @since 1/6/2011
 */

(function($){
	
	/**
	 * @desc jQuery 1.8 fix
	 */
	if (!$.curCSS){
		$.curCSS=$.css;
	};
	
	
	
	/**
	 * @desc log to the console.
	 */
	$.log=function(msg){
		if (Client.env==1 || Client.env=='1'){
			return;
		}
		if (!window.console || !window.console.log){
			
		}else{
			try{
				window.console.log(msg);
			}catch(e){
			}
		}
	};
	
	
	$.logMe=function(element){
		var str = $("<div />").append($(element).clone()).html();
		$.log(str);
	};
	
	$.cookie=function(name, value, options){
		return AP.sys.cookie(name, value, options);
	};

	
	
	/**
	 * @desc Adding an element to the document root when the element
	 * is not exists.
	 */
	$.adding=function(selector, options, callback){
		if (!$(selector).length){			
			options=$.extend({global: false, element: "div", 'class':'', action:'', title:''},options);
			
			var s=selector.substring(1);
			$(document.body).append("<"+options.element+" id='"+s+"'></"+options.element+">");
			if (options.css){
				$(selector).css(options.css);
			}
			
			if (options.title){
				$(selector).attr('title', options.title);
			}
			if (options.action){
				$(selector).attr('action', options.action);
			}
			if (options['class']){
				$(selector).addClass(options['class']);
			}
			if (!options.global){
				$(selector).addClass('__temp');
			}
			
			if (callback){
				callback();
			}
		}
	};
	
	
	/**
	 * @desc Creating a simple scalar object from a complicated object. 
	 */
	$.scalar=function(obj){
		var s={"id": obj.id, "dbk": obj.dbk};
		
		return s;
	};
	
	
	
	$.fn.max=function(field, multiple){
		var tm=null;
		var m=null;
		
		$(this).each(function(){
			var v=$(this).data(field);
			
			
			if (v){
				v=parseInt(v);
				var tv=v;
				
				if (multiple){
					if (AP.data.isInt(multiple)){
						tv=tv*multiple;
					}else{
						tv=multiple(tv);
					}
				}
				
				if (tm===null || tm<tv){
					tm=tv;
					m=v;
				}
			}
		});
		
		return m;
	};
	
	
	/**
	 * @desc Return the maximum width
	 */
	$.maxWidth=function(){
		return Math.max($(window).width(), $(document.body).width());
	};
	
	
	/**
	 * @desc Return the maximum width
	 */
	$.maxHeight=function(){
		var m= Math.max($(window).height(), $(document.body).height()+30);
		if ($("#overlay").length>=1){
			return Math.max(m, $("#overlay").height());
		}
		return $m;
	};
	
	
	$.scrollEnd=function(callback){
		
	};
	
	
	var _scrollbarWidth=0;
	$.sbWidth=function(){
		if (!_scrollbarWidth){
			_scrollbarWidth=getScrollbarWidth();
		}
		return _scrollbarWidth;
	};
	
	
	
	$.fn.reverse = [].reverse;
	
	
	/**
	 * Example:
	 * 
	 * $(window).onFinish('scroll', 250, function(event){
	 * 	
	 * });
	 */
	
	var __off_timer;
	$.fn.onFinish=function(event, delay, callback){
		return $(this).on(event, $.debounce(delay, function(event){
			callback(event);
		}));
	};
	
	
	$.fn.autofocus=function(){
		if (!mobile()){
			$(this).focus();
		}
		
		return this;
	};
	
	
	$.fn.scrollOver=function(fn){
		$(this).on('scroll.__temp', function(){
			var stop=$(this).scrollTop();
			var h=$(this)[0].scrollHeight;
			var diff=h-stop-$(this).height();
			if (Math.abs(diff)<=1){
				fn();
			}
		});
	};
	
	
	$.fn.scrollDown=function(offset){
		AP.html.scrollTo(this, null, {'offset': offset});
	};
	
	$.fn.scrollToBottom=function(){
		var h=$(this)[0].scrollHeight;
		$(this).scrollTop(h);
	};
	
	$.fn.scrollToTop=function(){
		$(this).scrollTop(0);
	};
	
	
	$.fn.contentWidth=function(){
		var w=0;
		$(this).children().each(function(){
			w+=$(this).outerWidth();
		});
		
		return w;
	};
	

	$.fn.apAppend=function(html){
		$(this).append(html);
		AP.html.initInsert(this);
		return this;
	};
	
	
	$.fn.apPrepend=function(html){
		$(this).prepend(html);
		AP.html.initInsert(this);
		return this;
	};
	
	
	$.fn.linkify=function(){
		 $(this).each(function(){
			 var el=$(this);
			 if (el.jquery) {
				 el = el[0];
			 }
			 el.normalize();
			 __linkifyNode(el);
			 return el;
		});
	};
	
	
	
	$.fn.move=function(dir, anim){
		dir=dir.toLowerCase();
		if (dir=="up" || dir=="prev"){
			var $prev=$(this).prev();
			if ($prev && $prev.length){
				if (anim){
					$(this).slideUp(200, function(){
						$(this).insertBefore($prev).slideDown(200);
					});
				}else{
					$(this).insertBefore($prev);
				}
			}
		}
		
		if (dir=="down" || dir=="next"){
			var $next=$(this).next();
			if ($next && $next.length){
				if (anim){
					$(this).slideUp(200, function(){
						$(this).insertAfter($next).slideDown(200);
					});
				}else{
					$(this).insertAfter($next);	
				}
			}
		}
	};
	
	
	/**
	 * @desc Clone css from another selector
	 */
	$.fn.cloneCSS=function(selector, properties){
		var ps=AP.word.split(",", properties);
		for (var i=0; i<ps.length; i++){
			ps[i]=$.trim(ps[i]);
			$(this).css(ps[i], $(selector).css(ps[i]));
		}
	};
	
	
	$.fn.autoExpand=function(options){
		autosize($(this));
		return this;
		
		$(this).each(function(){
			var $this=$(this);
			
			var lh=$this.data("lh");
			if (!lh) lh=22;
			var ih=$(this).height();
			
			$this.css("line-height",lh+"px").css("overflow-y", "hidden");
			$this.data("minh", $(this)[0].scrollHeight).on("keydown", function(e){
				var elem=this;
				setTimeout(function(){
					var minh=$(elem).data("minh");
					// @todo Carefully check this
					if (ih>40){
						$(elem)[0].style.height="auto";
					}
					
					$(elem)[0].style.height=Math.max($(elem)[0].scrollHeight,lh)+"px";
				},0);
			}).keydown();
		});
		
		return this;
	};
	
	
	$.fn.angular=function(options){
		var df={color:"#aaa", bg:"#fff", arc: false, stroke: 10};
		if ($(this).data("color")){
			df.color=$(this).data("color");
		}
		
		if ($(this).data("angle")){
			df.angle=$(this).data("angle");
		}
		
		if ($(this).data("bg")){
			df.bg=$(this).data("bg");
		}
		
		if ($(this).data("text")){
			df.text=$(this).data("text");
		}
		
		if ($(this).data("stroke")){
			df.stroke=$(this).data("stroke");
		}
		
		if ($(this).data("cut") || $(this).data("arc")){
			df.arc=true;
		}
		
		if ($(this).data("percent")){
			df.angle=360*parseFloat($(this).data("percent"))/100;
		}
		
		options=$.extend({}, df, options);
		
		var sektor = new Sektor(this, {
			angle: options.angle,
			sectorColor: options.color,
			circleColor: options.bg,
			arc: options.arc,
			stroke: options.stroke,
			fillCircle: !options.arc
		});
		
		if (options.text){
			$(this).append("<div class='inner-text'>"+options.text+"</div>");
		}
	};
	
	$.fn.screencopy=function(url, success, __data){
		if (!__data){
			__data={};
		}
		
		$(this).bind("paste", function(ev){
			var $this = $(this);
			var original =  ev.originalEvent;
			if (!original.clipboardData || !original.clipboardData.items || !original.clipboardData.items.length){
				return;
			}
			var raw=original.clipboardData.items[0];
			if (typeof raw !='object'){
				return;
			}
			
			var file =  raw.getAsFile();
			if (!file || !file.size || !file.type){
				return;
			}
			
			var reader = new FileReader();
			
			reader.onload = function (evt) {
				var result = evt.target.result; 
				var arr = result.split(",");
				var data = arr[1]; // raw base64
				var contentType = arr[0].split(";")[0].split(":")[1];
				
				// this needs to post to a server route that can accept raw base64 content and save to a file
				var temp=__data;
				temp.contentType=contentType;
				temp.data=data;
				temp.__ss=1;
				
				$this.parent().ajaxShow();
				AP.post(url, temp, function(code){
					$this.parent().ajaxHide();
					
					if (!code.good()){
						return AP.alertError(code.message);
					}
					
					success(code, $this);
				});
			};
			
			reader.readAsDataURL(file);
		});
		
		return this;
	};
	
	
	$.fn.textPasted=function(callback){

		$(this).bind("paste", function(ev){
			var $this = $(this);
			var original =  ev.originalEvent;
			if (!original.clipboardData || !original.clipboardData.items || !original.clipboardData.items.length){
				return;
			}
			var raw=original.clipboardData.items[0];
			if (raw && raw.type=="text/plain"){
				raw.getAsString(function(str){
					callback(str);
				});
			}
		});
		return this;
	};
	
	
	
	$.fn.selectChoices=function(){
		AP.formRender().choiceList(this);
		return this;
	};
	
	
	
	$.fn.selectRadios=function(){
		AP.formRender().radioList(this);
		return this;
	};
	
	

	$.fn.selectDate=function($format){
		var val=$(this).val();
		if (!val || val=="0"){
			$(this).val("");
		}
		
		if ($(this).data("ts")){
			var ts=$(this).data("ts");
			if (ts && ts!="0"){
				$(this).val(AP.time.time(AP.i18n.dateFormat(),ts));	
			}
		}
		
		AP.UI.dateSelect(this, $format);
		return this;
	};
	
	
	$.fn.selectTime=function(options){
		AP.UI.timeSelect(this, options);
		return this;
	};
	
	
	$.fn.selectYear=function(){
		$(this).autocomplete({source: range(2010, 1900)});
	};
	
	
	$.fn.getDialog=function(){
		var $elem=$(this).closest('.__apdialog');
		return AP.dialog('#'+$elem.attr('id'));
	};
	
	
	/**
	 * @desc Modified version of autocomplete
	 * @param sources Array
	 * @param multi_value True/False. Default is false.
	 */
	$.fn.apcomplete=function(source, multi_value, callback, filter_fn){
		if (source==":clean"){
			$(this).val("");
			$(this).siblings('input').val("");
			
			$(this).siblings('.apc-selected').remove();
			return new APComplete(this, source, multi_value, callback);
		}
		
		if (!$(this).hasClass("__apcomplete_marked")){
			$(this).addClass("__apcomplete_marked");
		}else{
			return new APComplete(this, source, multi_value, callback);
		}
		
		if (AP.isString(source)){
			if (multi_value){
				$(this).addClass("__apcomplete_multi");
				var ref=AP.UI.autocompleteComplex($(this), source, callback,filter_fn);
				return new APComplete(this, source, multi_value, callback, ref);
			}
			var ref=AP.UI.autocomplete($(this), source, callback, filter_fn);
			return new APComplete(this, source, multi_value, callback, ref);
		}else{			
			if (multi_value){
				var ref=AP.UI.acx($(this), source, callback,filter_fn);
				return new APComplete(this, source, multi_value, callback, ref);
			}
			var ref= AP.UI.ac($(this), source, callback, filter_fn);
			return new APComplete(this, source, multi_value, callback, ref);
		}
	};
	
	
	/**
	 * @desc String complete, great to use for things like tag autocompletion
	 */
	$.fn.scomplete=function(strings, callback){	
		$(this).on("keydown", function( event ) {
			if (event.keyCode === $.ui.keyCode.TAB && $(this).data("ui-autocomplete").menu.active){
				event.preventDefault();
			}
		})
		.autocomplete({
			minLength: 0,
			classes: {
				 "ui-autocomplete": "base-string-complete"
			},
			source: function(request, response){
				var last=request.term.split(/,\s*/).pop();
				response($.ui.autocomplete.filter(strings,last));
			},
			focus: function(){
				return false;
			},
			select: function(event, ui){
				var terms = this.value.split(/,\s*/);
				terms.pop();
				terms.push(ui.item.value);
				terms.push("");
				this.value = terms.join(", ");
				if (callback){
					callback(ui.item.value);
				}
				return false;
			}
		});
	};
	
	
	$.fn.livesearch=function(url, options){
		if (!options.filter){
			options.filter=null;
		}

		if (options.render){
			
		}
		
		var acc=$(this).apcomplete(url, false, options.select, options.filter);
		
		if (options.render){
			acc.aco.data("ui-autocomplete")._renderItem = function(ul,item) {
				return $("<li>").data("item.autocomplete", item).append(options.render(item)).appendTo(ul);
			};
		}
	};
	
	
	$.fn.stringcomplete=function(url){
		return AP.UI.stringcomplete(this, url);
	};
	
	
	
	$.fn.hasEmbedData=function(key){
		var obj=$(this).data(key);
		if (obj && obj!="" && typeof obj !="undefined"){
			return true;
		}
		
		return false;
	};
	
	var delay_timer=null;
	$.fn.quickFilter=function(selectors, filter_fn){
		$(this).on("input change", function(){
			var $this = $(this);
			clearTimeout(delay_timer);
			
			delay_timer = setTimeout(function(){
				var val=$this.val();
				if (!val || !val.length){
					return $(selectors).show();
				}
				
				val=val.toLowerCase();
				
				$(selectors).each(function(){
					if (filter_fn($(this), val)){
						$(this).show();
					}else{
						$(this).hide();
					}
				});
			}, 300);
		});
	};
	
	
	$.fn.rposition=function(target){
		if (!$(this).closest(target).length){
			return {top:0, left: 0};
		}
		
		var $e=$(this);
		var top=0;
		var left=0;
		
		while (true){
			if (!$e.length){
				break;
			}
			
			if ($e.is(target)){
				break;
			}
			
			var p=$e.position();
			
			if ($e.css("position")=="static" || !$e.css("position")){
			}else{
				top+=p.top;
				left+=p.left;	
			}
			
			$e=$e.parent();
		}
		
		return {top:top, left: left};
	};
	
	$.fn.quickSort=function(selectors, cmp_fn){
		var $elems=$(this).find(selectors).remove();
		$elems.sort(function(a,b){
			return cmp_fn($(a), $(b));
		}).prependTo(this);
	};
	
	
	
	$.fn.suggest=function(data, options){
		options=$.extend({placeholder: $(this).attr('placeholder'), restricted: true}, {}, options);
		
		for (var i=0; i<data.length; i++){
			var e=data[i];
			if (!AP.data.isObject(e) && AP.data.isString(e)){
				data[i]={id: purify(e), label: e};
			}
		}
		
		var $p=$(this).parent();
		var name=$(this).attr("name");
		
		if ($p.hasClass("__suggest_canvas")){
			
		}else{
			$p.addClass("__suggest_canvas").data("options", options);
			
			$(this).addClass("__input-suggestion-target").hide().before("<input class='__input-suggestion-fake' autocomplete='off' placeholder='"+options.placeholder+"' name='"+name+"-ipfk'/>");
			
			var html=AP.render(data, function(e){
				var val;
				if ("id" in e){
					val=e.id;	
				}else{
					val=e.value;
				}
				
				var icon="";
				if (options.multi){
					icon= "<span class='__icon'></span>";
				}
				
				return "<div class='__input-suggestion-row' onclick='__fn_input_suggest(this);' data-id='"+val+"'>"+icon+e.label+"</div>";
			});

			if (options.maxHeight){
				// html="<div class='__iwh' style='max-height:"+options.maxHeight+"px; overflow-y:scroll; overflow-x:hidden'>"+html+"</div>";
			}
			
			if (options.all){
				html="<div class='__input-suggestion-row -is-all' onclick='__fn_input_suggest(this);' data-all='1' data-id='"+options.all.value+"'>"+options.all.label+"</div>"+html;
			}
			
			if (data && data.length >=10){
				html="<div style='max-height:300px; overflow-y:scroll'><div class='__iw'>"+html+"</div></div>";
			}else{
				html="<div class='__iw'>"+html+"</div>";	
			}

			
			if (!options.restricted){
				html+="<div class='__input-extra'><input type='text' class='__input-extra-fx' placeholder='Or type another option here and press Enter'/> <div class='__input-enter'>Enter</div></div>";
			}
			
			
			
			var w=$(this).width()-2;
			html="<div class='__input-suggestion-canvas unselectable'>"+html+"</div>";
			
			$(this).after(html);
			
			$("<div class='__input-suggestion-ph'><div class='__labels'></div><span class='arrow -ap icon-triangle-down'></span></div>").insertAfter(this).click(function(){
				$(this).parent().addClass("__iss");
				$(this).closest(".row").addClass("__ft");
			}).parent().find(".__input-suggestion-fake").focus(function(){
				$(this).parent().addClass("__iss");
				$(this).closest(".row").addClass("__ft");
			});
			
			
			
			$p.clickOut(function(){
				$(this).removeClass("__iss");
				$(this).closest(".row").removeClass("__ft");
			});
	
		
			var v=$(this).val();
			
			if (options.multi){
				var vs=options.df;
				var ls="";
				if (vs && vs.length){
					for (var i=0; i<vs.length; i++){
						$p.parent().find(".__input-suggestion-row").each(function(){
							if ($(this).data("id")==vs[i]){
								$(this).addClass("active");
								ls+=$(this).text()+", ";
							}
						});
					}
					
					$(this).val(vs.join(","));
					$p.find(".__input-suggestion-fake").val(ls);
				}
			}else{
				if (v){
					$p.find(".__input-suggestion-row").each(function(){
						if ($(this).text()==v){
							$(this).addClass("active");
						}else{
							$(this).removeClass("active");
						}
					});
					$(this).val(v);
				}	
			}
			
			$(this).parent().find(".__input-extra-fx").enter(function(){
				var v=$(this).val();
				if (v){
					$p.find(".__input-successtion-row").each(function(){
						if ($(this).text()==v){
							$(this).addClass("active");
						}else{
							$(this).removeClass("active");
						}
					});
					
					$p.find(".__input-suggestion-target").val(v);
					$p.removeClass("__iss");
					$p.closest(".row").removeClass("__ft");
					$p.children().removeClass("active");
				}
			});
			
	
			$(this).parent().find(".__input-enter").click(function(){
				var v=$(this).parent().find("input").val();
				if (v){
					$p.find(".__input-successtion-row").each(function(){
						if ($(this).text()==v){
							$(this).addClass("active");
						}else{
							$(this).removeClass("active");
						}
					});
					
					$p.find(".__input-suggestion-target").val(v);
					$p.removeClass("__iss");
					$p.closest(".row").removeClass("__ft");
					$p.children().removeClass("active");
				}
			});
		}
		
		if (options.value && options.value.length){
			for (var i=0; i<options.value.length; i++){
				$p.find(".__input-suggestion-row").each(function(){
					if ($(this).data("id")==options.value[i]){
						$(this).click();
					}
				});
			}
		}
	};
	
	
	
	$.fn.textSuggest=function(data, options){
		options=$.extend({placeholder: $(this).attr('placeholder'), restricted: true}, {}, options);
		
		for (var i=0; i<data.length; i++){
			var e=data[i];
			if (!AP.data.isObject(e) && AP.data.isString(e)){
				data[i]={id: purify(e), label: e};
			}
		}
		
		var $p=$(this).parent();
		var name=$(this).attr("name");
		
		if ($p.hasClass("__suggest_canvas")){
			
		}else{
			$p.addClass("__suggest_canvas").data("options", options);
			
			var html=AP.render(data, function(e){
				var val;
				if ("id" in e){
					val=e.id;	
				}else{
					val=e.value;
				}
				
				var icon="";
				if (options.multi){
					icon= "<span class='__icon'></span>";
				}
				
				return "<div class='__input-suggestion-row' onclick='__fn_input_text_suggest(this);' data-id='"+val+"'>"+icon+e.label+"</div>";
			});

			if (options.maxHeight){
				// html="<div class='__iwh' style='max-height:"+options.maxHeight+"px; overflow-y:scroll; overflow-x:hidden'>"+html+"</div>";
			}
			
			if (data && data.length >=10){
				html="<div style='max-height:300px; overflow-y:scroll'><div class='__iw'>"+html+"</div></div>";
			}else{
				html="<div class='__iw'>"+html+"</div>";	
			}
		
			var w=$(this).width()-2;
			$(this).after("<div class='__input-suggestion-canvas unselectable'>"+html+"</div>");
			
			
			$(this).on("input focus", function(){
				$(this).next().show();
				var v=$(this).val();
				if (v && v.length){
					
				}
			}).on("blur", function(){
				var $that=$(this);
				setTimeout(function(){
					$that.next().hide();
				}, 300);
			}).enter(function(){
				var $that=$(this);
				setTimeout(function(){
					$that.next().hide();
				}, 100);
			});
		}
	};
	
	
	
	$.fn.tagName=function(){
		return $(this)[0].nodeName.toLowerCase();
	};
	
	
	$.fn.tag=function(url, render_fn, filter_fn, reorder_fn, select_fn){
		if (url=="reset"){
			// RESET TAGGING
			var id=$(this).attr('id');
			var new_id=id+"__temptextarea";
			if ($("#"+new_id).length){
				$("#"+new_id).remove();
			}
			
			var tid="__tag_"+id;
			
			if ($("#"+tid).length){
				$("#"+tid).remove();
			}
			
			return;
		}
		
		
		if ($(this).hasClass("__autoc")){
			return;
		}
		
		$(this).addClass("__autoc");
		
		$(this).data("reorder_fn", reorder_fn);
		
		var id=$(this).attr('id');
		if (!id){
			id=AP.uuid();
			$(this).attr('id', id);
		}

		var pos=$(this).position();
		var tagdir=$(this).data('tagdir');
		var tid="__tag_"+id;
		
		if ($("#"+tid).length){
			$("#"+tid).remove();
		}
		
		
		var item="";
		var tagname=$(this)[0].nodeName.toLowerCase();
		$(this).data("tagname", tagname);
		
		plugin_textarea_init("#"+id);
		
		if (tagdir=="bottom"){
			$("<div class='tags absolute __temp' id='"+tid+"'> "+item+"</div>").appendTo("#context-tag-bottom");
		}else{
			$("<div class='tags absolute __temp' id='"+tid+"'> "+item+"</div>").appendTo("#context-tag");
		}
		
		var $tagbox=$("#"+tid);
		if (tagdir){
			$tagbox.data("tagdir", tagdir);
		}
		
		$tagbox.data("onselect", select_fn);
		
		if ($(this).data("theme")){
			$tagbox.addClass("theme-"+$(this).data("theme"));
		}
		
		$(this).on('keydown', function(e){
			var key=e.keycode? e.keycode:e.which;
			if (key==AP.key.up || key==AP.key.down || key==AP.key.enter){
				if ($tagbox.is(':visible')){
					e.preventDefault();
					e.stopPropagation();
					return false;
				}
			}
		}).data("tagbox", $tagbox);
		
		var compact=false;
		if ($(this).data("compacttagging")){
			compact=true;
		}
		

		$(this).on('keyup', function(e){
			var $tagbox=$(this).data("tagbox");
			
			var key=e.keycode? e.keycode:e.which;
			
			if ($tagbox.is(':visible')){
				if (key==AP.key.down){
					plugin_select_updown_down($tagbox);
					return;
				}else if (key==AP.key.up){
					plugin_select_updown_up($tagbox);
					return;
				}else if (key==AP.key.enter){
					plugin_select_updown_enter($tagbox);
					return;
				}
			}else{
				if (key==AP.key.down || key==AP.key.up){
					return;
				}
			}
			
			var v=$(this).val();
			if (!compact && (!v.length || v.charAt(v.length-1)==' ')){
				fn_cancel_tag(id);
				return;
			}
			
			
			var single=$(this).data("single-tag");
			
			var term=$(this).val();
			if (!single){
				term=$.trim($(this).data("current_word"));	
			}
			
			if (term && term.length>=1){
				if (term.charAt(0)=='@' || compact){
					var q=term;
					if (term.charAt(0)=='@'){
						q=term.substr(1);
					} 				
					
					if (!q.length){
						return;
					}
					
					var data={q: q, rand: AP.uuid()};
					
					data.__code=Client.code;
					if (Client.network){
						data.__network=Client.network.id;	
					}
					
					var tdata=$(this).data("aptag");
					
					if (tdata && tdata.lock && tdata.since && tdata.q){
						if (tdata.lock){
							return;
						}
						if ((tdata.q==q && AP.time.now() - tdata.since<2)){
							return;
						}
					}
					
					$(this).data("aptag",{q: q, since: AP.time.now(), lock: 1});
				
					if (AP.data.isArray(url)){
						var tdata=$("#"+id).data("aptag");
						if (!tdata){
							tdata={};
						}
						
						tdata.lock=0;
						$("#"+id).data("aptag", tdata);
						var code=AP.array.filter(url, function(item){
							return filter_fn(item, q);
						});
						
						var reorder=$(this).data("reorder_fn");
						
						if (reorder){				
							if (code && code.length){
								code.sort(function(a,b){
									return -reorder(a, q)+reorder_fn(b, q);
								});
							}
						}
						
						if (code && code.length && code.length>=1){
							var items=AP.render(code, function(item){
								if (!render_fn){
									return "<span class='item' data-value='"+item.value+"' onclick=\"plugin_tag_select('#"+id+"','"+item.value+" '); fn_cancel_tag('"+id+"');\">"+item.name+"</span>";
								}
								return "<span class='item' data-value='"+item.value+"' onclick=\"plugin_tag_select('#"+id+"','"+item.value+" '); fn_cancel_tag('"+id+"'); \">"+render_fn(item)+"</span>";
							});
							

							var pos=$("#"+id).offset();
							var tagname=$("#"+id).data('tagname');
							
							var tw=$("#"+id).width()+8;
							if (tw<240){
								tw=240;
							}
							
							if (tagname=='textarea' && !Client.native){
								var cpos=plugin_tag_textareacursor("#"+id);
								if (tagdir=="bottom"){
									var bt=$(window).height()-pos.top-$("#"+id).height();
									if (bt<0){
										bt=0;
									}
									
									$tagbox.html(items).show().css({"left": pos.left, "width": tw, bottom: bt+20});
								}else{
									$tagbox.html(items).show().css({"left": pos.left+cpos.left, top: pos.top + cpos.top});
								}
							}else{
								if (tagdir=="bottom"){
									$tagbox.html(items).show().css({"left": pos.left, "width": tw, bottom: $("#"+id).height()+20});
								}else{
									$tagbox.html(items).show().css({"left": pos.left, "width": tw, top: pos.top +10});
								}
							}
							
							plugin_select_updown_first($tagbox);
						}else{
							fn_cancel_tag(id);
						}
					}else{
						$.post(Client.url+'/ajax/'+url, data, function(code){
							var tdata=$("#"+id).data("aptag");
							if (!tdata){
								tdata={};
							}
							tdata.lock=0;
							$("#"+id).data("aptag", tdata);
							
							
							var reorder=$(this).data("reorder_fn");
							
							if (reorder){
								if (code && code.length){
									code.sort(function(a,b){
										return -reorder(a, q)+reorder_fn(b, q);
									});
								}
							}
							
							if (code && code.length && code.length>=1){
								var items=AP.render(code, function(item){
									if (!render_fn){
										return "<span class='item' data-value='"+item.value+"' onclick=\"plugin_tag_select('#"+id+"','"+item.value+" '); fn_cancel_tag('"+id+"');\">"+item.name+"</span>";
									}
									return "<span class='item' data-value='"+item.value+"' onclick=\"plugin_tag_select('#"+id+"','"+item.value+" '); fn_cancel_tag('"+id+"'); \">"+render_fn(item)+"</span>";
								});
								

								var pos=$("#"+id).offset();
								var tagname=$("#"+id).data('tagname');
								
								if (tagname=='textarea' && !Client.native){
									var cpos=plugin_tag_textareacursor("#"+id);
									$tagbox.html(items).show().css({"left": pos.left+cpos.left, top: pos.top + cpos.top});	
								}else{
									if (tagdir=="bottom"){
										$tagbox.html(items).show().css({"left": pos.left, "width": $("#"+id).width()+8, bottom: $("#"+id).height()+20});
									}else{
										$tagbox.html(items).show().css({"left": pos.left, "width": $("#"+id).width()+8, top: pos.top +10});
									}
								}
								
								plugin_select_updown_first($tagbox);
							}else{
								fn_cancel_tag(id);
							}
						},"json");
					}
				}else{
					fn_cancel_tag(id);
				}
			}else{
				fn_cancel_tag(id);
			}
		});
		
	
		return $(this);
	};
	

	
	$.fn.renderEngine=function(fn){
		$(this).data("ui-autocomplete")._renderItem=function(ul, item){
			return $("<li></li>")
			.data("item.autocomplete", item)
			.append("<a class='rerender ap-acitem'>"+ fn(item)+"</a>")
			.appendTo(ul);
		};
		
		return $(this);
	};
	
	
	
	/**
	 * @desc Bind multiple-events
	 */
	$.fn.xbind=function(events, event_data, fn){
		if (!fn){
			fn=event_data;
			event_data={};
		}
		var lists=events.split(" ");
		for (var i=0; i<lists.length; i++){
			$(this).bind(lists[i], event_data, fn);
		}
	};
	
	
	/**
	 * @desc Set a flag on variable. If flag is not set, set it to 1.
	 * @return True if the flag is already set, false otherwhise.
	 */
	$.fn.flag=function(flag_name){
		if (!flag_name){
			flag_name='__flag';
		}
		
		var data=$(this).data(flag_name);
		if (!data){
			$(this).data(flag_name, 1);
			return false;
		}
		if (data==1){
			return true;
		}
		return false;
	};
	
	
	/**
	 * @desc Put a lock on a particular element. Return true if the lock
	 * is put on an unlocked element. False otherwise.
	 */
	$.fn.lock=function(){
		var data=$(this).data("__b_lock");
		if (!data || data===0){
			$(this).data("__b_lock", 1);
			return true;
		}
		return false;
	};
	
	

	/**
	 * @desc Put a lock on a particular element. Return true if the lock
	 * is put on an unlocked element. False otherwise.
	 */
	$.fn.unlock=function(){
		 // release binary lock
		$(this).data("__b_lock", 0);
	};
	
	
	
	/**
	 * @desc Cleanup a particular element.
	 */
	$.fn.cleanUp=function(){
		$(this).children().remove();
		$(this).empty();
		return $(this);
	};

	
	$.fn.preventAutoSubmit=function(){
		$(this).find(":input").on("keypress", function(e){
			if (event.keyCode == 13) {
				event.preventDefault();
				return false;
			}
		});
	};
	
	$.fn.mclick=function(click, dbclick){
		var timer;
		var clicks=0;
		
		$(this).on("click", function(e){
			var $this=$(this);
			clicks++;
			
			if (clicks==1){
				$(this).data("clicked", 1);
				timer=setTimeout(function(){
					click.apply($this[0]);
					clicks=0;
				}, 500);
			}else{
				clearTimeout(timer);
				dbclick.apply(this);
				clicks=0;
			}
		}).on("dbclick", function(e){
			e.preventDefault();
		});
	};
	
	
	$.fn.enter=function(action){
		var $this=$(this);
		$this.data("enter", action);
		$this.addClass("__ap_enter_binded");
		
		$(this).keydown(function(e){
			// Enter was pressed without shift key
			var key=e.keyCode? e.keyCode:e.which;
			if (key == AP.key.enter && !e.shiftKey){
				var id=$this.attr('id');
				if (id){
					var $tid=$("#__tag_"+id);
					if ($tid.length && $tid.is(":visible")){
						return;
					}
				}
				
				// prevent default behavior
				e.preventDefault();
				action.apply(this);
			}
		});
		
		return $this;
	};
	
	
	$.fn.updown=function(selections, select){
		var $this=$(this);
		$(selections).eq(0).addClass("active");
		$this.data("__updown", 0);
		
		$this.keydown(function(e){
			// Enter was pressed without shift key
			var key=e.keyCode? e.keyCode:e.which;
			var move=0;
			if (key==AP.key.up){
				move=-1;
			}
			if (key==AP.key.down){
				move=1;
			}
			
			if (move){
				e.preventDefault();
				var cur=$this.data("__updown");
				if (!cur){
					cur=0;
				}
				
				cur=parseInt(cur)+move;
				if (cur>=$(selections).length){
					cur=$(selections).length-1;
				}
				
				if (cur<0){
					cur=0;
				}
				
				if (cur<0 || !$(selections).length){
				}else{
					$this.data("__updown", cur);
					$(selections).removeClass("active");
					$(selections).eq(cur).addClass("active");
				}
			}
			
			if (key==AP.key.enter){
				var x=$this.data("__updown");
				var elem=$(selections).eq(x);
				select.apply($this, [elem, x]);
			}
		});
		
		
		$(selections).each(function(){
			$(this).click(function(){
				select.apply($this, [this, $(this).index()]);
			})
		});
		
		return $this;
	};
	
	
	$.fn.triggerEnter=function(){
		var action=$(this).data("enter");
		action.apply(this);
	};
	
	
	$.fn.disableTab=function(){
		$(this).keydown(function(e) {
			if (e.keyCode === 9) {
				// get caret position/selection
				var start = this.selectionStart;
					end = this.selectionEnd;

				var $this = $(this);

				// set textarea value to: text before caret + tab + text after caret
				$this.val($this.val().substring(0, start)
							+ "	"
							+ $this.val().substring(end));

				// put caret at right position again
				this.selectionStart = this.selectionEnd = start + 4;

				// prevent the focus lose
				return false;
			}
		});
	};
	
	
	$.fn.caret2=function(){
		return new APCaret(this);
	};
	
	
	$.fn.ajaxShow=function(){
		$(this).addClass("__disabled").append("<div class='__ajaxshow'><span class='__icon -ap icon-spinner7 ficon-spinner'></div></div>");
	};
	
	$.fn.ajaxHide=function(){
		$(this).removeClass("__disabled").find(".__ajaxshow").remove()
	};
	
	$.fn.ajaxOn=function(){
		return $(this).hasClass("__disabled");
	};
	
	
	$.fn.shortlist=function(opts){
		$.extend({max: 10}, opts);
		if ($(this).children().length <= opts.max){
			return;
		}
		
		var rem=$(this).children().length-opts.max;
		
		$(this).data("max", opts.max).after("<div class='js-show-more show-more is-more'><span>Show more ("+(rem)+")</span></div>");
		$(this).children().each(function(index){
			if (index<opts.max){
			}else{
				$(this).addClass("hidden");
			}
		});
		
		$(this).next().click(function(){
			var $prev=$(this).prev();
			$prev.children().each(function(index){
				if (index<$prev.data("max")){
				}else{
					$(this).toggleClass("hidden");
				}
			});
			
			if ($(this).hasClass("is-more")){
				$(this).removeClass("is-more");
				$(this).find("span").html("Show less");
			}else{
				var rem=$prev.children().length-$prev.data("max");
				$(this).addClass("is-more");
				$(this).find("span").html("Show more ("+rem+")"); 
			}
		});
	};
	
	
	/**
	 * @desc Animate and back to the original state
	 */
	$.fn.animateX=function(styles, seconds, xstyles){
		if (!xstyles){
			xstyles={};
		}
		var cstyles={};
		for (var s in styles){
			cstyles[s]=$(this).css(s);
		}
		
		xstyles=$.extend({}, cstyles, xstyles);
		
		$(this).animate(styles, seconds*1000, function(){
			$(this).animate({opacity: "1.0"}, seconds*3000, function(){
				$(this).animate(xstyles, seconds*1000);
			});
		});
	};
	
	
	
	/**
	 * @desc Simplified version of AP.loadURL. Only load html with inline CSS. No change on
	 * the state of the document. Put the html directly to the given element.
	 */
	$.fn.loadHTML=function(url, callback, data){
		$("#ajax-load").show();
		
		var $this=$(this);
		if (!AP.word.prefix(url,'http')){
			url=Client.url+'/'+url;
		}
		
		AP.post(url,{},function(code){
			if (code.good()){
				$.log('Loading HTML '+url);
				
				// Loading css
				for (var i=0; i<code._css.length; i++){
					AP.css(code._css[i]);
				}
				
				$this.html(code._html);
				if (code._inpage_js){
					eval(code._inpage_js);
				}
				if (callback){
					callback(data);
				}
				$("#ajax-load").hide();
			}else{
				if (code.data && code.data.force_redirect){
					AP.redirect(code.data.force_redirect);
					return;
				}
				$("#ajax-load").hide();
			}
		}, true);
		
		return $this;
	};
	
	
	
	/**
	 * @desc Set a flag on variable. If flag is not set, set it to 1.
	 */
	$.fn.apv=function(){
		return AP.html.input(this);
	};
	
	
	/**
	 * @desc Set a flag on variable. If flag is not set, set it to 1.
	 */
	$.fn.xval=function(name, value){
		if (typeof value =='undefined'){
			return AP.html.input(this, name);
		}
		
		return $("*[name="+name+"]", this).val(value);
	};
	
	
	$.fn.restore=function(){
		$(this).each(function(){
			$(this).blur();
			if ($(this).hasClass('__autoresized') && $(this).attr('id')){
				var id=$(this).attr('id');
				var newid='#'+id+"__temptextarea";
				$(newid).html("");
				plugin_textarea_update('#'+id, newid);
				
				var orgh=$('#'+id).data("orgheight");
				if (orgh && parseInt(orgh) && $(this).tagName()!="input"){
					$('#'+id).css("height", orgh);
				}
			}
		});
		
		return this;
	};
	

	/**
	 * @desc Event when a child element is dragged outside its container.
	 */
	$.fn.dragOut=function(container, callback){
		$(this).draggable({
			start: function(event, ui) {
				ui.helper.removeMe = true;
			},
			stop: function(event, ui) {
				if (ui.helper.removeMe) {
					callback(this);
				}
			},  
			revert: true,
			stack:'body',
			zIndex:9999
		});
		
		
		$(container).droppable({
			drop: function(event, ui) {
				// unset removeMe flag as child is still inside parent
			   ui.helper.removeMe = false;
			}
		});
	};
	
	
	
	/**
	 * @desc Trigger an action when click outside.
	 */
	$.fn.clickOut=function(callback, canvas){
		var $elem=$(this);
		if (canvas){
			$(canvas).on('click',function(event){
				if (!$(event.target).closest($elem).length){
					callback.apply($elem);
				}
			});
			
			return;
		}
		
		$(document.body).on('click.__temp',function(event){
			if (!$(event.target).closest($elem).length){
				callback.apply($elem);
			}
		});
	};
	
	
	$.fn.loadedAll=function(callback, params){
		var total_images=$(this).length;
		var num_loaded=0;
		
		$(this).each(function(){
			if ($(this).height()>0){
				num_loaded++;
				if (num_loaded==total_images){
					callback(params);
				}
			}else{
				$(this).bind('load.__temp, error.__temp', {all_callback: callback, all_params:params}, function(event){
					num_loaded++;
					if (num_loaded==total_images){
						var cb=event.data.all_callback;
						cb(event.data.all_params);
					}
				});
			}
		});
	};
	
	
	/**
	 * @desc Get the smallest matched data-{name}
	 */
	$.fn.lastID=function(name){
		if (!name){
			name="id";
		};
		
		var last=0;
		
		$(this).each(function(){
			var val=parseInt($(this).data(name));
			if (!val){
				return;
			}
			
			if (val < last || last==0){
				last=val;
			}
		});
		
		return last;
	};
	
	/**
	 * Set Active. Matching either index or classname.
	 */
	$.fn.setActive=function(chosen){
		if (AP.isInt(chosen)){
			$(this).each(function(index){
				$(this).removeClass('active');
				if (index==chosen){
					$(this).addClass('active');
				}
			});
		}else{
			$(this).each(function(){
				$(this).removeClass('active');
				if ($(this).is(chosen)){
					$(this).addClass('active');
				}
			});
		}
	};
	
	
	/**
	 * Set Active. Matching either index or classname.
	 */
	$.fn.getActive=function(){
		var found=null;
		$(this).each(function(){
			if ($(this).hasClass('active')){
				found=$(this);
				return;
			}
		});
			
		return found;
	};
	
	
	$.fn.setActiveURL=function(url){
		if (AP.data.isFunction(url)){
			var fn=url;
			$(this).each(function(){
				var curl=$(this).data("url");
				if (!curl || !curl.length){
					curl=$(this).data("xurl");
				}
				if (!curl){
					curl="";
				}
				
				var data={};
				var parts=curl.split("?");
				if (parts.length==2){
					data=queryStringToArray(parts[1]);
				}
				
				if (fn.apply(this, [curl, data])){
					$(this).addClass("active");
				}else{
					$(this).removeClass("active");
				}
			});
			return;
		}
		
		var base="";
		var fallback=null;
		if (AP.data.isObject(url) && url.base){
			base=url.base+"/";
		}
		
		if (AP.data.isObject(url) && url.fallback){
			fallback=url.fallback;
		}
		
		var maxscore=-1;
		var set=0;
		if (url && url.length){
			$(this).each(function(){
				var curl=$(this).data("url");
				if (!curl || !curl.length){
					curl=$(this).data("xurl");
					curl=base+curl;
				}
				if (curl==url){
					$(this).addClass("active");
				}else{
					$(this).removeClass("active");
				}
			});
			return;
		}
		
		
		$(this).each(function(){
			var turl=$(this).data("url");
			if (!turl){
				turl=base+$(this).data("xurl");
			}
			var score=computeURLSimilarity(turl);
			$(this).data("active-score", score);
			if (score>maxscore){
				maxscore=score;
			}
		});
		
		
		$(this).each(function(){
			if (set){
				// return;
			}
			
			if ($(this).data("active-score")== maxscore && maxscore>0){
				set=1;
				$(this).addClass('active');
			}else{
				$(this).removeClass('active');
			}
		});
		
		if (!set && fallback){
			$(this).each(function(){
				var turl=$(this).data("url");
				if (!turl){
					turl=$(this).data("xurl");
				}
				
				if (turl==fallback){
					$(this).addClass('active');
				}else{
					$(this).removeClass('active');
				}
			});	
		}
	};
	
	
	$.fn.setActiveURLParam=function(param, df){
		var _df=df;
		if (AP.data.isObject(df)){
			if (df.fallback){
				_df=df.fallback;
			}
			
			if (df.df){
				_df=df.df;
			}
		}
		
		var found=0;
		$(this).each(function(){
			var curl=$(this).data('url');
			if (!curl || !curl.length){
				curl=$(this).data("xurl");
			}
			
			if (!curl || !curl.length){
				curl=$(this).data("updateurl");
			}
			
			if (!curl && $(this).data("urlparam")==param){
				curl=param+"="+$(this).data("value");
			}
			
			
			if (!curl){
				$(this).removeClass('active');
				return;
			}
			
			var cq=Query.get(param);
			var reg=new RegExp(param+"="+cq+"$"); 
			var reg2=new RegExp(param+"="+cq+"[\&\?]");
			
			var df_reg1=null;
			var df_reg2=null;
			
			if (df && AP.data.isString(df)){
				df_reg1=new RegExp(param+"="+_df+"$"); 
				df_reg2=new RegExp(param+"="+_df+"[\&\?]");	
			}
			
			if (curl.match(reg) || curl.match(reg2)){
				found=1;
				$(this).addClass('active');
			}else if (df_reg1 && df_reg2 && curl.match(df_reg1) || curl.match(df_reg2)){
				found=1;
				$(this).addClass('active');
			}else{
				$(this).removeClass('active');
			}
		});
		
		if (!found){
			$(this).setActive(_df);
		}

		
		return this;
	};
	
	
	$.fn.setActiveURLQuery=function(param, defaults){
		var maxscore=-1;
		var set=0;
		
		if (param && defaults){
			$(this).each(function(){
				var curl=$(this).data("url");
				if (!curl || !curl.length){
					curl=$(this).data("xurl");
				}
				if (!curl || !curl.length){
					curl=$(this).data("updateurl");
				}
				
				var qs=Query.get(param);
				if (!qs){
					qs=defaults;
				}
				
				qs=param+"="+qs;
				
				if (curl.indexOf(qs)!=-1){
					$(this).addClass('active');
				}else{
					$(this).removeClass('active');
				}
			});
			return;
		}
	};
	
	
	
	$.fn.setActiveURLQuery=function(param, defaults){
		var maxscore=-1;
		var set=0;
		
		if (param && defaults){
			$(this).each(function(){
				var curl=$(this).data("url");
				if (!curl || !curl.length){
					curl=$(this).data("xurl");
				}
				if (!curl || !curl.length){
					curl=$(this).data("updateurl");
				}
				
				var qs=Query.get(param);
				if (!qs){
					qs=defaults;
				}
				
				qs=param+"="+qs;
				
				if (curl.indexOf(qs)!=-1){
					$(this).addClass('active');
				}else{
					$(this).removeClass('active');
				}
			});
			return;
		}
	};
	
	
	/**
	 * @desc Set active based on data-{key}={value}
	 */
	$.fn.setActiveData=function(key, value){
		$(this).each(function(){
			var v=$(this).data(key);
			if ((!v && !value) || AP.data.equal(v, value)){
				$(this).addClass("active")
			}else{
				$(this).removeClass("active")
			}
		});
	};
	
	
	
	/**
	 * Set Active. Matching either index or classname.
	 */
	$.fn.setChecked=function(chosen){
		if (AP.isInt(chosen)){
			$(this).each(function(index){
				$(this).removeClass('checked');
				if (index==chosen){
					$(this).addClass('checked');
				}
			});
		}else{
			$(this).each(function(){
				$(this).removeClass('checked');
				if ($(this).is(chosen)){
					$(this).addClass('checked');
				}
			});
		}
	};
	
	
	/**
	 * Show only element with index or classname. Hide all others.
	 */
	$.fn.showOnly=function(chosen){
		if (AP.isInt(chosen)){
			$(this).each(function(index){
				if (index==chosen){
					$(this).show('active');
				}else{
					$(this).hide();
				}
			});
		}else{
			$(this).each(function(){
				if ($(this).is(chosen)){
					$(this).show();
				}else{
					$(this).hide();
				}
			});
		}
	};
	
	
	
	/**
	 * Toggle Active. Matching either index or classname.
	 */
	$.fn.toggleActive=function(chosen){ 
		if (AP.isInt(chosen)){
			$(this).each(function(index){
				if (index==chosen){
					$(this).toggleClass('active');
				}else{
					$(this).removeClass('active');
				}
			});
		}else{
			$(this).each(function(){
				if ($(this).is(chosen)){
					$(this).toggleClass('active');
				}else{
					$(this).removeClass('active');
				}
			});
		}
	};
	   
	
	
	/**
	 * Set Active. Matching either index or classname.
	 */
	$.fn.setPage=function(chosen){
		if (AP.isInt(chosen)){
			$(this).children().each(function(index){
				$(this).hide();
				if (index==chosen){
					$(this).show();
				}
			});
		}else{
			$(this).children().each(function(index){
				$(this).hide();
				if ($(this).hasClass(chosen)){
					$(this).show();
				}
			});
		}
	};
	
	
	/**
	 * @desc Set the tooltip value of an element, provided that the tooltip is
	 * already enabled for that element
	 */
	$.fn.setTooltip=function(val){
		$(this).each(function(){
			$(this).find('.__tooltip_inner').html(val);
		});
	};
	
	$.fn.tooltip=function(child, _options){
		if (!_options){
			_options={};
		}
		

		// $(this).addClass('__hblock');
		
		$(this).each(function(){
			var $p=$(this);
			$p.find(child).each(function(){
				var options=$.extend({},{dir: 'down', color: 'black', align: 'center', padding: 8},_options);
				if ($(this).hasClass('__tooltip')){
					return;
				}
				
				var v_color=$(this).data("color");
				if (v_color){
					options.color=v_color;
				}
				
				var v_align=$(this).data("align");
				if (v_align){
					options.align=v_align;
				}
				
				var v_dir=$(this).data("dir");
				if (v_dir){
					options.dir=v_dir;
				}
				
				var v_pad=$(this).data("padding");
				if (v_pad){
					options.padding=v_pad;
				}
				
				var padding=options.padding;
				
				if ($(this).hasClass('padding_less')){
					padding=4;
				}
				$(this).addClass('__tooltip').addClass('__tooltip'+options.color);
				$(this).wrapInner("<div class='__tooltip_inner' style='padding: "+padding+"px'/>");
				
				
				
				var align;
				if (options.align=='right' || $(this).hasClass('align_right')){
					align='right';
					$(this).css('right', -20);
				}else if (options.align=='left' || $(this).hasClass('align_left')){
					align='left';
					$(this).css('left', -20);
				}else if (options.align=='center' || $(this).hasClass('align_center')){
					align='center';
					var tl=$(this).outerWidth(true)- $p.outerWidth(true);
					$(this).css('left', -tl/2.0);
				}
				
				$(this).addClass('__tooltip'+align);
				
				if (options.dir=='down'){
					$("<div class='__ttarr_down2'></div>").appendTo($(this)).css('bottom', 7);
					$("<div class='__ttarr_down'></div>").appendTo($(this)).css('bottom', 9);
				}
			});
			$(this).addClass('__tooltipw');
		});
		
		// $(this).removeClass('__hblock');
	};
	
	
	
	$.fn.contextMenu=function(selector){
		if (!selector){
			selector=".__ctm";
		}
		$(this).each(function(){
				$(this).bind("contextmenu",function(e){
				e.stopPropagation();
				e.preventDefault();
				$("#__ctm").cleanUp().css({top: e.pageY, left: e.pageX}).show();
				
				var elem=$(this).find(selector).first();
				elem.addClass('__contextmenu');
				$(elem).clone().appendTo('#__ctm').show();
			});
			$(this).find(selector).hide();
		});
		return $(this);
	};
	
	

	$.fn.nodeName=function(){
		return $(this)[0].nodeName.toLowerCase();
	};
	
	
	$.fn.xMenu=function(selector){
		$(this).addClass('ap-pointer').addClass('ap-relative');
		$(this).find(selector).first().addClass('__contextmenu').hide();
		$(this).each(function(){
				$(this).bind("click",function(e){
				e.stopPropagation();
				e.preventDefault();
				$(this).find(selector).first().toggle();
			});
		});
	};
	
	
	$.fn.place=function(data){
		$(this).find(".__ph").each(function(){
			var name=$(this).data("name");
			if (data[name]){
				$(this).html(data[name]);
			}
		});
		
		return this;
	};
	
	
	
	$.fn.showCode=function(lang){
		$(this).each(function(){
			var $this=$(this);
			var id=$this.attr('id');
			if (!id){
				id=AP.uuid();
				$this.attr('id', id);
			}
			
			var text=$this.text();
			
			text=AP.word.replaceAll("&#8216;","'", text);
			text=AP.word.replaceAll("&#8217;","'", text);
			text=AP.word.replaceAll("‘","'", text);
			text=AP.word.replaceAll("’","'", text);
			text=AP.word.replaceAll("\t","	", text);
			
			
			$this.html("<pre><code></code></pre></div>");
			var $code=$this.find('code');
			$code.text(text);
			
			
			// $this.html(text);
			
			
			if (!lang){
				lang="php";
			}
			$code.addClass(lang);
			$code.parent().addClass('__codehl compact');
			
			SyntaxHighlighter.highlightDocument($code[0],false);
			
//			text=$this.html();
//			
//			if (text){
//				text=AP.word.replaceAll("\t","&nbsp;&nbsp;&nbsp;", text);
//				text=AP.word.replaceAll("\n","<br>", text);
//				$this.html(text);
//			}
			
			$("li:first-child",$this).addClass('first');
			$("li:last-child",$this).addClass('last');
			
			var $p=$code.parent();
			$p.parent().prepend("<div class='codeheader'>" +
				"<div class='code-title'>Embedded code</div>" +
				"<div class='code-button' onclick=\"$('#"+id+"').toggleClass('__codehlx');\">Highlighted code</div> " +
				"<div class='code-button' onclick=\"$('#"+id+"').toggleClass('__codehlx');\">View sources</div> " +
			"</div>");
			
			var h=$this.height();
			var lx="";
			for (var i=0; i< h/25+1; i++){
				var ln=i;
				if (ln<10){
					ln='00'+ln;
				}else if (ln<100){
					ln='0'+ln;
				}
				if (ln==0){
					lx+="<div class='number-sep'></div>";	
				}else{
					lx+="<div class='number'><div>"+ln+"</div></div>";	
				}
			}
			$code.append("<div class='linenumbers'>"+lx+"</div>");
		});
	};
	
	
	$.fn.setCursorPosition = function(pos) {
		if ($(this).get(0).setSelectionRange) {
			$(this).get(0).setSelectionRange(pos, pos);
		}else if ($(this).get(0).createTextRange) {
			var range = $(this).get(0).createTextRange();
			range.collapse(true);
			range.moveEnd('character', pos);
			range.moveStart('character', pos);
			range.select();
		}
	 };
	
	 
	 $.fn.chartjs=function(data, options){
		if (!options){
			options={};
		}
		 
		if ($(this).data('cheight')){
			options.height=$(this).data('cheight');
		}
		
		options=$.extend({},{width:$(this).width(), type: "line"}, options);
		var optx="";
		for (var key in options){
			optx+=key+"="+options[key]+" ";
		}
		
		
		$(this).children().remove();
		var id=AP.uuid();
		$("<canvas id='"+id+"' "+optx+"></canvas>").appendTo(this);
		
		var ctx = $('#'+id).get(0).getContext("2d");
		
		var myChart = new Chart(ctx, {
			type: options.type,
			data: data,
			options: options
		});
		var myChart = new Chart(ctx);
		return myChart;
	};
	
	

	$.fn.chartjsv2 = function(options, data, extOptions){
		if (!options){
			options={};
		}
		 
		if ($(this).data('cheight')){
			options.height=$(this).data('cheight');
		}
		
		options=$.extend({},{width:$(this).width()},options);
		var optx="";
		for (var key in options){
			optx+=key+"="+options[key]+" ";
		}
		
		
		$(this).children().remove();
		var id=AP.uuid();
		$("<canvas id='"+id+"' "+optx+"></canvas>").appendTo(this);
		
		var ctxP = $('#'+id).get(0);
		
		if (typeof ctxP == 'undefined' || !ctxP) {
			return null;
		}
		var ctx = ctxP.getContext("2d");
		var myNewChart = new Chart(ctx, {
			type: 'line',
			data: data,
			options: extOptions
		});
		return myNewChart;
	};
	
	
	$.fn.caret=function(){
		return new CaretHandler(this);
	};
	
})(jQuery);



function __linkifyNode(node) {
	var _len = node.childNodes.length;
	for (var i=0; i<_len; i++) {
	  if (node.childNodes[i].nodeType == document.ELEMENT_NODE) {
		__linkifyNode(node.childNodes[i]);
	  }
	}
	
	var texts = [];
	for (i=0; i<_len; i++) {
	  if (node.childNodes[i].nodeType == document.TEXT_NODE) {
		if (node.nodeName.toLowerCase()!="a"){
			texts.push(node.childNodes[i]);	
		}else{
			node.setAttribute("target","_blank");
			node.className += " _linkify";
		}
	  }
	}
	
	texts.forEach(function (item) {
	  if (item.nodeType == document.ELEMENT_NODE) {
		  __linkifyNode(item);
	  } else if (item.nodeType == document.TEXT_NODE) {
		while (true) {
		  var text = item.nodeValue;
		  var regex = /\bhttps?:\/\/[a-z0-9\.\-_](:\d+)?[^ \n\t<>()\[\]]*/i;
		  var match = regex.exec(text);
		  if (! match) {
			break;
		  }
		  var leadingNode = document.createTextNode(text.substr(0, match.index));
		  node.replaceChild(leadingNode, item);
		  var anchor = document.createElement("a");
		  anchor.setAttribute("target", "_blank");
		  anchor.className += " _linkify";
		  anchor.href = match[0];
		  anchor.appendChild(document.createTextNode(match[0]));
		  node.insertBefore(anchor, leadingNode.nextSibling);
		  var trailing = document.createTextNode(text.substr(match.index + match[0].length));
		  node.insertBefore(trailing, anchor.nextSibling);
		  item = trailing;
		}
	  }
	});
}







/**
 * @desc Overwrite the getScript function
*/

jQuery.extend({
	apScript: function(url, callback, id) {
	   var head = document.getElementsByTagName("head")[0];
	   var script = document.createElement("script");
	   script.src = url;
	   if (id){
		   script.id=id;
	   }
	
	   // Handle Script loading
	   {
		  var done = false;
	
		  // Attach handlers for all browsers
		  if (script.addEventListener){
			  script.addEventListener("load",function(){
				  if (done){
					  return;
				  }
				  done = true;
				  if (callback) callback();
			  },false);
		  }else if (script.readyState){
			  script.onreadystatechange = function(){
				 if (!done && (this.readyState == "loaded" || this.readyState == "complete" || this.readyState==4)) {
					done = true;
					if (callback)
					   callback();
		
					// Handle memory leak in IE
					script.onload = script.onreadystatechange = null;
				 }
			  };
		  }
	   }
	
	   head.appendChild(script);
	
	   // We handle everything using the script element injection
	   return undefined;
	}

});




function __fn_input_text_suggest(ref){
	var text=$(ref).text();
	
	$box=$(ref).closest(".__input-suggestion-canvas").parent();
	$box.find("input").val(text);
	// $box.find(".__input-suggestion-canvas").hide();
};



function __fn_input_suggest(ref){
	var $box=$(ref).closest(".__input-suggestion-canvas").parent();
	var options=$box.data("options");
	
	
	if (!options.multi || $(ref).data("all")){
		$box.removeClass("__iss");
		$box.closest(".row").removeClass("__ft");
		$box.find(".__input-suggestion-row").removeClass("active");
		
		$(ref).addClass("active");
		var val=$(ref).data("id");
		var text=$(ref).text();
		$box.find("input.__input-suggestion-target").val(val);
		$box.find("input.__input-suggestion-fake").val($(ref).text());
		$box.find("input.__input-extra-fx").val("");
		
		return;
	}
	
	
	var vals=$box.find("input.__input-suggestion-target").val().split(",");
	var id=$(ref).data("id");
	
	

	var found=false;
	for (var i=0; i<vals.length; i++){
		if ($.trim(vals[i])==id){
			found=1;
			break;
		}
	}
	
	if (found){
		$(ref).removeClass("active");
	}else{
		$(ref).addClass("active");
	}
	
	
	var ids=[];
	var ts=[];
	$box.find(".__input-suggestion-row").each(function(){
		if ($(this).data("all")){
			$(this).removeClass("active");
			return;
		}
		
		if ($(this).hasClass("active")){
			ts.push($(this).text());
			ids.push($(this).data("id"));
		}
	});
	
	
	$box.find("input.__input-suggestion-target").val(ids.join(", "));
	$box.find("input.__input-suggestion-fake").val(ts.join(", "));
	$box.find("input.__input-extra-fx").val("");
};


function computeURLSimilarity(url){
	if (!url){
		return 0;
	}
	
	if (!AP.data.isString(url)){
		url=""+url;
	}
	
	var data={};
	var parts=url.split("?");
	if (parts.length==2){
		data=queryStringToArray(parts[1]);
	}
	
	var current=Client.path.current;
	if (!current){
		current="home";
	}
	
	
	var base=0;
	
	if (parts.length==1){
		if (parts[0]==current){
			return 2;
		}
		
		if (current.indexOf(parts[0])!=-1){
			if (parts[0].length){
				return 1+(1.0*parts[0].length/(parts[0].length+1));
			}
			return 1;
		}
	}else{
		if (url==current){
			return 2;
		}
	}
	
	var score=0;
	if (parts[0]==Client.path.full.join("/")){
		score=1;
	}
	
	var same=true;
	for (var key in data){
		if (data[key]!=Query.get(key)){
			same=false;
			break;
		}
	}
	
	if (!same){
		return 0;
	}
	

	for (var key in Query.all()){
		if (data[key] && data[key]===Query.get(key)){
			score++;
		}
	}
	
	return score;
};



function fn_cancel_tag(id){
	var tid="__tag_"+id;
	$("#"+tid).hide();
};



function plugin_textarea_init(id, xtemp){
	var temp='__temp ';
	if (xtemp){
		temp='';
	}
	
	var newid=id.substr(1)+"__temptextarea";
	var tagflag=$(id).data("tag");
	if (!AP.html.exist("#"+newid)){
		$(id).css("overflow","hidden").addClass('__autoresized');
		$(id).data("orgheight", $(id).height());
		
		if (tagflag=="none"){
			$("<div class='"+temp+" ap-block' id='"+newid+"'></div>").appendTo("#ap-invs");
		}else{
			$("<pre class='"+temp+" ap-block' id='"+newid+"'></pre>").appendTo("#ap-invs");	
		}
		$("#"+newid).cloneCSS(id, "lineHeight, fontSize, fontFamily, fontWeight, boxModel");
		
		$("#"+newid).css("width", $(id).width());
		$("#"+newid).css("min-height", $(id).height());
		

		$(id).on('keypress keyup keydown', function(){
			if ($(id).data('tagname')=='textarea'){
				$("#"+newid).css("width", $(id).width());
				$("#"+newid).css("fontSize", $(id).css('fontSize'));	
			}
			plugin_textarea_update(id, "#"+newid);
		});	
	}else{
		console.error("EXIST #"+newid);
	}
};



function plugin_textarea_update(id, newid){
	if (!newid){
		newid="#"+id.substr(1)+"__temptextarea";
	}
	
	var $this=$(id);
	
	var taggable=$this.data("tag");
	var v=$this.val();
	var tagname=$this[0].nodeName.toLowerCase();
	
	if ($(id).data("autoexpand") && $(id).data("maxheight")){
		var orgh=$(newid).height();
		var maxh=$(id).data("maxheight");
		var pd=parseInt($(id).css('padding-top').replace(/[^-\d\.]/g, ''));
		
		if (orgh<maxh){
			$(id).css("height", orgh+2*pd);
		}else{
			$(id).css("height", maxh);
		}
	}
	
	if (taggable=='none' && tagname!='input'){
		v=AP.word.replaceAll("\n","<br>", v);
		v=AP.word.replaceAll("<","&lt;", v);
		v=AP.word.replaceAll(">","&gt;", v);
		
		$(newid).html(v+"&nbsp;");
		
		var mh=$this.data("max-height");
		var ch=$this.height();
		
		var h=$(newid).height();

		if (ch!=h){
			$this.trigger("expand",[ch, h]);
		}
		
		if (!mh || h<mh){
			$this.css("height",h).css("overflow","hidden");
		}else{
			$this.css("height",mh).css("overflow","auto");
		}
	}else{
		var pos=plugin_get_caret_position(id);
		
		if (pos>=0 && pos<=v.length){
			var ch="";
			// Set current word to data("current.word");
			var head="";
			for (var j=pos-1; j>=0; j--){
				var ch=v.charAt(j);
				if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
					head=ch+head;
					if (ch=='@'){
						break;
					}
				}else{
					break;
				}
			}
			
			var tail="";
			for (var j=pos; j<v.length; j++){
				var ch=v.charAt(j);
				if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
					tail=tail+ch;
					if (ch=='@'){
						break;
					}
				}else{
					break;
				}
			}
			
			
			$this.data("current_word",head+tail);
		}
		
		if (pos<v.length){
			v=v.substr(0,pos+1)+"<span></span>"+v.substr(pos+1, v.length-pos-1);
		}else{
			if (v.charAt(v.length-1)!='\n'){
				v=v+"<span></span>";
			}else{
				v=v+"<span></span>&nbsp;";
			}
		}
		
		if (tagname!='input'){
			v=AP.word.replaceAll("<","&lt;", v);
			v=AP.word.replaceAll(">","&gt;", v);
			v=AP.word.replaceAll("\n","<br>", v);
			v=AP.word.replaceAll("&lt;span&gt","<span>", v);
			v=AP.word.replaceAll("&lt;/span&gt","</span>", v);
			
			$(newid).html(v);
			var mh=$this.data("max-height");
			
			var h=$(newid).height();
			if (!mh || h<mh){
				if (Client.native){
					$(id).css("overflow","hidden");
				}else{
					$(id).css("overflow","hidden");	
				}
			}else{
				$(id).css("overflow","auto");
			}	
		}
	}
};



function plugin_textarea_update_simple(id, newid){	
	if (!newid){
		newid="#"+id.substr(1)+"__temptextarea";
	}
	
	var v=$(id).val();
	v=AP.word.replaceAll("\n","<br>", v);
	$(newid).html(v);
	
	var mh=$(id).data("max-height");
	var h=$(newid).height()+32;
	
	
	if (!mh || h<mh){
		$(id).css("height",h).css("overflow","hidden");
	}else{
		$(id).css("height",mh).css("overflow","auto");
	}
};




function plugin_tag_textareacursor(id){
	var newid=id.substr(1)+"__temptextarea";
	var pos=$("#"+newid+" span").position();
	
	return {top: pos.top, left: pos.left, width: $("#"+newid).width(), height: $("#"+newid).height()};
};



function plugin_select_updown_first($obj){
	if (!$obj.is(":visible")){
		return;
	}
	
	$obj.children().each(function(index){
		if (index==0){
			$(this).addClass('__tagactive');
		}
	});
	
	$obj.data('aptag_cindex', 0);
};


function plugin_select_updown_down($obj){
	if (!$obj.is(":visible")){
		return;
	}
	
	var cindex=$obj.data('aptag_cindex');
	var maxlen=$obj.children().length;
	
	if (maxlen==0){
		return;
	}
	
	if (cindex<maxlen-1){
		cindex++;
	}else{
		cindex=0;
	}
	
	var val='';
	$obj.children().each(function(index){
		if (AP.data.equal(index,cindex)){
			val=$(this).data('value');
			$(this).addClass('__tagactive');
		}else{
			$(this).removeClass('__tagactive');
		}
	});
	
	$obj.data('aptag_cindex', cindex);
	
	var id="#"+$obj.attr('id').substr(6);
	plugin_tag_select(id, val);
};



function plugin_select_updown_up($obj){
	if (!$obj.is(":visible")){
		return;
	}
	var cindex=$obj.data('aptag_cindex');
	var maxlen=$obj.children().length;
	
	if (maxlen==0){
		return;
	}
	
	if (cindex>0){
		cindex--;
	}else{
		cindex=maxlen-1;
	}
	
	var val='';
	
	$obj.children().each(function(index){
		if (index==cindex){
			val=$(this).data('value');
			$(this).addClass('__tagactive');
		}else{
			$(this).removeClass('__tagactive');
		}
	});
	
	$obj.data('aptag_cindex', cindex);
	
	var id="#"+$obj.attr('id').substr(6);
	plugin_tag_select(id, val);
};



function plugin_select_updown_enter($obj){
	if (!$obj.is(":visible")){
		return;
	}
	
	var cindex=$obj.data('aptag_cindex');
	var maxlen=$obj.children().length;
	
	if (maxlen==0 || cindex>=maxlen){
		return;
	}
	
	$obj.children().eq(cindex).click();
	$obj.hide();
	
	var select_fn=$obj.data("onselect");
	
	if (select_fn){
		select_fn($obj.children().eq(cindex).data("value"));
	}
};



function plugin_tag_select(id, replaced){
	if ($(id).data("single-tag")){
		$(id).val($.trim(replaced));
		return;
	}
	
	// $(id).next('.__ap_xauto').hide();
	if (!$(id).length){
		return;
	}
	
	var v=$(id).apv();
	var pos=plugin_get_caret_position(id);
	
	var compact=($(id).data("compacttagging")==1 || $(id).data("compacttagging")=='1');
	
	var start=-1;
	var end=v.length;
	if (!v){
		return;
	}
	
	if (compact){
		if (v.indexOf(' ')==-1){
			start=0;
		}else{
			if (pos>=0 && pos<=v.length){
				var ch="";
				// Set current word to data("current.word");
				var head="";
				for (var j=pos-1; j>=0; j--){
					ch=v.charAt(j);
					if (ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
						if (ch==' '){
							start=j;
							break;
						}
					}else{
						break;
					}
				}
				
				for (var j=pos; j<v.length; j++){
					var ch=v.charAt(j);
					if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
					}else{
						end=j;
						break;
					}
				}
			}	
		}
	}else{
		if (pos>=0 && pos<=v.length){
			var ch="";
			// Set current word to data("current.word");
			var head="";
			for (var j=pos-1; j>=0; j--){
				ch=v.charAt(j);
				if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
					if (ch=='@'){
						start=j;
						break;
					}
				}else{
					break;
				}
			}
			
			for (var j=pos; j<v.length; j++){
				var ch=v.charAt(j);
				if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
				}else{
					end=j;
					break;
				}
			}
		}

	}
		
	
	
	if (start!=-1){
		v=v.substr(0,start)+((compact&&start>0)?" ":"")+replaced+v.substr(end, v.length-end);
		$(id).val(v);
		$(id).setCursorPosition(start+replaced.length+((compact&&start>0)?1:0));
	}
};



function plugin_actual_tag_select(id, replaced){
	$(id).next('.__ap_xauto').hide();
	var v=$(id).apv();
	var pos=plugin_get_caret_position(id);
	
	var start=-1;
	var end=v.length;
	if (!v){
		return;
	}
	
	if (pos>=0 && pos<=v.length){
		var ch="";
		// Set current word to data("current.word");
		var head="";
		for (var j=pos-1; j>=0; j--){
			ch=v.charAt(j);
			if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
				if (ch=='@'){
					start=j;
					break;
				}
			}else{
				break;
			}
		}
		
		for (var j=pos; j<v.length; j++){
			var ch=v.charAt(j);
			if (ch!=' ' && ch!="\n" && ch!='>'  && ch!='<' && ch!=',' && ch!='.'){
			}else{
				end=j;
				break;
			}
		}
	}
	
	if (start!=-1){
		v=v.substr(0,start)+replaced+v.substr(end, v.length-end-1);
		$(id).val(v);
		$(id).setCursorPosition(start+replaced.length);
	}
};


function CaretHandler(selector){
	this.selector=selector;
	
	this.get=function(){
		return plugin_get_caret_position(this.selector);
	};
	
	this.move=function(position){
		$(this.selector).setCursorPosition(position);
	};
	
	this.start=this.get();
};


function plugin_get_caret_position(id){	
	var el = $(id)[0];
	var pos = 0;
	if ('selectionStart' in el){
		el.focus();
		pos = el.selectionStart;
	} else if ('selection' in document) {
		el.focus();
		var Sel = document.selection.createRange();
		var SelLength = document.selection.createRange().text.length;
		Sel.moveStart('character', -el.value.length);
		pos = Sel.text.length - SelLength;
	}
	return pos;
};


function plugin_textarea_insert(id, str){
	var pos=plugin_get_caret_position(id);
	var val=$(id).val();
	$(id).val(val.substr(0, pos)+str+val.substr(pos+1));
	$(id).setCursorPosition(pos+str.length);
};




/**
 * @desc 'destroyed' callback, very neat
 */
(function($){
	  $.event.special.destroyed = {
		remove: function(o) {
		  if (o.handler) {
			o.handler();
		  }
		}
	  };
})(jQuery);





function choose(a, if_null){
	if (AP.data.isEmpty(a)){
		return if_null;
	}
	return a;
};




/*
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function(b,c){var $=b.jQuery||b.Cowboy||(b.Cowboy={}),a;$.throttle=a=function(e,f,j,i){var h,d=0;if (typeof f!=="boolean"){i=j;j=f;f=c}function g(){var o=this,m=+new Date()-d,n=arguments;function l(){d=+new Date();j.apply(o,n)}function k(){h=c}if (i&&!h){l()}h&&clearTimeout(h);if (i===c&&m>e){l()}else{if (f!==true){h=setTimeout(i?k:l,i===c?e-m:e)}}}if ($.guid){g.guid=j.guid=j.guid||$.guid++}return g};$.debounce=function(d,e,f){return f===c?a(d,e,false):a(d,f,e!==false)}})(this);












/*!
Autosize 4.0.0
license: MIT
http://www.jacklmoore.com/autosize
*/
!function(e,t){if ("function"==typeof define&&define.amd)define(["exports","module"],t);else if ("undefined"!=typeof exports&&"undefined"!=typeof module)t(exports,module);else{var n={exports:{}};t(n.exports,n),e.autosize=n.exports}}(this,function(e,t){"use strict";function n(e){function t(){var t=window.getComputedStyle(e,null);"vertical"===t.resize?e.style.resize="none":"both"===t.resize&&(e.style.resize="horizontal"),s="content-box"===t.boxSizing?-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(s)&&(s=0),l()}function n(t){var n=e.style.width;e.style.width="0px",e.offsetWidth,e.style.width=n,e.style.overflowY=t}function o(e){for(var t=[];e&&e.parentNode&&e.parentNode instanceof Element;)e.parentNode.scrollTop&&t.push({node:e.parentNode,scrollTop:e.parentNode.scrollTop}),e=e.parentNode;return t}function r(){var t=e.style.height,n=o(e),r=document.documentElement&&document.documentElement.scrollTop;e.style.height="";var i=e.scrollHeight+s;return 0===e.scrollHeight?void(e.style.height=t):(e.style.height=i+"px",u=e.clientWidth,n.forEach(function(e){e.node.scrollTop=e.scrollTop}),void(r&&(document.documentElement.scrollTop=r)))}function l(){r();var t=Math.round(parseFloat(e.style.height)),o=window.getComputedStyle(e,null),i="content-box"===o.boxSizing?Math.round(parseFloat(o.height)):e.offsetHeight;if (i!==t?"hidden"===o.overflowY&&(n("scroll"),r(),i="content-box"===o.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight):"hidden"!==o.overflowY&&(n("hidden"),r(),i="content-box"===o.boxSizing?Math.round(parseFloat(window.getComputedStyle(e,null).height)):e.offsetHeight),a!==i){a=i;var l=d("autosize:resized");try{e.dispatchEvent(l)}catch(e){}}}if (e&&e.nodeName&&"TEXTAREA"===e.nodeName&&!i.has(e)){var s=null,u=e.clientWidth,a=null,c=function(){e.clientWidth!==u&&l()},p=function(t){window.removeEventListener("resize",c,!1),e.removeEventListener("input",l,!1),e.removeEventListener("keyup",l,!1),e.removeEventListener("autosize:destroy",p,!1),e.removeEventListener("autosize:update",l,!1),Object.keys(t).forEach(function(n){e.style[n]=t[n]}),i.delete(e)}.bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",p,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",l,!1),window.addEventListener("resize",c,!1),e.addEventListener("input",l,!1),e.addEventListener("autosize:update",l,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",i.set(e,{destroy:p,update:l}),t()}}function o(e){var t=i.get(e);t&&t.destroy()}function r(e){var t=i.get(e);t&&t.update()}var i="function"==typeof Map?new Map:function(){var e=[],t=[];return{has:function(t){return e.indexOf(t)>-1},get:function(n){return t[e.indexOf(n)]},set:function(n,o){e.indexOf(n)===-1&&(e.push(n),t.push(o))},delete:function(n){var o=e.indexOf(n);o>-1&&(e.splice(o,1),t.splice(o,1))}}}(),d=function(e){return new Event(e,{bubbles:!0})};try{new Event("test")}catch(e){d=function(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!1),t}}var l=null;"undefined"==typeof window||"function"!=typeof window.getComputedStyle?(l=function(e){return e},l.destroy=function(e){return e},l.update=function(e){return e}):(l=function(e,t){return e&&Array.prototype.forEach.call(e.length?e:[e],function(e){return n(e,t)}),e},l.destroy=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],o),e},l.update=function(e){return e&&Array.prototype.forEach.call(e.length?e:[e],r),e}),t.exports=l});








/**
 * @desc Jquery Multi-Upload Plugin
 * @example
 * 		$("#my-form).multiUpload();
 * @author Hung Pham
 */

(function($) {  
	
	$.fn.selectFiles=function(options){
		if (!options){
			options={};
		}
		options=$.extend({},{label:"Select Files","icon":null},options);
		if ($(this).data("label")){
			options.label=$(this).data("label");
		}
		if ($(this).data("alt-label")){
			options.alt_label=$(this).data("alt-label");
		}
		
		
		if ($(this).data("icon")){
			options.icon=$(this).data("icon");
		}

		if (!options.alt_label){
			options.alt_label=options.label;
		}
		
		
		$(this).each(function(){
			if (options.multi){
				$(this).addClass("__multi");
			}
			$(this).addClass('__file_org');
			
			var name=$(this).attr('name');
			var p=$(this).parent();
			p.addClass('__file');
			p.parent().addClass('rowfile');
			if (!p.attr('id')){
				p.attr('id',AP.uuid());
			}
			var pid=$(p).attr('id');
			
			$(this).hide();
			var temp=AP.uuid();
		
			var icon="";
			if (options.icon){
				icon="<span class='ap-f14 "+options.icon+"'></span>&nbsp; "
			}
			
			if ($(this).hasClass("__multi") || options.multi){
				$("<div class='__files hidden'></div> <div class='fl hidden'></div><div class='browse'><em data-alt_label='"+options.alt_label+"' data-prim_label='"+options.label+"'>"+icon+options.label+"</em> <input type='file' name='__tmp"+name+"' class='__browse' onchange=\"__apupload_AddFiles(this, '"+pid+"','"+name+"');\"></div>").appendTo(p);
			}else{
				$("<div class='__files hidden'></div> <div class='fl hidden'></div><div class='browse'><em data-alt_label='"+options.alt_label+"' data-prim_label='"+options.label+"'>"+icon+options.label+"</e> <input type='file' name='__tmp"+name+"' class='__browse' onchange=\"__apupload_AddOneFile(this, '"+pid+"','"+name+"');\"></div>").appendTo(p);
			}
		});
	};
	
	
	
	
	
	/**
	 * @desc Multiupload/select file
	 */
	$.fn.multiUpload=function(options, callback){
		if (options && AP.isString(options) && typeof options!='undefined'){
			return upload_apply(this, options);
		}
		
		options=$.extend({}, {show: true, close_button: false, title: "Upload Files", browse_label: "Browse", submit_label:"Finish Browsing", reset_label:"Reset Selections", hint:"Hint: You can drag your mouses or use CTRL key to select multiple files at once.", clean: false, upload_on_close: false, filename_max_length: 40, max_items: 10, name: 'file', allow:'jpg, jpeg, png, gif, pdf, doc, docx'}, options);
		if (typeof callback!='undefined'){
			options.callback=callback;
		}else{
			options.callback=null;
		}
		
		if (!$(this).flag()){
			// Setup Multi Upload
			options.queue=[];
			upload_setup(this, options);
		}
		
		if (options.clean){
			$(this).multiUpload('clean');
		};
		
		if (options.upload_on_close){
			$(this).addClass('hidden');
		}
		
		if (options.close_button){
			AP.dialog("#"+upload_container($(this).attr('id'))).canvas().find(".__dialogclose").show();
		}
		
		AP.dialog("#"+upload_container($(this).attr('id'))).show();
		
		if (options.show==false){
			AP.dialog("#"+upload_container($(this).attr('id'))).hide();
		};
		
	};
	
	
	/**
	 * @desc Add new file from input[type=file] <param fi or file input>
	 */
	$.fn.multiUpload_addFile=function(fi){
		var options=$(this).data('__ap_upload_data');
		if (!options){
			return false;
		}
		var val=$(fi).val();
		if (val && val.length>1){
			// Get filename
			var name=upload_filename(val);
			if (name){
				upload_displayFile(this, {'name': name, size:''});
			}
		}

	};
	
	
	/**
	 * @desc Add new file from input[type=file] <param fi or file input>
	 */
	$.fn.multiUpload_addMFiles=function(fi, lists){
		// Marking that we are using fileAPI.
		if ($(".__fileapi", this).length==0){
			$(this).append("<input type='hidden' name='fileapi' class='__fileapi' value='1'/>");
		}
		
		$(this).multiUpload('clean');
		
		var options=$(this).data('__ap_upload_data');
		if (!options){
			return false;
		}
		var selector=$(this).attr('id');
		
		for (var i=0; i<lists.length; i++){
			var file=lists[i];
			var name=file.name;
			if (name){
				if (name.length>=options.filename_max_length){
					name=name.substr(0, options.filename_max_length-1)+"...";
				}
				var size='';
				if (file.size){
					size=Math.floor(parseInt(file.size)/1000)+"KB";
				}
				
				// Validation
				if (options.allow && !AP.word.fileX(name, options.allow)){
					return AP.alertError("Invalid file extensions.");
				}
				
				if (options.queue.length >= options.max_items){
					$(this).multiUpload('clean');
					return AP.alertError("You've selected too many files.");
				}
				
				$("#"+upload_container(selector)+" .upload-place").append("<div class='upload-item ap-clear-fix'><div class='index'><div class='i32 i32-circle'><span>"+(options.queue.length+1)+"</span></div></div><div class='name'>"+name+"</div><div class='size'>"+size+"&nbsp;</div><div class='upload-buttons hidden'><span class='s16 s16-apb-close pointer' title='Remove this file?'></span></div><div class='ap-1fix left'></div></div>");
				options.queue.push(file.name);
			}
		}
		
		
		$("#"+upload_container(selector)+" div.browser-button input[name=ap-browser]").attr('name',''+options.name+'[]').unbind('change').appendTo(upload_area(selector));		
		$("#"+upload_container(selector)+" div.browser-button").append("<input type='file' name='ap-browser' multiple=''>");		
		
		$("#"+upload_get_counter_wrapper_id(selector)).html(options.queue.length);
		upload_setChangeHandler(selector);
		
		AP.dialog("#"+upload_container(selector)).balance();
	};
	
	
	
	var upload_apply=function(obj, fn){
		if (fn=='show'){
			AP.dialog("#"+upload_container($(obj).attr('id'))).show();
			return;
		}else if (fn=='get'){
			var options=$(obj).data('__ap_upload_data');
			if (options && options.queue){
				return options.queue;
			}
			return [];
		}else if (fn=='hide'){
			AP.dialog("#"+upload_container($(obj).attr('id'))).hide();
			upload_callback($(obj).attr('id'));
			return;
		}else if (fn=='close'){
			var options=$(obj).data('__ap_upload_data');
			if (!options){
				$.log('multi-upload fails to add file');
				return false;
			}
			if (options.upload_on_close){
				var _fn=AP.nothing;
				if (options.close_callback){
					_fn=options.close_callback;
				}
				AP.submitFrame('#'+$(obj).attr('id'), function(code){
					_fn(code);
				});
			}else{
				AP.dialog("#"+upload_container($(obj).attr('id'))).hide();
			}
			upload_callback($(obj).attr('id'));
		}else if (fn=='clean'){
			var selector=$(obj).attr('id');
			var options=$(obj).data('__ap_upload_data');
			if (!options){
				$.log('multi-upload fails to add file');
				return false;
			}
			
			// When FileAPI is not supported
			if (!AP.sys.file()){
				$("#"+upload_container(selector)+" .upload-place").empty();
				$(upload_area(selector)).empty().html("<input type='hidden' name='max-"+options.name+"' value='"+options.max_items+"'/>");
				$("#"+upload_container(selector)+" div.browser-button").empty().html('Browser').append("<input type='file' name='ap-browser' multiple=''>");
				
				upload_setChangeHandler(selector);
				
				options.queue=[];
				$(obj).data('__ap_upload_data', options);
				$("#"+upload_get_counter_wrapper_id(selector)).html(0);
			}else{
				// We won't remove the input file.
				
				$("#"+upload_container(selector)+" .upload-place").empty();
				$(upload_area(selector)).empty().html("<input type='hidden' name='max-"+options.name+"' value='"+options.max_items+"'/>");
				
				options.queue=[];
				$(obj).data('__ap_upload_data', options);
				$("#"+upload_get_counter_wrapper_id(selector)).html(0);
			}
			
			
		}else{
			$.log('unknown flag '+fn);
		}
	};

	
	
	var upload_callback=function(id){
		var id="#"+id;
		var options=$(id).data('__ap_upload_data');
		if (options.callback){
			options.callback(options.queue);
		}
	};
		
	
	/**
	 * @desc Setup the multi-upload Platform
	 */
	var upload_setup=function(element, options){
		
		$(element).data("__ap_upload_data", options);
		
		var selector=$(element).attr('id');
		var container=upload_container(selector);
		var submit=options.submit_label;

		var buttons="<div class='upload-bt' onclick=\"$('#"+selector+"').multiUpload('close');\">"+submit+"</div>";
		
		var extra_class='';
		if (options.upload_on_close){
			buttons="<div class='upload-bt upload-btd' onclick=\"$('#"+selector+"').multiUpload('hide');\">Cancel</div>"
				+"<div class='upload-bt upload-btd' onclick=\"$('#"+selector+"').multiUpload('close');\">"+submit+"</div>" +
				"<div class='upload-bts'></div>";
		}else{
			extra_class='has_close_button';
		}
		
		
		$("#ap-temp").append("<div id='"+container+"' class='multi-upload ap-mh200'>" +
				"<div class='upload-title ap-clearfix'><span id='"+upload_get_counter_wrapper_id(selector)+"'>0</span> "+"files have been selected"+" <span class='reset' onclick=\"$('#"+selector+"').multiUpload('clean');\">"+options.reset_label+"</span> <div class='button browser-button'>"+options.browse_label+"</div></div>" +
				"<div class='upload-place'></div>" +
				"<div class='upload-extra'></div>" +
				"<div class='upload-buttons relative'>" +
				buttons+
				"</div>"+
			"</div>");
		
		AP.dialog("#"+container)
			.data('form', $(element).attr('id'))
			.engine(AP.config.uploadDialogEngine)
			.title(options.title).width(600)
			.style(extra_class)
			.show();
			
		$("#"+selector).append("<div class='__ap-upload-area hidden'><input type='hidden' name='max-"+options.name+"' value='"+options.max_items+"'/></div>");
		
		$("#"+container+" div.browser-button").append("<input type='file' name='ap-browser' multiple=''>");
		
		
		if (AP.sys.file()){
			$("#"+container+" .upload-extra").append("<div class='desc'>"+options.hint+"</div>");
		}
		
		upload_setChangeHandler(selector);
		
	};
	
	
	/**
	 * @desc Setting up the onChange handler for the input button.
	 */
	var upload_setChangeHandler=function(selector){
		var container=upload_container(selector);
		$("#"+container+" div.browser-button input").bind("change", function(){
			if (AP.sys.file()){
				var s=document.querySelector("#"+container+" div.browser-button input");
				return $('#'+selector).multiUpload_addMFiles(this, s.files);
			}else{
				$('#'+selector).multiUpload_addFile(this);
			}
		});
	};
	
	
	/**
	 * @desc After adding a file, displaying it to dialog
	 */
	var upload_displayFile=function(element, file){
		var options=$(element).data('__ap_upload_data');
		if (!options){
			$.log('multi-upload fails to add file');
			return false;
		}
			
		
		var name=file.name;
		if (name.length>=options.filename_max_length){
			name=name.substr(0, options.filename_max_length-1)+"...";
		}
		var size='';
		if (file.size){
			size=file.size;
		}
		
		// Validation
		if (options.allow && !AP.word.fileX(name, options.allow)){
			return AP.alertError('Invalid file extension.');
		}
		
		if (options.queue.length >= options.max_items){
			return AP.alertError("You've selected too many files.");
		}
		
		var selector=$(element).attr('id');
		$("#"+upload_container(selector)+" .upload-place").append("<div class='upload-item ap-clear-fix'><div class='index'><div class='i32 i32-circle'><span>"+(options.queue.length+1)+"</span></div></div><div class='name'>"+name+"</div><div class='size'>"+size+"&nbsp;</div><div class='upload-buttons'><span class='i12 i12-close pointer' title='Remove this file?'></span></div><div class='ap-1fix left'></div></div>");
		
		$("#"+upload_container(selector)+" div.browser-button input[name=ap-browser]").attr('name',''+options.name+'-'+options.queue.length).unbind('change').appendTo(upload_area(selector));		
		$("#"+upload_container(selector)+" div.browser-button").append("<input type='file' name='ap-browser' multiple=''>");		
		upload_setChangeHandler(selector);
		
		
		options.queue.push(file.name);
		
		$("#"+upload_get_counter_wrapper_id(selector)).html(options.queue.length);
	};
	
	
	
	/**
	 * @desc Return the container ID 
	 */
	var upload_container=function(id){
		return "__upload_"+id;
	};
	
	
	
	/**
	 * @desc Getting the upload wrapper ID to count the items
	 */
	var upload_get_counter_wrapper_id=function(selector){
		return selector+'__upload_counter';
	};
	
	
	/**
	 * @desc Getting the upload area ID
	 */
	var upload_area=function(selector){
		return "#"+selector+" div.__ap-upload-area";
	};
	
	
	/**
	 * @desc Getting the upload filename from some posted sources
	 */
})(jQuery);



var upload_filename=function(str){
	return getUploadFN(str);
};


var __apupload_AddFiles=function(obj, pid, name){
	var $p=$('#'+pid);
	var $files=$('.__files', $p);
	var f=$(obj).val();
	if (f && f.length>1){
		// Get filename
		var tmpname=getUploadFN(f);
		var tempid=AP.uuid();
			
		if (tmpname){
			$('.fl', $p).append("<div class='fi' id='__tmp"+tempid+"'> <div class='remove' onclick=\"__apupload_RemoveFile('"+tempid+"');\"> <div class='tt hidden padding_less' style='width:140px; bottom:20px; font-weight:normal'>Remove file "+tmpname+"?</div> <span class='ticon-cancel entypo'></span></div> <span class='ticon-doc entypo'></span> "+tmpname+"</div>").show();
		}
		$('.__browse',$p).unbind('change').attr('name',name+'[]').attr('id',tempid).appendTo($files);
		$('.browse', $p).append("<input title='Click to select files' type='file' class='__browse' name='__tmp"+name+"' onchange=\"__apupload_AddFiles(this, '"+pid+"','"+name+"');\"/>");
		
		$('.remove',$p).tooltip('.tt');
		
		var alt=$('.browse em', $p).data("alt_label");
		var prim=$('.browse em', $p).data("prim_label");
		
		if ($('.fl .fi', $p).length && $('.fl .fi', $p).length>=1){
			$('.browse > em', $p).html(alt);
		}else{
			$('.browse > em', $p).html(prim);
		}
	}
};


var __apupload_AddOneFile=function(obj, pid, name){
	var $p=$('#'+pid);
	var $files=$('.__files', $p);
	var f=$(obj).val();
	if (f && f.length>1){
		// Get filename
		var tmpname=getUploadFN(f);
		var tempid=AP.uuid();
			
		if (tmpname){
			$('.fl', $p).html("<div class='fi' id='__tmp"+tempid+"'> <div class='remove' onclick=\"__apupload_RemoveFile('"+tempid+"');\"> <div class='tt hidden padding_less' style='width:140px; bottom:20px; font-weight:normal'>Remove file "+tmpname+"?</div> <span class='ticon-cancel entypo ap-f16'></span></div> <span class='ticon-upload ap-f16 entypo'></span> "+tmpname+"</div>").show();
		}
		$files.cleanUp();
		$('.__browse',$p).unbind('change').attr('name',name+'').attr('id',tempid).appendTo($files);
		$('.browse', $p).append("<input title='Click to select a file' type='file' class='__browse' name='__tmp"+name+"' onchange=\"__apupload_AddOneFile(this, '"+pid+"','"+name+"');\"/>");
		
		$('.remove',$p).tooltip('.tt');
		var alt=$('.browse em', $p).data("alt_label");
		var prim=$('.browse em', $p).data("prim_label");
		
		if ($('.fl .fi', $p).length && $('.fl .fi', $p).length>=1){
			$('.browse > em', $p).html(alt);
		}else{
			$('.browse > em', $p).html(prim);
		}
	}
};


var __apupload_RemoveFile=function(id){
	var $p=$('#__tmp'+id).parent();
	
	$('#'+id).remove();
	$('#__tmp'+id).remove();
	
	if (!$p.has('div').length){
		$p.hide();
	}
	
	var $px=$p.closest('.__file');
	
	var alt=$('.browse em', $px).data("alt_label");
	var prim=$('.browse em', $px).data("prim_label");
	var icon="";
	if ($('.__file_org',$px).data("icon")){
		icon="<span class='ap-f14 "+options.icon+"'></span>&nbsp; "
	}
	
	if ($('.fl .fi', $px).length && $('.fl .fi', $px).length>=1){
		$('.browse > em', $px).html(icon+alt);
	}else{
		$('.browse > em', $px).html(icon+prim);
	}
};


/**
 * @desc Sample Engine for Form
 */
var BasicFormEngine=new function __BasicFormEngine(){	
	this.show=function(canvas, form){
		var id=AP.uuid();
		var extra=form.getStyles().join(" ");
		var css=form.getCss().join(";");
		var text="<div class='__form "+extra+"' id='"+id+"' style='"+css+"'> <form method='post' action='"+form.getURL()+"' id='"+form.getID(true)+"'>" +
		this.getRows(form)+
		"<div class='row buttons __buttons'></div>"+
		"</form></div>";
		$(canvas).append(text);
		
		for (var button in form.getButtons()){
			$("<div class='button'>"+button+"</div>").bind('click',{fn: form.getButton(button)},function(event){
				event.data.fn();
			}).appendTo($("#"+id).find('.__buttons').first());
		};
	};
	
	
	this.html=function(form){
		var id=AP.uuid();
		var extra=form.getStyles().join(" ");
		var css=form.getCss().join(";");
		var handler=form.getHandlerInline();
		
		var text="<div class='__form "+extra+"' id='"+id+"' style='"+css+"' "+handler+"> <form method='post' action='"+form.getURL()+"' id='"+form.getID(true)+"'>" +
		this.getRows(form)+
		"</form></div>";
		return text;
	};
	
	
	
	
	/**
	 * @desc Rendering rows
	 */
	this.getRows=function(form){
		var text="";
		for (var i=0; i<form.getData().length; i++){
			var elem=form.getData(i);
			if (!elem.meta.value){
				elem.meta.value="";
			}
			
			var hint="";
			if (elem.meta.hint){
				hint="<div class='hint'>"+elem.meta.hint+"</div>";
			}
			
			
			if (elem.type=='hidden'){
				text+="<input type='hidden' name='"+elem.meta.name+"' value='"+elem.meta.value+"'/>";
			}
			if (elem.type=='text'){
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='input'><input type='text' name='"+elem.meta.name+"' value='"+elem.meta.value+"'/></div>"+hint+"</div>";
			}
			if (elem.type=='file'){
				var _class='';
				if (elem.meta.multi){
					_class=" class='__multi' ";
				}
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='file'><input type='file' "+_class+"name='"+elem.meta.name+"'/></div>"+hint+"</div>";
			}
			if (elem.type=='select'){
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='select'><select class='__multi' name='"+elem.meta.name+"'>"+this.getSelectOptions(elem.meta.options, elem.meta.value)+"</select></div>"+hint+"</div>";
			}
			if (elem.type=='choice'){
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='select'><select class='__choice' name='"+elem.meta.name+"'>"+this.getSelectOptions(elem.meta.options)+"</select></div></div>";
			}
			if (elem.type=='textarea'){
				if (!elem.meta.value){
					elem.meta.value="";
				}
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='input'><textarea name='"+elem.meta.name+"'>"+elem.meta.value+"</textarea></div>"+hint+"</div>";
			}
			if (elem.type=='info'){
				text+="<div class='row'> <label>"+elem.meta.label+"</label> <div class='info'><div>"+elem.meta.value+"</div></div></div>";
			}
			if (elem.type=='hint'){
				text+="<div class='row'><div class='hint'><div>"+elem.meta.value+"</div></div></div>";
			}
		}
		return text;
	};
	
	
	/**
	 * @desc Get options for a select input
	 */
	this.getSelectOptions=function(opts, value){
		var text="";
		for (var opt in opts){
			if (AP.data.equal(opt,value)){
				text+="<option value='"+opt+"' selected>"+opts[opt]+"</option>";
			}else{
				text+="<option value='"+opt+"'>"+opts[opt]+"</option>";
			}
		}
		return text;
	};
};

 

AP.config.form={engine: BasicFormEngine, dialogEngine: BasicDialogEngine};

AP.form=function(id, url, engine, dialogEngine){
	if (!url){
		url='';
	}
	if (!engine){
		engine=AP.config.form.engine;
	}
	if (!dialogEngine){
		dialogEngine=AP.config.form.dialogEngine;
	}
	return new APForm(id, url, engine, dialogEngine);
};


/**
 * @desc Rendering Form
 * @param id
 * @param url
 * @returns {APForm}
 */
function APForm(id, url, engine, dialogEngine){
	this._id=id;
	if (AP.word.prefix(id, "#")){
		this._id=id.substr(1);
	};
	
	this._url=url;
	this._data=[];
	this._classes=[];
	this._buttons={};
	this._title="";
	this._engine=engine;
	this._dialogEngine=dialogEngine;
	this._dialog=false;
	this._callbacks=[];
	this._css=[];
	this._handlers={};
	
	this.handler=function(event, handler){
		this._handlers[event]=handler;
		return this;
	};
	
	
	this.getHandlerInline=function(){
		var handler="";
		for (var event in this._handlers){
			handler+=" "+event+"=\""+this._handlers[event]+"\"";
		}
		return handler;
	};
	
	
	/**
	 * @desc Get data (input) of the form.
	 */
	this.getData=function(index){
		if (index==undefined){
			return this._data;
		}
		return this._data[index];
	};
	
	
	/**
	 * @desc Get all buttons
	 */
	this.getButtons=function(){
		return this._buttons;
	};
	
	
	/**
	 * @desc Get single button
	 */
	this.getButton=function(label){
		return this._buttons[label];
	};
	
	
	/**
	 * @desc Get all styles
	 */
	this.getStyles=function(){
		return this._classes;
	};
	
	
	/**
	 * @desc Get css
	 */
	this.getCss=function(){
		return this._css;
	};
	
	
	/**
	 * @desc Get form ID. Set no_hash to true (call getID(true)) if you want the ID
	 * without the hash at the begining.
	 */
	this.getID=function(no_hash){
		if (!no_hash){
			return "#"+this._id;
		}
		return this._id;
	};
	
	
	/**
	 * @desc Get form title
	 */
	this.getTitle=function(){
		return this._title;
	};
	
	
	/**
	 * @desc Get form action URL
	 */
	this.getURL=function(){
		return this._url;
	};
	


	
	/**
	 * @desc Set the engine for rendering.
	 */
	this.engine=function(engine){
		this._engine=engine;
		return this;
	};
	
	
	/**
	 * @desc Set the engine for rendering.
	 */
	this.dialogEngine=function(dialogEngine){
		this._dialogEngine=dialogEngine;
		return this;
	};
	
	/**
	 * @desc Directly inject css to .__form
	 */
	this.css=function(css){
		this._css.push(css);
		return this;
	};
	
	/**
	 * @desc Alias of adding row.
	 */
	this.row=function(type, meta){
		this._data.push({type: type, meta: meta});
		return this;
	};
	
	
	/**
	 * @desc Set form title
	 */
	this.title=function(title){
		this._title=title;
		return this;
	};
	
	
	/**
	 * @desc Add a new button form button
	 */
	this.button=function(label, fn){
		this._buttons[label]=fn;
		return this;
	};
	
	
	/**
	 * @desc Add a new class
	 */
	this.style=function(style){
		this._classes.push(style);
		return this;
	};
	
	
	
	this.val=function(name){
		return $("#"+this._id+" *[name="+name+"]").apv();
	};
	
	
	/**
	 * @desc Get the HTML representing the form [NO BUTTONS]
	 */
	this.html=function(){
		return this._engine.html(this);
	};
	
	
	
	/**
	 * @desc Show form (inline) 
	 */
	this.release=function(canvas){
		if (!this._dialog){
			this._engine.show(canvas, this);
		}else{
			this.dialog();	
		}
		
		for (var i=0; i<this._callbacks.length; i++){
			this._callbacks[i]();
		}
		return this;
	};
	
	
	/**
	 * @desc Show form in dialog
	 * @param dengine Optional. If set, it will be the dialogEngine.
	 */
	this.dialog=function(dengine){
		if (engine){
			this.dialogEngine(dengine);
		}
		var id=this.getID()+"__dialog";
		AP.dialog(id).title(this.getTitle()).show();
		this._engine.show(AP.dialog(id, this._dialogEngine).find("content"), this);
		AP.dialog(id, this._dialogEngine).balance();
		
		for (var i=0; i<this._callbacks.length; i++){
			this._callbacks[i]();
		}
		
		return this;
	};
	
	
	/**
	 * @desc Hide (close form) for dialog.
	 */
	this.hide=function(){
		AP.dialog(this.getID()+"__dialog").hide();
		return;
	};
	
	
	
	/**
	 * @desc Add callback function (after release)
	 */
	this.callback=function(fn){
		this._callbacks.push(fn);
		return this;
	};
};




var Textarea=new function __TextArea(){
	this.simple=function(str){
		if (!str){
			return "";
		}
		
		return AP.word.replaceAll("<br>","\n", str);
	};
	
	this.clean=function(str){
		if (!str){
			return "";
		}
		
		var regex = /<br\s*[\/]?>/gi;
		str = str.replace(regex, "\n").replace(/&#8220;/g, "\"").replace(/&#8221;/g, "\"").replace(/&#8216;/g, "'").replace(/&#8217;/g, "'");
		return str;
	};
	
};


var BasicDialogEngine=new function __BasicDialogRender(){
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){
		dialog.canvas().append("" +
			"<div class='xdialog __dialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='main'>" +
							"<div class='__dialogtitle'>"+"&nbsp;</div>"+
							"<div class='__dialogclose' onclick=\"AP.dialog('"+dialog.id()+"').hide();\"><div class='entypo ticon-cancel'></div> </div>"+
							"<div class='__dialogcontent'></div>" +
							"<div class='__dialogbuttons xo'></div>"+
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-30;
		
		$(wid+' .__dialogwrapper').css({'top': t,'left': l});
		$(wid+' .dialogwrapper .__buttons .button:last').focus();
	};

};


AP.BSUCCESS='ss';
AP.BSTD='std';
AP.BERROR='er';


function initEscape(){
	$(document).keyup(function(e) {
		 if (e.keyCode == 27) { // escape key maps to keycode "27"
			 $("#apdialogs > .__dialog.__canvas_closable").each(function(){
				if ($(this).hasClass("__dialog_ontop")){
	 				AP.closeDialog($(this).find('.__dialogwrapper'));
				} 
			 });
		}
	});
};

initEscape();


AP.closeAllDialog=function(){
	$("#apdialogs > .__dialog .__dialogwrapper").each(function(){
		AP.closeDialog(this);
	});
};

AP.closeAllDialogs=AP.closeAllDialog;


AP.dialog=function(id, engine){
	if (!engine){
		engine=AP.config.dialog.engine;
	}
	return new APDialog(id, engine);
};



AP.closeDialog=function(ref){
	var dx=$(ref).closest('.__dialog').find(".__apdialog").attr("id");
	$("#"+dx).html("").empty();
	AP.dialog("#"+dx)
		.hide();
	
	AP.fire("dialog-close-"+dx);
	
	var $w=$(ref).closest('.__dialog');
	var events=$w.data("apevents");
	if (events && events.close){
		events.close.apply($w);
	}
};



AP.destroyDialog=function(id){
	var $dx=$("#__apdialog_"+id.substr(1));
	
	if (!$dx.length){
		return;
	}
	
	var events=$dx.data("apevents");
	if (events && events.close){
		events.close.apply($w);
	}
	
	$dx.html("").empty();
	
	$dx.remove();
};



/**
 * @desc AP Dialog
 * @param id
 * @returns {APDialog}
 * @example 
 * 	
 * 	
 	AP.dialog("#testdialog").title("Just a test dialog")
		.button("OK", function(){
			AP.alertSuccess("Good job");
			AP.dialog("testdialog").title("Title changed").content("<h1>Test Dialog Content</h1>")
				.button("Close", function(){
					AP.dialog("testdialog").hide();
				});
		}).button("Cancel", function(){
			AP.alertError("Cancel job");
		})
		.show();
		
 */

function APDialog(id, engine){
	this._rendered=false;
	this._temp=true;
	this._buttons={};
	this._bs={};
	this._title="Untitled";
	this._content="";
	this._classes=[];
	this._css={};
	this._data={};
	this._config={};
	this._icon=null;
	this._closable=false;
	this._close_button=true;
	
	this._engine=engine;
	if (AP.word.prefix(id,"#")){
		id=id.substr(1);
	}
	
	if (!AP.html.exist("#"+id)){
		$(document.body).append("<div id='"+id+"'></div>");
	}else{
		var title=$("#"+id).attr('title');
		if (title){
			this._title=title;
		}
	}
	
	if (engine){
		$("#"+id).data("__engine", engine);	
	}else{
		engine=$("#"+id).data("__engine");
		this._engine=engine;
	}
	
	if ($("#"+id).data("icon")){
		this._icon=$("#"+id).data("icon");
	}
	
	this._id=id;
	
	
	this.data=function(key, value){
		if (typeof value=="undefined"){
			if (key in this._data){
				return this._data[key];
			}
			return null;
		}else{
			this._data[key]=value;
			return this;
		}
	};
	
	
	this.setData=function(data){
		this._data=data;
	};
	
	this.closable=function(flag){
		this._closable=flag;
		return this;
	};
	
	this.closeButton=function(flag){
		this._close_button=flag;
		return this;
	};
	
	/**
	 * @desc Set _temp flag (flag to indicate the existance of the dialog between page transition)
	 */
	this.temp=function(flag){
		this._temp=flag;
		return this;
	};
	
	
	/**
	 * @desc Adding CSS class
	 */
	this.style=function(css_style){
		if (css_style){
			this._classes.push(css_style);
		}
		return this;
	};
	

	
	this.addClass=function(css_style){
		return this.style(css_style);
	};
	
	
	/**
	 * @desc Adding CSS class
	 */
	this.css=function(key, value){
		this._css[key]=value;
		return this;
	};
	
	this.icon=function(icon_class){
		this._icon=icon_class;
	}
	
	/**
	 * @desc Setting engine for rendering
	 */
	this.engine=function(engine){
		this._engine=engine;
		return this;
	};
	
	
	this.config=function(config){
		this._config=$.extend({}, this._config, config);
		return this;
	};
	
	
	
	/**
	 * @desc Add button
	 * @param label The text to be appeared in button
	 * @param fn Callback function 
	 * @param style [Optional] The specific style. If not defined, style will be '__default'
	 */
	this.button=function(label, fn, style){
		var counter=0;
		for (button in this._buttons){
			counter++;
		}
		if (counter==0){
			this.find("buttons").cleanUp();
		}
		var ec='__default';
		if (style){
			ec=style;
		}
		
		
		this._buttons[label]=fn;
		this._bs[label]={'style':ec,'fn':fn};
		
		
		
		if (this.initialized()){
			$("<div class='button "+ec+"'>"+label+"</div>").bind('click',{fn: fn},function(event){
				event.data.fn();
			}).appendTo(this.find("buttons"));
		}
		return this;
	};
	
	
	
	/**
	 * @desc Set title of the dialog
	 */
	this.title=function(title){
		if (title==undefined){
			title=this._title;
		}
		this._title=title;
		if (this.initialized()){
			if (this._icon){
				title="<span class='dialog-icon ap-f14 "+this._icon+"'></span>&nbsp; "+title;
			}
			this.fix('title', title);
		}
		return this;
	};
	
	
	/**
	 * @desc Set content of the dialog
	 */
	this.content=function(content){
		if (content != undefined){
			this._content=content;
		}
		
		if (this.initialized() && !AP.isEmpty(this._content)){
			$(this.id()).children().empty();
			$(this.id()).html(this._content);
		}
		
		return this;
	};
	
	
	this.append=function(id){
		$(id).appendTo($(this.id()));
		return this;
	};
	
	
	
	/**
	 * @desc Set width
	 */
	this.width=function(width){
		if (Client.native || Client.mobile){ 
			this.balance();
			return this;
		}
		
		if (AP.data.isInt(width)){
			if (Client.native || Client.mobile){ 
				$.log(width);
			}else{
				$(this.id()).css("width", width+"px");	
			}
		}else{
			$(this.id()).css("width", width);
		}
		this.balance();
		return this;
	};
	
	
	/**
	 * @desc Get the id (with # at the begining).
	 */
	this.id=function(){
		return "#"+this._id;
	};
	
	
	/**
	 * @desc Get the wrapper id.
	 * @param short Flag to mark whether we should omit the # at the begining.
	 */
	this.w=function(omit){
		if (omit){
			return "__apdialog_"+this._id;
		}
		return "#__apdialog_"+this._id;
	};
	
	
	/**
	 * @desc Return the canvas to contain all dialogs.
	 */
	this.canvas=function(){
		return this._engine.canvas();
	};
	
	
	/**
	 * @desc Check to see if the dialog is fully rendered. If yes, then future
	 * rendering will be progressive.
	 */
	this.initialized=function(){
		if (!AP.html.exist(this.id()) || !$(this.id()).hasClass('__apdialog')){
			return false;
		}
		return true;
	};
	
	
	/**
	 * @desc Render the dialog
	 */
	this.render=function(){
		if (!this.initialized()){
			this._engine.render(this);
			$(this.id()).data("config", this._config);
			$(this.id()).show().addClass('__apdialog').appendTo($(this.find('content'))).attr("title","");
			
			var classes=this._classes.join(" ");
			if (classes){
				$(this.w()).addClass(classes);
			}
			
			for (var k in this._css){
				$(this.id()).css(k, this._css[k]);
			}
			
			if (this._temp){
				$(this.w()).addClass("__temp");
			}
			$(this.w()).addClass("__dialog");
		}
		
		this._rendered=true;
		this.title();
		this.content();
		this.buttons();
		this.balance();
		
		if (this._temp){
		}else{
			var $this=this;
			AP.html.resize(function(){
				$this.balance();
			}, true);
		}
		
		
		return this;
	};
	
	
	/**
	 * @desc Setting buttons
	 */
	this.buttons=function(buttons){
		if (buttons && typeof buttons!=undefined){
			if (AP.data.isArray(buttons)){	
				for (var i=0; i<buttons.length; i++){
					if (!buttons[i].style){
						buttons[i].style='__ap_default_button';
					}
					
					this.button(buttons[i].label, buttons[i].action, buttons[i].style);
				}
			}else{
				for (var button in buttons){
					this.button(button, buttons[button],'__ap_default_button');
				}
			}
		}
		
		if (!this._rendered){
			this.find("buttons").cleanUp();
		}
		
		for (var button in this._buttons){	
			this.button(button, this._bs[button].fn, this._bs[button].style);
		}
		return this;
	};
	
	
	/**
	 * @desc Balance the dialog.
	 */
	this.balance=function(timeout){
		if (!timeout){
			this._engine.balance(this);
			// $.log(this._id); 
			// $.log(this._engine);
		}else{
			var $this=this;
			setTimeout(function(){
				$this._engine.balance($this);
			},timeout);
		}
		return this;
	};
	
	
	/**
	 * @desc Find elements of the dialog
	 */
	this.find=function(comp){
		var c=this.w()+" .__dialog"+comp;
		return $(c).first();
	};
	
	
	this.cond=function(cond, fn){
		if (cond){
			fn.apply(this);
		}
		
		return this;
	};
	
	
	/**
	 * @desc Show the dialog.
	 */
	this.show=function(){
		if (!this.initialized()){
			this.render();
		}
		$(this.canvas()).show();
		$(this.canvas()).children().each(function(){
			$(this).removeClass('__dialog_ontop');
		});
		
		$(".__ontop").removeClass("__ontop");
		$(this.w()).show().addClass('__dialog_ontop');
		this.balance();
		
		if (AP.config.disableParentScrolling && AP.sys.isTablet()){
			$("html, body").addClass("xo");
		}else if (this._config.disableParentScrolling){
			$("html, body").addClass("xo");
		}
		
		
		if (this._closable && !$(this.w()).hasClass("__canvas_closable")){
			$(this.w()).addClass("__canvas_closable");
			$("<div class='__closable'></div>").prependTo($(this.w())).click(function(){
				var id=$(this).closest(".__dialog").find(".__apdialog");
				AP.dialog("#"+id.attr("id")).hide();
			});
		}
		return this;
	};
	
	
	this.on=function(events){
		$(this.w()).data("apevents", events);
	};
	
	
	/**
	 * @desc Hide the dialog.
	 */
	this.hide=function(){
		$(this.w()).hide();
		var config=$(this.id()).data("config");
		var counter=0;
		$(this.canvas()).children().each(function(){
			if ($(this).is(":visible")){
				counter++;
				return;
			}
		});
		if (counter==0){
			$(this.canvas()).hide();
		}
		
		if (AP.config.disableParentScrolling && AP.sys.isTablet()){
			$("html, body").removeClass("xo");
		}else if (config && config.disableParentScrolling){
			$("html, body").removeClass("xo");
		}
		
		return this;
	};
	
	
	this.formatForm=function(){
		$(this.id()+' input[type=file]').selectFiles({label:"Select File"});
		$(this.id()+' textarea').disableTab();
		return this;
	};
	
	
	
	/**
	 * @desc Set flag to request re-rendering. This is not
	 * to show the dialog. 
	 */
	this.rerender=function(){
		this._rendered=false;
	};
	
	
	
	/**
	 * @desc Fix component. Key could be title or content.
	 */
	this.fix=function(key, val){
		this.find(key).html(val);
	};
};


AP.pageData={};
AP.localData={};

AP.lc=new function __APLC(){
	
	this._check=false;
	this._enable=false;
	this.enable=function(){
		if (Client.native){
			return true;
		}
		
		if (!this._check){
			this.check=true;
			if (typeof localStorage !== "undefined" && AP.isset('localStorage')){
				localStorage.setItem('__apc', '__apc');
				if (localStorage.getItem('__apc') == '__apc'){
					this._enable=true;
					return true;
				}else{
					return false;
				}
			}
			
			return false;
		}
		
		return this._enable;
	};
	
	
	this.set=function(key, data){
		if (!this.enable()){
			return false;
		}
		
		localStorage.setItem(key, data);
	};
	
	
	this.get=function(key){
		if (!this.enable()){
			return null;
		}
		
		return localStorage.getItem(key);
	};
	
	
	this.clear=function(key){
		if (!this.enable()){
			return false;
		}
		
		return localStorage.removeItem(key);
	};
};


AP.setTempData=function(code){
	if (!Client.tempData){
		Client.tempData={};
	}
	
	for (var key in code){
		if (key == "message" || key=="code" || key=="html" || key=="__js" || key=="good" || key=="notEmpty" || key=="hasCode" || key=="hasMessage" || key=="___stats" || key=="data"){
			continue;
		}
		
		Client.tempData[key]=code[key];
	}
};




 


Client.addCache=function(data){
	for (var key in data){
		Client.cache[key]=data[key];
	}
};

Client.getCurrentCachesKey=function(){
	var ks=[];
	for (var key in Client.cache){
		ks.push(key); 
	}
	return ks;
};


/**
 * @desc Clear cache except some variables
 */
Client.deleteCachesExcept=function(exs){
	var ks=Client.getCurrentCachesKey();
	for (var i=0; i<ks.length; i++){
		if (!exs){
			delete Client.cache[ks[i]];
		}else{
			if (exs.indexOf(ks[i])<0){
				delete Client.cache[ks[i]];
			}
		}
	};
};


AP.UI= new function _UI(){
	this.icon=function(icon){		
		var color="#000";
		if (icon=="doc" || icon=="docx"){
			color="#0689d5";
		}
		
		if (icon=="png" || icon=="jpg" || icon=="jpeg" || icon=="gif"){
			color="#e48a0f";
		}
		
		if (icon=="xls" || icon=="xlsx"){
			color="#5caa0f";
		}
		
		if (icon=="txt" || icon=="note"){
			color="#00c1cd";
		}
		
		if (icon=="pdf"){
			color="#dc0c12";
		}
		
		
		
		return "<span class='s32-mime-blank __mimeblank'><span class='__mimename' style='background-color: "+color+"'>"+icon+"</span></span>";
	};
	
	
	this.form=function(id, url, engine, dialogEngine){
		if (!engine){
			engine=AP.config.form.engine;
		}
		if (!dialogEngine){
			dialogEngine=AP.config.form.dialogEngine;
		}
		return new APForm(id, url, engine, dialogEngine);
	};

	
	/**
	 * @desc Generate options for year selection
	 */
	this.selectYears=function(start_year, end_year, selected_year){
		if (!selected_year){
			selected_year=0;
		}
		var text="";
		for (var i=end_year; i>start_year; i--){
			if (i==selected_year){
				text+="<option value='"+i+"' selected>"+i+"</option>";
			}else{
				text+="<option value='"+i+"'>"+i+"</option>";
			}
		}
		
		return text;
	};
	
	
	
	/**
	 * @desc Create a hashed link
	 */
	this.hash=function(){
	
		if (arguments.length==1){
			var url=arguments[0];
			if (url.indexOf('http')!=-1){
				var hash=getHash(url);
				if (hash){
					// window.location.hash="!/"+hash.join('/');
					window.location.hash="!/"+hash.join('/');
					AP._last_hash=hash.join('/');
					AP.loadURL(Client.url+'/'+hash.join('/'),{direct_load: true});
					return;
				}
			}
		}
		var path=""; 
		for (var i=0; i<arguments.length; i++){
			if (i>0){
				path=path+"/"+arguments[i];
			}else{
				path=arguments[0];
			}
		}
		// window.location.hash="!"+path;
		window.location.hash="!/"+path;
		AP._last_hash=path;
		AP.loadURL(Client.url+'/'+path,{direct_load: true});
	};
			

	/**
	 * @desc Create a regular link
	 */
	this.link=function(){
		var path="";
		for (var i=0; i<arguments.length; i++){
			path=path+"/"+arguments[i];
		}
		return "#!"+path;
	};
				
			
	/**
	 * @desc Create a time selector
	 */
	this.timeSelect = function(selector, options){
		if (!options){
			options={};
		}
		
		
		$(selector).each(function(){
			$(this).data("ts", options).addClass("__timeselect");
			if (!$(this).data('__timeselect')){
				$(this).data('__timeselect',1);
				var p=$(this).position();
				
				
//				var html='';
//				for (var i=0; i<source.length/4; i++){
//					html+="<div class='items relative'><div class='item' onclick='AP.UI.timeSelectNow(this)'><span>"+source[4*i]+"</span></div><div class='item' onclick='AP.UI.timeSelectNow(this)'><span>"+source[4*i+1]+"</span></div> <div class='item' onclick='AP.UI.timeSelectNow(this)'><span>"+source[4*i+2]+"</span></div>  <div class='item last' onclick='AP.UI.timeSelectNow(this)'><span>"+source[4*i+3]+"</span></div></div>";	
//				}
				
				
				var val=$(this).val();
				var hh=0;
				var mm=0;
				if (val && val.length){
					var hm=getCurrentHM(this);
					hh=hm[0];
					mm=hm[1];
				}else{
					var now=options.value;
					if (!now){
						now=$(this).data("value");
					}
					
					if (!now){
						now=AP.time.now();
					}
					
					if (now){
						$(this).val(AP.time.time("%H:%i", now));
					}
					
					hh=AP.time.time("%H", now);
					mm=AP.time.time("%i", now);
				}

				
				var hhtml="<div class='-tsbox -first' data-name='hour'> <div class='-tsn -up'><span class='-ap icon-chevron-thin-up'></span></div> <div class='-tsn -down'><span class='-ap icon-chevron-thin-down'></span></div> <div class='-tslabel'><div class='-tsinput -hour'>"+(hh)+"</div></div> </div>";
				
				var msrc=range(0,59,5);
				
				var mhtml="";
				mhtml="<div class='-tsbox -second' data-name='min'>" +
						"<div class='-tsn -up'><span class='-ap icon-chevron-thin-up'></span></div>" +
						"<div class='-tsn -down'><span class='-ap icon-chevron-thin-down'></span></div>" +
						"<div class='-tslabel'><div class='-tsinput -min'>"+mm+"</div></div> " +
					"</div>";
				
				
				
				var html="<div class='-tstitle'>Select time <span class='-tsclose'><span class='-ap icon-close'></span></span></div>"+hhtml + mhtml + "<div class='-tsr'>:</div> <div class='clear'></div>";
				
				
				var pos="top: "+p.top+"px; left: "+p.left+"px'";
				if (options && options.align=='bottom'){
					pos="bottom:38px; left: "+p.left+"px'";
				}
				
				$(this).parent().addClass('__timeselectw').append("<div class='__hiddenselect' style='position:absolute; "+pos+">"+html+"</div>");
				
				
				var $canvas=$(this).parent().find('.__hiddenselect');
				$canvas.find("input").on("input focus", function(){
					$canvas.find(".-tsbox").removeClass("active");
					$(this).closest(".-tsbox").addClass("active");
				});
				
				$(this).parent().clickOut(function(){
					$(this).find('.__hiddenselect').hide();
				});
				
				$canvas.find(".-tsclose").click(function(){
					$(this).closest('.__hiddenselect').hide();
				});
				
				$canvas.find(".-tsbox").each(function(){
					$(this).on("mousewheel", function(e){
						e.stopPropagation();
						if (e.originalEvent.wheelDelta / 120 > 0){
							moveTSUp(this);
						}else{
							moveTSDown(this);
						}
					});
					
					$(this).find(".-tsn.-up").click(function(){
						moveTSUp(this);
					});
					
					$(this).find(".-tsn.-down").click(function(){
						moveTSDown(this);
					});
				});
			}
			
			// AP.UI.timeSelectFocus(this);
			
			$(this).on("input focus", function(){
				var options=$(this).data("ts");
				if (!options){
					options={};
				}
				
				if (options.align && options.align=='bottom'){
					$(this).parent().find('.__hiddenselect').css('bottom', 38).show();
				}else{
					var p=$(this).position();
					$(this).parent().find('.__hiddenselect').css('top', p.top).css('left', p.left).show();	
				}
				
				$(this).parent().find('.__hiddenselect .-first .-tslabel input').focus();
				
				// AP.UI.timeSelectFocus(this);
				
				var hm=getCurrentHM(this);
				var $box=$canvas=$(this).parent().find('.__hiddenselect');
				$box.find(".-tsinput.-hour").html(hm[0]);
				$box.find(".-tsinput.-min").html(hm[1]);
				
			}).blur(function(){
				$(this).find('.__hiddenselect').hide();

				var hm=getCurrentHM(this);
				$(this).val(safeNum(hm[0])+":"+safeNum(hm[1]));
			});
			
			
		});
		
		
		
		function moveTSUp(ref){
			var type=$(ref).closest(".-tsbox").data("name");
			if (type=="hour"){
				var hour=getCurrentTS(ref, 'hour');
				hour++;
				if (hour>=24){
					hour=23;
				}
				
				setCurrentTS(ref, 'hour', hour);
			}else{
				var min=getCurrentTS(ref, 'min');
				min=min+5;
				if (min>=60){
					min=min-5;
				}
				
				setCurrentTS(ref, 'min', min);
			}
		};
		
		function moveTSDown(ref){
			var type=$(ref).closest(".-tsbox").data("name");
			if (type=="hour"){
				var hour=getCurrentTS(ref, 'hour');
				hour--;
				if (hour<0){
					hour=0;
				}
				
				setCurrentTS(ref, 'hour', hour);
			}else{
				var min=getCurrentTS(ref, 'min');
				min=min-5;
				if (min<0){
					min=min=5;
				}
				
				setCurrentTS(ref, 'min', min);
			}
		};
		
		
		function getCurrentTS(ref, type){
			var $input=$(ref).closest(".__hiddenselect").prev("input");
			if (!$input.length){
				return 0;
			}
			
			var val=$input.val();
			if (!val){
				val="00:00";
			}
			
			
			var hm=val.split(":");
			if (hm.length!=2){
				return 0;
			}
			
			if (type=='hour'){
				return parseInt(hm[0]);
			}else{
				return parseInt(hm[1]);
			}
		};
		
		
		function setCurrentTS(ref, type, val){
			var $box=$(ref).closest(".__hiddenselect");
			$box.find(".-tsinput.-"+type).html(AP.data.zeroPrefix(val));
			
			
			var hh=0;
			var mm=0;
			
			var $input=$(ref).closest(".__hiddenselect").prev("input");
			var ip="00:00";
			if (!$input.length){
			}else{
				ip=$input.val();
				if (!ip){
					ip="00:00";
				}
			}
			
			var hm=ip.split(":");
			if (hm.length!=2){
			}else{
				hh=hm[0];
				mm=hm[1];
				
				if (type=='hour'){
					hh=val;
				}else{
					mm=val;
				}
			}
			
			hh=parseInt(hh);
			mm=parseInt(mm);
			
			$input.val(AP.data.zeroPrefix(hh)+":"+AP.data.zeroPrefix(mm));
		};
		
		
		function getCurrentHM(ref){
			var hh=0;
			var mm=0;
			
			var ip=$(ref).val();
			
			if (!ip || !ip.length){
				ip="00:00";
			}
			
			var hm=ip.split(":");
			if (hm.length!=2){
				
			}else{
				hh=parseInt(hm[0]);
				mm=parseInt(hm[1]);	
			}
			
			return [safeNum(hh), safeNum(mm)];
		};
		
		function  safeNum(num){
			if (AP.data.isInt(num)){
				return AP.data.zeroPrefix(num);
			}
			
			return "00";
		};
	};

	
	
	this.timeSelectNow=function(ref){
		$(ref).addClass('chosen');
		var val=$("span", ref).html();
		var $p=$(ref).closest('.__timeselectw');
		var $input=$p.find('input.__timeselect');
		$input.val(val);
		$p.find('.__hiddenselect').fadeOut();
	};
	
	
	this.timeSelectFocus=function(selector){
		return;
		
		var val=$(selector).val();
		if (!val || !val.length){
			return;
		}
		
		var t=0;
		
		$(selector).parent().find('.__hiddenselect:first').find('.item').each(function(){
			if ($('span',this).html()==val){
				$(this).addClass('chosen');
				t=$(this).parent().position().top+$(this).closest('.__hiddenselect').scrollTop();
			}else{
				$(this).removeClass('chosen');
			}
		});
		
		if (t){
			t=t-32;
			if (t<0){
				t=0;
			}
			$(selector).parent().find('.__hiddenselect:first').animate({scrollTop: t}, 300);
		}
	};
	
			
	/**
	 * @desc Create a date selector. Require datepicker Jquery Plugin
	 */
	this.dateSelect = function(selector, format){
		if (!format){
			format=AP.locale.get("date-format-jquery","DD, MM d, yy");
		}
		
		$(selector).each(function(){
			$(this).datepicker({"dateFormat": format, firstDay: 1});
		});
	};
			
		
	
	this.stringcomplete=function(ref, url, extra_post_params){
		var $this=$(ref);
		$this.autocomplete({
			source: function(request, response) {
				request.__code=Client.code;
				if (extra_post_params){
					for (var key in extra_post_params){
						request[key]=extra_post_params[key];
					}
				}
				
				request.q=ap_extractCurrentString(ref),
				// console.log(request.q);
				
				$.ajax({
				  url: Client.ajax_url+"/"+url,
				  data: request,
				  dataType: "json",
				  type: "POST",
				  success: function(data){
					  response(data);
				  }
				});
			},

			search: function() {
				// custom minLength
				var term = ap_extractCurrentString(ref);
				if (term===null || (typeof term=='undefined') || term.length < 2 ) {
					return false;
				}
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function( event, ui ) {
				// Check for value
				var v=ap_extractInsertString(ref, ui.item.value);
				if (v && v.length>1){
					$(this).val(v);
				}
				return false;
			}
		});
	};
			
			
	/**
	 * @desc Create a jQuery autocomplete box
	 */
	this.autocomplete = function(selector, url, callback){	
		var id=ap_createAutoComplete(selector);
		var $this=$("#"+id);
		
		if (!$this.length){
			return;
		}
		
		$this.change(function(){
			if ($(this).val().length==0){
				$(selector).val('');
			}
		});
		
		var acc=$("#"+id).autocomplete({
			source: function(request, response) {
				var onAjaxStart=$this.data('onajaxstart_callback');
				var onAjaxEnd=$this.data('onajaxend_callback');
				
				request.__code=Client.code;
				request.q=ap_extractLast(request.term);
				request.time=AP.time.now();
				
				// Set more data
				if (Client.native){
					var params=M.params();
					for (var key in params){
						M.formData(request, key, params[key]);
					}
				}
				
				if (!request.q || request.q.length <2){
					return null;
				}
				
				for (var key in AP.ajax_data){
					request[key]=AP.ajax_data[key];
				}
				
				var ajax_url=Client.ajax_url+"/"+url+"/"+Client.code;
				if (AP.word.isURL(url)){
					ajax_url=url+"/"+Client.code;
				}
				
				if (onAjaxStart) onAjaxStart();
				
				$.ajax({
				  url: ajax_url,
				  data: request,
				  dataType: "json",
				  type: "POST",
				  success: function(data){
					  if (onAjaxEnd) onAjaxEnd();
					  response(data);
				  }
				});
			},

			select: function( event, ui ){		
				$(selector).val(ui.item.id);
				if (!callback && $('#'+id).data('select_callback')){
					callback=$('#'+id).data('select_callback');
				}
				if (callback){
					callback(ui.item);
				}
				
				$("#"+id).val(ui.item.name);
			}
		});
		 
		acc.data("ui-autocomplete")._renderItem = function( ul, item ) {
			var label=item.value;
			if (item.label && item.label.length){
				label=item.label;
			}
			return $("<li>").data("item.autocomplete", item).append("<a>" + label + "</a>").appendTo(ul);
			
		};
		
		return acc;
	};
			
	this.autocompleteComplex = function(selector, url, callback, extra_post_params){
		var id=ap_createAutoComplete(selector, true);
		var $this=$("#"+id);
		
		$this.autocomplete({
			source: function(request, response) {
				var onAjaxStart=$this.data('onajaxstart_callback');
				var onAjaxEnd=$this.data('onajaxend_callback');
			
				request.__code=Client.code;
				if (extra_post_params){
					for (var key in extra_post_params){
						request[key]=extra_post_params[key];
					}
				}
				request.q=ap_extractLast(request.term);
				request.time=AP.time.now();
				
				if (onAjaxStart) onAjaxStart();
				
				$.ajax({
				  url: Client.ajax_url+"/"+url,
				  data: request,
				  dataType: "json",
				  type: "POST",
				  success: function(data){
					  response(data);
					  if (onAjaxEnd) onAjaxEnd();
				  }
				});
			},

			search: function() {
				// custom minLength
				var term = ap_extractLast( this.value );
				if ( term.length < 2 ) {
					return false;
				}
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function( event, ui ) {
				// Check for value
				var results=AP.word.split(",",$(selector).val());
				if (AP.array.within(ui.item.id, results)){
					// Do nothing
					$(this).val("");
					return false;
				}
				
				results.push(ui.item.id);
				$(selector).val(results.join(","));
				$("<div class='apc-selected'> <span class='apc-text'>"+ui.item.value+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+ui.item.id+"');\">x</span></div>").insertBefore(this);
				
				$(this).val("");
				return false;
			}
					
		});
		

		return $this;
	};
			
			
	/**
	 * @desc Autocomplete regularly.
	 */
	this.ac= function(selector, resource, callback, filter_fn){
		var acc=$(selector).autocomplete({source: resource, select: function(a, b){
			callback(b.item);
		}});
		
		acc.data("ui-autocomplete")._renderItem = function( ul, item ) {
			var label=item.value;
			if (item.label && item.label.length){
				label=item.label;
			}
			
			return $("<li>").data("item.autocomplete", item).append("<a>" + label + "</a>").appendTo(ul);
			
		};
		
		return acc;
	};
			
			
	/**
	 * @desc Autocomplate with multivalue
	 */
	this.acx= function(selector, sources, filter_fn){
		var id=ap_createAutoComplete(selector, true); 

		var $this=$("#"+id);
		$this.bind("keydown", function( event ) {
			if ( event.keyCode === $.ui.keyCode.TAB &&
					$( this ).data( "autocomplete" ).menu.active ) {
				event.preventDefault();
			}
		})
		.autocomplete({
			minLength: 0,
			source: function(request, response){
				// delegate back to autocomplete, but extract the last term
				response($.ui.autocomplete.filter(
					sources, ap_extractLast( request.term)));
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function( event, ui ) {
				// Check for value
				var results=AP.word.split(",",$(selector).val());
				if (AP.array.within(ui.item.id, results)){
					// Do nothing
					$(this).val("");
					return false;
				}
				
				results.push(ui.item.id);
				$(selector).val(results.join(","));
				
				$("<div class='apc-selected xfill'> <span class='apc-text'>"+ui.item.value+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+ui.item.id+"');\">x</span></div>").insertBefore(this);
				
				$(this).val("");
				
				return false;
			}
		});
		
		return $this;
	};
			
	
	
	
	/**
	 * @desc Autocomplate with tagcloud, multiple color
	 */
	this.tagcloud= function(selector, sources, selected){
		var id=ap_createAutoComplete(selector, true); 

		var $this=$("#"+id);
		var acc=$this.bind("keydown", function( event ) {
			if ( event.keyCode === $.ui.keyCode.TAB &&
					$( this ).data( "autocomplete" ).menu.active ) {
				event.preventDefault();
			}
		})
		.autocomplete({
			minLength: 0,
			source: function(request,response){
				// delegate back to autocomplete, but extract the last term
				response($.ui.autocomplete.filter(
					sources, ap_extractLast( request.term)));
			},
			focus: function() {
				// prevent value inserted on focus
				return false;
			},
			select: function( event, ui ) {
				// Check for value
				var results=AP.word.split(",",$(selector).val());
				if (AP.array.within(ui.item.name, results)){
					// Do nothing
					$(this).val("");
					return false;
				}
				
				results.push(ui.item.name);
				$(selector).val(results.join(","));
				
				$("<div class='apc-selected fill -bg-alt"+ui.item.color+"-less text-alt"+ui.item.color+"-less'> <span class='apc-text'>"+ui.item.name+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+ui.item.name+"');\">x</span></div>").insertBefore(this);
				
				$(this).val("");
				
				return false;
			}
		}).focus(function () {
			$(this).autocomplete('search', $(this).val())
		}).enter(function(){
			var v=$(this).val();
			if (!v.length){
				return;
			}
			
			// Check for value
			var results=AP.word.split(",",$(selector).val());
			if (AP.array.within(v, results)){
				// Do nothing
				$(this).val("");
				return false;
			}
			
			results.push(v);
			$(selector).val(results.join(","));
			
			$("<div class='apc-selected fill -bg-alt0'> <span class='apc-text'>"+v+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+v+"');\">x</span></div>").insertAfter(this);
			
			$(this).val("");
			
			return false;
		});
		
		acc.data("ui-autocomplete")._renderItem = function(ul,item) {
			return $( "<li></li>" ).data("item.autocomplete", item)
				.append( "<span class='ap-acx'><span class='ap-acx-square -bg-alt"+item.color+"'></span> "+item.name+"</span>") 
				.appendTo(ul);
		};
		
		
		if (selected && selected.length){
			$(selector).val(selected.join(","));
			
			for (var i=0; i<selected.length; i++){
				var v=selected[i];
				$("<div class='apc-selected fill -bg-alt0'> <span class='apc-text'>"+v+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+v+"');\">x</span></div>").insertBefore(selector);
			}
		}
		
		return $this;
	};
	
	
	this.acxRemoveItem= function(selector, item){
		// Check for input
		var input=$(selector).closest('.apcomplete').children("input.marked");
		$(selector).parent().remove();
		var values=AP.word.split(",",$(input).val());
		var newvals=[];
		for (var i=0; i<values.length; i++){
			if (values[i]!=item){
				newvals.push(values[i]);
			}
		}
		$(input).val(newvals.join(","));
	};
			
			
			
			
			
	/**
	 * @desc Get the meta value.
	 */
	this.displayInt= function(v){
		if (v){
			return v;
		}
		return 0;
	};
	
	
	this.copyTextToClipboard = function(text) {
		var textArea = document.createElement("textarea");

		// Place in top-left corner of screen regardless of scroll position.
		textArea.style.position = 'fixed';
		textArea.style.top = 0;
		textArea.style.left = 0;

		// Ensure it has a small width and height. Setting to 1px / 1em
		// doesn't work as this gives a negative w/h on some browsers.
		textArea.style.width = '2em';
		textArea.style.height = '2em';

		// We don't need padding, reducing the size if it does flash render.
		textArea.style.padding = 0;

		// Clean up any borders.
		textArea.style.border = 'none';
		textArea.style.outline = 'none';
		textArea.style.boxShadow = 'none';

		// Avoid flash of white box if rendered for any reason.
		textArea.style.background = 'transparent';


		textArea.value = text;

		document.body.appendChild(textArea);

		textArea.select();

		try {
			var successful = document.execCommand('copy');
			
			UI.flash("Đã sao chép vào clipboard!");
		} catch (err) {
			return AP.alertSuccess(text);
		}

		document.body.removeChild(textArea);
	};
};



function APComplete(obj, url, multi, callback, ref, filter_fn){
	this.$obj=$(obj);
	this.url=url;
	this.multi=multi;
	this.callback=callback;
	this.__error=false;
	
	if (ref && this.$obj){
		this.$target=this.$obj.siblings('.__apc_marked_class');
		if (ref.data("ui-autocomplete")){
			this.ref=ref.data("ui-autocomplete").menu.element;
		}else{
			this.ref=null;
		}
	}else{
		this.__error=true;
	}
	
	
	
	this.aco=ref;
	
	this.addClass=function(classname){
		this.$target.data("ui-autocomplete").addClass(classname);
	};
	
	this.render=function(fn){
		if (this.__error){
			return this;
		}
		
		this.$target.data("ui-autocomplete")._renderItem=function(ul, item){
			return $("<li></li>")
			.data("item.autocomplete", item)
			.append("<a class='rerender ap-acitem'>"+ fn(item)+"</a>")
			.appendTo(ul);
		};
		
		return this;
	};
	
	this.renderEngine=function(fn){
		return this.render(fn);
	};
	
	this.addClass=function(classes){
		if (this.__error){
			return this;
		}
		
		this.ref.addClass(classes);
		return this;
	};
	
	this.css=function(key,val){
		this.ref.css(key,val);
		return this;
	};
	
	this.val=function(value, label){
		if (this.__error){
			return;
		}
		
		if (!this.multi){
			this.$obj.val(value);
			this.$target.val(label);
			return this;
		}else{
			var results=AP.word.split(",",this.$obj.val());
			if (AP.array.within(value, results)){
				this.$target.val("");
				return false;
			}
			results.push(value);
			this.$obj.val(results.join(","));
			$("<div class='apc-selected'> <span class='apc-text'>"+label+"</span> <span class='apc-close' onclick=\"AP.UI.acxRemoveItem(this,'"+value+"');\">x</span></div>").insertBefore(this.$target);
			this.$target.val("");
		}
	};
	
	this.select=function(callback){
		this.$target.data('select_callback', callback);
		return this;
	};
	
	this.onAjaxStart=function(callback){
		this.$target.data('onajaxstart_callback', callback);
		return this;
	};
	
	this.onAjaxEnd=function(callback){
		this.$target.data('onajaxend_callback', callback);
		return this;
	};
};



function ap_createAutoComplete(selector, multivalues){	
	var p=$(selector).parent();
	var id=AP.uuid();
	
	if (!$(p).hasClass('apcomplete')){
		$(selector).data("apcomplete_ref",id);
		
		if ($(selector).hasClass('__hinited')){
			$(selector).prev().hide();
		}
		
		$(p).css("min-height", $(selector).height());
		
		var all_classes="temp disabled __apc_marked_class";
		if (multivalues){
			all_classes="temp disabled _multivalues __apc_marked_class";
		}
		
		$(p).addClass('apcomplete');
		$(p).append("<input type='text' name='"+AP.uuid()+"' id='"+id+"' class=' "+all_classes+"' value='"+$(selector).val()+"'/>");
		
		if ($(selector).attr("title")){
			$('.temp',p).data("htext",$(selector).attr("title"));
			if (!$('.temp',p).val()){
				$('.temp',p).val($('.temp',p).data("htext")).addClass("__blur");
			}
			
			$('.temp',p).blur(function(){
				if (!$('.temp',p).val() || $('.temp',p).val()=="" || $('.temp',p).val()==$('.temp',p).data("htext")){
					$('.temp',p).val($('.temp',p).data("htext")).addClass("__blur");
				}
			}).focus(function(){
				if ($('.temp',p).val()==$('.temp',p).data("htext")){
					$('.temp',p).val("");
				}
				$('.temp',p).removeClass("__blur");
			});
			
			var val=$(selector).val();
			if (val=="" || val==$(selector).attr("title")){
				$(selector).val("");
			}
			
			$('.temp',p).blur();
		}else if ($(selector).data("htext")){
			$('.temp',p).data("htext",$(selector).data("htext"));
			if (!$('.temp',p).val()){
				$('.temp',p).val($('.temp',p).data("htext")).addClass("__blur");
			}
			
			$('.temp',p).blur(function(){
				if (!$('.temp',p).val() || $('.temp',p).val()==""){
					$('.temp',p).val($('.temp',p).data("htext")).addClass("__blur");
				}
			}).focus(function(){
				if ($('.temp',p).val()==$('.temp',p).data("htext")){
					$('.temp',p).val("");
				}
				$('.temp',p).removeClass("__blur");
			});
			$('.temp',p).blur();
		}
		
		$(selector).hide().addClass('marked');
		
		if ($(selector).data('label') && $(selector).data('label').length){
			$('.temp',p).val($(selector).data('label'));
		}
		
		// Add focus when click on parent.
		$(p).click(function(){
			if (!$("#"+id).is(":focus")){
				$("#"+id).focus();
			}
		});
		
		var ph=$(selector).attr('placeholder');
		if (ph && ph.length){
			$("#"+id).attr('placeholder', ph);
		}
		
		return id;
	}else{
		return $("input.temp", p).attr("id");
	}
};




/**
 * @desc FOR AUTO COMPLETE
 */
function ap_split( val ) {
	return val.split( /,\s*/ );
};

function ap_extractLast(term){
	return ap_split(term).pop();
};


function ap_extractCurrentString(obj){
	var term=$(obj).val();
	
	if (!term || term.length<2){
		return null;
	}
	var pos=plugin_get_caret_position(obj)-1;
	if (pos <0 || pos>term.length){
		return null;
	}
	var start=pos, end=pos;
	if (term.charAt(start)==','){
		start--;
		if (start<0){
			return null;
		}
	}
	
	while (start>=0){
		if (term.charAt(start)==','){
			start++;
			break;
		}
		start--;
		if (start==0){
			break;
		}
	}
	
	while (end<term.length){
		if (term.charAt(end)==','){
			break;
		}
		end++;
		if (end>=term.length){
			break;
		}
	}

	if (end-start<1){
		return;
	}
	
	var r=$.trim(term.substring(start, end));
	if (!r.length || r.length<1){
		return null;
	}
	return r;
};



function ap_extractInsertString(obj, insert){
	var term=$(obj).val();
	
	if (!term || term.length<1){
		return null;
	}
	var pos=plugin_get_caret_position(obj)-1;
	if (pos <0 || pos>term.length){
		return null;
	}
	var start=pos, end=pos;
	if (term.charAt(start)==','){
		start--;
		if (start<0){
			return null;
		}
	}
	
	while (start>=0){
		if (term.charAt(start)==','){
			start++;
			break;
		}
		start--;
		if (start==0){
			break;
		}
	}
	
	while (end<term.length){
		if (term.charAt(end)==','){
			break;
		}
		end++;
		if (end>=term.length){
			break;
		}
	}

	if (end-start<1){
		return;
	}
	
	var s_end="";
	if (end+1<term.length){
		term.substring(end+1)
	}
	
	var r=$.trim(term.substring(0, start)+' '+insert+', '+s_end);
	return r;
};


/**
 * @desc FOR DATE/TIME
 */
function ap_getTimeOptions(){ 
	var hours=["00","01","02","03","04","05","06","07","08","09","10","11","12","13","14","15","16","17","18","19","20","21","22","23"];
	var mins=["00","15","30","45"];
	var a=[];
	for (var i=0; i<hours.length; i++){
		for (var j=0; j<mins.length; j++){
			a.push(hours[i]+":"+mins[j]);
		}
	}
	return a;
};


















'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function Sektor(selector, options) {
  this.element = $(selector)[0];

  var defaultOptions = {
	size: 100,
	stroke: 10,
	arc: false,
	angle: 225,
	sectorColor: '#789',
	circleColor: '#DDD',
	fillCircle: true
  };

  // Merge options with default ones
  options = _extends(defaultOptions, options);

  // Reset stroke to 0 if drawing full sector
  options.stroke = options.arc ? options.stroke : 0;

  // Circle dimenstions
  options.center = options.size / 2;
  options.radius = options.stroke ? options.center - options.stroke / 2 : options.center;

  this.options = options;

  this.checkAngle();

  var svg = '<svg class=\'Sektor\' viewBox=\'0 0 ' + options.size + ' ' + options.size + '\'>\n	  ' + this.getCircle() + '\n	  ' + this.getSector() + '\n	</svg>';

  this.element.innerHTML = svg;
  this.sector = this.element.querySelector('.Sektor-sector');
}

Sektor.prototype.checkAngle = function () {
  if (this.options.angle > 360) {
	this.options.angle = this.options.angle % 360;
  }
};

Sektor.prototype.changeAngle = function (angle) {
  this.options.angle = angle;
  this.checkAngle();
  this.sector.setAttribute('d', this.getSector(true));
};

Sektor.prototype.step = function (angleOffset, endAngle, time, endTime) {
  var _this = this;

  var now = new Date().valueOf();
  var timeOffset = endTime - now;

  if (timeOffset <= 0) {
	this.changeAngle(endAngle);
  } else {
	var angle = endAngle - angleOffset * timeOffset / time;

	this.changeAngle(angle);
	requestAnimationFrame(function () {
	  return _this.step(angleOffset, endAngle, time, endTime);
	});
  }
};

Sektor.prototype.animateTo = function (angle) {
  var _this2 = this;

  var time = arguments.length <= 1 || arguments[1] === undefined ? 300 : arguments[1];

  if (angle > 360) {
	angle = angle % 360;
  }

  var startTime = new Date().valueOf();
  var endTime = startTime + time;
  var angleOffset = angle - this.options.angle;

  requestAnimationFrame(function () {
	return _this2.step(angleOffset, angle, time, endTime);
  });
};

Sektor.prototype.getSector = function () {
  var returnD = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

  var options = this.options;

  // Colors
  var sectorFill = options.arc ? 'none' : options.sectorColor;
  var sectorStroke = options.arc ? options.sectorColor : 'none';

  // Arc angles
  var firstAngle = options.angle > 180 ? 90 : options.angle - 90;
  var secondAngle = -270 + options.angle - 180;

  // Arcs
  var firstArc = this.getArc(firstAngle, options);
  var secondArc = options.angle > 180 ? this.getArc(secondAngle, options) : '';

  // start -> starting line
  // end -> will path be closed or not
  var end = '';
  var start = null;

  if (options.arc) {
	start = 'M' + options.center + ',' + options.stroke / 2;
  } else {
	start = 'M' + options.center + ',' + options.center + ' L' + options.center + ',' + options.stroke / 2;
	end = 'z';
  }

  var d = start + ' ' + firstArc + ' ' + secondArc + ' ' + end;

  if (returnD) {
	return d;
  }

  return '<path\n	class=\'Sektor-sector\'\n	stroke-width=\'' + options.stroke + '\'\n	fill=' + sectorFill + '\n	stroke=' + sectorStroke + '\n	d=\'' + d + '\' />';
};

Sektor.prototype.getCircle = function () {
  var options = this.options;
  var circleFill = options.fillCircle || !options.arc ? options.circleColor : 'none';

  return '<circle\n	  class=\'Sektor-circle\'\n	  stroke-width=\'' + options.stroke + '\'\n	  fill=' + circleFill + '\n	  stroke=' + options.circleColor + '\n	  cx=\'' + options.center + '\'\n	  cy=\'' + options.center + '\'\n	  r=\'' + options.radius + '\' />';
};

// Generates SVG arc string
Sektor.prototype.getArc = function (angle) {
  var options = this.options;

  var x = options.center + options.radius * Math.cos(this.radians(angle));
  var y = options.center + options.radius * Math.sin(this.radians(angle));

  return 'A' + options.radius + ',' + options.radius + ' 1 0 1 ' + x + ',' + y;
};

// Converts from degrees to radians.
Sektor.prototype.radians = function (degrees) {
  return degrees / 180 * Math.PI;
};


AP.scrollBar=function __APScrollBar(selector){
	return new APScrollBar($(selector));
};


function APScrollBar($obj){
	this.$obj=$obj;
	
	this.init=function(temp){
		temp=false;
		if (temp){
			temp=true;
		}
		
		
		if (AP.sys.isTablet() || AP.sys.isMobile() || AP.__printing || Client.mobile){
			$obj.addClass("__mscroll");
			return this;
		}
		
		
		if (this.$obj.hasClass('__apscrollbar_target')){
			plugin_scrollbar_onscroll(this.$obj);
			return this;
		}
		
		var id=this.$obj.attr('id');
		if (!id){
			id=AP.uuid();
			this.$obj.attr('id', id);
		}
		
		this.$obj.addClass('__apscrollbar_target');
		if (this.$obj.parent().data('autoscroll')){
			this.$obj.addClass('__scrolled');
		}
		
		
		if (this.$obj.parent().hasClass('__apscrollbar_parent')){
			return this;
		}
		
		this.$obj.parent().addClass('__apscrollbar_parent');
		
		
		if (this.$obj.parent().data("autohide")){
			this.$obj.parent().addClass("__autohide");
			this.$obj.wrapInner("<div class='__apscrollbar_wrap __autohide'></div>");
		}else{
			this.$obj.wrapInner("<div class='__apscrollbar_wrap'></div>");	
		}
		
		$("<div id='"+id+"__apscrollbar' class='__apscrollbar'> <div class='scroller'>" +
					"<div class='sinner'></div> "+
				"</div> </div>").appendTo(this.$obj.parent());

		
		$("#"+id+"__apscrollbar .scroller").draggable({
			axis:"y",
			start: function(){
				$("#"+id).addClass('__scrollprevented');
			},
			drag: function(){
				plugin_scrollbar_update($(this));
			},
			stop: function(){
				plugin_scrollbar_update($(this));
				$("#"+id).removeClass('__scrollprevented');
			},
			containment: "parent"
		});
		
		
		this.$obj.on("scroll", function(){
			if ($(this).hasClass('__scrollprevented')){
				// $(this).removeClass('__scrollprevented')
				return;
			}

			return plugin_scrollbar_onscroll($(this));			
		});
		
		plugin_scrollbar_update($('#'+id+'__apscrollbar .scroller'));
		
		setTimeout(function(){
			plugin_scrollbar_update($('#'+id+'__apscrollbar .scroller'));
		},1000);
		
		setTimeout(function(){
			plugin_scrollbar_update($('#'+id+'__apscrollbar .scroller'));
		},5000);
		
		return this;
	};
	
	
	/**
	 * @desc ScrollTo a specific pixel height
	 */
	this.scrollTo=function(num){
		// var h=this.$obj.height();
		// var maxh=this.$target[0].scrollHeight;
		
		this.$obj.scrollTop(num);
	};
	
	
	this.update=function(){
		if (AP.sys.isTablet() || AP.sys.isMobile() || AP.__printing || Client.mobile){
			return this;
		}
		
		plugin_scrollbar_update($("#"+this.$obj.attr('id')+"__apscrollbar .scroller"));
		return this;
	};
};


/**
 * @desc Update 
 * @param obj
 */
function plugin_scrollbar_update($obj){
	var offset=$obj.position();
	
	var $scroller=$obj.parent();	
	var $scroller_rec=$obj;
	
	var $target=$scroller.prevAll('.__apscrollbar_target');
	if (!$target || !$target.length){
		return;
	}
	
	var h=$target.height();
	var maxh=$target[0].scrollHeight;
	
	var auto=$obj.closest('.__apscrollbar_parent').data('autoscroll');
	
	
	if (maxh<=h){
		if (!auto){
			$scroller.hide();
			$target.scrollTop(0);
			$target.scrollLeft(0);
			$target.removeClass('__scrolled');
			$scroller.hide();
			return;	
		}else{
			$scroller_rec.hide();
			$target.addClass('__scrolled');
			return;
		}
	}
	
	$scroller.show();
	$scroller_rec.show();
	
	if (maxh<10 || h<10){
		/**
		 * @todo Finish this weird case 
		 */
		return;
	}
	
	var sh=$scroller.height();
	
	if (sh<=$obj.height()){
		$target.scrollTop(maxh-h);
		return;
	}
	
	var scale=$scroller.parent().data("scale");
	if (!scale){
		scale=1.0;
	}else{
		scale=parseFloat(scale);
	}
	
	scale=1.0;
	
	var ttop=(maxh-h)*offset.top*1.0/(sh-$obj.height());
	ttop=Math.floor(ttop);
	
	$target.scrollTop(ttop);
	$target.scrollLeft(0);
};



function plugin_scrollbar_onscroll($obj){
	var alwayshown=$obj.parent().data('autoscroll');
	var autohide=$obj.parent().data('autohide');
	
	if (!$obj.is(':visible')){
		return;
	}
	
	// $obj.scrollLeft(0);
	// return;
	
	var t=$obj.scrollTop();
	var h=$obj.height();
	
	if (!('scrollHeight' in $obj[0])){
		return;
	}
	
	
	
	var maxh=$obj[0].scrollHeight;
	var $scroller=$("#"+$obj.attr('id')+"__apscrollbar");
	
	if (maxh<h || maxh<10){
		if (!alwayshown){
			$obj.removeClass('__scrolled');
			$scroller.hide();	
		}
		return;
	}
	
	
	if (maxh==h){
		if (!alwayshown){
			$obj.removeClass('__scrolled');
			$scroller.hide();	
		}
		return;
	}
	
	
	if (!$obj.hasClass('__scrolled')){
		$obj.addClass('__scrolled');
	}
	
	
	$scroller.show();
	
	if (h<0){
		return;
	}
	
	
	
	var sh=$scroller.height();
	var scale=$scroller.parent().data("scale");
	
	if (!scale || typeof scale=="undefined"){
		scale=1.0;
	}else{
		scale=parseFloat(scale);
	}
	
	var scroller={}; 
	scroller.height=Math.floor((h*1.0/maxh)*(h*1.0/maxh) *sh)*scale;
	if (autohide){
		scroller.height=Math.floor((h*1.0/maxh)*sh)*scale;
	}
	
	if (scroller.height<50){
		scroller.height=50;
	}
	
	scroller.top=Math.floor(Math.min(t*1.0/(maxh-h), 1) * (sh-scroller.height));

	
	$scroller.children('.scroller').css({'top': scroller.top, 'height': scroller.height}).addClass('active').show();
	$scroller.find('.sinner').css('height',scroller.height-1);
};


AP.pageConfig=new function __APPageConfig(){
	this.data={};
	this.__data={};
	
	this.init=function(data){
		this.__data=shallowClone(data);
		this.data=data;
	};
	
	this.reset=function(){
		this.data=shallowClone(this.__data);
		if (!this.data){
			this.data={};
		}
	};
	
	this.set=function(key, val){
		if (typeof val=="undefined"){
			val=1;
		}
		
		this.data[key]=val;
	};
	
	this.get=function(key){
		if (key in this.data){
			return this.data[key];
		}
		
		return null;
	};
	
	
	this.test=function(){
		$.log(this.data);
		$.log(this.__data);
	}
};


/**
 * @desc Viewer Base Object
 */
var APViewer = new function _APViewer(){
	this.auth=function(){
		if (Client.viewer && Client.viewer.id && Client.viewer.id>0){
			return true;
		}
		return false;
	};
};
function setRef(ref, url){
};

var urlc_clicks=0;
var urlc_timer=null;

function urlClick_reset(){
	urlc_clicks=0;
	urlc_timer=null;
}

function urlClick(ref){
	var $this=$(ref);
	url_track($this);
	
	var username='';
	if ($this.data('username')){
		username=$this.data('username');
	}else if ($this.hasClass('username')){
		username=$this.text();
	}

	if (username && username.length){
		if (username.charAt(0)=='@'){
			username=username.substr(1);
		}
		
		if ($this.data("intent")=="chat"){
			return Base.message.peer(username);
		}
		return usernameClick(username, ref);
	}

	if ($this.data('redirect')){
		var $s=$this.data('redirect');
		AP.redirect($s);
		return;
	}
	
	if ($this.data("urlparam")){
		var p=$this.data("urlparam");
		var v=$this.data("value");
		
		var px={};
		
		if (v && v!=""){
			px[p]=v;
		}else{
			px[p]=null;
		}
		
		AP.setURLParams(px, true);
	}

	
	if ($this.data('updateurl')){
		var params=$this.data('updateurl');
		AP.updateURLParams(params);
		return;
	}
	
	var url=null;
	
	if ($this.data('xurl')){
		var url=$this.data('xurl');
		if (Client.pageData.context){
			url=Client.pageData.context.path+"/"+url;
		}
	}else{
		var url=$this.data('url');
		if (url==':self'){
			return __selfcall(ref);
		}
	}
	
	if (url==":refresh"){
		AP.refresh();
		return;
	}
	
	if (url==":xrefresh" || url==':current'){
		AP.xRefresh();
		return;
	}
	
	if (AP.word.prefix(url, ":fn:")){
		var fn=url.substr(4);
		var fnx=getFunctionByName(fn);
		fnx(ref);
		return;
	}
	
	if (url==":comment"){
		var id=$(ref).data("id");
		var resolver=getFunctionByName($(ref).data("resolver"));
		var $box=$($(ref).data("box"));
		
		if (!$box.length || !resolver || !id){
			return;
		}
		
		$box.toggle();
		
		if ($box.hasClass("__inited")){
			return;
		}
		
		$box.addClass("__inited").show();
		
		var obj=resolver.fromContext(id);
		Comment.auto($box, obj, {focus: true, counter: ".js-ccount-"+obj.hid});
		$box.find("textarea").focus();
		return;
	}
	
	if (url==':submit'){
		Form.submitFrom(ref, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Update successfully ...");
			
			if ($this.data("callback")){
				var cb=$this.data("callback");
				var fn=getFunctionByName(cb);
				fn(code, $this);
			}else{
				AP.xRefresh();	
			}
		});
		
		return;
	}
	
	if (url==":active"){
		$this.toggleClass("active");
		return;
	}
	
	if (url==":zoom"){
		UI.previewImage($(ref).data("image"));
		return;
	}
	
	if (url==":active:parent" || url==":parent-active" || url==':parent:active'){
		$this.parent().toggleClass("active");
		return;
	}
	
	
	if (url==':parent:parent:active' || url==':active:parent:parent'){
		$this.parent().parent().toggleClass("active");
		return;
	}
	
	if (url==':parent:parent:parent:active' || url==':active:parent:parent:parent'){
		$this.parent().parent().parent().toggleClass("active");
		return;
	}
	
	
	if (url==":ext:parent"){
		$this.parent().toggleClass("-ext");
		return;
	}
	
	if (url==":ext:parent:parent"){
		$this.parent().parent().toggleClass("-ext");
		return;
	}
	
	if (url==":ext:parent:parent:parent"){
		$this.parent().parent().parent().toggleClass("-ext");
		return;
	}
	
	if (url==":collapse"){
		$this.toggleClass("-collapsed");
		return;
	}
	
	if (url==":collapse:parent"){
		$this.parent().toggleClass("-collapsed");
		return;
	}
	
	if (url==":collapse:parent:parent"){
		$this.parent().parent().toggleClass("-collapsed");
		return;
	}
	
	
	if (url==":back"){
		AP.back();
		return;
	}
	
	if (url==":export"){
		var curl=Client.path.current;
		if (curl.indexOf("?")!=-1){
			curl+="&export=1";
		}else{
			curl+="?export=1";
		}
		
		window.open(Client.url+"/"+curl);
		return;
	}
	
	
	if (url==":embed"){
		var w=$(ref).data("width");
		if (!w){
			w=800;
		}
		
		var app=$(ref).data("app");
		var url=$(ref).data("embed");
		
		var title=$(ref).data("title");
		if (!title){
			title="App embed: "+app;
		}
		
		Base.api.embed(Base.domain(app)+"/"+url, {
			width: w,
			title: title
		});
		
		return;
	};
	
	
	if (url==":viewfile"){
		var ext_url=$(ref).closest(".fileviewer-mobile").data("url");
		if (!ext_url){
			ext_url=$(ref).data("file");
		}
		
		if (ext_url){
			window.open(ext_url);
		}
		return;
	}
	
	
	if (url==":file"){
		var ext_url=$(ref).data("file");
		Base.file.preview(ext_url);
		return;
	}
	
	if (AP.word.prefix(url, '#')){
		var id=url.substr(1);
		var $selector=$("#"+id);
		if (!$selector.length){
			return;
		}
		
		var $s=$selector.closest(".scroll-y");
		if (!$s || !$s.length){
			$s=$selector.closest(".scroll-in")
		}
		
		if (!$s || !$s.length){
			return;
		}
		
		var etop=$selector.offset().top;
		var ptop=$s.offset().top;
		var t=etop-ptop+$s.scrollTop();
		
		$s.scrollTop(t);
		
		return;
	}
	
	if (!url){
		return;
	}
	
	if ($(ref).data("ref") && $(ref).data("ref").length){
		var ref_url=$(ref).data("ref");
		if (ref_url==":self" || ref_url=="self"){
			ref_url= AP.url().current();
		}
		setRef(url, ref_url);
	}
	
	
	var dburl=$this.data("dburl");
	
	if (dburl){
		urlc_clicks++;
		if (urlc_clicks === 1){
			urlc_timer = setTimeout(function(){ 
            	base_trueclick($this, ref, url);
            	urlc_clicks = 0;
            }, 200);
        } else {
        	clearTimeout(urlc_timer);
        	urlc_clicks = 0;
        	base_trueclick($this, ref, dburl);
        }
	}else{
		base_trueclick($this, ref, url);	
	}
};



function usernameClick(username, ref){
	UI.user.menu(ref, username);	
};


function base_trueclick($this, ref, url){	
	// Handle URL click
	var inspect=Base.inspect(url);
	
	if (inspect.base){
		if (inspect.local){
		    if (!AP.adaptive(url, window.location.href) && !AP.rewriteCheck(url)){
		    	return AP.redirect(url);
		    }
		    
		    if ($this.data("blank")=="1"){
		    	return window.open(Client.url+"/"+inspect.url);	
		    }
		    
			return AP.toURL(inspect.url, null, ref);
		}else{
			return window.open(inspect.url);
		}
	}else{
		if (!AP.adaptive(url, window.location.href)){
	    	// return AP.redirect(url);
			return window.open(url);
	    }
		
		AP.toURL(url, null, ref);
	}
};









/**
 * Returns the function that you want to execute through its name.
 * It returns undefined if the function || property doesn't exists
 * 
 * @param functionName {String} 
 * @param context {Object || null}
 */
function getFunctionByName(functionName, context) {
    // If using Node.js, the context will be an empty object
    if(typeof(window) == "undefined") {
        context = context || global;
    }else{
        // Use the window (from browser) as context if none providen.
        context = context || window;
    }

    // Retrieve the namespaces of the function you want to execute
    // e.g Namespaces of "MyLib.UI.alerti" would be ["MyLib","UI"]
    var namespaces = functionName.split(".");
    
    // Retrieve the real name of the function i.e alerti
    var functionToExecute = namespaces.pop();
    
    // Iterate through every namespace to access the one that has the function
    // you want to execute. For example with the alert fn "MyLib.UI.SomeSub.alert"
    // Loop until context will be equal to SomeSub
    for (var i = 0; i < namespaces.length; i++) {
        context = context[namespaces[i]];
    }
    
    // If the context really exists (namespaces), return the function or property
    if(context){
        return context[functionToExecute];
    }else{
        return undefined;
    }
}var CONFIG={
    name: "Base",
    email: "contact@base.vn",
    owner: "Base",
    home_src: "base.vn",
    domain:"base.vn",
    port: "1331",
    https_port: "1331",
    api: "message",
    fileViewerAPI: "https://file.base.local.basecdn.net"
};

if (parseInt(Client.env)){
	CONFIG.fileViewerAPI= "https://file.basecdn.net";
}


if (Client.base && Client.base.port){
	CONFIG.port=Client.base.port;
	CONFIG.https_port=Client.base.port;
}var Tag=new function __Tag(){
	this.use_context=1;
	this.__log_people=null;
	
	this.context=function(flag, people){
		this.use_context=flag;
		
		this.__log_people=null;
		if (flag && people){
			this.__log_people=people;
		}
	};
	
	this.people=function(){
		if (Client.pageData.context && this.use_context){
			if (Client.pageData.context.__people){
				return Client.pageData.context.__people;
			}
			
			if (this.__log_people){
				return this.__log_people;
			}
			
			Client.pageData.context.__people=AP.array.filter(Client.people, function(p){
				return hasUser(Client.pageData.context.followers, p) || hasUser(Client.pageData.context.owners, p); 
			});

			if (!Client.pageData.context.__people.length){
				return Client.people;		
			}
			
			return Client.pageData.context.__people;
		}
		
		return Client.people;
	};
	
	
	this.line=function(input){
		if (!$(input).length){
			return;
		}
		return $(input).apcomplete('api/tag/user', true);
	};
	
	
	this.singleUser=function(input, array){
		if (!$(input).length){
			return;
		}
		
		$(input).data("single-tag", 1);
		
		this.user(input, array);
	};

	
	this.user=function(input, array, callback){
		if (!$(input).length){
			return;
		}
		
		
		$(input).attr('autocomplete', 'off');

		if (AP.data.isInt(array) || array=="auto"){
			var id=array;
			if (array=="auto"){
				id=0;
				if (Client.data.network){
					id=Client.data.network.id;
					alert(id);
				}
			}
			
			return $(input).each(function(){
				$(this).tag(Client.people, function(item){
					return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
				}, function(item, q){
					var str="";
					if (item && item.keywords){
						str+=item.keywords;
					}
					
					if (item && item.name){
						str+=item.name;
					}
					
					item.__keywords=str;
					
					if (AP.word.fulltextMatch(str, q) && (!id || AP.array.contain(item.networks, id))){
						if (!item.value){
							item.value="@"+item.username;
						}
						
						return true;
					}
					
//					if (item && item.name && item.name.toLowerCase().indexOf(q.toLowerCase())>-1 && (!id || AP.array.contain(item.networks, id))){
//						if (!item.value){
//							item.value="@"+item.username;
//						}
//						
//						return true;
//					}
					
					return false;
				}, function(item, q){
					return Tag.order_fn(item, q);
				}, callback);
			});
		}
		
		
		
		if (array && array.length){
			return $(input).each(function(){
				$(this).tag(array, function(item){
					return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
				}, function(item, q){
					if (!item.value){
						item.value="@"+item.username;
					}
					
					var keywords=item.__keywords;
					var qf=purify(q.toLowerCase()).replace(/[\s\-]/g,'');
					
					if (!keywords){
						keywords=item.name;
						if (item.keywords){
							keywords+=item.keywords;
						}
						
						if (item.name){
							keywords+=item.name;
						}
						
						if (item.name){
							keywords+=item.title;
						}
						
						keywords=purify(keywords.toLowerCase()).replace(/[\s\-]/g,'');
						item.__keywords=keywords+' ';
					}
					
					if (keywords && keywords.indexOf(qf)!=-1){
						return true;
					}
					
					return false;
				}, function(item, q){
					return Tag.order_fn(item, q);
				}, callback);
			});
		}
		
		
		return $(input).each(function(){
			$(this).tag('api/tag/user', function(item){
				return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
			}, function(value, q){
				if (value && value.length && value.toLowerCase().indexOf(q.toLowerCase())>-1){
					return true;
				}
				return false;
			}, function(item, q){
				return Tag.order_fn(item, q);
			});
		});
	};
	
	
	
	this.team=function(input){
		var sources=AP.select(Client.units, function(e){
			return {id: e.id, path: e.path, label: "<b>"+e.name+"</b> /"+e.path, value: e.name+" (@"+e.path+")"}
		});
		
		return $(input).each(function(){
			var $this=$(this);
			return $(this).autocomplete({
				source: function(request,response){
					// delegate back to autocomplete, but extract the last term
					var q=ap_extractLast(request.term);
					if (q && q.length && q[0]=="@"){
						q=q.substr(1);
					}
					response($.ui.autocomplete.filter(sources, q));
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},select: function( event, ui ) {
					var terms = $(this).val().split(/,\s*/);
					terms.pop();
					terms.push(ui.item.value);
					terms.push("");
					this.value=terms.join(", ");
					return false;
				}
			}).data("ui-autocomplete")._renderItem = function(ul, item) {
				return $("<li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo(ul);
			};
		});
	};
	
	
	this.teamOptions=function(){
		var sources=AP.render(Client.units, function(e){
			if (e.metatype=="user"){
				return "";
			}
			return "<option value='"+e.id+"'>"+e.name+"</option>";
		});
		
		sources="<option value='0'>-- Select team --</option>"+sources;
		
		return sources;
	};
	
	
	this.teamSelect=function(selector, context){
		this.team(selector);
	};
	
	
	this.teamExtend = function(input){
		var sArray = Client.units;
		if (Client.units && Client.units.length){
			for(var i = 0; i < Client.units.length; i++) {
				var test = AP.array.findObj(Client.units, Client.units[i].id);
				if(test) {
				}else{
					sArray.push(Client.units[i]);
				}
			}
		}
		
		var sources = AP.select(sArray, function(e){
			return {id: e.id, path: e.path, label: "<b>"+e.name+"</b> /"+e.path, value: e.name+" (@"+e.path+")"}
		});
		
		return $(input).each(function(){
			var $this = $(this);
			return $(this).autocomplete({
				source: function(request,response){
					// delegate back to autocomplete, but extract the last term
					var q=ap_extractLast(request.term);
					if (q && q.length && q[0]=="@"){
						q=q.substr(1);
					}
					response($.ui.autocomplete.filter(sources, q));
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},select: function( event, ui ) {
					var terms = $(this).val().split(/,\s*/);
					terms.pop();
					terms.push(ui.item.value );
					terms.push("");
					this.value=terms.join(", ");
					return false;
				}
			}).data("ui-autocomplete")._renderItem = function(ul, item) {
				return $("<li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo(ul);
			};
		});	
	};
	
	
	this.networkValues=function(teams){
		var text="";
		for (var i=0; i<teams.length; i++){
			text+=teams[i].name+" (@"+teams[i].path+"), ";
		}
		
		return text;
	};
	
	
	
	this.order_fn=function(item, q){
		q=q.toLowerCase();
		var username=item.username.toLowerCase();
		
		if (q==username){
			return 10;
		}
		
		if (username.indexOf(q)==0){
			return 9;
		}
		

		return 1;
	};
	
	
	
	
	function hasUser(users, user){
		return AP.array.contain(users, user, function(e, f){
			return e.username==f.username;
		});
	};
};
if (Client.lang=="vn" || Client.lang=="vi"){
	AP.locale.set("lang", "vn");
	AP.locale.set("date-format", "%l, %d/%m/%Y");
	AP.locale.set("date-format-jquery", "DD, dd/mm/yy");
	
	AP.time.months=["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"];
	AP.time.sMonths["T1","T2","T3","T4","T5","T6","T7","T8","T9","T10","T11","T12"];
	AP.time.days=["Thứ hai","Thứ 3", "Thứ 4", "Thứ 5","Thứ 6","Thứ 7", "Chủ nhật"];	
	AP.time.sDays=["Mon","Tue", "Wed", "Thu","Fri","Sat","Sun"];
	
	
	
	$.datepicker.setDefaults({
		firstDay: 1,
	    closeText: 'Đóng', // set a close button text
	    currentText: 'Hôm nay', // set today text
	    monthNames: ['Tháng 1','Tháng 2','Tháng 3','Tháng 4','Tháng 5','Tháng 6', 'Tháng 7','Tháng 8','Tháng 9','Tháng 10','Tháng 11','Tháng 12'], // set month names
	    monthNamesShort: ['T1','T2','T3','T3','T5','T6','T7','T8','T9','T10','T11','T12'], // set short month names
	    dayNames: ['Chủ nhật','Thứ hai','Thứ 3','Thứ 4','Thứ 5','Thứ 6','Thứ 7'], // set days names
	    dayNamesShort: ['CN','T2','T3','T4','T5','T6','T7'], // set short day names
	    dayNamesMin: ['CN','T2','T3','T4','T5','T6','T7'], // set more short days names
	    dateFormat: 'dd/mm/yyyy' // set format date
	});

}else{
	AP.locale.set("date-format-jquery", "dd/mm/yy");
}AP.sys.on("system.init", function(){
	Base.init();
	N.init();
	Base.protectSession();
});


AP.sys.on("system.start", function(){
	BC.hide();
	$("#base-star").hide();
	$("#base-calendar").hide();
});



var Base=new function __Base(){
	this.__active=1;
	this.__last_idle=0;
	this.__stopped=false;
	
	this.apiURL=function(){
		if (!Client.base || !Client.base.app){
			return "";
		}
		
		if (Client.base.app=="message"){
			return "";
		}
		
		return (Client.https?"https://":"http://")+"api."+Client.domain+"/ajax/";
	};
	
	this.init=function(config){
		$(window).focus(function(){
			if (Base.__stopped){
				if (Client.system && parseInt(Client.system.id)==1){
					$.log("SYSTEM_PENDING_REFRESH");
				}else{
					AP.refresh();	
				}
				
				return;
			}
			
			setTimeout(function(){
				 Clog.log("active", 1);
				 if (!Base.__active){
					 Base.__active=1;
					 AP.sys.fire("window.active");	 
				 }
				 
			 },300);
			 
			 Base.__last_idle=0;
		}).blur(function(){
			AP.sys.fire("window.blur");
			Clog.log("active", 0);
			Base.__active=0;
			Base.__last_idle=AP.time.now();
		});
		
		
//		setInterval(function(){
//			// MAX IDLE FOR 30 MINUTES, AFTER THAT WE WILL STOP THE SOCKET
//			var max_idle=30*60;
//			
//			if (Base.__last_idle && AP.time.now()-Base.__last_idle > max_idle){
//				Base.idle();
//			}
//		},1000);
		
		
		$(document.body).click(function(){
			Clog.log("active", 1);
			
			if (!Base.__active){
				 Base.__active=1;
				 AP.sys.fire("window.active");	 
			 }
		});
		
		$.log("INITIALIZING BASE ...");
		
		Base.autoRender();
		AP.sys.on(AP.EVENTS.PAGE_UNLOAD, function(){
			Base.autoRender();
		});
		
		$("#base-apps .prefs .pref.js-lang").each(function(){
			var $box=$(this);
			var lang=Client.applang;
			
			$box.find(".-item").each(function(){
				if ($(this).data("lang")==lang){
					$(this).addClass("active");
					$box.find("em").html($(this).text());
				}else{
					$(this).removeClass("active");
				}
				
				$(this).click(function(){
					var v=$(this).data("lang");
					setLang(v);
				});
			});
		});
	};
	
	
	this.initURLClick=function(){
		$(document.body).on("click", ".url", function(){
			urlClick(this);
		});
		
		$(document.body).on("click", ".actionable", function(){
			var action = $(this).data('actionable');
			if (action){
				action();
			}
		});
	};
	
	
	/**
	 * @desc Idle process
	 */
	this.idle=function(){
		if (this.__stopped){
			return;
		}
		
		this.__stopped=true;
		Live.off();
		$(document.body).append("<div id='idle' style='top:0px; left:0px; right:0px; bottom:0px; z-index:999999; position:absolute;' onclick='AP.refresh();'></div>");
	};
	
	
	/**
	 * @desc Check if an app is available
	 */
	this.appEnabled = function(appkey){
		for (var i=0; i<Client.applist.length; i++){
			if (Client.applist[i].key==appkey){
				return true;
			}
		}
		
		return false;
	};
	
	this.cors=function(flag){
		if (!Client.base || !Client.base.secureData){
			return;
		}
		AP.ajaxSetup({
			__sessionid:  Client.base.secureData.session,
			__otp:  Client.base.secureData.otp,
		});
	};
	
	
	this.__systemActive=0;
	this.systemActive=function(){
		return this.__systemActive==1;
	};
	
	
	this.console=function(){
		if (Client.system && parseInt(Client.system.id)==1){
			if (arguments.length>=1){
				console.log("---------");
			}
			for (var i=0; i<arguments.length; i++){
				console.log(arguments[i]);
			}	
		}
	};
	
	
	/**
	 * @desc Check if the current tab is active
	 */
	this.tabActive=function(){
		return (Base.__active==1);
	};
	
	
	
	this.open=function(key){
		if (!key){
			key='main';
		}
		
		var spaces=["#base-star", "#base-calendar", "#base-notis", "#base-user", "#base-chat", "#base-apps"];
		
		for (var i=0; i<spaces.length; i++){
			if (spaces[i]=="#base-"+key){
				$(spaces[i]).show();
			}else{
				$(spaces[i]).hide();
			}
		}
		
		if (key=='notis'){
			N.ui.show("#base-panel .item-notis");
		}
		
		if (key=='chat'){
			Chat.panel.toggle("#base-panel .item-chat");
		}
		
		$("#base-panel .item").removeClass("base-active");
		$("#base-panel .item-"+key).addClass("base-active");
		
		if (key=="apps" && !$("#base-apps").hasClass("js-inited")){
			$("#base-apps").addClass("js-inited");
			$("#base-apps .item .image").each(function(){
				$(this).html("<img src='"+$(this).data("image")+"'/>")
			});
		}
	};
	
	
	this.toggle=function(key){
		if (key=="notis"){
		    if (!$("#base-notis").is(":visible")){
		        N.ui.hide();
	            N.ui.load("#base-notis-items");
	        }else{
	            $("#base-notis").hide();
	        }
			
			return;
		}
		
		if (key=="reminder"){
			if (!$("#base-reminders").is(":visible")){
				Reminder.load();
			}else{
				$("#base-reminders").show();
			}
		}
		
		
		if (key=="apps" && $("#base-apps").is(":visible")){
			$("#base-apps").hide();
			return;
		}
		
		return this.open(key);
	};
	
	
	this.focus=function(key){
		this.open();
		// $("#base-panel .item").setActive(".item-"+key);
		$("#base-panel .item").removeClass("base-active");
		$("#base-panel .item-"+key).addClass("base-active");
	};
	
	
	this.close=function(){
		var spaces=["#base-star", "#base-calendar", "#base-notis", "#base-user", "#base-chat", "#base-apps"];
		for (var i=0; i<spaces.length; i++){
			$(spaces[i]).hide();
		}
		
		// $("#base-panel .item").setActive(".item-main");
		$("#base-panel .item").removeClass("base-active");
		$("#base-panel .item-main").addClass("base-active");
	};
	
	
	
	this.inspect=function(url){
		var parts= url.split("://");

		if (parts.length==2){
			if (isBaseURL(parts[0])){
				var apps=parts[0].split("-",2);
				if (apps.length!=2){
					return errorURL();
				}
				
				var app=apps[1];
				var local=0;
				
				if (Client.base.app && app.toLowerCase()==Client.base.app.toLowerCase()){
					local=1;
				}
				
				
				// @desc Special handling, when base link is referenced from outside
				if (!local && (app=="message" || app == "msg")){
					if (AP.rewriteCheck(parts[1])){
						return {	
							"base": 1,
							"global":0,
							"local": 1,
							"app": apps[1],
							"url": Base.domain(Client.base.app)+"/"+parts[1],
							"abs": 1,
							"raw":url
						}
					}
					
					
					return {	
						"base": 1,
						"global":1,
						"local": 0,
						"app": apps[1],
						"url": Base.domain("message")+"/"+parts[1],
						"abs": 1,
						"raw":url
					}
				}
				
				
				if (local){
					var curl=parts[1];
					if (app!="message"){
						curl=parts[1];
					}
					
					return {	
						"base": 1,
						"global":1,
						"local": local,
						"app": apps[1],
						"url": curl,
						"abs": 1,
						"raw":url
					}
				}else{
					return {	
						"base": 1,
						"global":0,
						"local": local,
						"app": apps[1],
						"url": this.domain(apps[1])+"/"+parts[1],
						"abs": 1,
						"raw":url
					}
				}
			}else{
				return {
					"base": 0,
					"app": "none",
					"url": url,
					"abs":1
				}
			}
		}else if (parts.length==1){
			return {	
				"base": 1,
				"global": ((Client.base.app.toLowerCase()=="message" || Client.base.app.toLowerCase()=="msg")?1:0),
				"local": 1,
				"app": Client.base.app.toLowerCase(),
				"url": url,
				"abs": 1,
				"raw":url
			}
		}else{
			return {	
				"base": 0,
				"app": "none",
				"url": url,
				"abs": 0
			}
		}
	};
	
	
	this.a=function(url, title){
		var link="";
		var inspect=this.inspect(url);
		
		if (inspect.base){
			if (inspect.local){
				link="<span class='a url' data-url='"+inspect.url+"'>"+title+"</span>";	
			}else{
				link="<a target='_blank' href='"+inspect.url+"'>"+title+"</a>";
			}
		}else{
			link="<a target='_blank' href='"+url+"'>"+title+"</a>";
		}
		
		return link;
	};
	

	this.url2a=function(canvas, cond){
		$(canvas).find(".url").each(function(){
			if ($(this).data("href") || (cond && $(this).is(cond))){
				var attrs = { };

				$.each($(this)[0].attributes, function(idx, attr) {
				    attrs[attr.nodeName] = attr.nodeValue;
				});

				attrs.href=Client.url+"/"+$(this).data("url");

				$(this).replaceWith(function () {
				    return $("<a />", attrs).append($(this).contents()).removeClass("url");
				});
			}
		});
		
		AP.setContinuousRequest(canvas);
	};
	
	this.domain=function(subdomain){
		var httpbase="http";
		if (Client.https){
			httpbase="https"
		}
		
		if (!subdomain || subdomain==""){
			return httpbase+"://" + Client.domain;
		}
		
	    if(subdomain == "message" || subdomain == "msg") {
	        return httpbase+"://" + CONFIG.api + "." + Client.domain;
	    }
	    
		return httpbase+"://"+subdomain+"."+Client.domain;
	};
	
	this.logout = function() {
	    AP.confirm("Bạn có muốn đăng xuất khỏi hệ thống ngay bây giờ?", function() {
	        return AP.redirect(Base.domain("account")+"/a/logout?token="+Client.logout_token);
	    });
	};
	

	this.checkExpiring=function(){
		var exp=Client.expiring;
		if (!exp){
			return;
		}
		
		var html="<div id='expiring'>" +
			"<div class='box'>" +
			"	<div class='title'><span class='icon -ap icon-bookmark22'></span> &nbsp; Ứng dụng sẽ hết hạn vào ngày <em>"+AP.i18n.date(exp.time)+"</em>. Vui lòng liên hệ qua số điện thoại <em>(024) 2244 1313</em> để gia hạn.</div>" +
			"	<div class='close' onclick='$(\"#expiring\").fadeOut(300);'><span class='-ap icon-close'></span>&nbsp; Đóng</div>" +
			"</div>" +
		"</div>";
		
		if (parseInt(exp.time) < AP.time.now()){
			html="<div id='expiring'>" +
				"<div class='box'>" +
				"	<div class='title'><span class='icon -ap icon-bookmark22'></span> &nbsp; Ứng dụng đã hết hạn vào ngày <em>"+AP.i18n.date(exp.time)+"</em> và sẽ <em>không thể truy cập</em> từ ngày <em>"+AP.i18n.date(parseInt(exp.time) + 7*24*3600)+"</em>. Vui lòng liên hệ qua số điện thoại <em>(024) 2244 1313</em> để gia hạn.</div>" +
				"	<div class='close' onclick='$(\"#expiring\").fadeOut(300);'><span class='-ap icon-close'></span>&nbsp; Đóng</div>" +
				"</div>" +
			"</div>";
		}
		
		$("#document").append(html);
		
	};
	
	
	/**
	 * @desc Set interval to block session fixation
	 */
	this.protectSession=function(){
		var uid=Clog.getCookie("user_id");
		var tracking=true;
		
		setInterval(function(){
			if (!tracking){
				return;
			}
			
			var cid=Clog.getCookie("user_id");
			if (uid!=cid){
				tracking=false;
				
				AP.confirm("Your session is expired or changed by another user. Please refresh the page to continue safely.", function(){
					AP.refresh();
				});
				
				Live.off();
			}
		}, 5000);
	};
	
	
	
	this.checkPrimaryPath=function(u1, u2){
		if (AP.word.prefix(u1, Client.url)){
			return true;
		}
		
		var path=getBasePath(u2);
		var bs=AP.word.split("/", u1, true);
		
		if (!path){
			return false;
		}
		
		if (bs.length>=1 && path && u1 && path!=bs[0]){
			return false;
		}
		
		return true;
	};

	
	
	this.autoRender=function(){
		UI.autoActive();
	}
	

	this.beta=function(){
		return (Client.system && Client.system.id && (parseInt(Client.system.id)==1 || parseInt(Client.system.id)==79));
	};
	
	
	function getBasePath(u2){
		if (!AP.word.prefix(u2, Client.url)){
			return null;
		}
		
		var strs=u2.substr(Client.url.length).split("/");
		if (strs.length<2){
			return null;
		}
		
		return strs[1];
	};
	
	
	function isBaseURL(str){
		var data=str.split("-");
		if (data.length!=2 || data[0]!="base"){
			return false;
		}
		
		return true;
	};
	
	
	function setLang(lang){
		UI.ajaxShow();
		AP.post(Base.domain("account")+"/ajax/api/me/edit.language",{lang: lang}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Update successfully ...");
			AP.refresh();
		});
	};
	
	
	
	function errorURL(){
		return {	
			"base": 0,
			"app": "none",
			"url": "error",
			"abs": 0,
			"error":1
		}
	};
};












Base.title=new function __BaseTitle(){
	this.__msgcount=0;
	this.__notiscount=0;
	
	if (Client.num_notis && parseInt(Client.num_notis)){
		this.__notiscount=Client.num_notis;	
	}
	
	
	
	/**
	 * @desc Set title
	 */
	this.title=function(title){
		Client.pageData.title=title;
	};
	
	
	this.set=function(count){
		if ('notis' in count){
			
		}
	};
	
	
	this.update=function(){
		var total=Channel.countUniqueUnreads();		
		this.message(total);
	};

	
	this.message=function(msgcount){
		this.__msgcount=msgcount;
		updateTitle();
	};
	
	
	this.notis=function(notiscount){
		this.__notiscount=notiscount;
		updateTitle();
	};
	
	
	function updateTitle(){
		var total=Base.title.__notiscount+Base.title.__msgcount;
		if (isNaN(total)){
			total="";
		}
		
		var title=Client.pageData.title;
	
		if (total){
			document.title="("+total+") "+title;
		}else{
			document.title=title;
		}
	};
};









Base.color=new function __BaseColor(){
	this.change=function(index){		
		UI.ajaxShow();
		AP.post(Base.apiURL()+"api/me/color", {color: index}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Color theme updated ...");
			AP.refresh();
		});
	};
};




Base.demo=new function __BaseDemo(){
	this.on=function(){
		if (!Client.system || !Client.system.path){
			return false;
		}
		
		return Client.system.path=="demo" || Client.system.path=="okrdemo";
	};
	
	
	this.init=function(id, options){
		$("#base-sysdemo").append("<div class='close'><span class='-ap icon-ion-android-close'></span></div>" +
			"<div class='side'>" +
			"	<div class='cta js-chatnow'><span class='-ap icon-arrow-right2'></span>&nbsp; Đăng ký chính thức</div>" +
			"</div>");
			
		
		if (!options.cta){
			window.Tawk_API={};
			if (Clog.getCookie("demo_name") && Clog.getCookie("demo_email")){
				Tawk_API.visitor={
				    name  : decodeURIComponent(Clog.getCookie("demo_name")),
				    email : decodeURIComponent(Clog.getCookie("demo_email"))
		    	};

			}
			
			window.Tawk_LoadStart=new Date();
	    	
		    var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
		    s1.async=true;
		    s1.src='https://embed.tawk.to/'+id+'/default';
		    s1.charset='UTF-8';
		    s1.setAttribute('crossorigin','*');
		    s0.parentNode.insertBefore(s1,s0);
			
	    	Tawk_API.onLoad=function(){
	    		if (Clog.getCookie("demo_name") && Clog.getCookie("demo_email")){
	    			console.log(decodeURIComponent(Clog.getCookie("demo_email")));
	    			Tawk_API.setAttributes({
	    			    name  : decodeURIComponent(Clog.getCookie("demo_name")),
	    			    email : decodeURIComponent(Clog.getCookie("demo_email"))
	    	    	}, function(code){
	    	    		console.log(code);
	    	    	});
	    		}
	    	};
	    	
	    	$("#base-sysdemo .js-chatnow").click(function(){
				Base.demo.hide();
				Tawk_API.toggle();
			});

		}else{
			$("#base-sysdemo .js-chatnow").click(function(){
				var cta=options.cta;
				cta();
			});
		}
		
		
		$("#base-sysdemo .close").click(function(){
			Base.demo.hide();
		});
		
		setTimeout(function(){
			$("#base-sysdemo").fadeIn(1000);
		}, 1000);

	    		
	};
	
	this.hide=function(){
		$("#base-sysdemo").fadeOut(1000);
	};
	
	
	this.sendContact=function(){
		var data={
			name  : decodeURIComponent(Clog.getCookie("demo_name")),
			email : decodeURIComponent(Clog.getCookie("demo_email")),
			app: "okr"
		};
	    
		
		UI.ajaxShow();
		AP.post(Base.domain("money")+"/ajax/api/trial/request", data, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			AP.alertSuccess("Cảm ơn bạn! Base đã nhận được yêu cầu tài khoản Trial của bạn.");
		});
		
	};
	
};





Base.draw = new function __Draw(){
	this.__inited=false;
	this.token="";
	this.callback=null;

	this.init=function(){
		if (this.__inited){
			return;
		}
		this.__inited=true;
		AP.postmessage.listen(function(data, origin){
			// if (data.token!=Base.draw.token){
			// 	return;
			// }
			//

			if (origin!=Base.domain("draw")){
				return;
			}
			
			AP.hideCustomDialog();
			
			if (Base.draw.callback){
				Base.draw.callback(data);
			}
				
		});
	};



	this.pick=function(options){
        options=$.extend({multi: 0, ext: 1}, options);

        this.init();
        if (options.callback){
            this.callback=options.callback;
        }

		this.token=AP.uuid();
        var extGTab = window.open(Base.domain("draw")+"?multi=1&base_token="+this.token+"&base_domain="+encodeURIComponent(Client.url), "_blank");
	};
};



Base.message=new function __BaseMessage(){
	this.peer=function(user_id){
		if (!AP.isset("Message")){
			return;
		}
		
		if (!user_id){
			return;
		}
		
		if (user_id==Client.viewer.id || user_id==Client.viewer.username){
			return;
		}
		
		UI.ajaxShow();
		AP.post(Message.api+"api/message/channel/peer.probe",{user: user_id}, function(code){
			UI.ajaxHide();
			
			
			if (Client.base.app=="message"){
				if (!code.channel){
					Channel.create.peer(user_id);	
				}else{
					Channel.open(code.channel.id, null, {intent: "panel"});	
				}
			}else{
				if (code.channel && code.messages){
					Message.create.peer(code);
				}else{
					Message.create.channel({prepend: true, users: [code.user.username]});
				}
			}
		});
	};
};




Base.file=new function __BaseFileAPI(){
	this.preview=function(id){
		return FileX.quickPreview(id);
	};
	
	/**
	 * @desc Preview a list of file, whereas first_id is the first ID to be shown
	 */
	this.previewList=function(files){
		FileX.quickPreview(files[0]);
	};
	
	
	this.previewMultiples=function(parent, selector){
		var list=[];
		
		$(parent).on("click", selector, function(){
			FileX.quickPreview($(this).data("file"), {filter: selector, container: parent});
		});
		
		
	};
	
	
	this.download=function(name, fid){
		return Base.domain("api")+"/files/download?fid="+fid+"&name="+name
	};
		
	
	
	/**
	 * @desc Embed file preview within a canvas
	 */
	this.embed=function(url, canvas){
		var is_image=0;
		var ext=UI.file.ext(url);
		if (ext=="jpg" || ext=="png" || ext=="bmp"){
			is_image=1;
		}
		
		var file={name: url, src: url, image: is_image};
		
		$(canvas).html(FileX.ui.getMain(file));
	};
	
	this.getHTML=function(url){
		var is_image=0;
		var ext=UI.file.ext(url);
		if (ext=="jpg" || ext=="png" || ext=="bmp"){
			is_image=1;
		}
		
		var file={name: url, src: url, image: is_image};
		return FileX.ui.getMain(file);
	};
};


Base.api=new function __BaseAPI(){
	this.embed=function(url, options){
		options=$.extend({}, {title: "Embed Base app api"}, options);
		
		var token=AP.uuid();
		if (url.indexOf("?")==-1){
			url=url+"?__local_apitoken="+token;
		}else{
			url=url+"&__local_apitoken="+token;
		}
		
		var cors_params ="base_domain="+(Client.url)+"&base_token="+(AP.postmessage.token())+"";
		url=url+"&"+cors_params
		
		var h=$(window).height()-150;
		if (h<200){
			h=200;
		}
		
		var html="<div class='embed-title'> "+(options.title)+" <div class='embed-close' onclick='Base.api.embedClose(this);'><span class='-ap icon-ion-android-close'></span></div> </div> <div id='js-internal-embed' style='height:"+(h)+"px'><iframe style='width:100%; height:100%' frameborder='none' src='"+(url)+"'></iframe></div>";
		
		AP.customDialog(html,"api-embed")
		.width(options.width)
		.closable(false)
		.style("-full")
		.show();
	};
	
	
	this.embedClose=function(){
		$("#js-internal-embed").remove();
		AP.dialog("api-embed").hide();
	};
	
	this.closeDialog = this.embedClose;
	this.close = this.embedClose;
};



Base.api.msg=new function __BaseAPIMsg(){
	this.events={};
	
	this.pushToFrame=function(event_id, data){
		
	};
	
	this.on=function(event_id, fn){
		this.events[event_id]=fn;
	};
};


Base.connect=new function __BaseRequest(){
	this.defs={};
	
	this.def=function(app, type, endpoint, postback){
		if (!postback){
			postback="none";
		}
		
		this.defs[type]={app: app, type: type, endpoint: endpoint, postback: postback};
	};
	
	
	this.dialog=function(types, data){
		var actions=[];
		for (var i=0; i<types.length; i++){
			actions.push({label: types[i], type: types[i], url: this.getURL(types[i], data), icon: "uniF143"})	
		}
		
		AP.actionMenu(actions, {
			title: "Select one connect type"
		});
	};
	
	
	this.getURL=function(type, data){
		if (!this.defs[type]){
			return;
		}
		
		var req=this.defs[type];
		var endpoint=safe(req.endpoint);
		var postback=safe(req.postback);
		endpoint=urlRematch(endpoint, data);
		postback=urlRematch(postback, data);
		
		data=JSON.stringify(data);
		data=Base64.encodeURI(data);
		
		var sig=""+(type)+"."+(endpoint)+"."+(postback)+"."+(data)+"."+(Client.viewer.id)+"";
		sig=md5(sig);
		
		return Base.domain(req.app)+"/home?custom_form=1&app="+Client.base.app+"&type="+safe(type)+"&endpoint="+safe(endpoint)+"&postback="+safe(postback)+"&data="+data+"&signature="+sig;
	};
	
	
	/**
	 * @desc Context-aware data get
	 */
	this.getData=function(callback){
		var app=safe(Query.get("app"));
		var type=Query.get("type");
		var endpoint=Query.get("endpoint");
		var postback=Query.get("postback");
		var data=Query.get("data");
		var id=Client.viewer.id;
		
		var sig=Query.get("signature");
		var test_sign=""+(type)+"."+(endpoint)+"."+(postback)+"."+(data)+"."+(id)+"";
		
		if (sig!=md5(test_sign)){
			return AP.alertError("INVALID SIGNATURE. CANNOT INVOKE BASE CONNECT API");
		}
		
		if (!hasApp(app)){
			return AP.alertError("The app "+app+" is not registered by your system");
		}
		
		var real_data={};
		try{
			real_data=JSON.parse(Base64.decode(data));
		}catch(e){
			
		}
		
		UI.ajaxShow();
		AP.post(Base.domain(app)+"/ajax/"+endpoint, real_data, function(code){
			UI.ajaxHide();
			if (!code.good() || !code.form){
				return AP.alertError(code.message);
			}
			
			callback(code.form);
		});
	};
	
	
	function urlRematch(url, data){
		var str=url;
		for (var key in data){
			str=AP.word.replaceAll('$'+key, data[key], str);
		}
		
		return str;
	};
	
	
	function hasApp(key){
		for (var i=0; i<Client.applist.length; i++){
			if (Client.applist[i].key==key){
				return true;
			}
		}
		
		return false;
	};
};



var Follow=new function __Follow(){
	this.auto=function(canvas, opts){
		if (!$(canvas).length){
			return;
		}
		
		build(canvas, opts);
	};
	
	this.embed=function(canvas, opts){
		return this.auto(canvas, opts);
	};
	
	
	this.request=function(username, flag, ref){
		var opts=$(ref).closest(".jsapi-follow").data("opts");
		var data=shallowClone(opts.data);
		data.flag=flag;
		data.username=username;
		
		UI.ajaxShow();
		AP.post(opts.endpoint,data, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			opts.followers=code.followers;
			build($(ref).closest(".jsapi-follow"), opts);
		});
	};
	
	
	this.setFollow=function(user, ref){
		var username=user;
		if (AP.data.isObject(user)){
			username=user.username;
		}
		
		if (user=="me"){
			username=Client.viewer.username;
		}
		
		this.request(username, 1, ref);
	};
	
	
	this.setUnfollow=function(user, ref){
		var username=user;
		if (AP.data.isObject(user)){
			username=user.username;
		}
		
		if (user=="me"){
			username=Client.viewer.username;
		}
		
		this.request(username, 0, ref);
	};
	
	
	this.addFollower=function(ref){
		var opts=$(ref).closest(".jsapi-follow").data("opts");
		
		Form.inlineTagger(ref, {
			title: "Add followers",
			search: true,
			users: opts.users,
			select: function(user){
				Follow.setFollow(user, ref);
			},
			position:{
				left:1,
			},
			width: 250,
			click: true
		});
	};
	
	
	
	function build(canvas, opts){
		$(canvas).data("opts", opts).addClass("jsapi-follow");
		opts=$.extend({}, {style:"standard", max_display: 20, followers: [], owners: [], tag: Client.people, data: {}}, opts);
		
		if (opts.style){
			$(canvas).addClass("fe-"+opts.style);
		}
		
		if (opts.style=="compact" && opts.max_display > 10){
			opts.max_display=10;
		}
		
		$(canvas).html(getFollowers(opts));
		

		if (Me.isOwner(opts)){
			// follow="<div class='action url' data-url='topic/action/unfollow'>Unfollow</div>";
			$(canvas).find(".js-user").each(function(){
				$(this).data("context.items", [{label: "Remove follower", icon:"blocked", username: $(this).data("username"), action: function(opt, ref){
					Follow.setUnfollow(opt.username, this);
				}}]);
			});
		}
	};
	
	
	function getFollowers(opts){
		var users=AP.render(opts.followers, function(e, index){
			var u=e;
			if (AP.data.isString(u) || AP.data.isInt(u)){
				u=People.get(u);
			}else{
				u=People.get(u.username);
			}
			
			if (opts.style=='list'){
				return "<div class='js-user fe-user url' data-username='"+(u.username)+"'> <div class='image avatar avatar-32 -circled'><img src='"+(AP.xthumb(u.gavatar))+"'/></div> <div class='uname'>"+(u.name)+"</div> <div class='uinfo ap-xdot'>"+(u.title)+"&nbsp;</div> </div>";
			}else if (opts.style=='inline'){
				return "<span class='js-user fe-user url' data-username='"+(u.username)+"'><span class='uname'>"+(u.name)+"</span></span>,";
			}
			
			return "<div class='js-user fe-avatar avatar avatar-32 -circled url' data-username='"+(u.username)+"'> <div class='image'><img src='"+(AP.xthumb(u.gavatar))+"'/></div> </div>";
		});
		
		if (opts.style=="inline"){
			if (users.length){
				users="Followed by "+(users)+"";
			}else{
				users="No followers &middot;";
			}
		}
		
		var follow="<div class='fe-action url is-follow' onclick='Follow.setFollow(\"me\",this);'><span class='ficon-check'></span> Follow</div>";
		if (opts.style=="inline"){
			follow="<div class='fe-action url is-follow' onclick='Follow.setFollow(\"me\",this);'>Follow</div>";
		}
		
		if (Me.isFollower(opts)){  
			follow="<div class='fe-action url is-unfollow' onclick='Follow.setUnfollow(\"me\",this);'>Unfollow</div>";
		}
		var actions=follow;
		
		if (Me.isOwner(opts)){
			actions="<div class='fe-action is-add-follower url' onclick='Follow.addFollower(this);'>Add followers</div>" + follow;
		}
		
		if (opts.style=="standard"){
			return "<div class='fe-title'> <div class='fe-label'>"+(opts.followers.length)+" people followed</div> <div class='fe-side'>"+(actions)+"</div> </div> <div class='fe-users'>"+(users)+"</div>";
		}else if (opts.style=='inline'){
			return "<div class='fe-users inline'>"+(users)+" <div class='fe-actions inline'>"+(actions)+"</div></div>";
		}else{
			return "<div class='fe-users clear-fix'>"+(users)+" <div class='fe-actions'>"+(actions)+"</div></div>";
		}
		
		
	};
};


Base.notis_opt=new function __BaseNotisOpt(){
	this.settings=function(){
		var url=Base.domain("account")+"/ajax/api/me/email.notis";
		
		var ui=UI.setting("Personalized Email notification settings");
		for (var key in Client.email_options){
			var opt=Client.email_options[key];
			ui.add({
				title: opt.name,
				options: {"yes": "Yes", "no": "No"},
				value: opt.value,
				name: opt.key,
				url: url
			});	
		};
		
		ui.callback(function(code, key, value){
			Client.email_options[key].value=value;
		})
		.show();
		
		Base.toggle("apps");
	};
};


function BaseTree(){
	this.nodes=null;
	this.fnodes=null;
	this.root=null;
	this.raw_nodes=[];
	
	var rnodes={};
	
	this.init=function(nodes){
		rnodes={};
		this.raw_nodes=nodes;
		
		if (this.root){
			return this.root;
		}
		
		this.build();
		
		var root={name: "The company"};
		root.level=0;
		root.metatype="root";
		root.id=0;
		root.nodes=this.nodes;
		this.root=root;
		
		setLevel(root, 0);
		// this.fnodes.unshift(root);
	};
	
	
	this.build=function(){
		var objs=this.raw_nodes; 
		
		if (!objs){
			return;
		}
		
		for (var i=0; i<objs.length; i++){
			objs[i].nodes=[];
//			objs[i].objs=AP.array.filter(Client.nodes, function(e){
//				return e.node_id==objs[i].id;
//			});
			
			if (!objs[i].parent_id){
				objs[i].parent_id=0;	
			}else{
				objs[i].parent_id=parseInt(objs[i].parent_id);
			}
			
			objs[i].id=parseInt(objs[i].id);
			objs[i].__used=0;
			objs[i].level=1;
			
			rnodes["r-"+objs[i].id]=objs[i];
		}
		

		for (var i=0; i<objs.length; i++){
			for (j=0; j<objs.length; j++){
				if (parseInt(objs[j].parent_id)==parseInt(objs[i].id)){
					objs[i].nodes.push(objs[j]);
					objs[j].__used=1;
					// objs[j].level=objs[i].level+1;
				}
			}
		}
		
		
		var r=[];
		for (var i=0; i<objs.length; i++){
			if (objs[i].__used){
				
			}else{
				r.push(objs[i]);
			}
		}
		
		this.nodes=r;
		this.flatten();
	};
	
	
	/**
	 * @desc Flatten tree to array, sorted consecutively
	 */
	this.flatten=function(){
		r=[];
		for (var i=0; i<this.nodes.length; i++){
			flattenNode(r, this.nodes[i]);
		}
		
		
		this.fnodes=r;
		for (var i=0; i<this.fnodes.length; i++){
			this.fnodes[i].parent=getNodeByID(this.fnodes[i].parent_id);
		}
		
		for (var i=0; i<this.fnodes.length; i++){
			this.fnodes[i].tree_name="---".repeat(this.fnodes[i].level-1)+" "+this.fnodes[i].name;
		}
		
		return this.fnodes;
	};
	
	
	function flattenNode(collector, node){
		collector.push(node);
		for (var i=0; i<node.nodes.length; i++){
			flattenNode(collector, node.nodes[i]);
		}
	};
	
	
	function getNodeByID(id){
		if (rnodes["r-"+id]){
			return rnodes["r-"+id];
		}
		
		return null;
	};
	
	
	function setLevel(node, level){
		node.level=level;
		if (!node.nodes || !node.nodes.length){
			return;
		}
		
		for (var i=0; i<node.nodes.length; i++){
			setLevel(node.nodes[i], level+1);
		}
	};
};


/**
 * @desc Viewer Object
 * @desc Just a place holder
 */
var Viewer = new function _Viewer(){
	
	inherits(this, APViewer);
	
	
	this.hasNetwork=function(network){
		if (AP.data.isArray(network)){
			for (var i=0; i<network.length; i++){
				if (viewerHasNetwork(network[i])){
					return true;
				}
			}
			
			return false;
		}else{
			return viewerHasNetwork(network);
		}
		
	};
	
	
	function viewerHasNetwork(network){
		return AP.array.contain(Client.viewer.networks, network, function(e, f){
			if (AP.data.isInt(e) && AP.data.isInt(f)){
				return parseInt(e)==parseInt(f);
			}
			
			return parseInt(e.id)==parseInt(f.id);
		});
	};
	

};


var TagManager=new function __TagManager(){
	this.endpoint="api/tagmanager";
	this.callback=null;
	
	this.init=function(origin, endpoint){
		this.origin=origin;
		this.tags=origin.tags;
		if (endpoint){
			this.endpoint=endpoint;
		}else{
			this.endpoint="api/tagmanager";
		}
		
		this.callback=null;
	};
	
	
	/**
	 * @desc Show TagManager on dialog
	 */
	this.dialog=function(callback){
		if (callback){
			this.callback=callback;
		}else{
			this.callback=null;
		}
		
		prepareCanvas();
		var canvas="#tagmanager";
		$(canvas).html("<div class='-close' onclick='AP.closeDialog(this);'><span class='-ap icon-close'></span></div> <div class='title'>Manage tags</div> <div class='body' id='js-edit-tags'> <div class='list tags'></div> <div class='tag-add'> <form method='POST' action='#'> <div class='square'><em class='-bg-alt0'></em></div> <input type='hidden' name='color' value='0'> <input type='hidden' name='id' value='"+(TagManager.origin.id)+"'> <div class='ip'> <input type='text' autocomplete='off' name='name' placeholder='Thêm nhãn mới'/> </div> <div class='submit'>Cập nhật</div> </form> </div> </div>");
		
		var context=this.origin;
		buildList();
		
		$(canvas).find("form").attr("action", TagManager.endpoint+"/edit");
		Form.inlineColorTagger($(canvas).find(".tag-add .square"),function(color){
			$(this).closest("form").find("input[name=color]").val(color);
			$(this).closest("form").find("input[name=name]").focus();
			$(this).closest(".square").find("em").removeClass().addClass("-bg-alt"+color);
		},{
			width: 200,
			left: 0
		}); 
		
		$(canvas).find(".tag-add .square em").click(function(){
			$(this).parent().find(".ap-inline-colors").toggle();
		});
		
		
		$(canvas).find(".ip input").click(function(){
			$(this).closest(".tag-add").addClass("active");
		}).enter(function(){
			updateTag(this);
		});
		
		$(canvas).find(".submit").click(function(){
			updateTag(this);
		});
		
		AP.dialog("#custom-tagmanager").balance();
	};
	
	
	this.remove=function(tag){
		AP.confirm("Remove this tag from the list?", function(){
			UI.ajaxShow();
			AP.post(TagManager.endpoint+"/remove",{name: tag, id: TagManager.origin.id}, function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				TagManager.tags=code.tags;
				TagManager.origin.tags=code.tags;
				
				buildList();
				setForm("", "auto");
				
				if (TagManager.callback){
					TagManager.callback(code.tags);
				}
			});
		});
	};
	
	
	this.list=function(tags){
		var html= AP.render(tags, function(t){
			var obj=AP.array.single(TagManager.tags, function(e){
				return purifyStrict(t)==purifyStrict(e.name);
			});
			
			var color=0;
			if (obj){
				color=obj.color;
			}
			
			return "<div class='ui-tag tag-alt"+(color)+"-more'>"+(t)+"</div>";
		});
		
		return "<div class='ui-tags'>"+(html)+"</div>";
	};
	
	
	this.taggable=function(input, tags, values){
		var $this=$(input);
		var $p=$this.parent();
		var tags_html=AP.render(tags, function(e){
			return "<div class='fi-tag' data-value='"+(e.name)+"' data-color='"+(e.color)+"'> <span class='square -bg-alt"+(e.color)+"'></span> "+(e.name)+" </div>";
		});
		
		if (tags_html && tags_html.length){
			tags_html="<div class='tags_box scroll-y forced-scroll'>"+(tags_html)+"</div>";
		}
		
		$p.find(".fi-tags").remove();
		$p.find(".selected-tags").unbind();
		
		
		tags_html+="<div class='fi-tag js-add-tag'> <span class='add-icon'></span> Add more tag ... </div>";
		
		var cta_html="<div class='none'>Please select tags</div>";
		
		$p.find(".selected-tags").click(function(){
			$(this).closest(".selected-tags-wrapper").addClass("taglist-activated");
			$(this).closest(".__dialogwrapper").addClass("xo");
		});
		
		$p.append("<div class='fi-tags unselectable'> <div class='r' onclick='TagManager.cancel(this);'></div> "+(tags_html)+" </div>");
		
		$this.parent().find(".fi-tag").click(function(){
			if ($(this).hasClass("js-add-tag")){
				TagManager.dialog(function(tags){
					TagManager.taggable(input, tags, value);
				});
				return;
			}
			
			var value=$(this).data(value);
			var color=$(this).data(color);
			if ($(this).hasClass("selected")){
				$(this).removeClass("selected");
			}else{
				$(this).addClass("selected");
			}
			
			syncInputValues($p);
		});
		
		if (values && AP.data.isArray(values) && values.length){
			for (var i=0; i<values.length; i++){
				var v=purifyStrict(values[i]);
				$this.parent().find(".fi-tag").each(function(){
					if (v==purifyStrict($(this).data("value"))){
						$(this).addClass("selected");
					}
				})
			}
			
			syncInputValues($p);
		}
	};
	
	
	this.cancel=function(ref){
		$(ref).closest(".selected-tags-wrapper").removeClass("taglist-activated");
		$(ref).closest(".__dialogwrapper").removeClass("xo");
	};
	
	
	function updateTag(ref){
		Form.submitFrom(ref, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			TagManager.tags=code.tags;
			TagManager.origin.tags=code.tags;
			
			buildList();
			setForm("", "auto");
			
			if (TagManager.callback){
				TagManager.callback(code.tags);
			}
		});
	};
	
	
	function buildList(){
		var html=AP.render(TagManager.tags, function(e){
			return getTag(e);
		});
		
		if (!TagManager.tags.length){
			html="<div class='no-tag'>No tags here &middot; Enter the tag name in the below form to add</div>";
		}
		
		$("#js-edit-tags").find(".list").html(html);
		
		$("#js-edit-tags").find(".list .remove").click(function(){
			var key=$(this).closest(".tag").data("key");
			TagManager.remove(key);
		});
		
		$("#js-edit-tags").find(".list .js-name").click(function(){
			var key=$(this).closest(".tag").data("key");
			var name=$(this).closest(".tag").data("name");
			var color=$(this).closest(".tag").data("color");
			setForm(name, color);
		});
	};
	
	
	function setForm(name, color){
		if (color && AP.data.isInt(color)){
			$("#js-edit-tags .tag-add input[name=color]").val(color);
			Form.inlineColorTagger("#js-edit-tags .tag-add .square", "set", color);
			$("#js-edit-tags .tag-add .square em").removeClass().addClass("-bg-alt"+color);
		}
		
		$("#js-edit-tags .tag-add input[name=name]").val(name).click();
		setTimeout(function(){
			$("#js-edit-tags .tag-add input[name=name]").focus();
		}, 200);
		
	};
	
	
	function getTag(e){
		return "<div class='tag -bg-alt"+(e.color)+"-less text-alt"+(e.color)+"' data-key='"+(e.key)+"' data-name='"+(e.name)+"' data-color='"+(e.color)+"'> <div class='square -bg-alt"+(e.color)+"'></div> <span class='js-name name pointer'>"+(e.name)+"</span> <div class='remove' title='Remove this tag'><span class='-ap icon-close'></span></div> </div>";
	};
	
	
	function prepareCanvas(){
		AP.customDialog("<div id='tagmanager' class='tagmanager-dialog'></div>", "custom-tagmanager").addClass("-full").width(420).show();
	};
	
	
	
	function syncInputValues($p){
		var html='';
		var values='';
		
		$p.find(".fi-tag.selected").each(function(){
			var value=$(this).data("value");
			var color=$(this).data("color");
			html+="<span class='value tag-alt"+(color)+"'><span class='square -bg-alt"+(color)+"'></span>"+(value)+"</span>";
			values+=value+",";
		});
		
		if (!html || !html.length){
			html="<div class='none'>Please select tags</div>";
		}
		
		$p.find(".selected-tags").html(html);
		$p.find("input").val(values);
	};
	
};



Base.tagManager=TagManager;


Base.webhook=new function __BaseWebhook(){
	this.manage=function(opts, callback){
		opts=$.extend({title: "Manage webhooks", webhooks: {}, transformers: []}, opts);
		
		var obj=opts.origin;
		var st="";
		
		if (!obj.webhooks){
			obj.webhooks={};
		}
		
		if (obj.webhooks.server_token){
			st=obj.webhooks.server_token;
		}
		
		var data={id: obj.id, hid: obj.hid, token: obj.token, events: opts.events.join(",")};
		
		var form=Form.create('fly-webhook-fx',{'action': "api/webhook/update"})
		.row(
			Form.label({label: "Linked to",sublabel: ""}),
			Form.input({name: 'job_name', type: "fake"}).value(obj.name)
		);
		
		for (var i=0; i<opts.events.length; i++){
			var ev=opts.events[i];
			
			var v=[];
			if (obj.webhooks.events && obj.webhooks.events[ev]){
				v=obj.webhooks.events[ev];
				// v=v.join("<br><br>");
			}
			
			form.row(
				Form.label({label: "Webhook <code>"+ev+"</code>",sublabel: ""}),
				Form.input({name: "event-"+(ev)+"", type:"lines", placeholder:"Enter webhook URL and press Enter", role:"simple"}).css({height: 110}).value(v)
			);
		}
		
		form.rowSep();
		var current_max=2;
		if (obj.webhooks && obj.webhooks.transformers && obj.webhooks.transformers.length){
			current_max=obj.webhooks.transformers.length;
			
			for (var i=0; i<obj.webhooks.transformers.length; i++){
				var t=obj.webhooks.transformers[i];
				form.row(
					Form.label({label: "Transformer <code>"+(i+1)+"</code>",sublabel: ""}),
					Form.inputGroup([
						Form.input({name: "transform-"+(i)+"", type:"text", placeholder:"Final key"}).value(t.key),
						Form.input({name: "transform-org-"+(i)+"", type:"text", placeholder:"Original key"}).value(t.value)
					])
				).addClass("js-transformer");
			}	
		}else{
			form.custom("<div class='link center a std normal js-ts-link'>Add webhook transformers</div>");
			
			for (var i=0; i<current_max; i++){
				form.rowHidden(
					Form.label({label: "Transformer <code>"+(i+1)+"</code>",sublabel: ""}),
					Form.inputGroup([
						Form.input({name: "transform-"+(i)+"", type:"text", placeholder:"Final key"}),
						Form.input({name: "transform-org-"+(i)+"", type:"text", placeholder:"Original key"})
					])
				).addClass("js-transformer js-initial");
			}	
		}
		
		
		for (var i=current_max; i<20; i++){
			form.rowHidden(
				Form.label({label: "Transformer <code>"+(i+1)+"</code>",sublabel: ""}),
				Form.inputGroup([
					Form.input({name: "transform-"+(i)+"", type:"text", placeholder:"Final key"}),
					Form.input({name: "transform-org-"+(i)+"", type:"text", placeholder:"Original key"})
				])
			).addClass("js-transformer");
		}
		
		
		form.rowSep()
		.row(
			Form.label({label: "Shared URL secret",sublabel: "The shared server_token"}),
			Form.input({name: 'server_token', type: "text", placeholder: "webhook shared server_token"}).value(st)
		);
		
		if (opts.create){
			var create_url=Base.domain(Client.base.app)+"/webhook/"+opts.create;
			
			form.rowSep()
			.row(
				Form.label({label: "Create API endpoint",sublabel: "URL endpoint for creating action"}),
				Form.input({name: 'create_api_endpoint', type: "textarea"}).value(create_url).css({height: 100}).readOnly()
			);	
		}
		
		form.buttons([
		     {label: "Save", action: function(){
		    	 Form.submit("#fly-webhook-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }

		    		 if (callback) callback(code);
		    		 AP.xRefresh();
		    	 })
		     }, style: 'ok -success -rounded bold'},
		     {label: "Hủy bỏ", action: function(){
		    	 Form.hide("fly-webhook-fx");
		     }, style:'cancel -passive-2 -rounded'}
		])
		.render(function(f){
			$("#fly-webhook-fx .js-ts-link").click(function(){
				$(this).parent().hide();
				$("#fly-webhook-fx .js-initial").show();
			});
			
			$("#fly-webhook-fx .js-transformer input").click(function(){
				var $row=$(this).closest(".row");
				var $next=$row.next();
				if ($next.length && $next.hasClass("js-transformer")){
					$next.show();
				}
			});
		})
		.hiddens(data);
	
		Form.pop({width: 720, label: opts.title}).setForm(form).show();
	};
	
	
	
	this.list=function(obj, canvas){
		
	};
};


Base.filter=function(opts){
	opts=$.extend({}, {canvas: "#page", handler: "#js-filter-button"}, opts);
	
	$("#js-master-filters .js-close").click(function(){
		$("#js-master-filters").hide("slide", {direction:"right"}, 200);
	});
	
	$("#js-master-filters .js-submit").click(function(){
		updateFilters(this);
	});
	
	
	setTimeout(function(){
		setValues();
	},100);
	
	$(opts.handler).click(function(){
		$("#js-master-filters").show("slide", {direction:"right"}, 200);
	});
	
	
	
	function updateFilters(ref){
		var data=assoc($("#js-master-filters :input").serializeArray());
		for (var key in data){
			if (data[key]===""){
				data[key]=null;
			}
		}
		
		AP.setURLParams(data, true);
	};
	
	
	function setValues(){
		// Setting current value
		
		var active=0;
		$("#js-master-filters :input").each(function(){
			var name=$(this).attr("name");
			var v=Query.get(name);
			if (v===null || v===""){
				return;
			}
			
			active++;
			$(this).val(v);
		});
		
		if (active){
			$(opts.handler).addClass("active").html("Filters ("+active+")");
		}
		
		Form.render("#js-master-filters");
	};
};


var Me=new function __Me(){
	this.isManagerOf=function(user){
		if (!user.manager || !user.manager.length){
			return false;
		}
		
		return AP.array.exist(user.manager, Client.viewer.username);
	};
	
	this.isManagedBy=function(user){
		var username=user;
		if (AP.data.isObject(user)){
			username=user.username;
		}
		
		if (!Client.viewer.manager || !Client.viewer.manager.length){
			return false;
		}
		
		return AP.array.exist(Client.viewer.manager, username);
	};
	
	this.shareManager=function(user){
		if (!user.manager || !user.manager.length){
			return false;
		}
		
		if (!Client.viewer.manager || !Client.viewer.manager.length){
			return false;
		}
		
		for (var i=0; i<user.manager.length; i++){
			if (Me.isManagedBy(user.manager[i])){
				return true;
			}
		}
		
		return false;
	};
	
	
	this.sameManager=this.shareManager;
	
	
	this.isSystemOwner=function(){
		var obj=Network.get(Client.system.root_network_id);
		return (obj && parseInt(obj.role)==Role.OWNER);
	};
	
	this.isSystemAdmin=function(){
		var obj=Network.get(Client.system.root_network_id);
		return (obj && (parseInt(obj.role)==Role.ADMIN || parseInt(obj.role)==Role.OWNER));
	};
	
	this.isNetworkOwner=function(network){
		var obj=null;
		
		if (AP.data.isString(network)){
			obj=Network.getByPath(network);
		}else{
			obj=Network.get(network.id);	
		}
		return (obj && parseInt(obj.role)==Role.OWNER);
	};
	
	this.isNetworkAdmin=function(network){
		if (!network){
			if (Client.pageData.network){
				network=Client.pageData.network;
			}else{
				network=Company.getRootNetwork();	
			}
		}
		
		if (!network){
			return false;
		}
		
		var obj=network;
		if (AP.data.isInt(network)){
			obj=Network.get(network);	
		}
		
		
		return (obj && (parseInt(obj.role)==Role.ADMIN || parseInt(obj.role)==Role.OWNER));
	};
	
	
	
	this.isFollower=function(obj){
		if (!obj){
			return false;
		}
		
		for (var i=0; i<obj.followers.length; i++){
			if (AP.data.isString(obj.followers[i])){
				if (obj.followers[i]==Client.viewer.username){
					return true;
				}
			}else{
				if (obj.followers[i].username==Client.viewer.username){
					return true;
				}	
			}
		}
		
		return false;
	};
	
	
	this.isOwner=function(obj){
		if (!obj){
			return false;
		}
		
		for (var i=0; i<obj.owners.length; i++){
			if (AP.data.isString(obj.owners[i]) && obj.owners[i]==Client.viewer.username){
				return true;
			}
			
			if (obj.owners[i].username==Client.viewer.username){
				return true;
			}
		}
		
		return false;
	};
	
	
	/**
	 * @desc Check if me is among a team owner of obj
	 */
	this.isTeamOwner=function(obj){
		if (!obj){
			return false;
		}
		
		for (var i=0; i<obj.teams.length; i++){
			if (AP.array.contain(Client.viewer.networks, obj.teams[i])){
				return true;
			}
		}
		
		return false;
	};
	
	
	this.isAppAdmin=function(appkey){
		if (!appkey && Client.base){
			appkey=Client.base.app;
		}
		
		if (Me.isSystemOwner()){
			return true;
		}
		
		if (AP.array.single(Client.viewer.sas, function(app){
			return app==appkey || app==appkey+".admin";
		})){
			return true;
		}
		
		return false;
	};
	
	
	this.isAssigned=function(obj){
		return (parseInt(Client.viewer.id)==parseInt(obj.assign_to));
	}
	
	
	this.isCreator=function(obj){
		if (!obj || !obj.user_id){
			return;
		}
		return (parseInt(Client.viewer.id)==parseInt(obj.user_id));
	}
	
	this.findObject=function(objs){
		for (var i=0; i<objs.length; i++){
			if (AP.data.isString(objs[i])){
				if (objs[i]==Client.viewer.username){
					return objs[i];
				}
			}else{
				if (objs[i].username==Client.viewer.username){
					return objs[i];
				}	
			}
		}
		
		return null;
	};
	
	
	this.getDirectReports=function(user){
		return AP.array.filter(Client.people, function(e){
			return AP.array.contain(e.manager, user.username);
		});
	};
	
	
	this.getManagers=function(){
		return People.collect(Client.viewer.manager);
	};
	
	
	this.join=function(hid, token){
		AP.confirm("Are you sure that you want to join this team?", function(){
			AP.post("api/network/member/join",{hid: hid, token: token}, function(code){
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("You've joined the team successfully!", function(){
					AP.refresh();
				});
			});
		});
	};
	
	
	this.favor=function(obj){
		return AP.array.contain(Client.favors, obj, function(elem, xobj){
			if (AP.data.isInt(elem)){
				return elem && elem==xobj.id;
			}
			return (elem && elem.hid && elem.hid==xobj.hid);
		});
	};
	
	
	this.setFavorite=function(id, callback){
		var data={};
		var identify=id;
		if (AP.data.isObject(id)){
			identify=id.hid;
			data={'id': id.id, hid: id.hid, token: id.token, object: 1};
		}else{
			data={id: id};
		}
		
		UI.ajaxShow();
		AP.post("api/me/favorite", data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			Client.favors=code.favors;
			if (AP.data.isObject(id)){
				Menu.buildFavorLists();
			}
			
			AP.fire("favor-"+identify);
			
			if (callback){
				callback(code.favors);	
			}
		});
	};
	

	
	this.getFavorites=function(){
		var r=[];
		for (var i=Client.favors.length-1; i>=0; i--){
			var id=Client.favors[i];
			if (AP.data.isObject(id)){
				r.push(id);
			}else{
				var team=Network.get(id);
				if (team){
					r.push(team);
				}	
			}
		};
		return r;
	};
	
	
	
	this.arrangeFavorites=function(id, callback){
		var teams=this.getFavorites();
				
		var options=[];
		for (var i=0; i<teams.length; i++){
			if (teams[i].ref && teams[i].ref==1){
				options.push({id: teams[i].hid, "label": teams[i].name, sublabel: teams[i].type+"", data: teams[i]});
			}else{
				options.push({id: teams[i].id, "label": teams[i].name, "sublabel": "/"+teams[i].path+"", data: teams[i]});
			}
		}
		
		
		UI.reorder(options, "api/me/favorite.reorder").callback(function(id, ord, code){
			Client.favors=code.favors;	
			Menu.buildFavorLists();
		},{"title":"Reorder favorites"});
	
	};
	
	
	this.removeFavorite=function(id, callback){
		var identify=id;
		if (AP.data.isObject(id)){
			identify=id.hid;
			data={hid: id.hid, token: id.token, object: 1};
		}else{
			data={id: id};
		}
		
		AP.post("api/me/favorite", {id: id, 'remove': 1}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.favors);
			AP.fire("unfavor-"+identify);
		});
	};
	
	
	this.logout=function(){
		AP.confirm("Are you sure that you want to logout now?", function(){
			return AP.redirect("a/logout?token="+Client.viewer.token);
		});
	};
	
	this.chooseColor=function(){
		var form=Form.create('color-fx',{'action':'api/me/color'})
		.row(
			Form.label({label: "Choose a color to inspire your working day<br><br>"}),
			Form.input({name: 'color', type:"colors", options:[
				{value:"1", label: "<div class='square box-alt1'><div class='square-in'></div></div>"},
				{value:"2", label: "<div class='square box-alt2'><div class='square-in'></div></div>"},
				{value:"3", label: "<div class='square box-alt3'><div class='square-in'></div></div>"},
				{value:"4", label: "<div class='square box-alt4'><div class='square-in'></div></div>"},
				{value:"5", label: "<div class='square box-alt5'><div class='square-in'></div></div>"},
				{value:"6", label: "<div class='square box-alt6'><div class='square-in'></div></div>"},
				{value:"7", label: "<div class='square box-alt7'><div class='square-in'></div></div>"},
				{value:"8", label: "<div class='square box-alt8'><div class='square-in'></div></div>"}
            ]}).value(Client.viewer.color)
		)
		.buttons([
		     {label: "Save", action: function(){
		    	 Form.submit("color-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    		 
		    		 if (Client.native){
		    			 Cache.set("color", code.color);
		    		 }
		    		 
		    		 Form.hide("color-fx");
		    		 UI.flash("Color set ...");
		    		 AP.refresh();
		    	 });
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("color-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings({block: true});
	
		Form.pop({id:'color-fx-dx', width: 600, label: 'Choose your favorite color'}).setForm(form).show();
	};
	
	
	this.arrangeTeams=function(){
		var options=[];
		for (var i=0; i<Client.networks.length; i++){
			var net=Client.networks[i];
			if (!AP.array.contain(Client.favors, net.id)){
				options.push({id: net.id, "label": net.name, "sublabel": "/"+net.path+""});	
			}
		}
		
		UI.reorder(options, "api/me/network/reorder").callback(function(id, ord){
			var $elem=$("#team-"+id);
			
			if (ord==-1){
				var $base=$elem.prev('.-team');
				
				if ($base && $base.length){
					$elem.insertBefore($base);
				}
			}else{
				var $base=$elem.next('.-team');
				if ($base && $base.length){
					$elem.insertAfter($base);
				}
			}
		});
	};
	
	
	this.chatWith=function(username){
		Chat.peer(username, "", true);
    	Context.hide();
	}
	
	this.addPost=function(){
		var form=Form.create('peer-post-fx',{'action':'api/update/post'})
		.warning("You are creating a <b>How to work with me</b> post. This will be shared to everyone.")
		.row(
			Form.label({label: "How to work with me"}),
			Form.input({name: 'name', "placeholder":"Enter a short title", role: "tag"})
		)
		.row(
			Form.label({label: "Full description"}),
			Form.input({name: 'content', type:'textarea', "placeholder":"The full description"}).css({height: '200px'})
		)
		.hiddens({
			"self":1
		})
		.buttons([
		     {label: "Save post", action: function(){
		    	 Form.submit("peer-post-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    		 
		    		 Form.hide("peer-post-fx");
		    		 UI.flash("Message sent");
		    		 
		    	 });
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("peer-mail-fx");
		     }, style:'cancel -rounded -passive-2'}
		]).settings({
			"block": true
		});
	
		
		Form.pop({id:'peer-post-fx-dx', width: 600, label: 'Add How-to-work-with-me'}).setForm(form).show().focus('name');
	};
	
	
	
	this.editOptions=function(){
		
		var options=[];
		
		if(Me.isSystemAdmin() && (Client.system.path == 'daily' || Client.system.path == 'uni')) {
		    options.push({
	            "label":"Edit title and unit info",
	            "icon":"v-card",
	            "action": function(){
	                Me.info.editUnit();
	            }
	        });
		}
		
		options.push({
			"label":"Edit primary account infos",
			"icon":"gear",
			"action": function(){
				Me.info.edit();
			}
		});
		
		
		options.push({
			"label":"Edit about me and other personal infos",
			"icon":"lightbulb",
			"action": function(){
				Me.info.editAdvanced();
			}
		});
		
		options.push({
			"label":"Edit social links (Facebook, Twitter, ...)",
			"icon":"feed",
			"action": function(){
				Me.info.editSocial();
			}
		});
		
		
		AP.actionMenu(options);
	};
	
	
	this.editUnitOptions=function(){
        var options=[];
        
        if(Me.isSystemAdmin() && (Client.system.path == 'daily' || Client.system.path == 'uni')) {
            options.push({
                "label":"Edit title and unit info",
                "icon":"v-card",
                "action": function(){
                    Me.info.editUnit();
                }
            });
        }
        AP.actionMenu(options);
    };
	
	this.profileInit=function(){
		if (Client.pageData.user && Client.pageData.user.username==Client.viewer.username){
			W.uploadable("#profile-bg-upload","api/me/bgupload", {}, function(code){
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Background updated ...");
				AP.xRefresh();
			});
		}
		
		changeBackground();
//		AP.rtimeout(function(){
//			changeBackground();
//		},10000);
		
	};
	
	this.canPostAnnouncement = function(network) {
	    var settings = "";
	    settings = Client.pageData.settings_team;
        if (settings) {
            var ann_extra = " " + settings.announcement_extra + " ";
            if (ann_extra.indexOf(" " + Client.viewer.username+" ")>= 0){
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
	};
	
	
	this.teamOptions=function(add_none){
		var opts= AP.select(Client.networks, function(e){
			return {label: e.name, value: e.id}
		});
		
		if (add_none){
			opts.unshift({label: "Please select a team", value:0});
		}
		
		return opts;
	};
	
	
	this.delegate=function(){
		var user=Client.viewer;
		var delegate=user.delegate;
		if (!delegate || !delegate.username){
			delegate={username:""};
		}
		
		var form=Form.create('edit-profile-fx',{'action':'api/me/delegate'})
		.row(
			Form.label({label: "Delegate to",sublabel: ""}),
			Form.input({name: 'username', "placeholder":"Type to tag", role:"tag"}).value("@"+delegate.username)
		)
		.row(
			Form.label({label: "From date",sublabel: ""}),
			Form.input({name: 'sdate', role:"date", placeholder:"From date"}).value(delegate.sdate)
		)
		.row(
			Form.label({label: "To date",sublabel: ""}),
			Form.input({name: 'edate', role:"date", placeholder:"To date"}).value(delegate.edate)
		)
		.buttons([
			 {label: "Save setting", action: function(){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess(code.message, function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 450, label: 'Delegation on leave'}).setForm(form).show();
		
	};

	
	
	this.isMemberOf=function(network){
		var obj=null;
		
		if (AP.data.isString(network)){
			obj=Network.getByPath(network);
		}else{
			obj=Network.get(network.id);	
		}
		return (obj!=null);
	};

	
	
	
	
	this.cimg=0;
	
	function changeBackground(){
		if (!Client.pageData.user.bg || !Client.pageData.user.bg.length){
			var image= Client.share_url+"/bg/"+(parseInt(Client.pageData.user.color)%4)+".jpg";
			$("#profile-bg").html("<img src='"+image+"'/>");
			return;
		}
		
		var image=getBackgroundImage();
		$("#profile-bg").html("<img src='"+image+"'/>");
	};
	
	
	function getBackgroundImage(){
		// Me.cimg++;
		if (!Client.pageData.user.bg || !Client.pageData.user.bg.length){
			return Client.share_url+"/bg/"+(parseInt(Client.pageData.user.color)%4)+".jpg";
		}
		
		// Me.cimg=Me.cimg%(Client.pageData.user.bg.length);
		var index=Client.pageData.user.bg.length-1;
		return Client.pageData.user.bg[index];
	};
};


Me.pref=function(key){
	return new PersonalPreference();
};

Base.pref=Me.pref;


function PersonalPreference(){
	/**
	 * @desc Get a preference by its key
	 */
	this.get=function(key, df){
		if (!df){
			df=null;
		}
		
		var obj=AP.log.getObject("_pref");
		if (!obj || obj.id!=parseInt(Client.viewer.id)){
			this.destroy();
			return df;
		}
		
		var rkey="k"+trueKey(key);
		if (rkey in obj){
			return obj[rkey];
		}
		
		return df;
	};
	
	
	/**
	 * @desc Set a preference by its key and value
	 */
	this.set=function(key, value){
		var obj=AP.log.getObject("_pref");
		if (!obj || obj.id!=parseInt(Client.viewer.id)){
			this.destroy();
			obj={id: Client.viewer.id};
		}
		
		obj["k"+trueKey(key)]=value;
		AP.log.setObject("_pref", obj);
		return true;
	};
	
	
	/**
	 * @desc Destroy the preference
	 */
	this.destroy=function(){
		if (localStorage){
			localStorage.removeItem("_pref");
		}
	};
	
	
	/**
	 * @desc Get all preferences
	 */
	this.all=function(){
		return obj=AP.log.getObject("_pref");
	};
	
	
	function trueKey(key){
		if (AP.data.isArray(key)){
			return key.join("_");
		}
		
		return key;
	};
	
};


var ACL=new function __ACL(){
	this.getClass=function(acl, key){
		if (acl[key] && parseInt(acl[key])){
			return " enabled";
		}
		
		return " forced-hidden";
	};
};


var SVG=new function __SVG(){
	
	this.extends=function(obj){
		for (var key in obj){
			this[key]=obj[key];
		}
	};
	
	
	this.add=function(obj){
		for (var key in obj){
			this[key]=obj[key];
		}
	};
	
	this.alias = function(main, alias){
		this[alias] = this[main];
	}
	
	this.fa=function(icon){
		return "<span class='ficon-"+(icon)+" ap-f14'></span>";
	};
	
	this.ap=function(icon){
		return "<span class='-ap icon-"+(icon)+" ap-f16'></span>";
	};
	
	// LIST OF ICONS
	
	this.align_right="<svg width='12' height='11' viewBox='0 0 12 11' xmlns='http://www.w3.org/2000/svg'><rect width='12' height='1' rx='0.5' transform='matrix(-1 0 0 1 12 0)'/><rect width='12' height='1' rx='0.5' transform='matrix(-1 0 0 1 12 5)'/><rect width='8' height='1' rx='0.5' transform='matrix(-1 0 0 1 12 10)'/></svg>";
	this.align_left="<svg width='12' height='11' viewBox='0 0 12 11' xmlns='http://www.w3.org/2000/svg'><rect width='12' height='1' rx='0.5'/><rect y='5' width='12' height='1' rx='0.5'/><rect y='10' width='8' height='1' rx='0.5'/></svg>";

	this.arrow_right="<svg width='5' height='10' viewBox='0 0 5 10' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M0.499999 1.20711L4.29289 5L0.499999 8.79289L0.499999 1.20711Z'/></svg>";
	this.arrow_down="<svg width='10' height='5' viewBox='0 0 10 5' xmlns='http://www.w3.org/2000/svg'><path fill-rule='evenodd' clip-rule='evenodd' d='M5 5L0 0L10 8.74228e-07L5 5ZM7.58579 1L2.41421 1L5 3.58579L7.58579 1Z'/></svg>";
	
	this.tag_left="<svg enable-background='new 0 0 512 512' height='512' viewBox='0 0 512 512' width='512' xmlns='http://www.w3.org/2000/svg'><path d='m367.528 257.61 106.442-144.057c4.787-6.48-.005-15.943-8.043-15.943h-267.126c-2.68 0-5.248 1.076-7.127 2.986l-150 152.417c-3.82 3.881-3.77 10.324.114 14.142l150 147.582c1.87 1.841 4.389 2.872 7.013 2.872h267.127c8.038 0 12.83-9.463 8.043-15.942zm-164.632 140-139.953-137.696 140.047-142.304h243.116l-99.054 134.057c-2.609 3.532-2.609 8.354 0 11.886l99.054 134.058h-243.21z'/></svg>";
	
	this.arrow_up="<svg enable-background='new 0 0 512 512' height='512' viewBox='0 0 512 512' width='512' xmlns='http://www.w3.org/2000/svg'><path d='m462.745 359.117c-.706-1.221 7.473 9.309-184.413-232.698-11.435-18.649-38.623-18.633-49.999.087-183.867 242.355-176.004 231.933-176.351 232.535-11.192 19.387 2.553 43.73 25.381 43.73h360c22.809 0 36.564-24.287 25.382-43.654zm-25.382 23.654h-360c-7.16 0-11.363-7.244-8.312-13.193 183.325-241.705 175.643-231.41 176.251-232.465 3.575-6.193 12.535-6.231 16.123-.014.609 1.054-7.533-9.383 184.292 232.483 2.964 5.906-1.145 13.189-8.354 13.189z'/></svg>";
};


var Currency=new function __Currency(){
	this.unit="đ";

	this.format=function(val){
		return AP.currency.formatVND(val);
		// return "<span class='cvalue'>"+(AP.data.numberFormat(val))+"</span><span class='cunit'>"+(this.unit)+"</span>";
	};
	
	this.full=function(val){
		return "<div class='cur'><b>"+(AP.data.numberFormat(parseInt(val)))+"</b> <span class='unit'>VND</span></div>";
	};
	
	this.compact=function(val){
		return "<div class='cur2'><b>"+(AP.data.numberFormat(parseInt(val)))+"</b> <span class='unit'>VND</span></div>";
	};
	
	this.get=function(val){
		return this.format(val);
	};
};


Base.importer=new function __BaseImporter(){
	
	this.dialog=function(opts){
		opts=$.extend({hiddens: {}, rows:[], data: [], preview: 1, grouping: 0}, opts);
		
		var form=Form.create('dialog-excel-fx',{action: opts.action});
		
		for (var i=0; i<opts.data.length; i++){
			var row=opts.data[i];
			form.row(
				Form.label({label: row.label}),
				Form.input({name: row.name, type: row.type, role: row.role?row.role:"", "placeholder": row.placeholder?row.placeholder:row.label})
			);
		}
		
		form.rowHidden(	
			Form.label({label: "File"}),
			Form.input({name: 'file', type: "file"})
		)
		
		form.row(	
			Form.label({label: "Choose Excel file"}),
			Form.input({name: 'file', type: "placeholder", id: "internal-excel"})
		).addClass("-active");
		

		for (var i=0; i<opts.rows.length; i++){
			form.row(	
				Form.label({label: opts.rows[i].label||''}),
				Form.input({name: opts.rows[i].name, placeholder: opts.rows[i].placeholder, type: opts.rows[i].type}).value(opts.rows[i].value)
			);
		}

		var btn_label="Import";
		if (opts.preview){
			btn_label="Continue";
			opts.hiddens.preview=1;
		}
		
		form.hiddens(opts.hiddens);
		
		form.render(function(f){
			var html=getHTML(opts.columns);
			$("#internal-excel").html(html).data("grouping", opts.grouping);
			
			AP.dialog("dialog-excel-dx").balance();
			
			$("#internal-excel .excel-cols").sortable({
				items: ".ui-col",
				handle: ".sicon",
				helper: "clone",
				axis: "y",
				stop: function(event, ui){
					var names=[];
					$("#internal-excel .ui-col").each(function(index){
						$(this).find(".sicon").html(AP.data.zeroPrefix(index+1));
						names.push($(this).data("name"));
					});
					
					$("#internal-excel input[name=__excel_orders]").val(names.join(","));
				}
			});
			
			$("#internal-excel").closest(".row").addClass("-active");
			
			if (opts.preview){
				f.find("file").on("change", function(){
					if ($("#internal-excel .excel-table").length){
						$("#internal-excel .excel-live-preview").empty();
						f.find("preview").val(1);
						f.selector(".button.ok").html("Continue");
					}
				});
			}
		});
		
		form.buttons([
			{label: btn_label, action: function(){
				Form.submit("#dialog-excel-fx", function(code){
					if (!code.good()){
						return AP.alertError(code.message);
					}
			
					if (code.message=="FILE_PREVIEW"){
						previewRows(code.rows);
						return;
					}
					
					Form.hide("dialog-excel-fx");
					
					if (opts.callback){
						opts.callback(code);	
					}else{
						AP.alertSuccess(code.message, function(){
							AP.refresh();
						});
					}
					
				});
			}, style: 'ok -success -rounded -bold'},
			{label: "Cancel", action: function(){
				Form.hide("dialog-excel-dx");
			}, style:'cancel -passive-2 -rounded'}
		]);
	
		Form.pop({id: 'dialog-excel-dx', width: 600, label: opts.title, layout: "flat", closable: false}).setForm(form).show();
	};
	
	/**
	 * @desc Preview the role
	 */
	function previewRows(rows){
		UI.flash("Please preview before uploading");
		
		var cols={};
		$("#internal-excel .excel-cols .ui-col").each(function(){
			cols[$(this).data("name")]={
				label: $(this).find(".col-label").text(),
				width: $(this).data("width")
			}
		});
		
		$("#internal-excel .excel-live-preview").html(getRows(cols, rows));
		var ch=$("#internal-excel .excel-live-preview .excel-table").height();
		if (ch>200){
			ch=200;
			$("#internal-excel .excel-table-canvas").css({height: ch});
		}
		
		$("#internal-excel").closest("form").find("input[name=preview]").val(0);
		$("#internal-excel").closest("form").find(".button.ok").html("Import");
		
		AP.dialog("dialog-excel-dx").balance();
	};
	
	
	
	/**
	 * @desc Get columns HTML and support drag/drop
	 */
	function getHTML(cols){
		var names=[];
		
		var html=AP.render(cols, function(c, index){
			var w=1;
			names.push(c.name);
			if (c.width){
				w=parseFloat(c.width);
			}
			return "<div class='ui-col' data-name='"+(c.name)+"' data-width='"+(w)+"'> <div class='sicon'>"+(AP.data.zeroPrefix(index+1))+".</div> <div class='col-label'>"+(c.label)+"</div> <div class='col-key'>"+(c.name)+"</div> </div>";
		});
		
		var values=names.join(",");
		return "<div class='input data'> <input type='file' name='file'/> </div> <div class='hidden'><input type='hidden' name='__excel_orders' value='"+(values)+"'/></div> <div class='col-note'>Please choose an Excel file with column orders as below. View sample file?</div> <div class='excel-live-preview'></div> <div class='excel-cols scroll-y'> "+(html)+" </div>";
	};
	
	
	function getRows(cols, rows){
		var grouping=$("#internal-excel").data("grouping");
		
		var header = '';
		var tw=48;
		
		for (var key in cols){
			var c=cols[key];
			var w=parseFloat(c.width)*200;
			
			header+= "<div class='th' style='width: "+(w)+"px'>"+(c.label)+"</div>";
			tw+=w;
		};
		
		var real_index=0;
		var html = AP.render(rows, function(r, index){
			if (index==0){
				return '';
			}
			
			var temp='';
			if (grouping){
				if (!r.name){
					return '';
				}
				
				if (AP.word.suffix(r.name, ":")){
					return "<div class='tr-group'><div class='tdg'>"+(r.name)+"</div></div>";
				}
			}
			
			real_index++;
			
			for (var k in cols){
				var w=cols[k].width * 200;
				
				if (r[k]){
					temp+= "<div class='td' style='width: "+(w)+"px'>"+(r[k])+"</div>";
				}else{
					temp+="<div class='td' style='width: "+(w)+"px'></div>";
				}
			}
			
			return "<div class='tr'><div class='td index' style='width:48px'>"+(real_index)+"</div>"+(temp)+"</div>";
		});
		
		
		return "<div class='excel-table-title'>Preview of file</div> <div class='excel-table-canvas'> <div class='excel-canvas scroll-x scroll-y forced-scroll'> <div class='excel-table' style='width: "+(tw)+"px'> <div class='thead'> <div class='th index' style='width:48px'>#</div> "+(header)+" </div> <div class='tbody'> <div class='td index' style='width:48px'></div> "+(html)+" </div> </div> </div> </div>";
	};
	
};





var Company=new function __Company(){
	
	this.getRootNetwork=function(){
		for (var i=0; i<Client.units.length; i++){
			if (Network.root(Client.units[i])){
				return Client.units[i];
			}
		}
		
		return null;
	};
	
	
	
	this.createSystem=function(){
		var form=Form.create('create-team-fx',{action: 'api/company/system/create'})
		.row(
			Form.label({label: "System name",sublabel: "The name of the system"}),
			Form.input({name: 'name', "placeholder":"System name"})
		)
		.row(
			Form.label({label: "Administrator email",sublabel: "We will send a link to setup the new system via this email"}),
			Form.input({name: 'email', "placeholder":"The administrator email"})
		)
		.rowHidden(
			Form.label({label: "Directory",sublabel: "The relative directory from your domain <i>"+Client.system.domain+"</i>"}),
			Form.input({name: 'path', "placeholder":"Team directory", render:"<div class='input-render'>http://"+Client.system.domain+"/</div>"})
		)
		.rowHidden(
			Form.label({label: "Description",sublabel: "Short description about the team"}),
			Form.input({name: 'about', 'type':'textarea', "placeholder":"Short description"})
				.css({height: '80px'})
		)
		.buttons([
		     {label: "Create a new system", action: function(){
		    	 Form.submit("#create-team-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    	
		    		 Form.hide("create-team-fx");
		    		 AP.alertSuccess("An email was sent to the system administrator to initialize the setup process.", function(){
		    			 AP.toURL(code.network.path);
		    		 });
		    	 });
		     }, style: 'ok -success -rounded -bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("create-team-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Create a new team'}).setForm(form).show();
		
	};
	
	
	
	this.createNetwork = function(){
		var form=Form.create('create-team-fx',{action: 'api/company/team/create'})
		.row(
			Form.label({label: "Name",sublabel: "The name of the team. Just remember that people can work on multiple teams."}),
			Form.input({name: 'name', "placeholder":"Team name"})
		)
		.row(
			Form.label({label: "Directory",sublabel: "The relative directory from your domain <i>"+Client.system.domain+"</i>"}),
			Form.input({name: 'path', "placeholder":"Team directory", render:"<div class='input-render'>http://"+Client.system.domain+"/</div>"})
		)
		.rowHidden(
			Form.label({label: "Description",sublabel: "Short description about the team"}),
			Form.input({name: 'about', 'type':'textarea', "placeholder":"Short description"})
				.css({height: '80px'})
		)
		.row(
			Form.label({label: "Membership", sublabel: "How people can view and join the team?"}),
			Form.input({name: 'type', 'type':'list', options: [
			    {value: 1, "label":"Public membership", "sublabel":"Everyone can see the team and join"},
			    {value: 3, "label":"Restricted membership", "sublabel":"The team is invisible to everyone and people outside can join by invitation only"}
			]}).value(1)
		)
		.row(
			Form.label({label: "Is this team official?", sublabel: "Official team will be visible to everyone in the organization chart (but only its members can view and read contents)"}),
			Form.input({name: 'official', 'type':'list', options: [
			    {value: 0, "label":"Not official", "sublabel":"This is a private team and will not be linked to the organization chart"},
			    {value: 1, "label":"It's an official team", "sublabel":"This is an official team and it will be linked to the organization chart"}
			]}).value(0)
		)
		.rowHidden(
			Form.label({label: "Set parent team", sublabel: "Select a parent unit of this team in the organization chart"}),
			Form.input({name: 'parent', 'type':'select', options: Company.chart.asOptions()})
		)
		.render(function(fobj){
			this.find('official').change(function(){
				var val=parseInt($(this).val());
				if (val==1){
					fobj.findRow('parent').show();
					fobj.findRow('leader').show();
				}else{
					fobj.findRow('leader').hide();
					fobj.findRow('parent').hide();
				}
			});
		})
		.hiddens(
			{
				token:Client.system.token
			}
		)
		.buttons([
		     {label: "Create a new team", action: function(){
		    	 Form.submit("#create-team-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    	
		    		 Form.hide("create-team-fx");
		    		 AP.alertSuccess("A new team was just created", function(){
		    			 AP.toURL(code.network.path, function() {
		    			     AP.refresh();
		    			 });
		    		 });
		    	 });
		     }, style: 'ok -success -rounded -bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("create-team-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Create a new team'}).setForm(form).show();
		
	};
	
	
	
	this.searchNetwork=function(){
		var options=[];
		for (var i=0; i<Client.networks.length; i++){
			options.push({label: Client.networks[i].name, data: Client.networks[i]});
		}
		
		AP.selectAction(options, function(e){
			AP.toURL(e.data.path);
		},{filter: true, label:"Search for a team"});
	};
	
	
	
	this.editNetwork = function(network){
		var form=Form.create('create-team-fx',{action: 'api/company/team/edit'})
		.row(
			Form.label({label: "Name",sublabel: "The name of the team. Just remember that people can work on multiple teams."}),
			Form.input({name: 'name', "placeholder":"Team name"}).value(network.name)
		)
		.row(
			Form.label({label: "Directory",sublabel: "The relative directory from your domain <i>"+Client.system.domain+"</i>"}),
			Form.input({type: 'fake', name: 'path', "placeholder":"Team directory", render:"<div class='input-render'>http://"+Client.system.domain+"/</div>"}).value("/"+network.path)
		)
//		.row(
//			Form.label({label: "Description",sublabel: "Short description about the team"}),
//			Form.input({name: 'about', 'type':'textarea', "placeholder":"Short description"})
//				.css({height: '80px'})
//		)
		.rowHidden(
			Form.label({label: "Membership", sublabel: "How people can view and join the team?"}),
			Form.input({name: 'type', 'type':'list', options: [
			    {value: 1, "label":"Public membership", "sublabel":"Everyone can see the team and join"},
			    {value: 3, "label":"Restricted membership", "sublabel":"The team is invisible to everyone and people outside can join by invitation only"}
			]}).value(network.type),
			!Network.root(network)
		)
		.rowHidden(
			Form.label({label: "Is this team official?", sublabel: "Official team will be visible to everyone in the organization chart (but only its members can view and read contents)"}),
			Form.input({name: 'official', 'type':'list', options: [
			    {value: 0, "label":"Not official", "sublabel":"This is a private team and will not be linked to the organization chart"},
			    {value: 1, "label":"It's an official team", "sublabel":"This is an official team and it will be linked to the organization chart"}
			]}).value(network.official)
		)
		.rowHidden(
			Form.label({label: "Set team leader", sublabel: "Please set the team leader"}),
			Form.input({name: 'leader', 'type':'text', "role":"user", placeholder: "Please set the team leader"}).value("@"+network.leader.username)
		)
		.rowHidden(
			Form.label({label: "Set parent team", sublabel: "Select a parent unit of this team in the organization chart"}),
			Form.input({name: 'parent', 'type':'select', options: Company.chart.asOptions()}).value(network.parent_id)
		)
		.render(function(fobj){
//			this.find('official').change(function(){
//				var val=parseInt($(this).val());
//				if (val==1){
//					fobj.findRow('parent').show();
//					fobj.findRow('leader').show();
//				}else{
//					fobj.findRow('parent').hide();
//					fobj.findRow('leader').hide();
//				}
//			}).change();
		})
		.hiddens({
			hid:network.hid,
			token: network.token
		})
		.buttons([
		     {label: "Edit team", action: function(){
		    	 Form.submit("#create-team-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    	
		    		 Form.hide("create-team-fx");
		    		 AP.alertSuccess("The user group info was just changed", function(){
		    			 AP.refresh();
		    		 });
		    	 });
		     }, style: 'ok -success -rounded -bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("create-team-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 400, label: 'Edit user group'}).setForm(form).show();
		
	};
	
	
	
	this.closeNetwork=function(network){
		AP.confirm("Are you sure that you want to close this team?", function(){
			AP.hideAlert();
			AP.ajaxShow();
			
			AP.post("api/company/team/close",{hid: network.hid, token: network.token}, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Team just closed!");
				AP.refresh();
			});
		});
	};
	
	
	

	this.openNetwork=function(network){
		AP.confirm("Are you sure that you want to open this team?", function(){
			AP.hideAlert();
			AP.ajaxShow();
			
			AP.post("api/company/team/open",{hid: network.hid, token: network.token}, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Team just reopened!");
				AP.refresh();
			});
		});
	};
	
	
	this.invite=function(){
		Company.member.inviteDialog();
	};
	
	
	this.inviteList=function(content, callback, error){
		AP.post("api/company/invite",{list: 1, emails: content}, function(code){
			if (!code.good()){
				if (error){
					error(code.message);
				}
				return AP.alertError(code.message);
			}
			
			callback(code.emails);
		});
	};
	
	
	this.showPublicTeams=function(){
		AP.ajaxShow();
		AP.post("api/company/team/public", {}, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			
			var actions=AP.select(code.teams, function(e){
				if (AP.array.findObj(Client.networks, e.id)){
					return {label: e.name, sublabel: "/"+e.path+" &middot; <i class='opt-80'>You joined this team</i>", "icon":"unlocked", path: e.path}
				}else{
					return {label: e.name, sublabel: "/"+e.path, "icon":"unlocked", path: e.path}	
				}
			});
			
			
			AP.selectAction(actions, function(act){
				AP.toURL(act.path);
			},{title: "Public teams @ "+Client.system.name, filter: true})
			
			
		});
	};
	
	
	
	this.showAllTeams=function(){
		AP.ajaxShow();
		AP.post("api/company/team/all", {}, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			
			var actions=AP.select(code.teams, function(e){
				e.label=e.name;
				e.sublabel="/"+e.path;
				return e;
			});
			
			
			AP.selectAction(actions, function(act){
				
				var menu=[];
				menu.push({label: "Edit this team", "icon":"pencil", action: function(){
					Company.editNetwork(act);
				}});
				
				
				if (act.status==-1 || act.status=="-1"){
					menu.push({label: "Open this team", "icon":"open_in_browser", action: function(){
						Company.openNetwork(act);
					}});
				}else{
					menu.push({label: "Close this team", "icon":"close", action: function(){
						Company.closeNetwork(act);
					}});
				}
				
				
				AP.actionMenu(menu);
				
			},{title: "Manage teams", filter: true})
			
			
		});
	};
	
	
	
	this.settings=function(){
		var admin=Me.isSystemAdmin();
		if (!admin){
			return AP.toURL("home");
		}
		
		var options=[];
		
		options.push({"label":"Mời thêm thành viên", "icon":"add2", action: function(){
			Company.invite();
		}});
		
		options.push({"label":"Tùy chọn hệ thống", "icon":"cog3", action: function(){
			Company.preference();
		}});
		
		options.push({"label":"Tùy chọn hệ thống email notification", "icon":"envelope3", action: function(){
			Company.emailPreference();
		}});
		
		options.push({"label":"Điều khoản sử dụng WorkTime nội bộ", "icon":"file-text", action: function(){
            Company.tos();
        }});
		
		AP.actionMenu(options);
	
	};
	
	
	
	this.preference=function(){
		UI.setting("System settings")
		.add({
			title: "Hiển thị tên đầy đủ hay username?", 
			options: {"username":"Username","fullname":"Fullname"}, 
			value: Client.system.settings.name,
			name:"name",
			url: "api/company/setting/"+Client.system.hid
		})
		.add({
			title: "Cho phép thành viên chỉnh sửa title (chức vụ)?", 
			options: {"yes":"Yes","no":"No"}, 
			value: Client.system.settings.title,
			name:"title",
			url: "api/company/setting/"+Client.system.hid
		})
		.show();
	};

	
	
	this.getTeam=function(id){
		return AP.array.findObj(Client.units, id);
	};
	
};
 

Company.chart=new function __CompanyChart(){
	this.__built=false;
	this.inverses={};
	this.xcounter=0;
	this.root={fake: 1, level: 0, nodes: [], name: "Root"};
	this.extendedRoot={fake: 1, level: 0, nodes: [], name: "ExtRoot"};
	this.roots=[];
	
	this.getRoot=function(){
		if (!this.built()){
			this.buildChart();
		}
		if (!this.roots.length){
			return [];
		}
		
		return this.roots[0];
	};
	
	this.buildChart=function(){
		var networks=Client.units;
		
		networks=removePersonalBus(networks);
		initNodesArray(networks);
		
		this.roots=getRoots(networks);
		for (var i=0; i<this.roots.length; i++){
			setChildren(this.roots[i]);
		}
		
		this.root.nodes=this.roots;
		this.extendNetwork();
		this.__built=true;
	};
	
	
	this.extendNetwork=function(){
		this.extendedRoot={fake: 1, level: 0, nodes: [], name: "Extended Root"};
		this.extendedRoot.nodes=this.root.nodes.slice(0);
		
		
		for (var i=0; i<Client.units.length; i++){
			var test=AP.array.findObj(Client.units, Client.units[i].id);
			if (test){
			}else{
				Client.units[i].level=0;
				Client.units[i].parent_id=0;
				this.extendedRoot.nodes.push(Client.units[i]);
			}
		}
	};
	
	
	
	this.asOptions=function(node){
		if (!this.built()){
			this.buildChart();
		}
		
		if (!node){
			node=this.root;
		}
		
		var arr=[];
		getSelectArray(node, arr);
		
		return arr;
	};
	
	
	this.asExtendedOptions=function(){
		if (!this.built()){
			this.buildChart();
		}
		return this.asOptions(this.extendedRoot);
	}
	
	
	this.built=function(){
		return this.__built;
	};
	
	
	function removePersonalBus(teams){
		return AP.array.filter(teams, function(e){
			if (e.metatype=="user"){
				return null;
			}
			return e;
		})
	};
	
	
	function initNodesArray(teams){
		Company.chart.inverses={};
		Company.chart.xcounter=0;
		
		for (var i=0; i<teams.length; i++){
			if (parseInt(teams[i].parent_id)){
				if (!Company.chart.inverses["n"+teams[i].parent_id]){
					Company.chart.inverses["n"+teams[i].parent_id]=[teams[i]];
				}else{
					Company.chart.inverses["n"+teams[i].parent_id].push(teams[i]);	
				} 
			}
		}
	};
	
	
	function getRoots(teams){
		var r=[];
		for (var i=0; i<teams.length; i++){
			if (!parseInt(teams[i].parent_id)){
				teams[i].level=0;
				r.push(teams[i]);
			}
		}
		
		return r;
	};
	
	function setChildren(root){
		Company.chart.xcounter++;
		if (Company.chart.xcounter>1000){
			return; // Not too much loop please
		}
		
		var nodes=Company.chart.inverses["n"+root.id];
		if (!nodes){
			nodes=[];
		}
		
		root.nodes=nodes;
		
		if (!root.nodes || !root.nodes.length){
			return;
		}
		
		for (var i=0; i<root.nodes.length; i++){
			root.nodes[i].level=root.level+1;
			setChildren(root.nodes[i]);
		}
	};
	
	
	function getSelectArray(node, arr){
		if (!node.fake){
			arr.push({label: "--".repeat(node.level)+" "+node.name, value: node.id});
		}
		
		if (!node.nodes || !node.nodes.length){
			return;
		}
		
		for (var i=0; i<node.nodes.length; i++){
			getSelectArray(node.nodes[i], arr)
		}
		
		return;
	};
	
	
	function getSelectOptions(node){
		var opt="<option value='"+node.id+"'>"+node.name+"</option>";
		if (node.fake){
			opt="";
		}
		
		if (!node.nodes || !node.nodes.length){
			return opt;
		}
		
		return opt+AP.render(node.nodes, function(e){
			return getSelectOptions(e);
		});
	}
};


Company.member=new function __WCompanyMember(){
	
	this.inviteDialog=function(){
		AP.alertError("We are sorry. Invitation by email is currently disabled. Please add account directly!");
		return;
		
		var form=Form.create('invite-fx',{'action':'api/company/invite'})
			.row(
				Form.label({label: "",sublabel: "Enter emails of people to be invited (line by line or separated by a commas). A secret link will be sent to those emails to help people sign up."}),
				Form.input({name: 'emails', type:"textarea", "placeholder":"List of emails to send invitation, seperated by spaces or new-lines"})
					.css({height: '80px'})
			)
			.hiddens({
				"list":1
			})
			.buttons([
			     {label: "Invite to join "+Client.system.name, action: function(){
			    	 Form.submit("#invite-fx", function(code){
			    		 if (!code.good()){
			    			 return AP.alertError(code.message);
			    		 }
			    		 Form.hide("invite-fx");
			    		 AP.alertSuccess("Invitations successfully sent to: <ul>"+AP.render(code.emails, function(e){
			    			 return "<li><b>"+e+"</b></li>";
			    		 })+"</ul>");
			    	 });
			     }, style: 'ok -success -rounded bold'},
			     {label: "Cancel", action: function(){
			    	 Form.hide("invite-fx");
			     }, style:'cancel -passive-2 -rounded'}
			]).settings({block: true});
		
		Form.pop({id:'invite-fx-dx', width: 600, label: 'Invite people to '+Client.system.name}).setForm(form).show();
		
	};
	
	
	this.inviteDialogTeamUp = function(){
        var form=Form.create('invite-fx',{'action':'api/company/invite'})
            .row(
                Form.label({label: "",sublabel: "Mời tối thiểu 03 thành viên cùng bạn tham gia vào hệ thống để làm việc trên các dự án. Một đường link bí mật sẽ được gửi tới email thành viên được mời hỗ trợ thành viên đó đăng ký tham gia hệ thống."}),
                Form.input({name: 'emails', type:"textarea", "placeholder":"Danh sách email gửi thư mời tham gia hệ thống. Mỗi email một dòng hoặc cách nhau bởi dấu phẩy"})
                    .css({height: '80px'})
            )
            .hiddens({
                "list":1
            })
            .buttons([
                 {label: "Mời tham gia "+Client.system.name, action: function(){
                     Form.submit("#invite-fx", function(code){
                         if (!code.good()){
                             return AP.alertError(code.message);
                         }
                         Form.hide("invite-fx");
                         AP.alertSuccess("Thư mời đã được gửi thành công tới: <ul>"+AP.render(code.emails, function(e){
                             return "<li><b>"+e+"</b></li>";
                         })+"</ul>");
                     });
                 }, style: 'ok -success -rounded bold'},
                 {label: "Bỏ qua", action: function(){
                     Form.hide("invite-fx");
                 }, style:'cancel -passive-2 -rounded'}
            ]).settings({block: true});
        
        Form.pop({id:'invite-fx-dx', width: 600, label: 'Mời thành viên tham gia '+Client.system.name}).setForm(form).show();
        
    };
    
    this.inviteDialogTeamUpOnBoard = function(){
        var form=Form.create('invite-fx',{'action':'api/company/invite'})
            .row(
                Form.label({label: "",sublabel: "Mời tối thiểu 03 thành viên cùng bạn tham gia vào hệ thống để làm việc trên các dự án. Một đường link bí mật sẽ được gửi tới email thành viên được mời hỗ trợ thành viên đó đăng ký tham gia hệ thống."}),
                Form.input({name: 'emails', type:"textarea", "placeholder":"Danh sách email gửi thư mời tham gia hệ thống. Mỗi email một dòng hoặc cách nhau bởi dấu phẩy"})
                    .css({height: '80px'})
            )
            .hiddens({
                "list":1
            })
            .buttons([
                 {label: "Mời tham gia "+Client.system.name, action: function(){
                     Form.submit("#invite-fx", function(code){
                         if (!code.good()){
                             return AP.alertError(code.message);
                         }
                         Form.hide("invite-fx");
                         AP.alertSuccess("Thư mời đã được gửi thành công tới: <ul>"+AP.render(code.emails, function(e){
                             return "<li><b>"+e+"</b></li>";
                         })+"</ul>");
                     });
                 }, style: 'ok -success -rounded bold'},
                 {label: "Bỏ qua và xem dự án mẫu", action: function(){
                     return AP.redirect('demo');
                 }, style:'cancel -passive-2 -rounded'}
            ]).settings({block: true});
        
        Form.pop({id:'invite-fx-dx', width: 800, label: 'Mời thành viên tham gia '+Client.system.name}).setForm(form).show();
        
    };
	
	this.inviteInline=function(ref){
		UI.submitFrom(ref, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
   		 	}
			AP.alertSuccess("Invitation sent.");
		});
	};
	
	
	this.earlyInvite = function(ref) {
	    $('#onboard .board .users .user .input').each(function() {
	        $(this).removeClass("-alert");
	    });
	    $('#err_msg').html("").hide();
	    
	    Form.submit("#earlyinvite-form", function(code){
            if (!code.good()){
                if(!code.data) {
                    return AP.alertError(code.message);
                } else {
                    var test = code.data.split('|');
                    var field_alert = "user_" + test[1] + "_" + test[0];
                    
                    $('input[name="' + field_alert + '"]').parent().addClass("-alert");
                    
                    $('#err_msg').html(code.message).show();
                    
                    Layout.scrollTo('#onboard');
                    return;
                }
                
            } else {
                AP.toURL("projects", function() {
                    AP.refresh();
                });
            }
        });
	};
};


var People=new function ___People(){
	this.__ids=null;
	this.uids=null;
	
	this.get=function(username){
		if (AP.data.isInt(username)){
			return this.getID(username);
		}
		var user=__getUserByUsername(username);
		if (!user){
			return {id:0, error: 1, uid:0, __invalid: 1, username: username, name: username, error:1, "gavatar": Client.data_url+"/image/noavatar.png"}
		}
		
		return user;
	};
	
	
	this.getID=function(id){
		var user=__getUserByID(id);
		if (!user){
			return {id: id, error: 1, uid:0, __invalid: 1, name: (parseInt(id)?"Deactivated":"none"), username:"none", title:"No title", "gavatar": Client.data_url+"/image/noavatar.png"}
		}
		
		return user;
	};
	
	
	this.getUID=function(uid){
		var user=__getUserByUID(uid);
		if (!user){
			return {id: 0, error: 1, uid: uid, __invalid: 1, name: "none", username:"none", title:"No title"}
		}
		
		return user;
	};
	
	
	this.sysowners=function(){
		return AP.array.filter(Client.people, function(e){
			return parseInt(e.role)==13;
		});
	};
	
	
	this.collect=function(){
		var users=[];
		var list=flatten(arguments);
		
		for (var i=0; i<list.length; i++){
			if (!list[i]){
				continue;
			}
			
			var u=null;
			if (AP.data.isObject(list[i])){
				u=People.get(list[i].username);
			}else{
				u=People.get(list[i]);
			}
			
			if (u){
				users.push(u);
			}
		}
		
		for (var i=0; i<users.length; i++){
			users[i].keywords=users[i].username+" "+users[i].name+" "+users[i].title;
		}
		
		
		return AP.array.unique(users, function(e1, e2){
			return e1.username==e2.username;
		});
	};
	
	
	this.getList=this.collect;
	
	
	this.merge=function(a1, a2){
		var obj=[];
		obj=obj.concat(a1);
		obj=obj.concat(a2);
		
		return AP.array.unique(obj, function(e1, e2){
			return e1.username==e2.username;
		});
	};
	
	this.getPeople=function(usernames){
		return this.collect(usernames);
	};
	
	this.getPeopleInTeam = function(team_id){
		var d=[];
		for (var i=0; i<Client.people.length; i++){
			if (AP.array.contain(Client.people[i].networks, team_id)){
				d.push(Client.people[i]);
			}
		}
		
		return d;
	};
	
	this.getPeopleInNetworks=function(networks){
		var r=[];
		for (var i=0; i<Client.people.length; i++){
			if (inNetworks(Client.people[i], networks)){
				r.push(Client.people[i]);
			}
		}
		
		return r;
	};
	
	this.isMemberOf=function(network){
		var obj= AP.array.find(Client.units, function(e){
			if (AP.data.isObject(network)){
				return e.id==network.id;	
			}
			
			return e.id==network;
		});
		
		return obj;
	};
	
	
	this.isDeactivated=function(user){
		if (!parseInt(user.uid)){
			return true;
		}
		
		return false;
	};
	
	
	/**
	 * @desc Export a list of users or usernames to id
	 */
	this.ids=function(users){
		var ids=[];
		for (var i=0; i<users.length; i++){
			var u=users[i];
			if (AP.data.isObject(u)){
				ids.push(u.id);
			}else if (AP.data.isString(u)){
				var temp=People.get(u);
				if (temp && !temp.error){
					ids.push(temp.id);
				}
			}else{
				ids.push(u);
			}
		}
		
		return ids;
	};
	
	
	function flatten(params){
		var u=[];
		for (var i=0; i<params.length; i++){
			if (AP.data.isArray(params[i])){
				u=u.concat(params[i]);
			}else{
				u.push(params[i]);
			}
		}
		return u;
	};
	
	
	
	function __getUserByID(id){
		if (!People.__ids){
			People.__ids=[];
			
			for (var i=0; i<Client.people.length; i++){
				People.__ids["uid-"+Client.people[i].id]=Client.people[i];
			}
		}
		
		if (!People.__ids["uid-"+id]){
			return null;
		}
		
		return People.__ids["uid-"+id];
	};
	
	
	
	function __getUserByUID(id){
		if (!People.uids){
			People.uids=[];
			
			for (var i=0; i<Client.people.length; i++){
				People.uids["uid-"+Client.people[i].uid]=Client.people[i];
			}
		}
		
		if (!People.uids["uid-"+id]){
			return null;
		}
		
		return People.uids["uid-"+id];
	};
	
	
	function inNetworks(person, networks){
		var mine=person.networks;
		for (var i=0; i<mine.length; i++){
			if (networks.indexOf(mine[i])!=-1){
				return true;
			}
		}
		
		return false;
	};
};



var Guest = new function __Guest(){
	this.addAccount=function(context, app){
		var data = {id: context.id, app: app};
        
        var form = Form.create('fly-proj-addmember-fx',{'action': "api/guest/add"})
        .row(
            Form.label({label: "Họ và tên *"}),
            Form.input({name: 'name', "placeholder":"Họ và tên khách hàng"})
        )
        .row(
            Form.label({label: "Địa chỉ email *"}),
            Form.input({name: 'email', "placeholder":"Email của khách hàng"})
        )
         .row(
            Form.label({label: "Username *"}),
            Form.input({name: 'username', "placeholder":"Username của khách hàng (dùng để @tag nhanh)"})
        )
        .buttons([
             {label: "Thêm tài khoản khách hàng", action: function(){
                 Form.submit("#fly-proj-addmember-fx", function(code){
                     if (!code.good()){
                         return AP.alertError(code.message);
                     }
                     
                     Form.hide("fly-proj-addmember-fx");
                     
                     UI.flash("Đã thêm tài khoản ...");
                     
                     AP.xRefresh();
                 })
             }, style: 'ok -success -rounded bold'},
             {label: "Hủy", action: function(){
                 Form.hide("fly-proj-addmember-fx");
             }, style:'cancel -passive-2 -rounded'}
        ]).hiddens(data);
        
        Form.pop({width: 420, label: 'Thêm tài khoản khách hàng', layout: 'flat'}).setForm(form).show().focus('followers');
	}
}



var UserGroup=new function __UserGroup(){
	this.__built=false;
	this.__ids={};
	this.__uds={};
	
	
	this.build=function(){
		this.__built=true;
		for (var i=0; i<Client.units.length; i++){
			this.__ids["i_"+Client.units[i].id]=Client.units[i];
			this.__uds["u_"+Client.units[i].path]=Client.units[i];
		}
	};
	
	this.get=function(id){
		if (!this.__built){
			this.build();
		}
		
		
		if (AP.data.isObject(id) && id.id){
			return this.get(id.id);
		}
		
		if (AP.data.isInt(id)){
			if (this.__ids["i_"+id]){
				return this.__ids["i_"+id];
			}
			
			return null;
			
			// return AP.array.findObj(Client.units, id);	
		}
		
		if (this.__uds["u_"+id]){
			return this.__uds["u_"+id];
		}
		
		return null;
		
//		return AP.array.single(Client.units, function(e){
//			return e.path==id;
//		});
	};
};



// BACKWARD COMPATIBLE
var UserTeam=UserGroup;
 

var Clog=new function __WLog(){
	this.log=function(key, value){
		$.cookie(key, value,{expires: 7*24*3600, path:'/', domain: Client.domain});
	};
	
	
	this.getLog=function(key){
		return $.cookie(key);
	};
	
	
	this.removeLog=function(key){
		return $.cookie(key, null);
	};
	
	this.setCookie=this.log;
	this.getCookie=this.getLog;
	this.removeCookie=this.removeLog;
	
	this.setAppCookie=function(key, value){
		if (Client.viewer && Client.viewer.id){
			$.cookie(key, value,{expires: 7*24*3600, path:'/', domain: Client.base.app+"."+Client.domain});	
		}
	};
	
	
	this.getAppCookie=this.getLog;
	this.clearAppCookie=this.removeLog;
	
	
	/**
	 * @desc Set a val to local storage (array)
	 * @example set("prefs", 1); // prefs -> [1]
	 * set("prefs", 2); // prefs -> [1, 2]
	 * set("prefs", 3); // prefs -> [1, 2, 3]
	 */
	this.set=function(key, val){
		var item=localStorage.getItem(key);
		if (!item){
			item=[];
		}else{
			item=JSON.parse(item);
		}
		
		var found=false;
		for (i=0; i<item.length; i++){
			if (AP.data.equal(item[i],val)){
				item.splice(i,1);
				item.unshift(val);
				found=true;
				break;
			}
		}
		
		if (!found){
			item.unshift(val);	
		}
		
		localStorage.setItem(key,JSON.stringify(item));
		
	};
	
	
	this.setAdv=function(key, obj){
		var item=localStorage.getItem(key);
		if (!item){
			item=[];
		}else{
			item=JSON.parse(item);
		}
		
		var found=false;
		for (i=0; i<item.length; i++){
			if (AP.data.equal(item[i].id,obj.id)){
				item.splice(i,1);
				item.unshift(obj);
				found=true;
				break;
			}
		}
		
		if (!found){
			item.unshift(obj);	
		}
		
		localStorage.setItem(key,JSON.stringify(item));
	};
	
	
	this.get=function(key){
		var item=localStorage.getItem(key);
		if (!item){
			item=[];
		}else{
			item=JSON.parse(item);
		}
		
		return item;
	};
	
	
	this.setObject=function(key, obj){
		localStorage.setItem(key, JSON.stringify(obj));
	};
	
	
	this.getObject=function(key){
		var item=localStorage.getItem(key);
		if (!item){
			item={};
		}else{
			item=JSON.parse(item);
		}
		
		return item;
	};
	
	
	this.setValue=function(key, value){
		localStorage.setItem(key, value);
	};
	
	
	this.getValue=function(key){
		var item=localStorage.getItem(key);
		if (!item){
			item="";
		}
		
		return item;
	};
	
	
	
	this.setArray=function(key, obj){
		localStorage.setItem(key, JSON.stringify(obj));
	};
	
	
	this.getArray=function(key){
		var item=localStorage.getItem(key);
		if (!item){
			item=[];
		}else{
			item=JSON.parse(item);
		}
		
		if (!AP.data.isArray(item)){
			return [];
		}
		return item;
	};
	
};


AP.log = Clog;
 

var WTAjaxDialogEngine=new function __WTAjaxDialogEngine(){
	
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		$(dialog.canvas()).append("" +
			"<div class='__wtajaxdialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogtitle'>"+"&nbsp;</div>"+
							"<div class='__dialogcontent'><span style='font-size:32px' class='ficon-spinner ficon-spin'></span> <p>Processing</p></div>" +
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-45;
		var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
		if (t<50){
			t=50;
		}
		
		if (l<0){
			l=0;
		}
		
		$(wid+' .__dialogwrapper').css('top', t).css('left', l);
	};
};





var WTDialogEngine=new function __DialogEngine(){
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		$(dialog.canvas()).append("" +
			"<div class='__wtdialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogtitle unselectable' onclick=\"AP.dialog('"+dialog.id()+"').balance();\">"+"&nbsp;</div>"+
							"<div class='__dialogclose' onclick=\"AP.dialog('"+dialog.id()+"').hide();\"><span class='-ap icon-close'></span> </div>"+
							"<div class='__dialogcontent'></div>" +
							"<div class='__dialogbuttons unselectable'></div>"+
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-30;
		var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
		if (t<50){
			t=50;
		}
		
		if (Client.mobile){
			l=0;
		}
		
		$(wid+' .__dialogwrapper').css('top', t).css('left', l);
		$(wid+' .__dialogwrapper .__buttons .button:last').focus();
	};
};









var FormDialogEngine=new function __FormDialogEngine(){
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		$(dialog.canvas()).append("<div class='__fdialog' id='"+(dialog.w(true))+"'> <div class='__fdialogwrapper scroll-y forced-scroll'> <div class='__dialogwrapper'> <div class='__dialogwrapper-inner'> <div class='__dialogmain'> <div class='__dialogtitlewrap'> <div class='left relative'> <div class='__dialogtitle unselectable ap-xdot' onclick='AP.dialog(\""+(dialog.id())+"\").balance();'> &nbsp; </div> <div class='__dialogtitlerender tx-fill'></div> </div> <div class='clear'></div> </div> <div class='__dialogclose' onclick='AP.dialog(\""+(dialog.id())+"\").hide();'> <span class='-ap icon-close'></span> </div> <div class='__dialogcontent'></div> </div> </div> </div> </div> </div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-30;
		var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
		if (t<50){
			t=50;
			
			if (Client.mobile){
				t=0;
			}
		}
		
		$(wid).css("right", $.sbWidth());
		$(wid+' .__dialogwrapper').css('top', t).css('left', l);
		$(wid+' .__dialogwrapper .__buttons .button:last').focus();
	};
};






var FormDialogEngine2=new function __FormDialogEngine(){
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		$(dialog.canvas()).append("" +
			"<div class='__fdialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogtitlewrap nd'><div class='__dialogtitle unselectable' onclick=\"AP.dialog('"+dialog.id()+"').balance();\"></div></div>"+
							"<div class='__dialogclose' onclick=\"AP.dialog('"+dialog.id()+"').hide();\"><span class='-ap icon-close'></span> </div>"+
							"<div class='__dialogcontent'></div>" +
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-30;
		var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
		if (t<50){
			t=50;
		}
		
		$(wid+' .__dialogwrapper').css('top', t).css('left', l);
		$(wid+' .__dialogwrapper .__buttons .button:last').focus();
	};
	
	
	
};







var FormDialogMobile=new function __FormDialogMobile(){
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		$(dialog.canvas()).append("" +
			"<div class='__mobiledialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogclose' onclick=\"AP.dialog('"+dialog.id()+"').hide();\"><span class='-ap icon-close'></span> </div>"+
							"<div class='__dialogtitle unselectable ap-xdot'>"+"</div>" +
							"<div class='__dialogcontent'></div>" +
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		return this;
	};
	
	
	this.width=function(w){
		return;
	};
};
 

var UploadDialogEngine=new function __UploadDialogEngine(){
	inherits(this, WTDialogEngine);
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){		
		$(dialog.canvas()).append("" +
			"<div class='__uploaddialog unselectable' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogtitle'>"+"&nbsp;</div>"+
							"<div class='__dialogclose' onclick=\"$('#"+dialog.data('form')+"').multiUpload('close');\"><div class='entypo ticon-cancel'></div> </div>"+
							"<div class='__dialogcontent'></div>" +
							"<div class='__dialogbuttons unselectable'></div>"+
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
};
 


var Lang=new function _Lang(){	
	this.data={};
	this.set=function(data){
		this.data=data;
	}
	
	this.message=function(msg){
		if (this.data[msg]){
			return this.data[msg];
		}
		return "?"+msg+"";
	};
};


/**
 * @desc Procedural calls of lang.
 * @param key
 * @param flag
 */
function lang(key, flag){
	return key;
	
	if (!flag){
		flag=null;
	}
	var msg=Lang.message(key);
	if (flag=='ucf'){
		return AP.W.ucf(msg);
	}
	if (flag=='ucw'){
		return AP.W.ucw(msg);
	}
	if (flag=='upper'){
		return AP.W.upper(msg);
	}
	return msg;
};

function L(key){
	var lang=parseInt(Client.lang);
	if (lang==2){
		return Lang.message(key);
	}else{
		return key;
	}
};

 

var Context=new function __Context(){
	this.closeCallback=null;
	
	this._inited=false;
	this.init=function(){
		if (this._inited){
			return;
		}
		
		this._inited=true;
		$("#context-menu-close").on("contextmenu", function(e){
			e.preventDefault();
			Context.close();
		});
		
		$("#context-menu").css("right", -$.sbWidth());
		$("#context-menu-main").wrap("<div class='context-canvas-slider'></div>");
		
		$(document.body).delegate("input","blur", function(){
			setTimeout(function(){
				$("#context-tag > .tags").hide();
			},200);
		}).on("click", function(){
			setTimeout(function(){
				$("#context-tag > .tags").hide();
			},200);
		});
	}
	
	this.close=function(){
		$("#context-menu").hide();
		if (Context.closeCallback){
			Context.closeCallback();
		}
	};
	
	this.menu=function(ref, options){
		this.init();
		return new ContextMenu(ref, options);
	};
	
	
	/**
	 * @desc Binding a context-menu on-click action
	 */
	this.bind=function(ref, menu, options){
		
	};
	
	this.direct=function(x, y, options){
		this.init();
		return new ContextMenu({'x': x, 'y': y, type: 'click'}, {menu: options});
	}
	
	this.hide=function(){
		return this.close();
	};
	
	this.gen=new function __ContextGen(){
		this.close=function(){
			$("#context-general").hide();
		};
		
		this.hide=function(){
			return this.close();
		};
		
		this.show=function(elem){
			var $after=$("#context-general .context-main").next();
			if ($after && $after.length){
				$after.remove();
			}
			$(elem).insertAfter("#context-general .context-main").addClass('context-real');
			$("#context-general").show();
			$("#context-items").hide();
		};
		
		
		this.showID=function(id){
			var $obj=$("#context-items").find(id);
			if (!$obj.length){
				$(id).appendTo("#context-items").addClass('top').show();	
			}else{
				$("#context-items").children().removeClass('top').hide();
				$(id).addClass('top').show();
			}
			
			$("#context-general .context-real").hide();
			$("#context-items").show();
			$("#context-general").show();
		};
	};
	
	
	

	this.v2=function(opts){
		opts=$.extend({
			menu: [],
			width: 300
		}, opts);
		
		if (AP.data.isObject(opts) && !AP.data.isArray(opts)){
			opts.menu = opts.menu.context();
		}
		
		Context.direct(opts.left, opts.top, opts.menu);
		
		$("#context-menu-main").width(opts.width);
	};
	
	
};


function ContextMenu(ref, options){
	this.opts=$.extend({}, {top:30, left:20, menu:[]}, options);
	
	if (this.opts.close){
		Context.closeCallback=this.opts.close;
	}else{
		Context.closeCallback=null;
	}
	
	var top=0;
	var left=0;
	if (ref && ref.x && ref.y && ref.type && ref.type=="click"){
		top=ref.y;
		left=ref.x;
	}else if (options.x && options.y && options.type && options.type=="click"){
		top=options.y;
		left=options.x;
	}else{
		var offset=$(ref).offset();
		top=offset.top+this.opts.top;
		left=offset.left+this.opts.left;	
	}
	
	
	if (options.event){
		$(ref).on(options.event, function(){
			$("#context-menu").show();	
		});
	}else{
		$("#context-menu").show();
	}
	
	
	$("#context-menu-main").removeClass().css({'top': top, 'left': left});
	if (this.opts.layout){
		$("#context-menu-main").addClass(this.opts.layout);
	}
	
	if (options.width){
		$("#context-menu-main").width(options.width);
	}else{
		$("#context-menu-main").css("width", "300");
	}
	
	$("#context-menu-main .menu").cleanUp().html("<div class='items'></div>");
	
	var $menu=$("#context-menu-main .menu .items");
	
	for (var i=0; i<options.menu.length; i++){
		addMenuItem(options.menu[i], $menu, ref);
	};
	
	$menu.click(function(){
		Context.close();
	});
	
	var ch=$("#context-menu-main").height();
	var maxh=$(window).height();
	
	
	var cw=$("#context-menu-main").width();
	var maxw=$(window).width();
	var minh=$("#context-menu").height();
	
	
	if (top+ch+50>maxh){
		// top=top-ch-this.opts.top;
		// $("#context-menu-main").css("top", top);
		
		$("#contex-menu .context-menu-slider").css({height: top+ch+50})
	}
	

	
	if (left+cw>maxw){
		left=left-cw-this.opts.left+13;
		$("#context-menu-main").css("left", left);
	}
	
	
	function addMenuItem(opt, $menu, ref){
		if (!opt){
			return;
		}
		
		if (AP.data.isString(opt)){
			if (opt=='---0'){
				return;
			}
			
			var $last=$menu.children().last();
			if ($last && $last.hasClass("item-sep")){
				return;
			}
			
			if (opt=="|" || opt=="sep" || opt=="---" || /^(\-+)/.test(opt) || /^(\-+)([0-9]+)/.test(opt)){
				return $("<div class='item-sep'></div>").appendTo($menu);
			}
			
			$menu.append(opt);
			return;
		}
		
		if ('enabled' in opt){
			if (!opt.enabled){
				return;
			}
		}
		
		if (opt.type){
			if (opt.type=='sep'){
				return $("<div class='item-sep'></div>").appendTo($menu);	
			}
			
			if (opt.type=='html'){
				return $("<div class='item-html'>"+opt.html+"</div>").appendTo($menu);	
			}
		}
		
		if (!opt.css){
			opt.css='';
		}
		
		var icon='';
		if (opt.icon){
			if (opt.icon.substr(0,5)=="icon-"){
				icon="<span class='icon'><span class='-ap "+opt.icon+"'></span></span>";	
			}else if (AP.word.prefix(opt.icon, "ficon-")){
				icon="<span class='icon'><span class='"+opt.icon+" ap-f14'></span></span>";
			}else{
				icon="<span class='icon'><span class='-ap icon-"+opt.icon+"'></span></span>";
			}
		}else{
			opt.css+=" -no-icon";
		}
		
		if (opt.url){
			var eid=AP.uuid();
			var target='';
			if (opt.target && (opt.target=='_blank' || opt.target=='blank')){
				target="data-blank='1'";
			}
			
			if (opt.blank){
				target="data-blank='1'";
			}
			
			$menu.append("<div title='"+(opt.label)+"' class='ap-xdot item url "+(opt.css)+"' id='"+(eid)+"' data-url='"+(opt.url)+"' "+(target)+">"+(icon)+" "+(opt.label)+"</div>");
			
			if (opt.data && opt.data!=undefined){
				for (var key in opt.data){
					$("#"+eid).data(key, opt.data[key]);
				}
			}
			
			return;
		}
		
		var html= "<div class='item "+opt.css+"'>"+icon+opt.label+"</div>";
		return $(html).appendTo($menu).data('opt', opt).click(function(){
			Context.hide();

			var opt=$(this).data('opt');
			var action=opt.action;
			
			if (AP.data.isString(action)){
				return AP.toURL(action);
			}else{
				action.apply(ref, [opt, this]);
			}
		});
	};
};


(function($) {
    $.fn.setContextMenu = function(actions){
    	$(this).on("contextmenu", function(e){
    		var pos=$(this).offset();
    		var obj={x: e.clientX, y: e.clientY, type: 'click'};
    		e.preventDefault();
    		
    		Context.menu(obj, {
    			top: e.pageX-pos.top,
    			left: e.pageY-pos.left,
        		menu: actions
        	});	
    	});
    	
    };
 
}(jQuery));
 

var BC=new function __BC(){
	this.title=function(title){
		$("#bcanvas .__title").html(title);
	};
	
	this.side=function(side){
		$("#bcanvas .__side").html(side);
	};
	
	
	this.main=function(content){
		$("#bcanvas .__canvas").html(content);
	};
	
	this.show=function(){
		if (mobile()){
			$(document.body).addClass("xo");
			$("#document").hide();
		}
		
		$("#bcanvas").show().removeClass("__simple").addClass("__ontop");
		this.normal();
		
		if (!$("#bcanvas").hasClass('__init')){
			$("#bcanvas").addClass('__init');
			Layout.scrollable("#bside");
		}else{
			$("#bside").find(".scrollin").height("100%").css("width", $("#bside").width()+$.sbWidth());
		}
		
	};
	
	
	this.noSide=function(){
		$("#bcanvas").show().addClass("__simple");
	};
	
	this.hide=function(){
		$("#bcanvas").find(".__canvas").html("");
		$("#bcanvas").find(".__side").html("");
		$("#bcanvas").find(".__postbottom").html("");
		$("#bcanvas").fadeOut(200);
		
		if (mobile()){
			$(document.body).removeClass("xo");
			$("#document").show();
		}
	};
	
	
	
	this.extend=function(){
		$("#bcanvas").addClass("extended");
	};
	
	this.unextend=function(){
		$("#bcanvas").removeClass("extended");
	};
	
	this.normal=function(){
		$("#bcanvas").removeClass("extended");
	};
};




BC.ui=new function __BCUIx(){
	this.followers=function(obj){
		if (obj.followers.length<=6){
			return "<div class='list users'> <div class='li-title'>Followers</div> <div class='items'>"+AP.render(obj.followers, followerHTML)+"</div></div>";
		}else{
			return "<div class='list users'> <div class='li-title'>Followers</div> <div class='items'>"+AP.render(obj.followers, followerHTML)+"</div></div>";
		}
	};
	
	
	
	
	function followerHTML(user){
		return "<div class='li url' data-username='"+user.username+"'><div class='avatar avatar-40 rounded xo'>" +
				"<div class='image'><img src='"+AP.xthumb(user.gavatar)+"'></div>" +
			"</div></div>";
	}
};


var LiveChat=new function __LiveChat(){
	this.lc=null;
	
	this.init=function(room, canvas){
		this.lc=new LiveChatInstance(room, canvas);
		this.lc.build();
	};
	
	/**
	 * @desc Listen to message
	 */
	this.listen=function(){
		if (!Live){
			return;
		}
		
		Live.on("livechat.msg", function(data){
			if (!LiveChat.lc || !LiveChat.lc.room || LiveChat.lc.room.hid!=data.room.hid){
				return LiveChat.notis(data);
			}
			
			var room=data.room;
			var msg=data.message;
			
			var $box=$("#js-livechat-"+room.hid);
			if ($box.length){
				LiveChat.lc.prepend(msg); 
			}
		});
		
		AP.sys.on("page.pre.transition", function(){
			if (LiveChat.lc){
				LiveChat.lc=null;
				Live.emit("custom.room", {leave: 1});	
			}
		});
	};
	
	/**
	 * @desc Notification on data
	 */
	this.notis=function(data){
		if (!data.onlines || !data.message || !data.room){
			return;
		}
		
		
		var u=People.get(data.message.user_id);
		
		if (AP.array.contain(data.onlines, Client.viewer, function(e, f){
			return parseInt(e)==parseInt(f);
		})){
			return;
		}
		
		DN.show({
			title: data.room.name,
			icon: AP.thumb(u.gavatar),
			body: u.name+": "+data.message.content,
			tag: data.room.hid+"-"+data.message.id,
		});
	};
};


setTimeout(function(){
	LiveChat.listen();
}, 1000);


function LiveChatInstance(room, canvas){
	this.canvas=canvas;
	this.room=room;
	
	/**
	 * @desc Build livechat
	 */
	this.build=function(){
		var room=this.room;
		Live.emit("custom.room", room);
		
		$(this.canvas).data("livechat", this).data("room", this.room);
		initCanvas(this.canvas, room);
		
		UI.ajaxHide();
		var that=this;
		
		var $c=$(this.canvas);
		$c.data("livechat", that);
		
		AP.post("api/livechat/load", {hid: this.room.hid, token: this.room.token}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			for (var i=0; i< code.messages.length; i++){
				that.insert(code.messages[i]);
			}
		});
		
		
		$(this.canvas).find(".js-chat-input").enter(function(){
			var v=$.trim($(this).val());
			if (v && v.length){
				sendMessage(v, this);
			}
		});
		
		AP.uploadable($(this.canvas).find(".action.-file"), {
			action: "api/livechat/send",
			data: {hid: this.room.hid, token: this.room.token}
		}, function(code){
			if (!code.good()){
				$.log("ERROR_MSG");
			}
			
			that.prepend(code.msg);
		});
	};
	
	
	this.insert=function(msg){
		var html=getHTML(msg);
		
		var $c=$(this.canvas);
		var $last=$c.find(".messages .js-message").last();
		var compact=false;
		
		if (!$last || !$last.length){
			compact=false;
		}else{
			var uid=parseInt($last.data("uid"));
			var time=parseInt($last.data("time"));
			
			if (uid==parseInt(msg.user_id) && parseInt(msg.since)-time<300){
				compact=true;
			}
		}
		
		if (compact){
			$(html).appendTo($c.find(".messages")).addClass("-compact");
		}else{
			$(html).appendTo($c.find(".messages"));
		}
	};
	
	
	
	this.prepend=function(msg){
		var html=getHTML(msg);
		
		var $c=$(this.canvas);
		var $last=$c.find(".messages .js-message").first();
		var compact=false;
		
		if (!$last || !$last.length){
			compact=false;
		}else{
			var uid=parseInt($last.data("uid"));
			var time=parseInt($last.data("time"));
			
			if (uid==parseInt(msg.user_id) && parseInt(msg.since)-time<300){
				compact=true;
			}
		}
		
		$(html).prependTo($c.find(".messages"));
		
		if (compact){
			$last.addClass("-compact");
		}
	};
	
	
	
	
	/**
	 * @desc Init a livechat canvas
	 */
	function initCanvas(canvas, room){
		$(canvas).html("<div class='mt-canvas' id='js-livechat-"+(room.hid)+"'> <div class='mt-messages scrollable' data-autoscroll='1' data-autohide='1'> <div class='messages'></div> </div> <div class='mt-form'> <div class='actions'> <div class='action -file'><span class='-ap icon-uniF10A'></span> </div> <div class='action -submit'><span class='txt'>Send</span></div> </div> <div class='textarea'> <textarea name='msg' placeholder='Send message' class='js-chat-input'></textarea> </div> </div> </div>");
		
		$(canvas).addClass("js-livechat-wrapper");
		Layout.scrollable(canvas+" .scrollable");
		
		Tag.user($(canvas).find(".js-chat-input"), Client.people);
	};
	
	
	/**
	 * @desc sendMessage
	 */
	function sendMessage(msg, ref){
		var $canvas=$(ref).closest(".js-livechat-wrapper");
		var room=$canvas.data("room");
		
		UI.ajaxShow();
		AP.post("api/livechat/send", {content:msg, hid: room.hid, token: room.token}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			// Clean up
			cleanupForm(ref);
			// $canvas.data("livechat").prepend(code.msg);
			
			broadcast(code.msg, room, code.origin.followers);
		});
	};
	
	
	function broadcast(message, room, users){
		Live.emit("livechat.msg", {message:message, room: room, users: People.ids(users), metatype:"users"});
	};
	
	
	function getHTML(msg){
		var u=People.get(msg.user_id);
		
		var is_me='';
		if (parseInt(msg.user_id)==parseInt(Client.viewer.id)){
			is_me=' -me';
		}
		
		var content=msg.content;
		if (msg.metatype=="upload" && msg.attachment){
			content=getFile(msg);
		}else{
			content=UI.parse(content);
		}
		
		var html="<div class='message js-message"+(is_me)+"' data-id='"+(msg.id)+"' data-time='"+(msg.since)+"' data-uid='"+(msg.user_id)+"'> <div class='avatar '><div class='image'><img src='"+(AP.xthumb(u.gavatar))+"'/></div></div> <div class='text'> <div class='user'> <b class='url' data-username='"+(u.username)+"'>"+(u.name)+"</b> &middot; <span class='time'>"+(AP.time.ago(msg.since))+"</span> </div> <div class='content'>"+(content)+"</div> </div> </div>";
		
		return html;
	};
	
	
	function getFile(msg){
		var att=msg.attachment;
		var f=UI.file.icon(att.name);
		
		return "<div class='msg-file'> <div class='ficon'><img src='"+(Client.share_url)+"/m2/"+(f)+".svg'/></div> <div class='fname'> <span class='url' data-url=':file' data-file='"+(att.src)+"'>"+(att.name)+"</span> </div> <div class='finfo'>"+(UI.file.kb(att.size))+" &middot; "+(AP.time.ago(att.since))+"</div> </div>";
	};
	
	
	/**
	 * @desc Cleanup a form
	 */
	function cleanupForm(ref){
		var $f=$(ref).closest(".mt-form");
		$f.find("textarea").val("");
	};
};
 var App = new function __App(){
	
	this.admin = function(){
		return Me.isAppAdmin();
	};
	
	this.sysowner = this.sysOwner = function(){
		return Me.isSysowner();
	};
	
	this.admins = function(){
		return this.sub.admins();
	};
	
};



App.role = new function __AppRole(){
	
	this.prefs = function(opts){
		var html=AP.render(opts.roles, function(e){
			return getPref(e, opts.values);
		});
		
		$(opts.canvas).html("<div class='app-prefs'>"+(html)+"</div>");
		
		$(opts.canvas).find(".pref").each(function(){
			var api=$(this).data("api");
			var key=$(this).data("key");
			
			setPrefValue(this, key);
			$(this).find(".pref-value").click(function(){
				
			});
		});
	};
	
	
	/**
	 * @desc Config for users
	 */
	this.users = function(opts){
		var html=AP.render(opts.users, function(e){
			if (AP.data.isObject(e)){
				return getUserRoles(e, opts);	
			}else{
				var u=People.get(e);
				if (!u.error){
					return getUserRoles(u, opts);	
				}
			}
		});
		
		$("#js-user-roles").html("<div class='user-roles'>"+(html)+"</div>");
	};
	
	
	
	function getPref(e, values){
		var val=0;
		if ("value" in e){
			val=e.value;
		}else if (typeof(values[e.key]) != "undefined"){
			val=values[e.key];
		}
		
		val=parseInt(val);
		var icon='';
		if (e.icon){
			icon="<span class='pref-icon'>"+(e.icon)+"</span>";
		}
		
		return "<div class='pref "+(icon?' -p32':'')+"'> "+(icon)+" <div class='pref-name'>"+(e.label)+"</div> <div class='pref-info'>"+(e.label)+"</div> <div class='hidden'><input type='hidden' name'"+(e.key)+"' value='val'/></div> <div class='pref-value'> <div class='onoff "+(val?'-on':'-off')+" -small'></div> </div> </div>";
	};
	
	
	function setPrefValue(){
		
	};
	
	
	function getUserRoles(u, opts){
		var html=AP.render(opts.roles, function(r){
			return "<div class='uri' data-key='"+(r.key)+"'> <div class='uri-name'>"+(r.label)+"</div> <div class='uri-info'>"+(r.label)+"</div> <div class='uri-value'>"+(getValue(u, r))+"</div> </div>";
		});
		
		return "<div class='ur'> <div class='ur-header url' data-url=':collapse:parent'> <div class='ur-image'><img src='"+(AP.xthumb(u.gavatar))+"'/></div> <div class='ur-title'>"+(u.name)+"</div> <div class='ur-info'>"+(u.title)+"&nbsp;</div> </div> <div class='ur-body'>"+(html)+"</div> </div>";
	};
	
	
	function getValue(u, r){
		var html=AP.render(r.values, function(e){
			return "<option value='"+(e)+"'>"+(e)+"</option>";
		});
		
		return "<select name='ur-"+(u.username)+"'>"+(html)+"</select>"
	};
};


App.sub = new function __AppSub(){
	
	this.admins = function(){
		return Client.people.slice(10,20);
	};
	
};
if (!Client.networks){
	Client.networks = Client.units;
}

var Network=new  function __Network(){
	this.favorMe=function(){
		if (!Client.data.network){
			return;
		}
		
		if (Me.favor(Client.data.network)){
			var id=Client.data.network.id;
			Me.removeFavorite(id, function(fs){
				Client.favors=fs;
				UI.flash("Team removed to from favourite!");
				
				$("#team-"+id).removeClass("-favour").slideUp(150, function(){
					$(this).prependTo("#teams").slideDown(400);
				});
			});
		}else{
			var id=Client.data.network.id;
			Me.setFavorite(id, function(fs){
				UI.ajaxHide();
				Client.favors=code.favors;
				UI.flash("Team set to favourite!");
				$("#team-"+id).addClass("-favour").slideUp(150, function(){
					$(this).insertAfter("#menu .section.-favorite .last").slideDown(400);
				});
			});
		}
	};
	
	this.leave=function(){
		if (!Client.data.network){
			return;
		}
		
		if (this.root()){
			return AP.alertError("You can not leave the company.");
		}
		
		AP.confirm("Are you sure that you want to leave the team <b>"+Client.data.network.name+"</b> now? This action cannot be undone.", function(){
			AP.ajaxShow();
			AP.post("api/network/member/leave",{hid: Client.data.network.hid, token: Client.data.network.token}, function(code){
				AP.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("You've just left the team!", function(){
					AP.redirect("home");
				});
			});
		});
		
	};
	
	this.root=function(network){
		if (network){
			return AP.data.equal(network.type, this.type.types.root)
		}
		
		return Client.data.network && AP.data.equal(Client.data.network.type, this.type.types.root);
	};
	
	
	this.select=function(title, callback){
		if (!callback){
			callback=null;
		}
		
		var actions=[];
		for (var i=0; i<Client.networks.length; i++){
			var e=Client.networks[i];
			actions.push({id:e.id, hid: e.hid, token: e.token, label: e.name, name:e.name, sublabel: Client.system.domain+"/"+e.path+" &middot; "+e.num_people+" people", value: 1});
		}
		
		AP.selectAction(actions, function(action){
			if (callback){
				callback(action);
			}
		},{title: title});
	};
	
	
	this.invite=function(){
		if (this.root() || !Client.data.network){
			return Company.member.inviteDialog();
		}else{
			return this.member.inviteDialog();
		}
	};
	
	
	this.inviteList=function(content, callback, error){
		AP.post("api/network/member/invite",{list: 1, network: Client.data.network.id, token: Client.data.network.token, usernames: content}, function(code){
			if (!code.good()){
				if (error){
					error(code.message);
				}
				return AP.alertError(code.message);
			}
			
			callback(code.usernames);
		});
	};
	
	
	
	this.get=function(id){
		if (AP.data.isInt(id)){
			return AP.array.findObj(Client.networks, id);	
		}
		
		
		for (var i=0; i<Client.networks.length; i++){
			if (Client.networks[i].path==id){
				return Client.networks[i];
			}
		}
		
		return null;
	};
	
	
	this.getByPath=function(path){
		for (var i=0; i<Client.networks.length; i++){
			if (Client.networks[i].path==path){
				return Client.networks[i];
			}
		}
		
		return null;
	};
	
	
	this.integrate=function(){
		var form=Form.create('d-integrate-fx',{'action':'api/network/integrate'})
		.row(
			Form.noLabel(),
			Form.input({name: 'praise', "type":"checkbox-list", "placeholder":"", label: "Praise",sublabel: "Praise people for their great works."}).value(Network.appVal('praise'))
		)
		.row(
			Form.noLabel(),
			Form.input({name: 'video', "type":"checkbox-list", "placeholder":"", label: "Video conference",sublabel: "Video conference for your team. Via Google hangout!"}).value(Network.appVal('video'))
		)
//		.row(
//			Form.noLabel(),
//			Form.input({name: 'deal', "type":"checkbox-list", "placeholder":"", "label": "Deal", "sublabel":"No more trouble managing deals. <b>Deal</b> helps the team keep track of all activities, share notes, post follow-ups, and never fail at any deals."}).value(Network.appVal('deal'))
//		)
//		.row(
//			Form.noLabel(),
//			Form.input({name: 'kbase', "type":"checkbox-list", "placeholder":"", "label": "Knowledgebase", "sublabel":"Your team's knowledge at once place. <b>Knowledgebase</b> helps the team save and discuss about static team information such as company regulation, working code, etc."}).value(Network.appVal('kbase'))
//		)
		.row(
			Form.noLabel(),
			Form.input({name: 'wiki', "type":"checkbox-list", "placeholder":"", "label": "Wiki", "sublabel":"Collaborative team wiki. Great for company policies and code documentations."}).value(Network.appVal('wiki'))
		)
		.hiddens({
			network: Client.data.network.id,
			'token': Client.data.network.token
		})
		.buttons([
		     {label: "Save and init apps", action: function(){
		    	 Form.submit("d-integrate-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    	
		    		 Form.hide("d-integrate-fx");
		    		 
		    		 AP.xRefresh(function(){
		    			 UI.flash("App preferences saved");
		    		 });
		    		 
		    		 Client.pageData.network_apps=code.network_apps;
		    		 
		    	 });
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("d-integrate-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings({"block": true});
	
		Form.pop({id:'d-integrate-fx-dx', width: 720, 
			label: "Apps integration for "+Client.data.network.name,
		}).setForm(form).show().addClass("full-content").focus('usernames');
	};
	
	
	this.appVal=function(key){
		var id=Client.pageData.network_apps.indexOf(key);
		if (id==-1){
			return 0;
		}
		return 1;
	};
	
	
	this.settings=function(){
		var admin=false;
		if (Client.data.network && Me.isNetworkAdmin(Client.data.network)){
			admin=true;
		}
		
		
		if (admin){
			var options=[];
			options.push({"label":"Edit team name &amp; privacy", "icon":"cog", action: function(){
				Network.editSelf();
			}});
			
			options.push({"label":"Invite more people", "icon":"person_add", action: function(){
				Network.invite();
			}});
			
			options.push({"label":"Team preferences &amp; settings", "icon":"lock_outline", action: function(){
				Network.preference();
			}});
			
			
			options.push({"label":"My personal preferences", "icon":"favorite_outline", action: function(){
				Network.personalPreference();
			}});
			
			if (!Network.root()){
				if (Client.data.network && Client.pageData.settings_team.leave=="yes"){
					options.push({"label":"Leave the team now", "icon":"power_settings_new", action: function(){
						Network.leave();
					}});	
				}	
			}
			
			AP.actionMenu(options);
			return;
		}else{
			var options=[];
			options.push({"label":"My personal preferences", "icon":"favorite_outline", action: function(){
				Network.personalPreference();
			}});
			
			if (Client.data.network && Client.pageData.settings_team.leave=="yes"){
				options.push({"label":"Leave the team now", "icon":"power_settings_new", action: function(){
					Network.leave();
				}});
			}
			
			AP.actionMenu(options);
			return;
		};	
	};
	
	
	
	this.preference=function(){
		UI.setting("Team preferences &amp; settings")
		.add({
			title: "Who can create regular posts?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.update,
			name:"update",
			url: "api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can create new topics?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.topic,
			name:"topic",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can post announcements?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.announcement,
			name:"announcement",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Grant posting announcements permission to some extra users? <small><i>Note.</i> This is an exception.</small>", 
			options: ":custom:users", 
			value: Client.pageData.settings_team.announcement_extra,
			name:"announcement_extra",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can use tag <b>@all</b> to tag everyone?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.tagall,
			name:"tagall",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Share posts of this team to its members' home feeds? <small><i>Note.</i> Each member can also have his/her own preference.</small>", 
			options: {"yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.share,
			name:"share",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Allow team members to delete their own posts?", 
			options: {"yes":"Yes","no":"No"},
			value: Client.pageData.settings_team.delete_post,
			name:"delete_post",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Allow team members to leave? <small><i>Note.</i> If allowed, team members can leave the team by themselves. In any cases, team owners can remove members.</small>", 
			options: {"yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.leave,
			name:"leave",
			url:"api/network/setting/"+Client.data.network.hid,
		})
		.show();
	};
	
	
	
	
	this.personalPreference=function(){
		UI.setting("Personal preferences")
		.add({
			title: "Share posts from this team to my home's newsfeeds? <small>Note: Automatic means that this setting is based on the team's current setting.</small>", 
			options: {"auto":"Automatic","yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.update,
			name:"update",
			url: "api/network/preference/"+Client.data.network.hid
		})
		.show();
	};
	
	
	
	
	this.editSelf=function(){
		Company.editNetwork(Client.data.network);
	};
};Network.type=new function __NetworkType(){
	this.types={
		'head':13,
		'root':13,
		'office_public':1,
		'office_private':2,
		'office_restriced':3
	};
	
	this.typeName=function(type){
		if (AP.data.equal(type, this.types.head)){
			return "Head office";
		}
		
		if (AP.data.equal(type, this.types.office_public)){
			return "Public office";
		}
		
		if (AP.data.equal(type, this.types.office_private)){
			return "Private office";
		}
		
		return "Restricted office";
	};
};Network.member=new  function __WnetworkMember(){
	this.invite=function(ref){
		Form.submitFrom(ref, function(code){
			if (!code.good()){
   			 return AP.alertError(code.message);
   		 }
   		 
   		 AP.alertSuccess(code.message);
		});
	};
	
	
	this.inviteDialog=function(){
		var form=Form.create('d-invite-fx',{'action':'api/network/member/invite'})
		.row(
			Form.noLabel(),
			Form.input({name: 'usernames', "type":"text", "placeholder":"Type @ to tag all people you want to invite"})
		)
		.hiddens({
			network: Client.data.network.id,
			'token': Client.data.network.token
		})
		.buttons([
		     {label: "Invite to "+Client.data.network.name, action: function(){
		    	 Form.submit("d-invite-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    	
		    		 Form.hide("d-invite-fx");
		    		 return AP.alertSuccess("Invite people successfully", function(){
		    			 AP.refresh();
		    		 });
		    	 });
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("d-invite-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings({"block": true});
	
		Form.pop({id:'d-invite-fx-dx', width: 600, 
			label: "Invite people to "+Client.data.network.name
		}).setForm(form).show().focus('usernames');
		
		Tag.user(form.find('usernames'), Client.people);
	};
	
};var Role=new function __Role(){
	
	this.OWNER=13;
	this.ADMIN = 10;
	this.REGULAR=1;
	this.BLOCKED=-1; 
	
	this.lists=
		[
		 	{id: 13, key:'owner', name:'Team Owner'},
		 	{id: 10, key:'admin', name:'Admin'},
		 	{id: 1, key:'member', name:'Member'},
		 	{id: -1, key:'blocked', name:'Blocked Member'},
		];
};





Role.collection=new function __RoleCollection(){
	this.get=function(id){
		id=parseInt(id);
		for (var i=0; i<Role.lists.length; i++){
			if (Role.lists[i].id==id){
				return Role.lists[i]; 
			}
		}
		
		return {id: 0, key:'unknown', name:'Unknown Role'};
	};
};var UI = new function __UI() {
	this.str2int = function (str) {
		var r = 3;
		for (var i = 0; i < str.length; i++) {
			r += str.charCodeAt(i) * str.charCodeAt(i);
		}

		return r % 8 + 1;
	};


	this.clean = function (content) {
		return AP.purify(content.replace(/\{\{\@[a-zA-Z0-9 ]+\}\}/g, function (match) {
			var key = match.substr(3, match.length - 5);
			return "@" + key + "";
		}));
	};


	this.parse = function (content) {
		return content.replace(/\{\{\@[a-zA-Z0-9\_]+\}\}/g, function (match) {
			var key = match.substr(3, match.length - 5);
			var u=People.get(key);
			if (u && parseInt(u.uid)){
				return "<em class='url pointer username inline-tag' data-username='"+(u.username)+"'>"+(u.name)+"</em>";
			}
			
			return "<em class='url pointer username inline-tag'>" + key + "</em>";
		});
	};

	this.fakeLoading = function (fn) {
		this.ajaxShow();
		setTimeout(function () {
			UI.ajaxHide();
			fn();
		}, 300);
	};

	this.ajaxShow = function () {
		$("#ajax-load-2").show();
	};

	this.ajaxHide = function () {
		$("#ajax-load-2").hide();
	};


	this.picker=function(objs, callback, opts){
		if (!opts){
			opts={};
		}
		
		opts=$.extend({}, {title: "Please select one", filter: true, search: true}, opts);
		
		var actions=[];
		for (var i=0; i<objs.length; i++){
			actions.push({label: objs[i].name, name: objs[i].name, id: objs[i].id, value: objs[i].id, data: objs[i]});
		}
		
		AP.selectAction(actions, function(e){
			callback(e.data);
		}, opts);
	};
	
	this.autoActive=function(){
		$(".auto-active-url").each(function(){
			var fb="home";
			if ($(this).data("default")){
				fb=$(this).data("default");
			}
			
			if ($(this).data("urlparam")){
				$(this).children(".url").setActiveURLParam($(this).data("urlparam"), 0);
			}else{
				$(this).children(".url").setActiveURL({fallback: fb});	
			}
		});
		
		$(".auto-url2a").each(function(){
			Base.url2a(this, ".url");
		});
	};
	
	this.tabView = function (tabs, sections, callback) {
		$(tabs).each(function () {
			$(this).click(function () {
				$(this).siblings().removeClass("active");
				$(this).addClass("active");
				var $this = $(this);
				var tab = $(this).data("tab");

				$(sections).each(function () {
					if ($(this).data("tab") == tab) {
						var status = false;

						if ($(this).hasClass("active")) {
						} else {
							status = true;
						}

						$(this).addClass("active");

						if (callback) {
							callback(tab, status, $this);
						}
					} else {
						$(this).removeClass("active");
					}
				});
			});

			if ($(this).hasClass("active")) {
				var tab = $(this).data("tab");
				var $this = $(this);
				$(sections).each(function () {
					if ($(this).data("tab") == tab) {
						$(this).addClass("active");
						if (callback) {
							callback(tab, true, $this);
						}
					} else {
						$(this).removeClass("active");
					}
				});
			}
		});
	};

	
	this.rangePicker=function(callback){
		var data={};
		var start=null, end=null;
		if (Client.pageData.range){
			start=Client.pageData.range.start;
			end=Client.pageData.range.end;
		}
		
		var form=Form.create('fly-rp-fx',{'action': "about:blank"})
		.row(
			Form.label({label: "Start date *"}),
			Form.input({name: 'start', placeholder: "Start date", role:"date"}).value(start)
		)
		.row(
			Form.label({label: "End date *"}),
			Form.input({name: 'end', placeholder: "End date", role:"date"}).value(end)
		)
		.buttons([
			 {label: "Okay", action: function(){
				 var start=$("#fly-rp-fx *[name=start]").val();
				 var end=$("#fly-rp-fx *[name=end]").val();
				 if (start && end){
					 callback(safe(start), safe(end));
					 Form.hide("fly-rp-fx");	 
				 }else{
					 AP.alertError("PLEASE SELECT ALL DATES");
				 }
				 
			 }, style: 'ok -success -rounded bold'},
			 {label: "Hủy", action: function(){
				 Form.hide("fly-rp-fx");
			 }, style:'cancel -passive-2 -rounded'}
		])
		.hiddens(data)
		.render(function(fref){
		});

		Form.pop({id:'fly-rp-dx', width: 480, label: "Select duration", layout: 'flat', closable: false}).setForm(form).show();
	};

	
	
	this.time = function (ts) {
		return AP.time.time("%h:%i %M %d", ts);
	};


	this.simpleTime = function (time) {
		var today = AP.time.time("%M %d", AP.time.now());
		var yesterday = AP.time.time("%M %d", AP.time.now() - 24 * 3600);
		var test = AP.time.time("%M %d", time);

		if (today == test) {
			return AP.time.time("%H:%i today", time);
		} else if (today == yesterday) {
			return AP.time.time("%H:%i yesterday", time);
		}

		return AP.time.time("%H:%i %M %d", time);
	};


	this.inputTime = function (time) {
		return AP.time.time(AP.i18n.dateFormat(), time);
	};


	this.inputDate = function (time) {
		return AP.time.time(AP.i18n.dateFormat(), time);
	};

	this.simpleDate = function (time) {
		return AP.time.time("%M %d, %Y", time);
	};


	this.progression = function (object, canvas, opts) {
		return this.graph.progression(object, canvas, opts);
	};


	this.dayOptions = function (selector) {
		var html = AP.render(range(1, 31), function (e) {
			return "<option value='" + e + "'>" + AP.data.zeroPrefix(e) + "</option>";
		});
		html = "<option value='0'>-- Select date --</option>" + html;

		$(selector).html(html);
	};


	this.monthOptions = function (selector) {
		var html = AP.render(range(1, 12), function (e) {
			return "<option value='" + e + "'>" + AP.data.zeroPrefix(e) + "</option>";
		});
		html = "<option value='0'>-- Select month --</option>" + html;

		$(selector).html(html);
	};


	this.yearOptions = function (selector) {
		var html = AP.render(range(1950, 2017), function (e) {
			return "<option value='" + e + "'>" + AP.data.zeroPrefix(e) + "</option>";
		});
		html = "<option value='0'>-- Select year --</option>" + html;

		$(selector).html(html);
	};


	this.searchable=function(ip){
		$(ip).enter(function(){
			var q=$(this).val();
			if (!q || !q.length){
				q=null;
			}
			AP.setURLParams({q: q}, true);
		});
		
		var q=Query.get("q");
		if (q){
			$(ip).val(q);
		}
	};
	
	
	this.previewImage = function (url) {
		function resizeImgBox(ref) {
			var h = $(ref).data("h");
			var w = $(ref).data("w");
			var mh = $("#image-dialog-previewer .image-wrap").height();

			if (!h || !mh) {
				return;
			}

			if (h > mh) {
				$(ref).css("height", mh).css("width", w * mh / h);
			}

			$(ref).dblclick(function () {
				var h = $(this).data("h");
				var w = $(this).data("w");
				var mh = $("#image-dialog-previewer .image-wrap").height();
				var s = $(this).data("s");

				if (s == 0) {
					s = 1;
				} else {
					s = 0;
				}

				$(this).data("s", s);

				if (s == 1) {
					$(ref).css({width: w, height: h});
				} else {
					$(ref).css("height", mh).css("width", w * mh / h);
				}
			});
		};


		$("#image-dialog-previewer").remove();

		$("<div id='image-dialog-previewer'></div>").appendTo(document.body);
		$("#image-dialog-previewer").html("" +
			"<div class='image-wrap'><div class='img'><img src='" + url + "'/></div></div>" +
			"<div class='image-actions'>" +
			"	<div class='action image-close'><span class='-ap icon-close'></span></div>" +
			"	<a class='action url' href='" + url + "' target='_blank'><span class='-ap icon-forward2'></span></a>" +
			"</div>");

		$("#image-dialog-previewer .image-close").click(function () {
			$("#image-dialog-previewer").remove();
		});

		// Draggable
		$("#image-dialog-previewer .image-wrap .img").draggable({
			// containment: 'parent'
		});

		$("#image-dialog-previewer .img img").load(function () {
			var h = $(this).height();
			var w = $(this).width();

			$(this).data("h", h);
			$(this).data("w", w);
			$(this).data("s", 0);

			resizeImgBox(this);
		});
		
		Context.close();
	};


	this.paginate = function (canvas, url) {
		if (!url){
			url=Client.path.base;
			if (!url){
				url="";
			}
			
			var cqs="";
			
			var qs=Query.all();
			for (var key in qs){
				if (key=="env" || key=="page" || !key){
					continue;
				}
				cqs+=key+"="+qs[key]+"&";
			}
			
			if (cqs.length){
				cqs=cqs.substr(0, cqs.length-1);
			}
			
			if (cqs){
				if (Client.path.current.indexOf("?")==-1 || cqs){
					url=url+"?"+cqs;
				}else{
					url=url+"&"+cqs;
				}
			}
		}
		
		var page = Query.getInt("page");
		if (!page) {
			page = 1;
		}

		var next_url = url + "?page=" + (page + 1);
		var prev_url = url + "?page=" + (page - 1);

		if (url.indexOf("?") != -1) {
			next_url = url + "&page=" + (page + 1);
			prev_url = url + "&page=" + (page - 1);
		}


		var html = "<div class='icons'>" +
			"<div class='prev url' data-url='" + prev_url + "'><span class='-ap icon-arrow-left2'></span></div>" +
			"<div class='label'>Page " + page + "</div>" +
			"<div class='next url' data-url='" + next_url + "'><span class='-ap icon-arrow-right2'></span></div>" +
			"</div>";


		if (page == 1) {
			html = "<div class='icons'>" +
				"<div class='prev disabled'><span class='-ap icon-arrow-left2'></span></div>" +
				"<div class='label'>Page " + page + "</div>" +
				"<div class='next url' data-url='" + next_url + "'><span class='-ap icon-arrow-right2'></span></div>" +
				"</div>";
		}

		$(canvas).addClass("apppages").html(html);
	};


	this.paginateEx = function (canvas, url, total_pages) {
		var page = Query.getInt("page");
		if (!page) {
			page = 1;
		}

		var next_url = url + "?page=" + (page + 1);
		var prev_url = url + "?page=" + (page - 1);

		if (url.indexOf("?") != -1) {
			next_url = url + "&page=" + (page + 1);
			prev_url = url + "&page=" + (page - 1);
		}


		var html = "<div class='icons'>" +
			"<div class='prev url' data-url='" + prev_url + "'><span class='-ap icon-arrow-left2'></span></div>" +
			"<div class='label'>Page " + page + "/" + total_pages + "</div>" +
			"<div class='next url' data-url='" + next_url + "'><span class='-ap icon-arrow-right2'></span></div>" +
			"</div>";


		if (page == 1) {
			html = "<div class='icons'>" +
				"<div class='prev disabled'><span class='-ap icon-arrow-left2'></span></div>" +
				"<div class='label'>Page " + page + "/" + total_pages + "</div>" +
				"<div class='next url' data-url='" + next_url + "'><span class='-ap icon-arrow-right2'></span></div>" +
				"</div>";
		}

		$(canvas).addClass("apppages").html(html);
	};


	this.editor = function (selector, action) {
		if (Client.native) {
			if (action == 'empty') {
				$(selector).val("");
				return;
			}
			return;
		}

		if (action == 'empty') {
			$(selector).trumbowyg('empty');
			return;
		}

		if (action == 'focus') {
			$(selector).closest(".trumbowyg-box").find(".trumbowyg-editor").focus();
			return;
		}

		
		var mh=$(selector).data("minheight");
		if (!mh){
			$(selector).data("minHeight");
		}
		
		if (!mh && AP.data.isObject(action)){
			mh=action.minHeight;
		}
		
		if (!mh){
			mh=300;
		}
		
		if (mh<10){
			mh=20;
		}
		
		if (AP.config && AP.config.editor=="summernote"){	
			var compact=$(selector).data("compact");
			var tb=[
				['style', ['style','bold', 'italic', 'underline', 'clear']],
//				['font', ['strikethrough', 'superscript', 'subscript']],
				['fontsize', ['fontsize']],
				['color', ['color']],
				['para', ['ul', 'ol', 'paragraph']],
				['insert', ['picture', 'link', 'table', 'hr']]
			];
			
			if (action && action.code){
				tb.push("custom", ["codeblock"]);
			}
			
			if (compact && parseInt(compact)){
				tb=[
					['style', ['bold', 'italic', 'underline', 'clear']],
//					['font', ['strikethrough', 'superscript', 'subscript']],
					['para', ['ul', 'ol', 'paragraph']]
				];
				
				if (parseInt(compact)==2){
					tb=[
//						['style', ['bold', 'italic', 'underline', 'clear']],
//						['font', ['strikethrough', 'superscript', 'subscript']],
					];
				}
			}
			
			
			var fs=parseInt($(selector).css("font-size"), 10);

			$(selector).summernote({
				tabsize: 2,
				minHeight: mh,
				toolbar: tb,
				placeholder: $(selector).attr("placeholder"),
				callbacks: {
					onPaste: function (e) {
					},
					onImageUpload: function (files, editor, welEditable) {
						for (var i = files.length - 1; i >= 0; i--) {
							editor_sendFile(files[i], this);
						}
					}
				},
				fontSize: fs,
				buttons: {
					codeblock:summernote_codeblock
				}
			});
			
			$(selector).parent().find(".note-editable").css("font-size", fs+"px");
			if ($(selector).data("dir")=="bottom"){
				$(selector).parent().find(".note-editor").addClass("editor-bottom")
			}
			
			if (AP.data.isObject(action) && action.value){
				$(selector).summernote("code", action.value);
			}
		}else if (AP.config && AP.config.editor=="quill"){
			var opts={};
			if (AP.data.isObject(action)){
				opts=action;
			}
			
			var compact=$(selector).data("compact");
			if (!compact){
				compact=opts.compact;
			}
			
			var toolbarOptions = [
				['bold', 'italic', 'underline', 'strike'], // toggled buttons
				['blockquote', 'code-block'],

				[{ 'header': 1 }, { 'header': 2 },],  // custom button values
				[{ 'list': 'ordered'}, { 'list': 'bullet' }],
				[{ 'script': 'sub'}, { 'script': 'super' }], // superscript/subscript
				[{ 'indent': '-1'}, { 'indent': '+1' }], // outdent/indent

				[{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme
				['clean'] // remove formatting button
			];
			
			if (compact==1){
				toolbarOptions = [
					['bold', 'italic', 'underline', 'strike'], // toggled buttons
					['blockquote', 'code-block'],

					[{ 'header': 1 }, { 'header': 2 },],  // custom button values
					[{ 'list': 'ordered'}, { 'list': 'bullet' }],

					[{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme
					['clean'] // remove formatting button
				];
			}else if (compact==2){
				toolbarOptions = [
					['bold', 'italic', 'underline'], // toggled buttons
					['blockquote', 'code-block'],
					[{ 'list': 'ordered'}, { 'list': 'bullet' }],
					['clean'] // remove formatting button
				];
			}
			
			var id=AP.uuid();
			var mh=300;
			if (opts.height){
				mh=opts.height;
			}else if (opts.minHeight){
				mh=opts.minHeight;
			}
			
			if (mh!="auto"){
				$(selector).hide().after("<div id='"+(id)+"' class='quill-wrapper' style='height:"+(mh)+"px'></div>");	
			}else{
				$(selector).hide().after("<div id='"+(id)+"' class='quill-wrapper'></div>");
			}
			
			
			var q=new Quill('#'+id, {
				modules: {
					toolbar: toolbarOptions
				},
				theme: "snow",
				placeholder:$(selector).attr("placeholder")
			});
			
			var $canvas=$("#"+id);
			$canvas.data("editor", q);
			$(selector).data("editor", q);
			
			if (opts.fit){
				$canvas.addClass("-editor-fit");
			}
			
			if (mh!="auto"){
				$canvas.find(".ql-editor").css({minHeight: mh});
				$canvas.data("mh", mh);
			}
			
			
			q.on("text-change", function(delta, oldDelta, source){
				var $qc=$(q.root).clone();
				$qc.find('.ql-indent-2').not('.ql-indent-2+.ql-indent-2').each(function(){
					$(this).nextUntil(':not(.ql-indent-2)').addBack().wrapAll("<li class='ql-temp-2'><ol></ol></li>");
				});
				
				$qc.find('.ql-indent-1').not('.ql-indent-1+.ql-indent-1').each(function(){
					$(this).nextUntil(':not(.ql-indent-1)').addBack().wrapAll("<li class='ql-temp-1'><ol></ol></li>");
				});
				
				$qc.find('.ql-temp-1').each(function(){
					var $prev=$(this).prev("li");
					if (!$prev.length){
						return;
					}
					
					$(this).find("ol").appendTo($prev);
					$(this).remove();
				});
				
				$qc.find('.ql-temp-2').each(function(){
					var $prev=$(this).prev("li");
					if (!$prev.length){
						return;
					}
					
					$(this).find("ol").appendTo($prev.find("li").last());
					$(this).remove();
				});
				
				
				$qc.find('.ql-indent-1').removeClass("ql-indent-1");
				$qc.find('.ql-indent-2').removeClass("ql-indent-2");
				
				var txt=(' '+$qc[0].innerHTML).slice(1);
				$qc.remove();
				
				$(selector).val(txt);
				
				if (mh!="auto"){
					quill_setHeight($canvas, q);
				}
			});
			
			if (opts.value){
				UI.editorValue(selector, opts.value);
				
				if (mh!="auto"){
					quill_setHeight($canvas, q);
				}
			}
		}else{
			  $.trumbowyg.svgPath = Client.share_url + "/plugins/editor.svg";
			  $.trumbowyg.hideButtonTexts = true;

			  var val = $(selector).val();
			  if (val == "" && !$(selector).attr("placeholder")) {
				  $(selector).val("<p></p>");
			  }
			  
			  $(selector).css("border", "none").addClass("js-editor").trumbowyg({
				  resetCss: false,
				  fullscreenable: false,
				  removeformatPasted: true,
				  autogrow: true,
				  btnsDef: {
					  // Customizables dropdowns
					  image: {
						  dropdown: ['insertImage', 'upload'],
						  ico: 'insertImage'
					  }
				  },
				  btns: [
					  ['formatting'], ['bold', 'italic', 'underline', 'strikethrough'], ['unorderedList', 'orderedList'], ['foreColor'],
					  ['link'],
					  ['image'],
					  'preformatted',
					  'removeformat',
					  ['viewHTML'],
				  ],
				  plugins: {
					  upload: {
						  serverPath: '/ajax/api/image/upload',
						  fileFieldName: 'image',
						  data: [{name: "__code", value: Client.code}, {name: "hid", value: Client.viewer.hid}],
						  success: function (data, trumbowyg, modal, values) {
							  var image = data.img;
							  if (image.status === 1) {
								  trumbowyg.execCmd('insertImage', image.url);
								  $('img[src="' + image.url + '"]:not([alt])', trumbowyg.$box).attr('alt', image.name);
								  setTimeout(function () {
									  trumbowyg.closeModal();
								  }, 250);
							  } else {
								  trumbowyg.addErrorOnModalField(
									  $('input[type=file]', modal),
									  trumbowyg.lang.uploadError || image.message
								  );
							  }
						  }
					  }
				  }
			  });

			 if (AP.isObject(action)) {
				var $cs = $(selector).closest(".trumbowyg-box");
				if (action.panel) {
					$cs.addClass("fix-panel-" + action.panel);
				}

				if (action.minHeight) {
					$cs.find(".trumbowyg-editor").css({minHeight: action.minHeight})
					$cs.css({minHeight: action.minHeight})
				}

				if (action.fit) {
					$cs.addClass("box-fit");
				}
			  }	
		}
	};

	
	function quill_setHeight($canvas, q){
		if ($canvas.hasClass("-editor-fit")){
			var rh=$canvas.find(".ql-editor").height();
			$canvas.height(rh);
			return;
		}
		
		var mh=$canvas.data("mh");
		if (!mh){
			mh=200;
		}
		
		var ih=0;
		$canvas.find(".ql-editor").first().children().each(function(){
			ih+=$(this).height();
		});
		
		if (ih + 50 < $canvas.height() && ih > mh){
			$canvas.css({height: ih+50});
		}
		
		var sh=$canvas.find(".ql-editor")[0].scrollHeight;
		var oh=$canvas.find(".ql-editor")[0].offsetHeight;
		
		
		if ((sh>oh+1) && !$canvas.hasClass("js-extended")){
			$canvas.css({height: sh+1});
		}
		
		if ((sh>mh*3+100 || sh>mh+400) && !$canvas.hasClass("js-extended")){
			$canvas.css({height: sh+5}).addClass("js-extended");
		}
	};
	
	
	function editor_sendFile(file, el){
		$.log(Client.base);
		
		var form_data = new FormData();
		form_data.append('file', file);
		form_data.append('__code', Client.code);
		form_data.append('__otp', Client.base.secureData.otp);
		form_data.append('__sessionid', Client.base.secureData.session);
		
		UI.ajaxShow();
		$.ajax({
			data: form_data,
			type: "POST",
			url: Base.domain("api")+"/ajax/api/file/upload",
			cache: false,
			contentType: false,
			processData: false,
			success: function(code){
				UI.ajaxHide();
				
				var c=new Code(code);
				if (!c.good()){
					return AP.alertError(code.message);
				}
				
				$(el).summernote('editor.insertImage', code.image);
			}
		});
	};
	
	

	this.editorValue = function (selector, value){
		if (AP.config && AP.config.editor=="quill"){
			var content=value.replace(/\&amp;/g,'&');
			var q=$(selector).parent().find(".quill-wrapper").data("editor");
			
			q.root.innerHTML=content;
			$(selector).val(q.root.innerHTML);
			$(selector).parent().find(".quill-wrapper pre").addClass("ql-syntax");
			
			$(selector).parent().find(".quill-wrapper pre").each(function(){
				$.log($(this).text());
			})
			
			return;
		}
		$(selector).trumbowyg('html', value);
	};


	this.mobileEditor = function (selector, action) {
		if (action == 'empty') {
			$(selector).trumbowyg('empty');
			return;
		}

		$(selector).css("border", "none").trumbowyg({
			resetCss: true,
			btns: [
				'bold', 'italic', 'underline',
				'|', 'link', 'insertImage',
				'|', 'formatting',
				'removeformat'
			],
			fullscreenable: false,
			removeformatPasted: true,
			autogrow: true
		});
	};


	this.flash = function (msg) {
		$("#flash-msg").show().html(msg).css({top: -80}).animate({top: 90}, 300).delay(1300).animate({top: -80}, 300, function () {
			$(this).hide();
		});
	};


	this.pickDeadline = function (input, callback) {
		$(input).data('callback', callback);

		$(input).on('click focus', function () {
			var html = buildDeadlinePicker();
			AP.customDialog(html, "#custom-deadline").addClass('-full').show();
			$("#deadline-picker").data("callback", $(this).data('callback'));
			$("#deadline-picker .custom .__date").selectDate();

			var val = $(this).val();

			if (val == "today" || val == "asap" || val == "tomorrow" || val == "weekend") {
				deadlinepicker_pick(val, true);
			}

			if (!val) {
				deadlinepicker_pick("custom", true);
			}
		});
	};

	
	/**
	 * @desc Click to show
	 */
	this.clickToShow=function(elem, opts){
		if (elem==="close"){
			$(opts).hide();
			$(opts).closest(".ui-overflow-fixed").toggleClass("extended");
			return;
		}
		
		opts=$.extend({}, {height: 100, bg:"#fff"}, opts);
		var h=$(elem).height();
		if (h<opts.height){
			return;
		}
		
		var sm="<div class='overflow-btn' onclick=\"UI.clickToShow('close', this)\" style='background-image: linear-gradient("+(Color.rgba(opts.bg, 0.2))+", "+(opts.bg)+", "+(opts.bg)+");'>Show more</div>";
		$(elem).addClass("ui-overflow-fixed").css({maxHeight: opts.height+"px"}).append(""+(sm)+"");
	};
	

	this.avatars = function (users) {
		if (!users || !users.length) {
			return "";
		}
		return AP.render(users, function (u) {
			return "<div class='url user username' data-username='" + u.username + "'><img src='" + AP.xthumb(u.gavatar) + "'/></div>";
		});
	};


	this.textAvatar = function (str, size, color, len) {
		if (!len) {
			len = 1;
		}

		if (!size) {
			size = 32;
		}

		if (!color) {
			color = UI.str2int(str);
		}

		var paths = str.split(" ");
		var txt = str.substr(0, len);

		if (paths.length >= 2) {
			txt = paths[0].charAt(0) + paths[1].charAt(0);
		}

		if (len == 1) {
			txt = str[0];
		}


		return "<div class='-tavatar -bg-alt" + color + "' style='line-height: " + size + "px; width: " + size + "px; height: " + size + "px'><span class='-txt'>" + txt + "</span></div>";
	};
};


UI.special = function (title, content, buttons) {
	var html = "<div class='title'>" + title + "</div><div class='content'>" + content + "</div><div class='buttons'></div>";

	$("#canvas-special .main").css({top: -500});
	$("#canvas-special").show();

	$("#canvas-special .main").html(html).animate({top: 100}, 500);
	for (var i = 0; i < buttons.length; i++) {
		var button = buttons[i];
		$("<div class='button button-" + i + " " + button.classes + "'>" + button.label + "<div class='sublabel'>" + button.sublabel + "</div></div>").click(button.action).appendTo("#canvas-special .buttons");
	}
	$("#canvas-special").show();
};

UI.hideSpecial = function () {
	$("#canvas-special .main").animate({top: -500}, 300, function () {
		$("#canvas-special").hide();
	});
};


UI.range = function (start, end, label) {
	var d = [{value: 0, "label": label}];
	if (start < end) {
		for (var i = start; i <= end; i++) {
			d.push({value: i, "label": i});
		}
	} else {
		for (var i = start; i >= end; i--) {
			d.push({value: i, "label": i});
		}
	}
	return d;
};


function icon(icm, size) {
	if (typeof size == 'undefined') {
		size = 16;
	}
	if (icm.indexOf(" ") != -1) {
		return "<span class='ap-f" + size + " normal " + icm + "'></span> &nbsp;";
	} else {
		return "<span class='ap-f" + size + " normal -ap icon-" + icm + "'></span> &nbsp;";
	}
};


function buildDeadlinePicker() {
	var selections = "<div class='tab active' onclick=\"deadlinepicker_pick('asap');\">Due ASAP</div> <div class='tab' onclick=\"deadlinepicker_pick('today');\">Due today</div> <div class='tab' onclick=\"deadlinepicker_pick('tomorrow');\">Due tomorrow</div> <div class='tab' onclick=\"deadlinepicker_pick('weekend');\">Due this weekend</div> <div class='tab' onclick=\"deadlinepicker_pick('custom');\">Choose a custom date and time</div>";


	var hours = [];
	for (var i = 0; i < 12; i++) {
		hours.push({label: i + "am", value: i});
	}

	for (var i = 1; i < 12; i++) {
		hours.push({label: i + "pm", value: i + 12});
	}

	var hour_opts = AP.render(hours, function (e) {
		return "<option value='" + e.value + "'>" + e.label + "</option>";
	});

	var min_opts = AP.render(["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"], function (e) {
		return "<option value='" + e + "'>" + e + "</option>";
	});

	var html = "<div id='deadline-picker'>" +
		"<div class='tabs'><h3>Select deadline</h3>" + selections + "</div> <div class='canvas'></div>" +
		"<div class='custom hidden'><div class='box'>" +
		"	<h1>Choose a specific deadline date/time</h1>" +
		"	<div class='input'><input type='text' class='__date' name='custom-date' value='" + UI.inputTime(AP.time.now()) + "' placeholder='Select date'/></div>" +
		"	<div class='select'>" +
		"		<select name='custom-hour' class='std' style='float:left; width: 100px; margin-right:20px'>" + hour_opts + "</select>" +
		"		<select name='custom-min'  class='std' style='float:left; width: 100px;'>" + min_opts + "</select>" +
		"	</div>" +
		"</div></div>" +
		"<div class='footer'><div class='button -success -circled' onclick='deadlinepicker_callback(this);'>Continue</div></div>" +
		"</div>";


	return html;
};


function deadlinepicker_pick(type, initiate) {
	$("#deadline-picker").data("val", type);

	if (type == "asap") {
		$("#deadline-picker .tabs .tab").setActive(0);
		$("#deadline-picker .canvas").html("<div class='ft'>due <em>today, asap</em></div></div>");
	} else if (type == "today") {
		$("#deadline-picker .tabs .tab").setActive(1);
		$("#deadline-picker .canvas").html("<div class='ft'>due <em>today, 11:59pm</em></div></div>");
	} else if (type == "tomorrow") {
		$("#deadline-picker .tabs .tab").setActive(2);
		$("#deadline-picker .canvas").html("<div class='ft'>due <em>tomorrow, 11:59pm</em></div></div>");
	} else if (type == "weekend") {
		$("#deadline-picker .tabs .tab").setActive(3);
		$("#deadline-picker .canvas").html("<div class='ft'>due <em>this sunday, 11:59pm</em></div></div>");
	} else if (type == "custom") {
		$("#deadline-picker .tabs .tab").setActive(4);
		$("#deadline-picker .custom").show();
	}

	if (initiate || type == "custom") {

	} else {
		deadlinepicker_callback("#deadline-picker");
	}
};


function deadlinepicker_callback(ref) {
	var type = $("#deadline-picker").data("val");
	var date = 0;
	var time = 0;
	if (type == "custom") {
		// AP.alertError("Please pick a custom date and time.");
		var date = $("#deadline-picker input[name=custom-date]").val();
		var hour = $("#deadline-picker select[name=custom-hour]").val();
		var min = $("#deadline-picker select[name=custom-min]").val();

		date = date;
		time = hour + ":" + min;
	} else {

	}

	var fn = $("#deadline-picker").data("callback");
	fn(type, date, time);
	AP.closeDialog(ref);
};


function fiximg(url) {
	if (parseInt(Client.https)) {
		var check = Client.image_url.replace('https://', 'http://');
		if (url && url.indexOf(check) >= 0) {
			url = url.replace('https://', 'http://');
		}

		check = Client.data_url.replace('https://', 'http://');
		if (url && url.indexOf(check) >= 0) {
			url = url.replace('http://', 'https://');
		}
	}

	return url;
};


var summernote_codeblock=function(context){
	var ui = $.summernote.ui;
	
	var button = ui.button({
		contents: "<i class='ficon-code'/>",
		tooltip: 'Insert code block',
		click: function(){
			context.invoke('editor.pasteHTML', '<pre><code>Place your code here</code></pre>');
		}
	});
	
	return button.render();
};





UI.fav=new function __UIFav(){
	this.update=function(url, opts, callback){
		UI.ajaxShow();
		AP.post(url, {id: opts.target.id}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			
			if (parseInt(code.added)){
				opts.list.push(code.id);
				opts.list=AP.array.unique(opts.list, function(e, f){
					return parseInt(e)==parseInt(f);
				});
			}else{
				opts.list=AP.array.filter(opts.list, function(e){
					return parseInt(e)!=parseInt(code.id);
				});
			}
			
			callback(parseInt(code.added), opts.list, code);
		})
	};
	
	this.isFav=function(id, list){
		return AP.array.contain(list, id, function(e, f){
			return parseInt(e) == parseInt(f);
		});
	};
};


UI.profile=function(profile){
	return new UIProfile(profile);
};


function UIProfile(profile){
	this.__profile=null;
	if (profile){
		this.__profile=profile;	
	}
	
	this.__body=[];
	this.__buttons=[];
	this.__layout={};
	
	this.body=function(rows){
		this.__body=rows;
		return this;
	};
	
	this.buttons=function(bts){
		this.__buttons=bts;
		return this;
	};
	
	
	this.show=function(opts){
		if (!opts){
			opts={};
		}
		
		opts=$.extend({}, {width: 640, id: AP.uuid()}, opts);
		
		AP.customDialog("<div id='"+opts.id+"' class='js-profile' style='width:"+opts.width+"px; min-height:600px;'><div class='ui-profile'>"+render(this)+"</div></div>").addClass("-full-canvas -full-blank").closable(false).show();
		$("#"+opts.id).data("profile", this);
		
		$("#"+opts.id+" .uip-buttons .btn").click(function(){
			var index=$(this).index();
			var $this=$(this).closest(".js-profile").data("profile");
			if (!$this || !$this.__buttons || $this.__buttons.length<=index){
				return;
			}
			
			var fn=$this.__buttons[index].action;
			fn.apply($this, [this]);
		});
		
		$("#"+opts.id+" .uip-close").click(function(){
			UI.profile().close(this);
		});
	};
	
	
	this.close=function(ref){
		AP.hideCustomDialog();
	};
	
	function render(obj){
		return getHeader(obj)+getBody(obj)+getButtons(obj);
	};
	
	
	function getHeader(obj){
		return "<div class='uip-close'><span class='-ap icon-close'></span></div>" +
		"<div class='uip-header'>" +
			"<div class='uip-image'><img src='"+obj.__profile.image+"'/></div>" +
			"<div class='uip-main'>" +
			"	<div class='uip-name'>"+obj.__profile.name+"</div>" +
			"	<div class='uip-subtitle'>"+obj.__profile.subtitle+"</div>" +
			"	<div class='uip-rows'>"+AP.render(obj.__profile.rows, function(e){
				return getRow(e);
			})+"</div>" +
			"</div>" +
		"</div>";
	};
	
	
	function getBody(obj){
		return "<div class='uip-body'>"+AP.render(obj.__body, function(e){
			return getRow(e);
		})+"</div>";
	};
	
	
	function getButtons(obj){
		return "<div class='uip-buttons'>"+AP.render(obj.__buttons, function(e){
			return "<div class='btn is-"+e.type+"'>"+e.name+"</div>";
		})+"</div>";
	};
	
	
	function getRow(e){
		return "<div class='uip-row'>" +
		"	<div class='uip-icon'><span class='ficon-"+e.icon+"'></span></div>" +
		"	<div class='uip-rn'>"+e.name+"</div>" +
		"	<div class='uip-rc'>"+e.value+"</div>" +
		"</div>";
	};
};


UI.icon=new function __UIIcon(){
	this.picker=function(input, options){
		var tagname=$(input).tagName();
		if (tagname=="div" || tagname=="span"){
			var ic=$(input).data("icon");
			if (!ic && options.value){
				ic=options.value;
			}
			
			renderIcon(input, ic, options.set);
		}
		
		$(input).click(function(){
			var $this=this;
			dialog(options.set, options.range, function(icon){
				if (options.endpoint){
					UI.ajaxShow();
					AP.post(options.endpoint, {icon_icon: icon.index, icon_type: 'icon', icon_set: icon.set}, function(code){
						UI.ajaxHide();
						if (!code.good()){
							return AP.alertError(code.message);
						}
						
						UI.flash("Update successfully");
						renderIcon($this, icon.index, icon.set);
					});
				}
			});
		});
	};

	
	/**
	 * @desc Render an icon within a set
	 */
	function renderIcon(ref, index, set){
		if (index===0 || index==="0"){
			index=1;
		}
		
		var image="<img src='"+(set)+"/"+(index)+".svg'/>";
		$(ref).html(image);
	};
	
	function dialog(base_url, limit, callback, opts){
		opts=$.extend({title: "Please pick an icon"}, opts);
		
		var title="";
		if (opts.title && opts.title.length){
			title="<div class='title'>"+opts.title+"</div>"; 
		}
		
		AP.customDialog(title+"<div class='list list-icons -border'></div>","custom-selection").style("-full icon-picker-list").width(620).show();
		
		
		for (var i=1; i<=limit; i++){
			var e={type: "icon", index: i, set: base_url};
			
			var icon="<div class='-icon'><img src='"+base_url+"/"+i+".svg'/></div>";			
			var html="<div class='li js-item unselectable' onclick='__selfaction(this);'>"+icon+"</div>";
			$(html).appendTo("#custom-selection .list-icons").data("action", callback).data("__params", e);
		}
		
		AP.dialog("#custom-selection").balance();
	};

};


var BaseTable=new function __BaseTable(){
	this.opts={};
	
	this.init=function(canvas, opts){
		opts=$.extend({}, {
			height: "auto",
			header: "fixed",
			footer: "normal",
			fixed_left: ".js-fl",
			fixed_right: ".js-fr",
			sorter: false,
			padding: 10,
			layout: 'table',
			max_rows: 100,
			events: true 
		}, opts);
		
		if (opts.layout=='table'){
			opts.selector={
				header: 'thead',
				body: 'tbody',
				cell: 'td',
				row: 'tr',
				header_cell: 'thead th',
			};
		}else{
			opts.selector={
				header: '.thead',
				body: '.tbody',
				cell: '.td',
				row: '.tr',
				header_cell: '.th',
			};
		}
		
		this.opts=opts;
		
		var $this=$(canvas);
		$this.addClass("js-basetable");
		
		if (opts.layout=="table"){
			$this.addClass("basetable");	
		}
		
		var $p=$this.parent();
		
		if (opts.events){
			$p.addClass("basetable-wrapper scroll-x scroll-y")
		}else{
			$p.addClass("basetable-wrapper")	
		}
		
		
		this.$fls=$this.find(".-fl");
		this.$frs=$this.find(".-fr");
		this.$fhs=null;
		
		var num_cols=$this.find(opts.selector.row).length;
		var auto_position=1;
		if (num_cols>opts.max_rows){
			auto_position=0;
		}
		
		if (mobile() || !opts.events){
			auto_position=false;
		}
		
		if (!auto_position){
			
		}else{
			$p.on("scroll", function(){
				if (mobile()){
					return;
				}
				
				BaseTable.$fhs=$this.find(opts.selector.header);
				
				var t=$p.scrollTop();
				var l=$p.scrollLeft();
				var cw=$p.width();
				
				BaseTable.$fhs.css("top", t);
				
				BaseTable.$fls.each(function(){
					$(this).css("left", l);
					if (l>10){
						$(this).addClass("-fls");
					}else{
						$(this).removeClass("-fls");
					}
				});
				
				BaseTable.$frs.each(function(){
					var ch=$(this).closest(opts.selector.row).height();
					var ew=$(this).width();				
					
					if (opts.layout=="table"){
						$(this).css({"left": cw-ew+l-11-opts.padding*2, height: ch});
					}else{
						$(this).css({"left": cw-ew+l-11-opts.padding*2, height: ch});	
					}
					
				});
			});
		}
		
		
		fixSize($p, opts);
		
		AP.html.resize(function(){
			fixSize($p, opts);
		});
		

		var ws=[];
		$this.find(opts.selector.header_cell).each(function(){
			var hw=$(this).data("width");
			$(this).css("width", hw).css("minWidth", hw).css("maxWidth", hw);
			
			if ($(this).data("search")){
				$(this).append("<div class='bth-wrapper'><div class='bth-search'><input type='text' placeholder='Filter'/></div></div>")
			}
			
			ws.push(hw);
		});
		
		$this.find(opts.selector.header_cell+".-fr").each(function(){
			$(this).css("height", $(this).closest(opts.selector.row).height()).css("marginTop", "1px");
		});
		
		
		var t;
		$this.find(""+(opts.selector.body)+" "+(opts.selector.row)+"").each(function(){
			$(this).addClass("__basetable_done");
			
			t=0;
			$(this).find(opts.selector.cell).each(function(){
				$(this).data("fl", t);
				t+=$(this).data("width");
			});
			
			$(this).find(opts.selector.cell).each(function(){
				var index=$(this).index();
				var width=ws[index];
				
				var flag=$(this).data("width");
				if (flag=="disabled"){
					return;
				}else if (flag!=undefined && AP.data.isInt(flag)){
					$(this).data("width", flag).css("width", flag).css("minWidth", flag).css("maxWidth", flag);
				}else{
					$(this).data("width", width).css("width", width).css("minWidth", width).css("maxWidth", width);	
				}
			});
		});
		
		if (opts.width=="auto"){
		}else{
		}
		
		resetTotalWidth($this);
		
		if (auto_position){
			setTimeout(function(){
				var cw=$p.width();
				BaseTable.$frs.each(function(){
					var ew=$(this).width();
					$(this).css({"left": cw-ew+$p.scrollLeft()-11-opts.padding*2});
				});
			},100);
		}else{
			setTimeout(function(){
				$p.trigger("scroll");
				
				BaseTable.$frs.each(function(){
					$(this).css({right: 0});
				});
			}, 100);
		}
		
		// $p.trigger("scroll");
		
		if (opts.sorter){
			$this.tablesorter({
				sortInitialOrder: "desc"
			});
		}
	};
	
	
	this.balance=function(){
		$(window).resize();
		
		setTimeout(function(){
			$(window).resize();	
		},200);
		
		setTimeout(function(){
			$(window).resize();	
		},500);
	};
	
	
	/**
	 * @desc Set column width
	 */
	this.setColWidth=function($col, width){
		var index=$col.index();
		$col.css({width: width, minWidth: width, maxWidth: width}).data("width", width);
		
		var $table=$col.closest(".js-basetable");
		$table.find(BaseTable.opts.selector.body+" "+BaseTable.opts.selector.row).each(function(){
			$(this).find(BaseTable.opts.selector.cell+":nth-child("+(index+1)+")").data("width", width).css({width: width, minWidth: width, maxWidth: width});
		});
		
		
		resetTotalWidth($col.closest(".js-basetable"));
	};
	
	
	/**
	 * @desc Update a collection of rows (when data changed)
	 */
	this.onUpdate=function(row){
		var t;
		var $p=$(row).closest(".basetable-wrapper");
		var $canvas=$(row).closest(".js-basetable");
		
		
		this.$fls=$canvas.find(".-fl");
		this.$frs=$canvas.find(".-fr");
		
		
		$(row).each(function(){
			if ($(this).hasClass("__basetable_done")){
				return;
			}
			
			$(this).find(BaseTable.opts.selector.cell).each(function(){
				var index=$(this).index();
				var width=$canvas.find(BaseTable.opts.selector.header_cell+":eq("+index+")").data("width");
				$(this).data("width", width).css("width", width).css("minWidth", width);
			});
			
			
			t=$p.scrollTop();
			var l=$p.scrollLeft();
			
			$(this).find(BaseTable.opts.selector.header).css("top", t);
			
			$(this).find(".-fl").each(function(){
				$(this).css("left", l);
				if (l>10){
					$(this).addClass("-fls");
				}else{
					$(this).removeClass("-fls");
				}
			});
			
			$(this).find(".-fr").each(function(){
				$(this).css("left", $p.width()-$(this).width()+l-11-BaseTable.opts.padding*2);
			});
		});
	};
	
	
	/**
	 * @desc Alias
	 */
	this.update=this.onUpdate;
	
	
	function fixSize($p, opts){
		if (opts.width && opts.width=="auto"){
			
		}else{
			$p.css("width", $p.parent().width());	
		}
		
		if (opts.height && opts.height=="auto"){
		}else{
			if (opts.height && AP.data.isFunction(opts.height)){
				$p.css("height", opts.height($p));
			}else{
				$p.css("height", $(window).height()-90);	
			}	
		}
	};
	
	
	
	function resetTotalWidth($this){
		var total_width=0;
		$this.find(BaseTable.opts.selector.header_cell).each(function(){
			total_width+=$(this).data("width");
		});
		
		if (BaseTable.opts.selector.layout!="table"){
			$this.css("width", total_width+1);
		}else{
			$this.css("width", t).addClass("xo");	
		}
	};
};


var UIPag = new function __UIPagination() {
	this.callback_fn = null;
	this.contPaginate = function (canvas, url, last_id, per_page, loaded_items, callback) {
		this.callback_fn = callback;

		if (!url) {
			url = Client.path.current;
			var cpath = Client.path.full.join("/");
			var cqs = "";

			var qs = Query.all();
			for (var key in qs) {
				if (key == "env" || key == "last_id") {
					continue;
				}
				cqs += key + "=" + qs[key] + "&";
			}

			if (cqs.length) {
				cqs = cqs.substr(0, cqs.length - 1);
			}

			if (cpath.indexOf("?") == -1) {
				url = cpath + "?" + cqs;
			} else {
				url = cpath + "&" + cqs;
			}
		}
		
		$.log(url);

		var load_more_url = url;

		var more_class = "-more";
		if (loaded_items < per_page) {
			more_class = "";
			return;
		}


		var html = "<div class='icons pointer "+(more_class)+"' data-url='"+(load_more_url)+"' data-last_id='"+(last_id)+"' data-per_page='"+(per_page)+"'><div class='label box-main-edge'>Load more</div></div>";

		$(canvas).addClass("apppages").html(html);

		$(canvas).find('.-more').click(function() {
			AP.post($(this).data('url'), {last_id: $(this).data('last_id'), per_page: $(this).data('per_page')}, function(code) {
				if (!code.good()) {
					return AP.alertError(code.message);
				}

				if (UIPag.callback_fn) {
					return UIPag.callback_fn(code.data);
				};
			}, function (err) {
				$.log(err);
			});
		});
	};
};


function ActionManager(opts){
	if (!opts){
		opts={};
	}
	this.opts=$.extend({icon: true}, opts);
	this.actions=[];
	
	this.add=function(action){
		this.actions.push(action);
	};
	
	this.inline=function(){
		return AP.render(this.actions, function(action){
			if (action=="sep" || action=="---"){
				return "<div class='-item-sep'></div>";
			}
			var ec="";
			if (action.style){
				ec=" "+action.style;
			}
			return "<div class='-item url"+(ec)+"' data-url='"+(action.url)+"'>"+(action.label)+"</div>";
		});
	};
	
	this.context=function(){
		return this.actions;
	};
	
	this.length=function(){
		return this.actions.length;
	};
	
	this.text=this.inline;
};
UI.file=new function __UIFile(){
	this.ext=function(file){
		var ext="unknown";
		
		if (!file){
			return ext;
		}
		
		data=file.split(".");
		
		if (!data.length){
			return ext;
		}
		
		return data[data.length-1].toLowerCase();
	}
	
	this.icon=function(file){
		var ext="text2";
		
		if (!file){
			return ext;
		}
		
		data=file.split(".");
		var fext="";
		
		if (!data.length){
			return ext;
		}
		fext=data[data.length-1]; 
		fext=fext.toLowerCase();
		if (fext=="jpeg"){
			fext="jpg";
		}

		if (fext == "xls" || fext == "xlsx" || fext == "gsheet" || fext == "xlsm") {
			ext = "excel";
		} else if (fext == "gif" || fext == "png" || fext == "jpg" || fext == "ai" || fext == "svg" || fext == "psd" || fext == "jpeg") {
			ext = fext;
		} else if (fext == "doc" || fext == "docx" || fext == "gdoc") {
			ext = "word";
		} else if (fext == "ppt" || fext == "pptx" || fext == "gslides") {
			ext = "ppt";
		} else if (fext == "pdf") {
			ext = "pdf";
		} else if (fext == "zip") {
			ext = "zip";
		}
		

		if (["mp4","avi", "css", "csv", "fla", "svg", "eps", "js", "xml", "html"].indexOf(fext)!=-1){
			return fext;
		}
		
		return ext;
	};
	
	
	
	this.fontIcon=function(file){
		var ext="libreoffice";
		
		if (!file){
			return ext;
		}
		
		data=file.split(".");
		var fext="";
		
		if (!data.length){
			return ext;
		}
		fext=data[data.length-1]; 
		fext=fext.toLowerCase();
		if (fext=="jpeg"){
			fext="jpg";
		}
		
		if (fext=="xls" || fext=="xlsx" || fext=="gsheet"){
			ext="file-excel";
		}else if (fext=="gif" || fext=="png" || fext=="jpg" || fext=="psd" || fext=="svg" || fext=="ai" || fext=="jpeg"){
			ext="file-picture";
		}else if (fext=="doc" || fext=="docx" || fext=="gdoc"){
			ext="file-word";
		}else if (fext=="ppt" || fext=="pptx" || fext=="gslides"){
			ext="file-play";
		}else if (fext=="pdf"){
			ext="file-pdf";
		}else if (fext=="zip"){
			ext="file-zip";
		}
		
		return ext;
	};
	
	this.ficon=this.fontIcon;
	
	this.color=function(ext){
		if (ext=='excel'){
			return "3";
		}
		
		if (ext=='ppt'){
			return "2";
		}
		
		if (ext=='word'){
			return "8";
		}
		
		if (ext=='pdf' || ext=='pdfx'){
			return "5";
		}
		
		if (ext=='gif' || ext=='png' || ext=='jpg' || ext=="picture" || ext=="jpeg"){
			return "7";
		}
		
		return 2;
	};
	
	this.kb=function(size){
		var kb=Math.floor(size/1024);
		if (kb==0){
			return size+" B";
		}
		
		if (kb<1000){
			return kb+" KB";
		}
		
		return (kb/1024).toFixed(2)+" MB";
	};
	
	
	this.iconColor=function(icon){		
		if (icon=="pdf" || icon=="file-pdf"){
			return "#e73035";
		}
		
		if (icon=="xls" || icon=="xlsx" || icon=="file-xls" || icon=="file-xlsx" || icon=="file-excel"){
			return "#41b433";
		}
		
		if (icon=="ppt" || icon=="pptx" || icon=="file-ppt" || icon=="file-pptx" || icon=="file-play"){
			return "#d45a18";
		}
		
		
		if (icon=="doc" || icon=="docx" || icon=="file-doc" || icon=="file-docx" || icon=="file-word" || icon=="file-office"){
			return "#0662b0";
		}
		
		if (icon=="png" || icon=="jpg" || icon=="jpeg" || icon=="file-png" || icon=="file-jpg"){
			return "#f49402";
		}
		
		return "#666";
	};
	
	
	
	/**
	 * @desc Get HTML of a list of files
	 */
	this.list=function(files, opts){
		return AP.render(files, function(e){
			var icon=UI.file.icon(e.fid);
			
			var actions="<span class='file-actions'> <span class='file-action js-file-preview url' title='Preview' data-fid='"+(e.id)+"' data-url=':file' data-file='"+(e.url)+"'>Preview</span> <a class='file-action' title='Download file' target='_blank' href='"+(Base.file.download(e.name, e.fid))+"'>Download</a> <span class='file-action js-file-remove' title='Delete' data-fid='"+(e.id)+"'>Remove</span> </span>";
			
			return "<div class='file -file pointer'> <span class='file-icon'><img src='"+(Client.share_url)+"/mimex/"+(icon)+".png'/></span> <span class='file-name' data-file='"+(e.url)+"'>"+(e.name)+"</span> <span class='file-info'>"+(UI.file.kb(e.size))+" &middot; Uploaded "+(AP.time.ago(e.since))+" by @"+(e.username)+"</span> "+(actions)+" </div>";
		})
	};
	
	
	/**
	 * @desc Get HTML of a list of files
	 */
	this.listCompact=function(files, opts){
		return AP.render(files, function(e){
			var icon=UI.file.ext(e.fid);
			
			return "<div class='file -file pointer url' data-fid='"+(e.id)+"' data-url=':file' data-file='"+(e.url)+"'> <span class='file-icon'><img src='"+(Client.share_url)+"/m4/"+(icon)+".svg'/></span> <span class='file-name ap-xdot'>"+(e.name)+"</span> </div>";
		})
	};
};UI.reorder=function(data, endpoint){
	return (new UIFloatRearrangements(data, endpoint)).show();
};



UI.selection=function(data, endpoint){
	return (new UIFloatSelections(data, endpoint)).show();
};




function UIFloatSelections(data, endpoint){
	this.canvas="#float-opts";
	this.box="#float-box";
	
	
	this.show=function(){
		build_html(data);
		return this;
	};
	
	this.callback=function(callback){
		$(this.canvas).data("callback", callback);
	};
	
	function build_html(data){
		var options=data;		
		var html=get_options_html(options);
		var mh=$(window).height()-250;
		if (mh<500){
			mh=500;
		}
		html="<div style='max-height:"+mh+"px; overflow-y:auto;'>"+html+"</div>";
		
		html+="<div class='back pointer' onclick='ui_options_hide(this);'><span class='icon -ap icon-arrow-left2'></span> OK</div>";
		
		html="<div id='float-box'>"+html+"</div>";
		
		var dx=AP.dialog("#float-opts")
		.engine(FormDialogEngine)
		.closable()
		.style("float-opts")
		.width(600)
		.title("Please select")
		.content(html)
		.show()
		;
		
		$("#float-opts").data('endpoint', endpoint);
		
		return dx;
	};
	
	
	function get_options_html(options){
		var html="";
		for (var i=0; i<options.length; i++){
			var opt=options[i];
			
			var icon="<span class='-ap icon-square-uncheck ap-f24 text-9'></span>";
			if (parseInt(opt.selected)){
				icon="<span class='-ap icon-square-check ap-f24 text-success selected'></span>";
			}
			html+="<div class='opt with-icon' data-value='"+opt.id+"'>" +
				"<div class='updown pointer' style='top:15px;' onclick='ui_options_pick(this)'>"+icon+"</div>"+
				"<div class='label'>"+opt.label+"</div>" +
				(opt.sublabel?"<div class='sublabel'>"+opt.sublabel+"</div>":"") +
			"</div>";
		};
		
		return html;
	};
	
	
};



function UIFloatRearrangements(data, endpoint){
	this.canvas="#float-opts";
	this.box="#float-box";
	
	
	this.show=function(){
		build_html(data);
		return this;
	};
	
	this.callback=function(callback){
		$(this.canvas).data("callback", callback);
	};
	
	function build_html(data){
		var options=data;		
		var html=get_options_html(options);
		var mh=$(window).height()-250;
		if (mh<500){
			mh=500;
		}
		html="<div style='max-height:"+mh+"px; overflow-y:auto;'>"+html+"</div>";
		
		html+="<div class='back pointer' onclick='ui_options_hide(this);'><span class='icon -ap icon-arrow-left2'></span> OK</div>";
		
		html="<div id='float-box'>"+html+"</div>";
		
		var dx=AP.dialog("#float-opts")
		.engine(FormDialogEngine)
		.closable()
		.style("float-opts")
		.width(600)
		.title("Please select")
		.content(html)
		.show()
		;
		
		$("#float-opts").data('endpoint', endpoint);
		
		return dx;
	};
	
	
	function get_options_html(options){
		var html="";
		for (var i=0; i<options.length; i++){
			var opt=options[i];
			
			html+="<div class='opt with-icon' data-value='"+opt.id+"'>" +
				"<div class='updown'><div class='up' onclick='ui_arrange_move(this, -1);'><span class='ficon-caret-up'></span></div> <div class='down' onclick='ui_arrange_move(this, 1);'><span class='ficon-caret-down'></span></div> </div>"+
				"<div class='label'>"+opt.label+"</div>" +
				(opt.sublabel?"<div class='sublabel'>"+opt.sublabel+"</div>":"") +
			"</div>";
		};
		
		return html;
	};
	
	
};



function ui_arrange_move(ref, order){
	var $elem=$(ref).closest('.opt');
	if (!$elem.length){
		return;
	}
	
	var val=$elem.data("value");
	var url=$("#float-opts").data("endpoint");
	var callback=$("#float-opts").data("callback");
	
	if (order==-1){
		var $prev=$elem.prev('.opt');
		if (!$prev.length){
			return;
		}
		
		$elem.slideUp(400, function(){
			$(this).insertBefore($prev).slideDown(400);
		});
		
		ui_arrange_save(url, val, -1, callback);
	}else if (order==1){
		var $next=$elem.next('.opt');
		if (!$next.length){
			return;
		}
		
		$elem.slideUp(400, function(){
			$(this).insertAfter($next).slideDown(400);
		});
		
		ui_arrange_save(url, val, 1, callback);
	};
};


function ui_arrange_save(url, val, ord, callback){
	UI.ajaxShow();
	AP.post(url, {id: val, order: ord}, function(code){
		UI.ajaxHide();
		if (!code.good()){
			return AP.alertError("Oops .. something wrong. The last action was not saved.");
		}
		
		callback(val, ord, code);
	});
};


function ui_options_pick(ref, order){
	var $elem=$(ref).closest('.opt');
	if (!$elem.length){
		return;
	}
	
	var selected=$elem.find(".selected").length;
	var value=0;
	
	if (selected){
		value=0;
	}else{
		value=1;
	}
	
	
	var url=$("#float-opts").data("endpoint");
	var name=$elem.data("value");
	var callback=$("#float-opts").data("callback");
	
	UI.ajaxShow();
	AP.post(url, {id: name, value: value}, function(code){
		UI.ajaxHide();
		if (!code.good()){
			return AP.alertError("Oops .. something wrong. The last action was not saved.");
		}
		
		if (value==0){
			$elem.find(".updown").html("<span class='-ap icon-square-uncheck ap-f24 text-9'></span>");
		}else{
			$elem.find(".updown").html("<span class='-ap icon-square-check ap-f24 text-success'></span>");
		}
		
		callback(name, value, code);
	});
}UI.percent=new function __UIPercent(){
	this.colors=["FF6666","D57766","AA8866","55AA66","2BBB66","00CC66"];
	
	this.text=function(percent){
		var p=parseInt(percent);
		var c=getColor(p);
		return "<span style='color:#"+c+"'>"+percent+"%</span>";
	};
	
	
	this.box=function(percent){
		var p=parseInt(percent);
		var c=getColor(p);		
		return "<div class='-pbox' style='background-color:#"+c+"'><em>"+percent+"<span class='symbol'>%</span></em></div>";
	};
	
	this.color=function(p){
		return getColor(parseInt(p));
	};
	
	function getColor(p){
		var c=UI.percent.colors[0];
		
		if (p>=100){
			c=UI.percent.colors[6];
		}else if (p>=80){
			c=UI.percent.colors[5];
		}else if (p>=60){
			c=UI.percent.colors[4];
		}else if (p>=40){
			c=UI.percent.colors[3];
		}else if (p>=20){
			c=UI.percent.colors[2];
		}else if (p>=10){
			c=UI.percent.colors[1];
		}else{
			c=UI.percent.colors[0];
		}
		
		return c;
	};
};



UI.countdown=function(canvas){
	setInterval(function(){
		var collection=[];
		$(canvas).each(function(){
			var timer=$(this).data("timer");
			var alarm=$(this).data("alarm");
			if (!alarm){
				alarm=3600;
			}
			
			collection.push({timer: parseInt(timer), elem: $(this), alarm: parseInt(alarm)})
		});
		
		var time=AP.time.now();
		for (var i=0; i<collection.length; i++){
			var item=collection[i];
			var rem=item.timer-time;
			if (rem<0){
				item.elem.html("00:00:00").addClass('red');
			}else{
				var s=rem%60;
				var m=((rem-s)/60)%60;
				var h=Math.floor(rem/3600);
				var d=Math.floor(h/24);
				h=h%24;
				
				if (d==0){
					if (rem < item.alarm){
						item.elem.html(AP.data.zeroPrefix(h)+":"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s)).addClass("red").addClass("anim-showhide-inf");
					}else{
						item.elem.html(AP.data.zeroPrefix(h)+":"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s));
					}
						
				}else{
					item.elem.html(AP.data.zeroPrefix(d)+"d "+AP.data.zeroPrefix(h)+"h");
				}
			}
		}
	},500);
};




UI.liveCountdown=function(selector_string, show_full, format){
	function getFormatedString(format, d, h, m, s){
		return format.replace("%d", d).replace("%h", h).replace("%m", m).replace("%s", s);
	};
	
	AP.rtimeout(function(){
		var time=AP.time.now();
		$(selector_string).each(function(){
			var $item=$(this);
			var is_smart=$item.data("smart");
			var timer=parseInt($item.data('timer'));
			var ended=$item.data("ended");
			if (!ended){
				ended="00:00:00";
			}
			
			var rem=timer-time;
			
			if (rem<0){
				$item.html(ended).addClass('red').addClass("-ended");
			}else{
				var s=rem%60;
				var m=((rem-s)/60)%60;
				var h=Math.floor(rem/3600);
				var d=Math.floor(h/24);
				h=h%24;
				
				if (is_smart){
					if (d==0 || d==1){
						if (h==0 && d==0){
							$item.html("00:"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s));
							if (!$item.hasClass("red")){
								$item.addClass("red").addClass("anim-showhide-inf");
							}
						}else{
							h=h+d*24;
							$item.html(AP.data.zeroPrefix(h)+":"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s));
						}
					}else{
						$item.html(AP.time.time("%M %d", timer));
					}
				}else{
					if (d==0){
						if (h==0){
							$item.html("00:"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s));
							if (!$item.hasClass("red")){
								$item.addClass("red").addClass("anim-showhide-inf");
							}
						}else{
							$item.html(AP.data.zeroPrefix(h)+":"+AP.data.zeroPrefix(m)+":"+AP.data.zeroPrefix(s));
						}
					}else{
						if (show_full){
							if (format){
								$item.html(getFormatedString(format, AP.data.zeroPrefix(d), AP.data.zeroPrefix(h), AP.data.zeroPrefix(m), AP.data.zeroPrefix(s)));
							}else{
								$item.html(AP.data.zeroPrefix(d)+"d "+AP.data.zeroPrefix(h)+"h"+" "+AP.data.zeroPrefix(m)+"m "+AP.data.zeroPrefix(s)+"s");	
							}
						}else{
							$item.html(AP.data.zeroPrefix(d)+"d "+AP.data.zeroPrefix(h)+"h");	
						}
					}
				}
			}
		});
	},1000);
};


UI.pageCountdown=function(selector_string, show_full){
	return UI.liveCountdown(selector_string, show_full);
};


UI.listToUsernames=function(users){
	if (!users.length){
		return "";
	}
	return AP.render(users, function(u, index, total){
		if (total<=1){
			return "@<b class='url username'>"+u.username+"</b>";
		}else{
			if (index==total-1){
				return "and @<b>"+u.username+"</b>";
			}else if (index<total-2){
				return "@<b class='url username'>"+u.username+"</b>, ";
			}else{
				return "@<b class='url username'>"+u.username+"</b> ";
			}
		}
	});
};


UI.objectsToUsernames=function(users, pattern){
	if (!users || !users.length){
		return "";
	}
	
	return AP.word.join(users, " ",function(u){
		if (AP.data.isString(u)){
			if (!pattern){
				return "@"+u;	
			}else{
				return pattern.replace("$",u);
			}
		}else{
			if (!pattern){
				return "@"+u.username;
			}else{
				return pattern.replace("$",u.username);
			}
		}
	});
};



UI.prettyNames=function(users){
	if (!users.length){
		return "";
	}
	return AP.render(users, function(u, index, total){
		if (total<=1){
			return "@<b class='url username'>"+u+"</b>";
		}else{
			if (index==total-1){
				return "and @<b>"+u+"</b>";
			}else if (index<total-2){
				return "@<b class='url username'>"+u+"</b>, ";
			}else{
				return "@<b class='url username'>"+u+"</b> ";
			}
		}
	});
};


UI.users=function(users, size){
	if (!size){
		size=32;
	}
	return AP.render(users, function(u){
		return "<div data-username='"+u.username+"' class='url avatar avatar-"+size+" rounded'><div class='image'><img src='"+u.gavatar+"'/></div></div>";
	});
};








UI.popUsers=function(url){
	return new PUsers(url);
};



function PUsers(url){
	this.__url=url;
	this.__data={};
	this.__render=null;
	this.__title="";
	this.__title2="";
	
	this.title=function(t1, t2){
		this.__title=t1;
		this.__title2=t2;
		return this;
	}
	
	this.data=function(data){
		this.__data=data;
		return this;
	};
	
	this.render=function(render){
		this.__render=render;
		return this;
	};
	
	this.show=function(){
		var $this=this;
		AP.post(this.__url,this.__data, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			var html=AP.render(code.users, function(u){
				return $this.__render(u);
			});
			
			html="<div class='list users-list'>"+html+"</div>";
			
			// Float dialog
			
			AP.dialog("users-dialog")
			.engine(FormDialogEngine2)
			.width(600)
			.title("<div class='title-1'>"+$this.__title+"</div><div class='title-2'>"+$this.__title2+"</div>")
			.content(html)
			.style("fs")
			.show();
			
			
		});
	};
};














UI.optionscb=null;

UI.options=function(data, callback){
	UI.optionscb=callback;
	return (new UIFloatOptions(data, callback));
};


function UIFloatOptions(data, callback){
	this.canvas="#float-opts";
	this.box="#float-box";
	$(this.canvas).data('callback', callback);
	
	this.show=function(){
		build_html(data);
		$(this.box+" .other .input-type-date").selectDate();
		$(this.box+" .other .input-type-time").selectTime({align: 'bottom'});
		return this;
	};
	
	
	function build_html(data){
		var options=data.options;
		var other=data.other;
		
		var html=get_options_html(options);
		if (other){
			html+=get_other_html(other);
		}
		
		if (data.back){
			html+="<div class='back pointer' onclick='ui_options_hide(this);'><span class='icon ficon-angle-left'></span> Back</div>";
		}
		
		html="<div id='float-box'>"+html+"</div>";
		
		var dx=AP.dialog("#float-opts")
		.engine(FormDialogEngine)
		.style("float-opts")
		.width(data.width)
		.title("Please select")
		.content(html)
		.show();
		
		$("#float-opts").data("options", options);
		
		return dx;
	};
	
	
	function get_options_html(options){
		var html="";
		for (var i=0; i<options.length; i++){
			var opt=options[i];
			
			html+="<div class='opt pointer"+(opt.icon?" with-icon":"")+"' onclick='ui_options_select(this);' data-value='"+opt.value+"'>" +
				(opt.icon?"<div class='icon'><div class='"+opt.icon+"'></div></div>":"") +
				"<div class='label'>"+opt.label+"</div>" +
				"<div class='ir'><span class='ficon-angle-right'></span></div>"+
				(opt.sublabel?"<div class='sublabel'>"+opt.sublabel+"</div>":"") +
			"</div>";
		};
		
		return html;
	};
	
	function get_other_html(other){
		var inputs="";
		for (var i=0; i<other.inputs.length; i++){
			var input=other.inputs[i];
			var w=Math.floor(80/other.inputs.length);
			inputs+="<div class='input left relative' style='width:"+w+"%'><div class='inputw'><input type='text' name='"+input.name+"' class='std input-type-"+input.type+"' placeholder='"+input.placeholder+"'/></div></div>";
		}
		
		inputs="<div class='inputs'>"+inputs+" <div class='ok right button button-edge success' onclick='ui_options_select_extra(this);'>OK</div> <div class='clear'></div></div>";
		
		var html="<div class='other opt'>" +
			"<div class='label'>"+other.label+"</div>" +
			inputs+
		"</div>";
		
		return html;
	};
};

function ui_options_hide(ref){
	AP.dialog("#float-opts").hide();
};

function ui_options_select(ref){
	var val=$(ref).data("value");
	var options=$("#float-opts").data("options");
	AP.dialog("#float-opts").hide();
	
	for (var i=0; i<options.length; i++){
		if (options[i].value==val){
			ui_options_callback(options[i], null);
			return;
		}
	}
};


function ui_options_select_extra(ref){
	var data={};
	AP.dialog("#float-opts").hide();
	$("#float-opts .other input").each(function(){
		var name=$(this).attr('name');
		var val=$(this).val();
		data[name]=val;
	});
	
	ui_options_callback({value: "other", "label":"Other", data: data});
};


function ui_options_callback(data){
	var callback=UI.optionscb;

	if (callback){
		callback(data);
	};
};







UI.user=new function __UIUser(){
	this.list=function(title, users){
		var html=AP.render(users, function(u){
			return simple(u);
		});
		
		var mh=$(window).height()-200;
		if (mh<200){
			mh=200;
		}
		
		html="<div class='title'>"+title+"<div class='-close' onclick='AP.closeDialog(this);'></div></div>" +
				"<div class='rh' style='max-height:"+mh+"px; overflow-y:auto;'><div class='list list-actions with-image -border'>"+html+"</div></div>";
		
		AP.customDialog(html,"custom-selection").style("-full").width(500).show();
		$("#custom-selection").addClass("__canvas");
	};
	
	
	this.listCompact=function(users, opts){
		opts=$.extend({}, {limit: 0}, opts);
		
		var html=AP.render(users, function(uid, index){
			if (opts.limit && index>=opts.limit){
				return "";
			}
			
			var u;
			
			if (AP.data.isObject(uid)){
				u=People.get(uid.username);
				if (!u.id || u.error){
					return "";
				}	
			}else{
				u=People.get(uid);
			}
			
			
			return "<div class='user url' title='"+(u.name)+"' data-username='"+(u.username)+"'> <div class='avatar avatar-32'><img src='"+(AP.thumb(u.gavatar))+"'></div> <div class='name'>"+(u.name)+"</div> <div class='info'>"+(u.title)+"&nbsp;</div> </div>";
		});
		
		if (opts.limit && users.length>opts.limit){
			html+="<div class='more'>+"+(users.length-opts.limit)+"</div>";
		}
		
		return html;
	};
	
	
	
	
	/**
	 * @desc User pickers, from dialogs
	 */
	this.picker=function(opts){
		opts=$.extend({multi: 1, ignore_me: 0}, opts);
		if (!opts.multi){
			opts.multi=0;
		}else{
			opts.multi=1;
		}
		
		Online.reorder(Client.people);
		var html=AP.render(Client.people, function(u){
			if (opts.ignore_me && parseInt(u.id)==parseInt(Client.viewer.id)){
				return "";
			}
			return render(u, opts.multi);
		});
		
		var mh=$(window).height()-270;
		if (mh<200){
			mh=200;
		}
		
		html="<div class='title'>"+(opts.title)+" <div class='-close' onclick='AP.closeDialog(this);'></div> </div> <div class='isearch'><input type='text' id='float-people-filter-ip' placeholder='Type here to quickly filter people'/></div> <div class='rh' style='max-height:"+(mh)+"px; min-height:150px; overflow-y:auto;'> <div class='list list-actions with-image -border'>"+(html)+"</div> </div>";
		
		if (opts.multi){
			html+="<div class='buttons -two'> <div class='button -first -passive-2 -rounded' onclick='AP.closeDialog(this);'>Cancel</div> <div class='button -second -success -rounded' onclick='__pickUserCallback(this); AP.closeDialog(this);'>OK</div> </div>";	
		}
		
		AP.customDialog(html,"custom-selection").style("-full").width(500).show();
		
		$("#custom-selection").data("callback", opts.callback).addClass("__canvas");
		
		$("#float-people-filter-ip").autofocus().on("input", function(){
			var q=$(this).val();
			UI.user.filter(q);
		});
	};
	
	
	this.pick=function(title, callback, ignore_me){
		Online.reorder(Client.people);
		var html=AP.render(Client.people, function(u){
			if (ignore_me && parseInt(u.id)==parseInt(Client.viewer.id)){
				return "";
			}
			return render(u);
		});
		
		var mh=$(window).height()-270;
		if (mh<200){
			mh=200;
		}
		
		html="<div class='title'>"+title+"<div class='-close' onclick='AP.closeDialog(this);'></div></div>" +
				"<div class='isearch'><input type='text' id='float-people-filter-ip' placeholder='Type here to quickly filter people'/></div>" +
				"<div class='rh' style='max-height:"+mh+"px; min-height:150px; overflow-y:auto;'><div class='list list-actions with-image -border'>"+html+"</div></div>";
		
		html+="<div class='buttons -two'> <div class='button -first -passive-2 -rounded' onclick='AP.closeDialog(this);'>Cancel</div> <div class='button -second -success -rounded' onclick='__pickUserCallback(this); AP.closeDialog(this);'>OK</div> </div>";
		
		AP.customDialog(html,"custom-selection").style("-full").width(500).show();
		
		$("#custom-selection").data("callback", callback).addClass("__canvas");
		
		$("#float-people-filter-ip").autofocus().on("input", function(){
			var q=$(this).val();
			UI.user.filter(q);
		});
	};
	
	
	
	
	this.menu=function(ref, username){
		var user=__getUserByUsername(username);
		var profile=null;
		
		if (user){
			profile={type: 'html', html:"<div class='-profile -with-image' data-uid='"+user.id+"'><div class='avatar avatar-40 -rounded'><div class='image url' data-url=':zoom' data-image='"+user.gavatar+"'><img src='"+AP.xthumb(user.gavatar)+"'/></div></div>" +
				"<div class='-text'>" +
					"<p class='-big'>"+user.name+"</p>" +
					"<p>@"+user.username+" &middot; "+___(user.title, "<i>No official title</i>")+"</p>" +
					"<p>"+___(user.phone, "<i>Phone number was not provided</i>")+"</p>" +
				"</div>"+
			"</div>"};	
		}else{
			return "";
		}
		
		var menu_items=[
			profile,
			{label: 'Xem profile', 'icon': 'icon-forward icm', action: function(){
   				AP.toURL(Base.domain("account")+"/user/"+username)
   			}},
			{label: 'Chat với <b>'+user.name+'</b>', 'icon': 'icon-comment icm', action: function(){
				Base.message.peer(user.id, {'from': 'context'});
				Context.hide();
			}}
		];	
		
		if (username==Client.viewer.username){
			menu_items= [
				profile,
				{label: 'View my profile', 'icon': 'icon-forward icm', action: function(){
					AP.toURL(Base.domain("account")+"/account")
				}},
			];
		}
		
		var data=$(ref).data("context.items");
		if (data && data.length){
			for (var i=0; i<data.length; i++){
				if (!data[i].icon){
					data[i].icon="icon-triangle-right";
				}
				menu_items.push(data[i]);
			}
		}
		
		return Context.menu(ref, {top: 24, left:20, menu: menu_items});
	};
	
	
	this.filter=function(q){
		if (q==":online"){
			$("#custom-selection  .li").each(function(){
				if ($(this).find(".avatar.-online").length){
					$(this).show();
				}else{
					$(this).hide();
				}
			});
		}else{
			$("#custom-selection  .li").each(function(){
				var matched=false;
				if (!q || !q.length){
					matched=true;
				}else{
					q=q.toLowerCase();
					var username="@"+$(this).find(".sub").text().toLowerCase();
					var name=$(this).find("b").text().toLowerCase();
					
					if (username.indexOf(q)>=0 || name.indexOf(q)>=0){
						matched=true;
					}
				}
				
				if (matched){
					$(this).show();
				}else{
					$(this).hide();
				}
			});
		}
	};
	
	
	this.avatars=function(usernames){
		return AP.render(usernames, function(e){
			var u=People.get(e);
			if (!u.id || !parseInt(u.id)){
				return "";
			}
			
			return "<div class='user url' title='"+(u.name)+"' data-username='"+(u.username)+"'> <div class='avatar avatar-32'><img src='"+(AP.thumb(u.gavatar))+"'></div> </div>";
		});
	};
	
	
	this.show=function(users){
		return AP.render(users, function(e){
			var u=People.get(e);
			if (!u.id || !parseInt(u.uid)){
				return "";
			}
			
			return "<div class='user url' title='"+(u.name)+"' data-username='"+(u.username)+"'> <div class='avatar avatar-32'><img src='"+(AP.thumb(u.gavatar))+"'></div> <div class='name'>"+(u.name)+"</div> <div class='info'>"+(u.title)+"&nbsp;</div> </div>";
		});
	}
	
	
	
	function render(user, is_multi){
		return "<div class='li item unselectable' data-multi='"+is_multi+"' data-user-id='"+user.id+"' onclick='__selectUser(this);'>" +
			"<div class='image'><div class='avatar "+(user.online?" -online":"")+"'><img src='"+AP.xthumb(user.gavatar)+"'/></div></div> <b>"+user.name+"</b><div class='sub'>@"+user.username+"</div>" +
			"<div class='-ricon'><span class='-select'></span></div>"+
		"</div>";
	}
	
	
	function simple(user){
		var sub=user.title;
		if (!user.title){
			sub="No job title";
		}
		return "<div class='li item unselectable url"+(sub.length?'':' -no-info')+"' data-username='@"+(user.username)+"'> <div class='image'><div class='avatar "+(user.online?' -online':'')+"'> <img src='"+(AP.xthumb(user.gavatar))+"'/> </div></div> <b>"+(user.name)+"</b> <div class='sub'>@"+(user.username)+" &middot; "+(sub)+"</div> <div class='-ricon'><span class='ficon-angle-right'></span></div> </div>";
	}
};
	

function __selectUser(ref){
	var id=$(ref).data("user_id");
	$(ref).toggleClass("selected");
	
	if ($(ref).data("multi")==0 && $(ref).hasClass("selected")){
		__pickUserCallback(ref);
	}
};



function __pickUserCallback(ref){
	var $canvas=$(ref).closest(".__canvas");
	var selected=[];
	
	$canvas.find(".li.item").each(function(){
		var id=$(this).data("user-id");
		if ($(this).hasClass("selected")){
			selected.push(id);
		}
	});
	
	AP.closeDialog(ref);	
	var fn=$canvas.data("callback");
	return fn(selected);
};



function ticon(name, size, color){
	name=name.toUpperCase();
	if (!size){
		size=32;
	}
	
	if (!color || color=="auto"){
		color=UI.str2int(name+"ab");
	};
	
	var txt=name.substr(0,2).toUpperCase();
	
	return "<div class='tavatar tavatar-"+size+" -bg-alt"+color+"'>"+txt+"</div>";
};UI.link=new function __UILink(){
	
	this.domain=function(url){
		 var domain;
	    //find & remove protocol (http, ftp, etc.) and get domain
	    if (url.indexOf("://") > -1) {
	        domain = url.split('/')[2];
	    }
	    else {
	        domain = url.split('/')[0];
	    }

	    //find & remove port number
	    domain = domain.split(':')[0];

	    return domain;
	};
	
};UI.setting=function __UISetting(title){
	return new UISetting(title);
};


function UISetting(title){
	this.options=[];
	this.title=title;
	this.__callback=null;
	
	this.add=function(opts){
		this.options.push(new UISettingOption(opts));
		return this;
	};
	
	this.callback=function(cb){
		for (var i=0; i<this.options.length; i++){
			this.options[i].callback=cb;
		}
		
		this.__callback=cb;
		return this;
	};
	
	this.show=function(canvas, callback){
		if (!callback) {
			callback = null;
		}
		
		if (canvas && canvas.length){
			return this.showInline(canvas, this.options);
		}else{
			if (!callback && this.__callback){
				callback=this.__callback;
			}
		}
		
		var html="<div class='title'>"+this.title+" <div class='close -close' onclick='AP.closeDialog(this)'></div></div>";
		html+="<div class='list -settings'>"+AP.render(this.options, function(e){
			return e.html();
		})+"</div>";
		
		
		AP.customDialog(html, "custom-settings").addClass("-full").width(640).show();
		Tag.user("#custom-settings input", Client.people);
		$("#custom-settings input").enter(function(){
			var val=$(this).val();
			var name=$(this).attr('name');
			var api=$(this).data("api");
			
			AP.ajaxShow("Updating ...");
			AP.post(api,{name: name, value: val}, function(code){
				AP.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}

				UI.flash("Preference saved!");
				if (callback) {
					callback(code, name, val);
				}
			});
		});
		
		
		$("#custom-settings select").change(function(){
			var val=$(this).val();
			var name=$(this).attr('name');
			var api=$(this).data("api");
			
			AP.ajaxShow("Updating ...");
			AP.post(api,{name: name, value: val}, function(code){
				AP.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Preference saved!");
				if (callback) {
					callback(code, name, val);
				}
			});
		});
		
		return this;
	};
	
	
	this.showYesNo=function(canvas){
		$(canvas).html("<div class='setting-box'><div class='title'>"+this.title+"</div> <div class='js-setting-body values'></div></div>");

		for (var i=0; i<this.options.length; i++){
			addYesNoOption(canvas, this.options[i]);
		}
	};
	
	
	this.showInline=function(canvas, options){
		for (var i=0; i<options.length; i++){
			addInlineOption(canvas, options[i]);
		}
	};
	
	
	/**
	 * @desc Insert option
	 */
	function addInlineOption(canvas, option){
		option.appendTo(canvas);
	};
	
	
	function addYesNoOption(canvas, option){
		option.appendYesNo($(canvas).find(".js-setting-body"));
	};
	
};






function UISettingOption(opts){
	this.opts=$.extend({}, {value:''}, opts);
	
	this.html=function(){
		return "<div class='li'><div class='title'>"+this.opts.title+"</div> <div class='value'>"+showValue(this.opts)+"</div></div>";
	};
	
	
	this.appendTo=function(canvas){
		var id=AP.uuid();
		var html="<div class='setting-box is-checkbox' id='"+id+"'><div class='title'>"+this.opts.title+"</div> <div class='values'>"+showCheckbox(this.opts)+"</div></div>";
		$(html).appendTo(canvas);
		$(canvas).data("object", this).addClass("__sts");
		
		$("#"+id+" .st-opt").click(function(){
			var name=$(this).data("name");
			var value=$(this).data("value");
			var url=$(this).data("url");
			
			$(this).siblings().removeClass("selected");
			$(this).addClass("selected");
			
			
			UI.ajaxShow();
			AP.post(url, {name: name, value: value}, function(code){
				UI.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				var obj=$(this).closest(".__sts");
				if (obj && obj.callback){
					obj.callback(name, value);
				}
			});
		});
	};
	
	
	this.appendYesNo=function($box){
		var selected="";
		if (this.opts.value=="yes"){
			selected=" selected";
		}
		
		var id=AP.uuid();
		$box.append("<div class='st-opt-wrapper' id='"+id+"'><div class='st-opt"+selected+"' data-url='"+this.opts.url+"' data-cvalue='"+this.opts.value+"' data-name='"+this.opts.name+"'>"+this.opts.title+"</div></div>");
		
		$("#"+id+" .st-opt").click(function(){
			var name=$(this).data("name");
			var value=$(this).data("value");
			var url=$(this).data("url");
			
			var next_val="yes";
			if ($(this).hasClass("selected")){
				next_val="no";
			}
			
			if (next_val=="no"){
				$(this).removeClass("selected");	
			}else{
				$(this).addClass("selected");
			}
			
			
			UI.ajaxShow();
			AP.post(url, {name: name, value: next_val}, function(code){
				UI.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				var obj=$(this).closest(".__sts")
				if (obj && obj.callback){
					obj.callback(name, value);
				}
			});
		});
	};
	
	
	
	function showValue(opts){
		var html="";
		if (opts.options==":custom:users"){
			return "<div class='input'><input data-api='"+opts.url+"' class='std __select-users' name='"+opts.name+"' value='"+opts.value+"' placeholder='Type @ to tag - press Enter to save'/> <div class='hint'>Press Enter after selecting users to save</div></div>";
		}
		
		
		for (var opt in opts.options){
			if (opts.value && opts.value==opt){
				html+="<option value='"+opt+"' selected>"+opts.options[opt]+"</option>";	
			}else{
				html+="<option value='"+opt+"'>"+opts.options[opt]+"</option>";	
			}
		}
		
		return "<div class='select'><select class='std' name='"+opts.name+"' data-api='"+opts.url+"'>"+html+"</select></div>";
	};
	
	
	
	function showCheckbox(opts){
		var html="<div class='hidden'><input type='hidden' name='"+opts.name+"'/></div>";
		
		for (var opt in opts.options){
			if (opts.value && opts.value==opt){
				html+="<div class='st-opt selected' data-url='"+opts.url+"' data-name='"+opts.name+"' data-value='"+opt+"'>"+opts.options[opt]+"</div>";	
			}else{
				html+="<div class='st-opt' data-url='"+opts.url+"' data-name='"+opts.name+"' data-value='"+opt+"'>"+opts.options[opt]+"</div>";	
			}
		}
		
		return html;
	};
	
};
UI.tree=new function __UITree(){
	this.html=function(node, fn){
		return printTree(node, fn);
	};
	
	this.getTrace=function(root, node){
		var traces=[];
		buildTrace(root, node, traces);
		return traces.reverse();
	};
	
	
	this.findNode=function(root, nid){
		nid=parseInt(nid);
		if (parseInt(root.id)==nid){
			return root;
		}
		
		for (var i=0; i<root.nodes.length; i++){
			node=this.findNode(root.nodes[i], nid);
			if (node){
				return node;
			}
		}
		
		return null;
	};
	
	
	this.options=function(node, fn){
		var root=null;
		if (AP.data.isArray(node)){
			var root={id:0, nodes: node, name: "Root", level: 0, 'root': 1};
		}else{
			root=node;
		}
		
		return printTree(root, function(e, level){
			if (e.root && e.root==1){
				return "";
			}
			return "<option value='"+e.id+"'>"+("--").repeat(level-1)+" "+e.name+"</option>";
		});
		
	};
	
	
	function buildTrace(root, node, traces){
		if (parseInt(root.id)==parseInt(node.id)){
			return true;
		}
		
		for (var i=0; i<root.nodes.length; i++){
			if (buildTrace(root.nodes[i], node, traces)){
				traces.push(root.nodes[i]);
				return true;
			}
		}
		
		return false;
	};

	
	
	function printTree(node, render){
		return printNode(node, node.level, render);
	};
	
	

	function printNode(node, level, render){	
		var html=render(node, level);
		
		if (!node.nodes || !node.nodes.length){
			return html;
		}
		
		html+="<div class='box box-"+level+"' id='node-"+node.gid+"' data-level='"+level+"' data-id='"+node.id+"' data-hid='"+node.hid+"' data-token='"+node.token+"' data-name='"+node.name+"'>";
		for (var i=0; i<node.nodes.length; i++){
			html+=printNode(node.nodes[i], level+1, render);
		}
		html+="</div>";
		
		return html;
	};
};var Emoji=new function __Emoji(){
	this.icons=["angel","angry","anguished","beer","biglike","blushing","cat_grinning","cat_kissing","cat_lovely","cat_pouting","cat_sad", "cat_tear_joy","cat_wry_smile","cat_wth",
	            "cheer","chicken","chicken_egg","cold_sweat","confounded","confused","cool","crying","cup", "delicious", "disappointed", "donkey", "evil", "expressionless",
	            "fearful","flu", "frowning", "grinning", "grinning_evil", "happy_cry", "heart", "heart_gift", "hix", "huh", "hushed", "kissing", "lovely_evil", "meow", 
	            "neutral","nospeaking", "olala", "omg", "pensive", "pouting", "relieved", "sad", "screaming", "sleeping", "sleepy", "sleepy_face", "smiling", "smiling_closed_eye",
	            "smiling_eye","smiling_face", "smirking","surprised", "tears", "tired", "tongue", "tongue_closed_eyes", "unamused", "weary", "what_the_heck", "whistle",
	            "whistle_heart", "wink",
	            "tuzki_5ting", "tuzki_angry", "tuzki_ballet", "tuzki_bed", "tuzki_birthday", "tuzki_bored", "tuzki_bye", "tuzki_charmingly_refuse", "tuzki_chilling", "tuzki_chilling2", "tuzki_chilling3", "tuzki_crying", "tuzki_dancing", "tuzki_dancing2", "tuzki_daydreaming", "tuzki_depressed", "tuzki_disappointed", "tuzki_dispirited", "tuzki_droop", "tuzki_eating", "tuzki_feel_the_beat", "tuzki_giggling", "tuzki_headspin", "tuzki_heart", "tuzki_heroic", "tuzki_high_kick", "tuzki_hyperactive", "tuzki_idk", "tuzki_in_jail", "tuzki_killing", "tuzki_kissing", "tuzki_milk", "tuzki_mr_bean", "tuzki_out_of_my_way", "tuzki_panic", "tuzki_shocked", "tuzki_sleepy", "tuzki_star_reaching", "tuzki_superman", "tuzki_swag_buddy", "tuzki_swag2", "tuzki_swag3", "tuzki_swagging", "tuzki_sweating", "tuzki_taichi", "tuzki_wake_up"];
	
	this.pick=function(callback){
		var html="";
		for (var i=0; i< this.icons.length; i++){
			var key=this.icons[i];
			var img=Client.share_url+"/emojis/"+key+".png";
			if(key.substr(0, 6) == "tuzki_") {
			    img = Client.share_url + "/tuzki/" + key + ".gif";
			}
			html+="<div class='item' style='width:10%' title=':"+key+":' data-val=':"+key+":' onclick='__pickEmoji(this)'><div class='inner -full'><img src='"+img+"'/></div></div>";
		}
		
		html="<div class='list-emotions' style='width:500px' id='__pickemo'>"+html+"</div>";
		AP.selectOne("Click to select an emotion you like",html);
		$("#__pickemo").data("callback", callback);
	};
	
	
	this.match=function(r){
		r=r.replace(/\:\w+\:/gi, function(match){
			var test=match.substr(1, match.length-2);
			for (var i=0; i<Emoji.icons.length; i++){
				if (Emoji.icons[i]==test){
				    if(test.substr(0, 6) == "tuzki_") {
				        return "<img src='" + Client.share_url + "/tuzki/" + test + ".gif'/>";
				    }
					return "<img src='"+Client.share_url+"/emojis/"+test+".png'/>";
				}
			}
			
			return match;
		});
		
		return r;
	};
	
};UI.orgchart=new function __UIORGChart(){
	this.zoom=1;
	this.tree=null;
	
	this.display=function(tree, canvas, render, opts){
		if (!tree.id || !parseInt(tree.id)){
			tree.id=0;
		}
		
		opts=$.extend({}, {width: 150, height: 100, space: 100}, opts);
		opts.base={width: opts.width + opts.space, height: opts.height+60};
		
		tree.level=1;
		tree.height=1;
		tree.offset=0;
		tree.root=1;
		initOrgchart(tree);
		
		if (tree.nodes && opts.collapsed){
			for (var i=0; i<tree.nodes.length; i++){
				tree.nodes[i].orgchart.show=0;
			}
		}
		
		displayChart(tree, canvas, render, opts);
		
		if (opts.mousewheel){
			$(canvas).on("mousewheel", function(event){
				var factor=event.originalEvent;
				if (!factor){
					return;
				}
				
				if (factor.deltaY<0){
					UI.orgchart.zoomIn($(this).find(".orgchart-canvas"));
				}else if (factor.deltaY>0){
					UI.orgchart.zoomOut($(this).find(".orgchart-canvas"));
				}
			});
		}
		
		this.zoom=1;
		this.tree=tree;
		this.tree.__options=opts;
		this.tree.__canvas=canvas;
	};
	
	this.zoomIn=function(ref){
		this.zoom+=0.15;
		$(ref).closest(".orgchart").find('.orgchart-canvas').css("zoom",this.zoom);
	};
	
	
	this.zoomOut=function(ref){
		this.zoom-=0.15;
		if (this.zoom<0.4){
			this.zoom=0.4;
		}
		$(ref).closest(".orgchart").find('.orgchart-canvas').css("zoom",this.zoom);
	};
	
	
	this.collapse=function(ref){
		var id=$(ref).data("id");
		var $wrap=$(ref).closest(".wrap");
		var collapsed=1;
		
		if ($wrap.hasClass("-collapsed")){
			collapsed=0;
			$wrap.removeClass("-collapsed").children(".nodes").show();
		}else{
			$wrap.addClass("-collapsed").children(".nodes").hide();	
		}
		
		var $pwrap=$wrap.closest(".nodes");
		updateTreeData(this.tree, function(e){
			if (collapsed){
				if (parseInt(e.id)==parseInt(id)){
					e.orgchart.show=0;
				}
			}else{
				if (parseInt(e.id)==parseInt(id)){
					e.orgchart.show=1;
				}
			}
		});
		
		var opts=this.tree.__options;
		computeWidth(this.tree, opts);		
		
		var $canvas=$(this.tree.__canvas);
		
		updateTreeData(this.tree, function(node){
			if (!node.orgchart.offset){
				$canvas.find(".js-wrap-"+node.id).css("width", node.orgchart.width);	
			}else{
				$canvas.find(".js-wrap-"+node.id).css("left", node.orgchart.offset).css("width", node.orgchart.width);
			}
			
			if (node.nodes.length){
				var ll=node.nodes[0].orgchart.width/2+opts.space/2;
				var lr=node.nodes[node.nodes.length-1].orgchart.width/2 - opts.space/2;
				
				$canvas.find(".js-wrap-"+node.id+" > .nodes > .-line").css({left: ll, right: lr});
			}
			
			var left=(node.orgchart.width-opts.width+opts.space)*0.5;
			$canvas.find(".js-wrap-"+node.id+" > .nodew").css("left", left);
		});
		
	};
	
	
	function displayChart(tree, canvas, render, opts){
		$(canvas).html("<div class='orgchart'>" +
			"<div class='zoom'>" +
			"	<span class='-first' onclick='UI.orgchart.zoomIn(this);'><span class='-ap icon-plus4'></span></span>" +
			"	<span class='-second' onclick='UI.orgchart.zoomOut(this);'><span class='-ap icon-minus2'></span></span>" +
			"</div>" +
			"<div class='orgchart-outer-canvas'><div class='orgchart-canvas'></div></div>" +
		"</div>");
		
		show(tree, canvas, render, opts);
	};
	
	
	function show(tree, canvas, render, opts){
		computeWidth(tree, opts);
		testWidth(tree);
		var html=getGraphicDisplay(tree, render, opts);
		
		
		var $canvas=$(canvas);
		$canvas.find(".orgchart-canvas").html(html).css("width", tree.width+100).css("height",tree.height*opts.base.height);
		var l=(tree.width-$canvas.width())/2;
		$canvas.find(".orgchart-outer-canvas").css("width", tree.width+100).css("height",tree.height*opts.base.height).css("position","absolute").css("left", -l).css("top",30);
		$canvas.find(".orgchart-outer-canvas").draggable({cursor: "move"});
	};
	
	
	function balance(canvas){
		$(canvas).find('.orgchart-outer-canvas').css("width", Client.pageData.tree.width+100).css("height",Client.pageData.tree.height*opts.base.height).css("position","absolute").css("left", -l).css("top",30);
	};
	
	
	function getGraphicDisplay(node, render, opts){
		if (!node.nodes || !node.nodes.length){
			return "<div class='wrap js-wrap-"+node.id+"' style='z-index:"+((100-node.level)*5+100)+"; top:0px; left:"+node.orgchart.offset+"px; width:"+(node.orgchart.width)+"px'>"+showSingleNode(node, render, opts)+"</div>";
		}else{
			var ll=node.nodes[0].orgchart.width/2+opts.space/2;
			var lr=node.nodes[node.nodes.length-1].orgchart.width/2 - opts.space/2;
			
			var line="<div class='-line' style='left:"+ll+"px; right:"+lr+"px'></div>";
			return "<div class='wrap js-wrap-"+node.id+" "+((node.orgchart.show)?"":"-collapsed")+"' style='z-index:"+((100-node.level)*5+100)+"; top:0px; left:"+node.orgchart.offset+"px; width:"+(node.orgchart.width)+"px; height:"+(node.orgchart.height*opts.base.height)+"px'>"+
				showSingleNode(node, render, opts)+
				"<div class='nodes -nodes "+((node.orgchart.show)?"":"hidden")+"' style='top:"+opts.base.height+"px'>"+line + AP.render(node.nodes, function(e){
					return getGraphicDisplay(e, render, opts);
				})+"</div>" +
			"</div>";
		}
	};
	
	
	
	function showSingleNode(node, render, opts){
		var w=node.width;
		var level=node.level;
		var left=(node.orgchart.width-opts.width+opts.space)*0.5;
		var eclass="";
		if (!node.nodes || !node.nodes.length){
			eclass=" -leaf";
		}
		
		if (node.metatype && parseInt(node.metatype)){
			eclass+=" -exe";
		}
		var id=node.id;
		if (node.root){
			id=0;
		}
		
		var collapse_button="<div class='cbt' onclick='UI.orgchart.collapse(this);' data-id='"+node.id+"'><span></span></div>";
		if (!node.nodes || !node.nodes.length){
			collapse_button="";
		}
		
		return "<div class='nodew"+eclass+"' style='left:"+left+"px; width:"+opts.width+"px; height:"+opts.height+"px' data-cwidth='"+node.orgchart.width+"' data-cheight='"+node.orgchart.height+"'>" +
			"<div class='node' style='width:"+opts.width+"px; height:"+opts.height+"px'> " +
				render(node)+
				collapse_button +
			"</div>" +
		"</div>";
		
	};
	
	
	
	function initOrgchart(node){
		node.orgchart={show: 1};
		
		if (!node.nodes || !node.nodes.length){
		}else{
			for (var i=0; i<node.nodes.length; i++){
				initOrgchart(node.nodes[i]);
			}
		}
	};
	
	
	function updateTreeData(node, fx){
		fx(node);
		
		if (!node.nodes || !node.nodes.length){
		}else{
			for (var i=0; i<node.nodes.length; i++){
				updateTreeData(node.nodes[i], fx)
			}
		}
	};
	
	
	function testWidth(tree){
		updateTreeData(tree, function(e){
			$.log([e.name, e.orgchart.show, e.orgchart.width, e.orgchart.offset]);
		})
	};
	

	
	function computeWidth(node, opts){
		if (!node.nodes || !node.nodes.length){
			node.orgchart.width=opts.width + opts.space;
			node.orgchart.offset=opts.space/2;
			node.orgchart.height=1;
			return opts.base.width;
		}else if (!node.orgchart.show){
			node.orgchart.width=opts.width + opts.space;
			node.orgchart.offset=opts.space/2;
			node.orgchart.height=1;
			return opts.base.width;
		}else{
			var w=0;
			for (var i=0; i<node.nodes.length; i++){
				node.nodes[i].level=node.level+1
				w+=computeWidth(node.nodes[i], opts);
			}

			
			var offset=0;
			var max_height=1;
			for (var i=0; i<node.nodes.length; i++){
				node.nodes[i].orgchart.offset=offset;
				offset+=node.nodes[i].orgchart.width;
				if (node.nodes[i].orgchart.height>max_height){
					node.nodes[i].orgchart.height=max_height;
				}
			}
			
			node.orgchart.width=w;
			node.orgchart.height=max_height+1;
			return w;
		}
	};

};function getMainColor(){
	if (!Client.viewer || !Client.viewer.color){
		return "#000";
	}
	
	var c=parseInt(Client.viewer.color);
	if (c==0){
		c=1;
	}
	var list=["#2a91d6", "#00BCD4", "#26A69A", "#4CAF50", "#5969c5", "#FFC107", "#FF6F22", "#CF5555", "#ee59ba"];
	return list[c-1];
	
}

UI.color=new function __UIColor(){
	var colors=["#EB6450","#F7CF2D","#CEED5F","#A5E33B","#49E33B"];
	this.regs={};
	
	this.main=getMainColor();
	
	this.get=function(id){
		if (id=="success"){
			return "#14cc3f";
		}
		
		if (id=="error"){
			return "#c34343";
		}
		
		if (AP.data.isString(id) && this.regs[id]){
			return this.regs[id];
		}
		
		id=parseInt(id);
		if (id>=4){
			id=4;
		}
		return colors[id];
	};	
	
	this.register=function(key, val){
		this.regs[key]=val;
	};
	
	this.getRandom=function(){
		return this.get(AP.data.randomInteger(0,5));
	};
	
	this.rgba=function(hexcolor, a){
		if (hexcolor=="transparent"){
			return "transparent";
		}
		
		var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hexcolor);
		var rgb= result ? {
			r: parseInt(result[1], 16),
			g: parseInt(result[2], 16),
			b: parseInt(result[3], 16)
		} : null;
		
		if (rgb){
			return "rgba("+rgb.r+", "+rgb.g+", "+rgb.b+", "+a+")"
		}
		
		return "#000";
	};
	
	
	this.darken=function(hexcolor, point){
		return shadeColor(hexcolor, point);
	};
	
	this.adjust=function(hexcolor, x, y){
		if (hexcolor=="transparent"){
			return "transparent";
		}
		var hsl=rgbToHsl(hexcolor);
		if (x>=0){
			hsl.s=(1-hsl.s/100.0)*x+hsl.s;	
		}else{
			hsl.s=(-1+hsl.s/100.0)*x+hsl.s;
		}
		
		if (y>0){
			hsl.l=(1-hsl.l/100.0)*y+hsl.l;	
		}else{
			hsl.l=(-1+hsl.l/100.0)*y+hsl.l;
		}
		
		
		return hsl2rgb(hsl);
	};
	
	this.complete=function(percent){
		var x=parseFloat(percent);
		
		if (x<60){
			return colors[0];
		}
		
		if (x>=60 && x<80){
			return colors[1];
		}
		
		if (x>=80 && x<95){
			return colors[2];
		}
		
		if (x>=95 && x<100){
			return colors[3];
		}
		
		if (x>=100){
			return colors[4];
		}
	};
	
	
	this.incomplete=function(color){
		if (color>100){
			color=100;
		}
		
		return this.complete(100-color);
	};
	
	
	this.progress=function(obj){
		var x=0;
		var etime=parseInt(obj.etime);
		var stime=parseInt(obj.stime);
		var time=AP.time.now();
		
		if (obj.percent){
			var p=parseFloat(obj.percent);
			var target=100;
			var base=0;
			
			if (time> etime){
				x=parseInt(p);
			}else if (time > stime){
				var speed = (p - base)/(time-stime);
				var expected=(target-base)/(etime-stime);
				x=parseInt(speed*100.0/expected); // Expected speed
			}
		}else{
			var complete=parseInt(obj.complete);
			var target=100;
			var base=0;
			
			if (time> etime){
				x=parseInt(complete*100.0/target);
			}else if (time > stime){
				var speed = (complete - base)*1000.0/(time-stime);
				var expected=(target-base)*1000.0/(etime-stime);
				x=parseInt(speed*100.0/expected); // Expected speed
			}	
		}
		
		if (x<60){
			return colors[0];
		}
		
		if (x>=60 && x<80){
			return colors[1];
		}
		
		if (x>=80 && x<95){
			return colors[2];
		}
		
		if (x>=95 && x<100){
			return colors[3];
		}
		
		if (x>=100){
			return colors[4];
		}
	};
	
	
	this.percent=function(p){
		return this.complete(p);
	};
	
	
	this.picker=function(selector){
		$(selector).each(function(){
			if ($(this).hasClass("__jscolorpicker")){
				return;
			}
			
			$(this).addClass("__jscolorpicker");
			$(this)[0].autocomplete="off";
			
			$(this).on('click', function () {
				var obj = $(this)[0];
				if (!obj.hasPicker) {
					var picker = new jscolor(obj, {});  //
					obj.hasPicker = true;
					picker.show();
				}
			}); 
		});   
	};
	
	
	
	function shadeColor(hex, lum){
		// validate hex string
		hex = String(hex).replace(/[^0-9a-f]/gi, '');
		if (hex.length < 6) {
			hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
		}
		lum = lum || 0;

		// convert to decimal and change luminosity
		var rgb = "#", c, i;
		for (i = 0; i < 3; i++) {
			c = parseInt(hex.substr(i*2,2), 16);
			c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
			rgb += ("00"+c).substr(c.length);
		}

		return rgb;
	};
	
	
	function rgbToHsl(rgb){
		var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
		var hex = rgb.replace(shorthandRegex, function(m, r, g, b) {
			return r + r + g + g + b + b;
		});
		
		var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
		
		var color= result ? {
			r: parseInt(result[1], 16),
			g: parseInt(result[2], 16),
			b: parseInt(result[3], 16)
		} : null;
		
		var r=color.r/255.0;
		var g=color.g/255.0;
		var b=color.b/255.0;
		
		
		var max = Math.max(r, g, b), min = Math.min(r, g, b);
		var h, s, l = (max + min) / 2;

		if(max == min){
			h = s = 0; // achromatic
		}else{
			var d = max - min;
			s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
			switch(max){
				case r: h = (g - b) / d + (g < b ? 6 : 0); break;
				case g: h = (b - r) / d + 2; break;
				case b: h = (r - g) / d + 4; break;
			}
			h /= 6;
		}

		return {h: Math.floor(h * 360), s: Math.floor(s * 100), l: Math.floor(l * 100)};
	};
	
	
	function hsl2rgb(hsl){
		var r, g, b;
		
		var h=hsl.h/360.0;
		var s=hsl.s/100.0;
		var l=hsl.l/100.0;
		

		if (s == 0) {
			r = g = b = l; // achromatic
		} else {
			var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
			var p = 2 * l - q;

			r = hue2rgb(p, q, h + 1/3);
			g = hue2rgb(p, q, h);
			b = hue2rgb(p, q, h - 1/3);
		}

		return "#" + componentToHex(r*255) + componentToHex(g*255) + componentToHex(b*255);
	};
	
	
	function hue2rgb(p, q, t) {
		if (t < 0) t += 1;
		if (t > 1) t -= 1;
		if (t < 1/6) return p + (q - p) * 6 * t;
		if (t < 1/2) return q;
		if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;
		return p;
	};
	
	function componentToHex(c) {
		c=parseInt(c);
		var hex = c.toString(16);
		return hex.length == 1 ? "0" + hex : hex;
	};
};


var Color=UI.color;UI.emoticons={
	':-)' : 'smile.gif',	
	':))'	: 'laughing.gif',
	':)'	: 'smile.gif',
	'::smile::' : 'smile.gif',
	';)'	: 'wink.gif',
	'::wink::' : 'wink.gif',
	':d'	: 'big.grin.gif',
	':-d'	: 'big.grin.gif',
	':-|'	: 'smile.gif',
	':|'	: 'straight.gif',
	':-s'	: 'worried.gif',
	':x' : 'love.gif',
	':*' : 'kiss.gif',
	':p' : 'tounge.gif',
	':((' : 'cry.gif',
	':(' : 'sad.gif',
	':-o'	: 'suprised.gif',
	'=))' : 'rolling.gif',
	'>-s'	: 'devil.gif',
	'::shocked::' : 'shocked.gif',
	'::angry::' : 'angry.gif',
	'::embarrassed::': 'embarrassed.gif',
	'::huh::':'huh.gif',
	'(y)':'biglike.png',
	':v':'pacman.png',
	':3':'colonthree.png',
	'b-)':'sunglasses.gif'
};

UI.emotion=function(text) {
	var emoticons = UI.emoticons;
	
	var icons = {
		'(y)' : 'thumbs-up2',
	},
		
	url = Client.share_url+"/emotions/", 
	patterns = [], ipatterns=[],
	metachars = /[[\]{}()*+?.\\|^$\-,&#\s]/g;

	
	// build a regex pattern for each defined property
	for (var i in emoticons) {
		if (emoticons.hasOwnProperty(i)){ // escape metacharacters
			patterns.push('('+i.replace(metachars, "\\$&")+'(\\b|&|\\.|\\,|$))');
		}
	}

	// build a regex pattern for each defined property
	for (var i in icons) {
		if (icons.hasOwnProperty(i)){ // escape metacharacters
			ipatterns.push('('+i.replace(metachars, "\\$&")+')');
		}
	}
	
	// build the regular expression and replace
	var r= Emoji.match(text);
	r= r.replace(new RegExp(patterns.join('|'),'ig'), function (match) {
	 var m=match.toLowerCase();
	 return typeof emoticons[m] != 'undefined' ?
					 '<img class="emo" src="'+url+emoticons[m]+'"/>' :
					 match;
	}).replace(new RegExp(ipatterns.join('|'),'ig'), function (match) {
		 var m=match.toLowerCase();
		 return typeof icons[m] != 'undefined' ?
					' &nbsp;<span class="-ap icon-'+icons[m]+' text-main ap-f32"></span>' :
					match;
	});
	
	return r;
};



UI.pickEmotion=function(callback){
	var html="";
	for (var key in UI.emoticons){
		var img=Client.share_url+"/emotions/"+UI.emoticons[key];
		html+="<div class='item' style='width:10%' title='"+key+"' data-val='"+key+"' onclick='__pickEmo(this)'><div class='inner'><img src='"+img+"'/></div></div>";
	}
	
	html="<div class='list-emotions' style='width:500px' id='__pickemo'>"+html+"</div>";
	AP.selectOne("Click to select an emotion you like",html);
	$("#__pickemo").data("callback", callback);
};


function __pickEmo(ref){
	var val=$(ref).data('val');
	var fn=$("#__pickemo").data("callback");
	
	AP.closeDialog(ref);
	fn(val+" ");
};


function __pickEmoji(ref){
	var val=$(ref).data('val');
	var fn=$("#__pickemo").data("callback");
	
	AP.closeDialog(ref);
	fn(val);
}UI.graph=new function __UIGraph(){
	this.getSpeed=function(obj){
		var x=0;
		var etime=parseInt(obj.etime);
		var stime=parseInt(obj.stime);
		var time=AP.time.now();
		
		var complete=parseInt(obj.complete);
		var target=100;
		var base=0;
		
		if (time> etime){
			x=parseInt(complete*100.0/target);
		}else if (time > stime){
			var speed = (complete - base)*1000.0/(time-stime);
			var expected=(target-base)*1000.0/(etime-stime);
			x=parseInt(speed*100.0/expected); // Expected speed
		}
		
		return x;
	};
	
	
	this.sector=function(selector, options){
		options=$.extend({thickness: 4, fontSize:10, color: "#888888", bgColor:"#eee"}, options);
		
		$(selector).css({"width": options.size, "height": options.size}).addClass("js-sector-chart").html("<div class='js-sector -circled' style='position:absolute; width:"+options.size+"px; height:"+options.size+"px; background-color:"+options.bgColor+"'></div>");
		
		var data = {
			size: options.size,
			sectors: [
				{
					percentage: options.percent/100,
					label: 'Thing 1',
					color: options.color
				}
			]
		};	

		sectors = calculateSectors(data);
		var newSVG = document.createElementNS("http://www.w3.org/2000/svg","svg" );
		newSVG.setAttributeNS(null, 'style', "width: "+data.size+"px; height: " + data.size+ "px");
		
		var $box=$(selector).find(".js-sector");
		$box[0].appendChild(newSVG)


		sectors.map(function(sector){
			var newSector = document.createElementNS("http://www.w3.org/2000/svg","path" );
			newSector.setAttributeNS(null, 'fill', sector.color);
			newSector.setAttributeNS(null, 'd', 'M' + sector.L + ',' + sector.L + ' L' + sector.L + ',0 A' + sector.L + ',' + sector.L + ' 0 ' + sector.arcSweep + ',1 ' + sector.X + ', ' + sector.Y + ' z');
			newSector.setAttributeNS(null, 'transform', 'rotate(' + sector.R + ', '+ sector.L+', '+ sector.L+')');

			newSVG.appendChild(newSector);
		});

		
		if (options.cutout){
			var midCircle = document.createElementNS( "http://www.w3.org/2000/svg","circle" );
			midCircle.setAttributeNS(null, 'cx', data.size * 0.5 );
			midCircle.setAttributeNS(null, 'cy', data.size * 0.5);
			midCircle.setAttributeNS(null, 'r', data.size * options.cutout/200 );
			midCircle.setAttributeNS(null, 'fill', options.bgColor );
			newSVG.appendChild(midCircle);	
		};
	};
	
	
	this.percent=function(selector, opts){
		opts=$.extend({thickness: 4, fontSize:10, color: "#888888", bgcolor:"#bbb"}, opts); 
		
		if (opts.text && opts.text.length){
			$(selector).data("text", opts.text);
		}
		
		if (opts.color && opts.color.length){
			$(selector).data("color", opts.color);
		}
		
		if (opts.percent && AP.data.isNumber(opts.percent)){
			$(selector).data("percent", opts.percent);
		}
		
		if (opts.size && AP.data.isInt(opts.size)){
			$(selector).data("size", opts.size);
		}
		
		
		$(selector).each(function(){
			$(this).data('fgcolor', $(this).data('color'));
			$(this).data('bgcolor', opts.bgcolor);
			$(this).attr('title', $(this).data('percent')+"%");
			
			$(this).circliful({
				dimension: $(this).data('size'), width: opts.thickness, fontsize: opts.fontSize, fillColor: '#333',  animationStep: 10, backgroundBorderWidth: 32
			});
		});
	};
	
	
	this.progression=function(object, canvas, opts, callback){
		opts=$.extend({}, {title: true, prediction: true, label: true}, opts);
		var title="<div class='title'>Tiến độ trong 30 ngày gần đây</div>";
		if (!opts.title){
			title="";
		}
		
		$(canvas).html("<div class='objbox -graph'> "+title+" <div class='graph'></div> <div class='none'></div> </div>  <div class='objbox -prediction'></div>");
		showProgressionGraph(object, $(canvas), opts, callback);
		
	};
	
	
	/**
	 * @desc Linear regression model
	 */
	this.learn=function(data){		
		var xavg=0;
		var yavg=0;
		
		for (var i=0; i<data.length; i++){
			var temp=parseFloat(data[i]);
			if (!temp){
				temp=0;
			}
			data[i]=temp;
			
			xavg=xavg+i;
			yavg=yavg+data[i];
		}
		
		xavg=xavg*1.0/data.length;
		yavg=yavg*1.0/data.length;
		
		var upper=0;
		var lower=0;
		
		for (var i=0; i<data.length; i++){
			upper+=(i-xavg)*(data[i]-yavg);
			lower+=(i-xavg)*(i-xavg); 
		}
		
		if (lower==0){
			return [0,0];
		}
		
		var a=upper*1.0/lower;
		var b=yavg - a*xavg;
		
		// Function is now: y(n)= a * x(n) + b for all n
		
		return [a,b];
	};
	
	
	
	
	function showProgressionGraph(objective, $outer_canvas, options, callback){
		var data=prepareProgressions(objective);
		var projection=prepareProjections(objective);
		
		if (data && !data.error){
			$outer_canvas.find(".objbox.-graph .none").hide();
			$outer_canvas.find(".objbox.-graph .graph").show();
			if (projection && !projection.error){
				intellichart(objective, $outer_canvas.find(".objbox.-graph .graph"), data, projection, options);
			}else{
				stdchart($outer_canvas.find(".objbox.-graph .graph"), data.labels, data.values, data.color, options);
			}
		}else{
			$outer_canvas.find(".objbox.-graph .none").show().html("<center style='color: #888;'>Không có dữ liệu để hiển thị</center>");	
		}
	};
	
	
	
	
	function prepareProgressions(objective){
		var time=objective.progressions.last;
		var data=objective.progressions.data;
		var labels=[];
		var values=[];
		
		if (!data || !data.length){
			return {error: 1};
		}
		
		var max_displays = 10;
		
		for (var i=0; i<data.length; i++){
			var num=parseFloat(data[i]);
			if (!num){
				num=0;
			}
			
			var text="";
			var displayed=true;
			
			if (displayed){
				labels.push(AP.time.time("%d/%m", AP.time.now()- (data.length-i-1)*24*3600));
			}else{
				labels.push("");
			}
			
			
			values.push(num.toFixed(2));
		}
		
		return {
			color: UI.color.progress({stime: objective.stime, etime: objective.etime, complete: objective.complete}),
			labels: labels,
			values: values,
			error: 0
		};
		
		// Log this up
		
	};
	
	
	
	
	function prepareProjections(objective){
		var data=objective.progressions.data;
		if (!data || !data.length || data.length<=1){
			return {error: 1};
		}
		
		var last=parseInt(objective.progressions.last);
		
		var xavg=0;
		var yavg=0;
		
		for (var i=0; i<data.length; i++){
			var temp=parseFloat(data[i]);
			if (!temp){
				temp=0;
			}
			data[i]=temp;
			
			xavg=xavg+i;
			yavg=yavg+data[i];
		}
		
		xavg=xavg*1.0/data.length;
		yavg=yavg*1.0/data.length;
		
		var upper=0;
		var lower=0;
		
		for (var i=0; i<data.length; i++){
			upper+=(i-xavg)*(data[i]-yavg);
			lower+=(i-xavg)*(i-xavg); 
		}
		
		var a=upper*1.0/lower;
		var b=yavg - a*xavg;
		
		// Function is now: y(n)= a * x(n) + b for all n
		
		var start=b;
		var end= a* (data.length-1)+b;
		var expected=end;
		
		if (parseInt(objective.etime) < last){
			expected=data[data.length-1];
		}
		
		if (a>0 && parseInt(objective.etime) >= last){
			var diff=Math.floor((parseInt(objective.etime)-last)/(24*3600))+data.length-1;
			expected = a * diff + b;
			
			if (expected < 0){
				expected = 0;
			}
		}
		
		
		
		var values=[];
		for (var i=0; i<data.length; i++){
			var temp=(a *i +b).toFixed(2);
			if (temp < 0){
				temp=0;
			}
			values.push(temp);
		}
		
		var last07=0;
		if (data.length>=7){
			last07=data[data.length-7];
		}
		
		return {'expected': expected.toFixed(2), 'start': start, 'end': end, 'length': data.length, 'a': a, 'b': b, 'values': values, 'color': "#2583E8", "last07":last07};
	};
	


	
	
	
	function stdchart(canvas, labels, values, color){
		var data = {
			labels: labels,
			datasets: [
				{
					label: "Current Progression",
					fillColor: UI.color.rgba(color, 0.3),
					strokeColor: color,
					pointColor: color,
					pointStrokeColor: "transparent",
					pointHighlightFill: "#fff",
					pointHighlightStroke: color,
					data: values
				}
			]
		};
		
		
		$(canvas).chartjs(data,{
			pointHitDetectionRadius : 5,
			bezierCurve : false,
			scaleShowVerticalLines: false,
			scaleShowHorizontalLines: true,
			pointDot : true,
			pointDotRadius : 1,
			pointDotStrokeWidth : 1,
			scaleGridLineWidth : 1,
			
			// datasetStrokeWidth : 2,
			// scaleOverride : true,
			// scaleSteps : 5,
			// scaleStepWidth : 100,
			// scaleStartValue : 0,
			// scaleShowGridLines: false,
			// scaleShowLabels: true,
			responsive: true
		});
	};
	
	
	
	function intellichart(objective, canvas, data, projection, options){
		var options=$.extend({}, {compact: false, compare: true, labels: true}, options);
		var labels=data.labels;
		
		if (options.labels==false){
			var ls=[];
			for (var i=0; i<labels.length; i++){
				ls.push("");
			}
			
			labels=ls;
		}
		
		
		var graphs = {
				labels: labels,
				
				datasets: [
					{
						label: "Current Progression",
						fillColor: UI.color.rgba(data.color, 0.3),
						strokeColor: data.color,
						pointColor: data.color,
						pointStrokeColor: "transparent",
						pointHighlightFill: "#fff",
						pointHighlightStroke: data.color,
						data: data.values,
						borderDashOffset: 0.0,
					},
					
					{
						label: "Preditected progression",
						fillColor: 'transparent',
						strokeColor: projection.color,
						pointColor: projection.color,
						pointStrokeColor: "transparent",
						pointHighlightFill: "#fff",
						pointHighlightStroke: projection.color,
						data: projection.values,
						borderDashOffset: 0.0,
						borderDash: [1,2],
					}
				]
			};
		
		if (options.compare){
			graphs.datasets.push({
				label: "Last 07 day progression",
				fillColor: "rgba(0,0,0,0.3)", // UI.color.rgba(data.color, 0.2),
				strokeColor: "rgba(0,0,0,0.3)",
				pointColor: "rgba(0,0,0,0.3)",
				pointStrokeColor: "transparent",
				pointHighlightFill: "#fff",
				pointHighlightStroke: "rgba(0,0,0,0.6)", // UI.color.rgba(data.color, 0.6),
				data: previousData(data.values, 7),
				borderDashOffset: 0.0,
			});
		}
		
		
		$(canvas).chartjs(graphs,{
			legend:{
				display: false,
			},
			height: (options.compact?100:150),
			 scales: {
				xAxes: [{
					display: false
				}],
				yAxes: [{
					display: false
				}]
			},
			legend: false,
			responsive: true
		});
		
		$.log(graphs);
		
		var html=getPrediction(objective, data, projection);
		$(canvas).closest('.side').find(".objbox.-prediction").html(html);
	};
	
	
	
	
	
	function getPrediction(objective, data, prediction){
		var expected=prediction.expected+"%";
		if (objective.plan && objective.plan.metatype=="kpi"){
			expected=AP.data.numberFormat(parseInt(prediction.expected))+objective.base.unit;
		}
		
		return "" +
				"<div class='infos'>" +
				"	<div class='row'>" +
				"		<span class='square top-left' style='background-color:"+data.color+"'></span> Tiến độ thực tế" +
				"	</div>" +
				"	<div class='row'>" +
				"		<span class='square top-left' style='background-color:#999'></span> Tiến độ 07 ngày trước" +
				"	</div>" +
				"	<div class='row'>" +
				"		<span class='square top-left' style='background-color:"+prediction.color+"'></span> Tiến độ dự báo" +
				"	</div>" +
				"</div>" +
				"<div class='prediction'>" +
				"	<div class='title ap-xdot'>Dự báo kết quả ("+AP.time.time("%d/%m/%Y", objective.deadline)+")</div>" +
				"	<div class='result' style='background-color:"+data.color+"'>"+expected+"</span>" +
				"</div>" +
			"";
	};
	
	
	
	
	function previousData(data, minus){
		var r=[];
		for (var i=0; i<minus; i++){
			r.push(null);
		}
		for (var i=minus; i<data.length; i++){
			r.push(data[i-minus]);
		}
		
		return r;
	};
	
	
	function calculateSectors(data) {
		var sectors = [];
		var l = data.size / 2
		var a = 0 // Angle
		var aRad = 0 // Angle in Rad
		var z = 0 // Size z
		var x = 0 // Side x
		var y = 0 // Side y
		var X = 0 // SVG X coordinate
		var Y = 0 // SVG Y coordinate
		var R = 0 // Rotation

		data.sectors.map(function(item, key) {
			a = 360 * item.percentage;
			aCalc = ( a > 180 ) ? 360 - a : a;
			aRad = aCalc * Math.PI / 180;
			z = Math.sqrt( 2*l*l - ( 2*l*l*Math.cos(aRad) ) );
			if( aCalc <= 90 ) {
				x = l*Math.sin(aRad);
			}
			else {
				x = l*Math.sin((180 - aCalc) * Math.PI/180 );
			}
			
			y = Math.sqrt( z*z - x*x );
			Y = y;

			if( a <= 180 ) {
				X = l + x;
				arcSweep = 0;
			}
			else {
				X = l - x;
				arcSweep = 1;
			}

			sectors.push({
				percentage: item.percentage,
				label: item.label,
				arcSweep: arcSweep,
				L: l,
				X: X,
				Y: Y,
				R: R,
				color: item.color
			});

			R = R + a;
		})


		return sectors
	};
};UI.table = new function __UITable(){
	this.sortable =function(table, options){
		$(table).find(options.header+" th").click(function(){
			var index=$(this).index();
		});
	};
};var Filter=new function __UIFilter(){
	this.opts={};
	this.name="";
	this.filters=[];
	this.id=null;
	
	this.init=function(opts){
		this.id=null;
		this.opts={};
		this.filters=[];
		opts=$.extend({}, {display: "dialog", color: 0}, opts);
		this.opts=opts;
		this.name="Custom filter";
		this.color=opts.color;
		if (!parseInt(this.color)){
			this.color=AP.data.randomNumber(1,9);
		}
	};
	
	this.create=function(url){
		if (url && url.length){
			this.filters=loadFilterFromURL(url);
		}
		$(".js-custom-filter").remove();
		this.display();
	};
	
	this.edit=function(id, name, url, color){
		if (!color){
			color=0;
		}
		
		this.create(url);
		this.update({
			id: id,
			color: color,
			name: name,
			url: url
		});
	};
	
	
	this.editCurrent=function(){
		var id=Query.getInt("filter");
		if (id){
			var filter=AP.array.findObj(Client.pageData.filters, id);
			if (filter){
				this.edit(filter.id, filter.name, filter.url, filter.color);
			}
		}
	};
	
	
	this.display=function(){
		this.id=AP.uuid();
		
		if (this.opts.display=="dialog"){
			$("<div id='"+this.id+"' class='js-custom-filter ui-custom-filter'><div class='wrap'>"+this.getHTML()+"</div></div>").appendTo("#document");
		}
		
		initHandlers(this.id);
	};
	
	
	this.getHTML=function(){
		return this.getHeader() + this.getBody() + this.getFooter();
	};
	
	
	this.getHeader=function(){
		return "<div class='header'>" +
			"<div class='hidden'><input type='hidden' name='id' value='0'/></div>" +
			"<div class='hidden'><input type='hidden' name='color' value='"+this.color+"'/></div>" +
			"<div class='txt'><input type='text' name='name' placeholder='Edit filter' value='Custom filter'/></div>" +
			"<div class='edit-icon' onclick='Filter.focusEdit(this);'><span class='-ap icon-mode_edit'></span></div>" +
			"<div class='color'><div class='s -bg-alt"+this.color+"'></div></div>" +
			"<div class='close' onclick='Filter.close(this);'><span class='-ap icon-close'></span></div>" +
		"</div>";
	};
	
	
	this.getBody=function(){
		return "<div class='body'>" +
			"<div class='js-select-form'>"+getForm(this.opts)+"</div>" +
			"<div class='js-query'></div>"+
			"<div class='js-display'></div>"+
		"</div>";
	};
	
	
	this.getFooter=function(){
		return "<div class='footer'>" +
			"<div class='save'>Save filter</div>" +
		"</div>";
	};
	
	
	this.getQuery=function(){
		var html="";
		for (var i=0; i<this.filters.length; i++){
			html+="&"+buildQuery(this.filters[i]);
		}
		
		return html;
	};
	
	
	/**
	 * @desc Add a filter
	 */
	this.addFilter=function(ref){
		var $box=$(ref).closest(".js-select-form");
		var key=$box.find("select[name=select-custom]").val();
		var opt=$box.find("select[name=operator]").val();
		var val=safe($box.find("*[name=val]").val());
		
		var found=false;
		for (var i=0; i<this.filters.length; i++){
			if (this.filters[i].key==key && this.filters[i].operator==opt){
				found=true;
				this.filters[i].value=val;
			}
		}
		
		if (!found){
			this.filters.push({key: key, operator: opt, value: val});
		}
		
		this.render();
		
	};
	
	
	/**
	 * @desc Render a filter
	 */
	this.render=function(){
		$("#"+this.id+" .js-query").html("<div class='query'>"+this.getQuery()+"</div>");
		$("#"+this.id+" .js-display").html("<div class='display'>"+AP.render(this.filters, function(e){return getItem(e);})+"</div>");
	};
	
	this.hide=function(){
		$(".js-custom-filter").remove();
	};
	
	
	/**
	 * @desc Close a filter
	 */
	this.close=function(ref){
		$(ref).closest(".js-custom-filter").remove();
	};
	
	
	this.save=function(url, callback, extra_data){
		if (!extra_data){
			extra_data={};
		}
		
		extra_data.id=$("#"+this.id+" input[name=id]").val();
		extra_data.color=$("#"+this.id+" input[name=color]").val();
		
		UI.ajaxShow();
		var data= $.extend({}, extra_data, {filter_name: $("#"+this.id+" .txt input[name=name]").val(), filter_url: this.getQuery()}, getAssoc(this.filters));
		
		AP.post(url, data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code, data);
		});
	};
	
	
	this.remove=function(url, callback, extra_data){
		this.save(url, callback, extra_data);
	};
	
	
	this.update=function(opts){
		$("#"+this.id+" .header input[name=name]").val(opts.name);
		$("#"+this.id+" .header input[name=id]").val(opts.id);
		
		if (opts.color){
			this.color=opts.color;
			$("#"+this.id+" .header input[name=color]").val(this.color);
			$("#"+this.id+" .header .color .s").replaceWith("<div class='s -bg-alt"+this.color+"'></div>");
		}
		
		
		this.render();
		
		if (opts.id && !$("#"+this.id+" .footer .remove").length && this.opts.remove){
			$("#"+this.id+" .footer").append("<div class='cancel'>Remove filter</div>");
			$("#"+this.id+" .footer .cancel").click(function(){
				AP.confirm("Are you sure that you want to remove this filter?", function(){
					Filter.opts.remove();
				});
			});
		}
	};
	
	
	this.focusEdit=function(ref){
		$(ref).closest(".header").find("input[name=name]").focus();
	};
	
	
	this.removeFilterItem=function(key, ref){
		this.filters=AP.array.filter(this.filters, function(e){
			return e.key!=key;
		});
		
		this.render();
	};
	
	
	function initHandlers(id){
		$("#"+id+" input[name=name]").on("focus", function(){
			$(this).closest(".header").addClass("active")
		}).on("blur", function(){
			$(this).closest(".header").removeClass("active")
		});
		
		$("#"+id+" select[name=select-custom]").on("change", function(){
			var val=$(this).val();
			if (!val || !val.length){
				$(this).closest(".select-fx").find(".js-select-create").empty();
			}else{
				var $box=$(this).closest(".select-fx").find(".js-select-create");
				
				var filter=AP.array.find(Filter.opts.filters, function(e){
					return e.key==val;
				});
				
				if (!filter){
					return;
				}
				
				var operators="<option value='equal'>Equal</option>";
				
				if (filter.type=="number"){
					operators="<option value='equal'>Equal</option>" +
					"<option value='not'>Not equal</option>" +
					"<option value='min'>Larger than</option>" +
					"<option value='max'>Smaller than</option>";
				}
				
				if (filter.type=="match"){
					operators="<option value='match'>Match</option>";
				}
				
				if (filter.type=="equal"){
					operators="<option value='equal'>Equal</option><option value='not'>Equal</option>";
				}
				
				var val="<input type='text' name='val' placeholder='Type the value'/>";
				if (filter.role=="date"){
					val="<input type='text' name='val' placeholder='Type the value' data-role='date'/>"
				}
				
				if (filter.role=="user"){
					val="<input type='text' name='val' placeholder='Type the value' data-role='tag'/>"
				}
				
				if (filter.options){
					var opts_html="";
					if (AP.data.isArray(filter.options)){
						opts_html = AP.render(filter.options, function(e){
							return "<option value='"+e.value+"'>"+e.label+"</option>";
						});
					}else{
						$.each(filter.options, function(key, val){
							opts_html+="<option value='"+key+"'>"+val+"</option>";
						});
					}
					val="<select name='val'>"+opts_html+"</select>";
				}
				
				$box.html("<div class='select'>" +
					"	<select name='operator'>" + operators +"</select>" +
					"</div>" +
					"	<div class='input -val'>" + val + "</div>" +
					"	<div class='button' onclick='Filter.addFilter(this);'>Add filter</div>");
				
				Form.render($box);
			}
		});
		
		$("#"+id+" .footer .apply").click(function(){
			Filter.opts.search(Filter.filters, Filter.getQuery(), Filter);
		});
		
		$("#"+id+" .footer .save").click(function(){
			// Filter.opts.save(Filter.filters, Filter.getQuery(), Filter);
			Filter.opts.save();
		});
		
		Form.inlineColorTagger("#"+id+" .color", function(color){
			$("#"+id+" .color .s").removeClass().addClass("s -bg-alt"+color);
			$("#"+id+" input[name=color]").val(color);
		},{
			auto: true,
			left: -5
		});
	};
	
	
	function getForm(opts){
		return "<div class='select-fx'>" +
			"<div class='select-top'><select name='select-custom'>" +
				"<option value=''>--- Select another filter ---</option>" +
				AP.render(opts.filters, function(e){
					return "<option value='"+e.key+"'>"+e.name+"</option>";
				})+
			"</select></div>" +
			"<div class='select-create clear-fix js-select-create'></div>" +
		"</div>";
	};
	
	
	function buildQuery(q){
		if (q.operator=="min"){
			return q.key+"_min="+q.value;	
		}
		
		if (q.operator=="max"){
			return q.key+"_max="+q.value;	
		}
		
		if (q.operator=="not"){
			return q.key+"_not="+q.value;	
		}
		
		return q.key+"="+q.value;
	};
	
	
	function getItem(q){
		var txt="";
		if (q.operator=="min"){
			txt= "<b>"+q.key+"</b> <em>is greater than</em> <span class='val'>"+q.value+"</span>";	
		}else if (q.operator=="max"){
			txt= "<b>"+q.key+"</b> <em>is smaller than</em> <span class='val'>"+q.value+"</span>";	
		}else if (q.operator=="match"){
			txt= "<b>"+q.key+"</b> <em>matches</em> <span class='val'>"+q.value+"</span>";
		}else if (q.operator=="not"){
			txt= "<b>"+q.key+"</b> <em>does not equal</em> <span class='val'>"+q.value+"</span>";
		}else{
			txt= "<b>"+q.key+"</b> <em>equals</em> <span class='val'>"+q.value+"</span>";
		}
		
		
		return "<div class='item' onclick=\"Filter.removeFilterItem('"+q.key+"');\">"+txt+" <div class='remove' title='Remove this filter'><span class='-ap icon-close'></span></div></div>";
	};
	
	
	function getAssoc(arr){
		var r={};
		for (var i=0; i<arr.length; i++){
			r[arr[i].key]=arr[i].value;
		};
		
		return r;
	};
	
	
	function loadFilterFromURL(url){
		var r=[];
		var parts=AP.word.split("&",url);
		for (var i=0; i<parts.length; i++){
			var ps=AP.word.split("=", parts[i]);
			if (ps.length!=2){
				continue;
			}
			
			var key=ps[0];
			var val=ps[1];
			
			if (AP.word.suffix(key,"_min")){
				$.log([key, val]);	
			}
			
			if (AP.word.suffix(key,"_min")){
				key=key.substr(0, key.length-4);
				r.push({
					key: key,
					operator: "min",
					value: val
				});
			}else if (AP.word.suffix(key,"_max")){
				key=key.substr(0, key.length-4);
				r.push({
					key: key,
					operator: "max",
					value: val
				});
			}else{
				r.push({
					key: key,
					operator: "match",
					value: val
				});
			}
		}
		
		return r;
	};
	
};var CONFIG={
    name: "Base",
    email: "contact@base.vn",
    owner: "Base",
    home_src: "base.vn",
    domain:"base.vn",
    port: "1331",
    https_port: "1331",
    api: "message",
    fileViewerAPI: "https://file.base.local.basecdn.net"
};

if (parseInt(Client.env)){
	CONFIG.fileViewerAPI= "https://file.basecdn.net";
}


if (Client.base && Client.base.port){
	CONFIG.port=Client.base.port;
	CONFIG.https_port=Client.base.port;
}Array.prototype.remove = function() {
	var what, a = arguments, L = a.length-1, ax;
	var fn=a[L];
	while (L && this.length) {
		what = a[--L];
		while ((ax = AP.array.indexOf(this,what, fn)) !== -1) {
			this.splice(ax, 1);
		}
	}
	
	return this;
};	


if (!Array.prototype.map){
	Array.prototype.map=function(mapper){
		var a=[];
		var len=this.length;
		
		for (var i=0; i<len; i++){
			a.push(mapper(this[i], i, len));
		}
		
		return a;
	};
};

String.prototype.repeat = function(count) {
	if (count < 1) return '';
	var result = '', pattern = this.valueOf();
	while (count > 1) {
		if (count & 1) result += pattern;
		count >>= 1, pattern += pattern;
	}
	return result + pattern;
};


String.prototype.contains = function(q) {
	return (this.toLowerCase().indexOf(q.toLowerCase())!==-1);
};



String.prototype.isAlphaNumeric = function() {
  var regExp = /^[A-Za-z0-9]+$/;
  return (this.match(regExp));
};


String.prototype.br2nl=function(){
	return this.replace(/(\r\n|\n\r|\r|\n)/g,'').replace(/<br>/g, "\r\n").replace(/<br\s*\/*>/g, "\r\n");
};

String.prototype.nl2br=function(){
	return this.replace(/(\r\n|\n\r|\r|\n)/g,"\n").replace(/\n/g, "<br>");
};


String.prototype.toTextarea=function(){
	return this.replace(/&#8220;|&#8221;|&#8216;|&#8217;/g,"'").replace("&#8217;","'").replace("&#8216;","'").br2nl();
};


function copyObject(obj, keys){
	var r={};
	var vars=AP.word.split(",", keys);
	for (var i=0; i<vars.length; i++){
		var index=$.trim(vars[i]);
		if (index && index in obj){
			r[index]=obj[index];
		}
	}
	return r;
};


function name(username){
	if (AP.data.isObject(username)){
		if (Client.system && Client.system.settings && Client.system.settings.name=="username"){
			return username.name;
		}
		
		return "@"+username.username;
	}
	
	var user=__getUserByUsername(username);
	if (!user){
		return "@"+username;
	}else{
		return user.name+"";
	}
};

function fullname(username){
	var user=People.get(username);
	if (!user){
		return "@<b class='url username' data-username='"+username+"'>"+username+"</b>";
	}
	
	return "<b class='url username' data-username='"+username+"'>"+user.name+"</b> <b class='url username' data-username='"+username+"'>@"+username+"</b> ("+user.title+")";
};


function fullnames(list){
	var html="";
	for (var i=0; i<list.length; i++){
		var username=list[i];
		if (AP.data.isObject(list[i])){
			username=list[i].username;
		}
		
		html+="<li>"+fullname(username)+"</li>";
	}
	
	return "<ul>"+html+"</ul>";
}


function __getUserByUsername(username){
	if (!Client.usernames){
		Client.usernames={};
		for (var i=0; i<Client.people.length; i++){
			Client.usernames[Client.people[i].username]=Client.people[i];
		}
	}
	
	if (Client.usernames[username]){
		return Client.usernames[username];
	}
	
	return null;
};


var cd_temp_timer=null;
AP.confirmDelete=function(msg, callback){
	function doCount(){
		cd_temp_timer=setTimeout(function(){
			var $b=$("#confirm-delete-box .button.danger span");
			if (!$b.length){
				return;
			}
			
			var v=$b.data("count");
			if (!v){
				$b.hide();
				$b.parent().addClass("ready");
			}else{
				v=parseInt(v);
				$b.html(" ("+v+")");
				$b.data("count", v-1);
			}
			
			doCount();
		}, 1000);
	};
	
	var html="<div id='confirm-delete-box'> <div class='icon'><img src='"+(Client.share_url)+"/svgs/alert.svg'/></div> <div class='cd-title'>Dangerous Action</div> <div class='cd-explain'>If you decide and confirm to delete, the data (and several linked data) WILL BE REMOVED AND WILL NOT be <u>recoverable</u></div> <div class='cd-explain-more'>"+(msg)+"</div> <div class='buttons'> <div class='button cancel left' onclick='AP.hideCustomDialog(\"#confirm-delete\")'>Cancel</div> <div class='button danger right'>Confirm to delete<span data-count='6'> (6)</span><div> </div> </div>";
	
	if (cd_temp_timer){
		clearTimeout(cd_temp_timer);
		temp_timer=null;
	}
	
	
	AP.customDialog(html, "confirm-delete").style("-full -strong-alert").closable(false).width(600).show();
	$("#confirm-delete-box .button.danger").data("action", callback).on("click", function(){
		if (!$(this).hasClass("ready")){
			return;
		}
		
		var fn=$(this).data("action");
		if (!fn){
			return;
		}
		
		AP.hideCustomDialog("#confirm-delete");
		fn();
	});
	
	doCount();
};



AP.bindSearch=function(input){
	var qname=$(input).data("query");
	if (!qname){
		qname="q";
	}
	
	
	$(input).enter(function(){
		var val=$(this).val();
		var qname=$(this).data("query");
		if (!qname){
			qname="q";
		}
		
		if (val=="" || !val.length){
			AP.setURLParams(assoc(qname, null), true);
		}else{
			AP.setURLParams(assoc(qname, val), true);
		}
	}).val(Query.get(qname)); 
	
	return $(input);
};



AP.xpost=function(url, data, callback){
	UI.ajaxShow();
	AP.post(Client.pageData.context.path+"/"+url, data, function(code){
		UI.ajaxHide();
		callback(code);
	})
};


AP.balanceDialog=function(id){
	AP.dialog(id).balance();
};

AP.customDialog=function(text, options){
	var id="";
	if (!options){
		options={};
		id="custom-dialog";
	}else if (AP.data.isString(options)){
		id=options;
		options={};
	}
	
	if (id[0]=="#"){
		id=id.substr(1);
	}
	
	var opts=$.extend({}, {id: id, padding: true, close_button: false, closable: true}, options);
	
	var dialog= AP.dialog(opts.id)
	.engine(CustomDialogEngine)
	.closeButton(opts.close_button)
	.closable(opts.closable)
	.content(text);
	
	// if (!dialog.padding){
	// 	dialog.addClass("-full");
	// }
	
	return dialog;
};



AP.hideCustomDialog=function(id){
	if (!id){
		id="#custom-dialog";
	}
	
	AP.dialog(id).hide();
};

AP.customCanvas=function(html, sticky){
	var closable=true;
	if (sticky){
		closable=false;
	}
	
	if (closable){
		return AP.customDialog(html).addClass("-full-canvas").closable(closable);	
	}else{
		return AP.customDialog(html).addClass("-full-canvas").closable(false); 
	}
};


AP.blankDialog=function(id){
	return AP.customDialog("<div id='"+id+"'></div>").addClass("-full-canvas -full-blank").closable(false).show();
};


AP.emptyDialog=function(html, opts){
	var opts=$.extend({}, {id: "custom-dialog", padding: true, close_button: false}, opts);
	
	var dialog= AP.dialog(opts.id)
	.engine(EmptyDialogEngine)
	.closeButton(false)
	.closable(true)
	.content(html);
	
	// if (!dialog.padding){
	// 	dialog.addClass("-full");
	// }
	
	dialog.addClass("-full-canvas -full-blank").closable(false).show().balance();
	return dialog;
};


AP.selectOne=function(title, html){
	AP.customDialog("<div class='title'>"+title+"<div class='-dx-close' onclick='AP.closeDialog(this);''></div></div>"+html,"custom-selection").style("-full").width(520).show();
};


AP.selectAction=function(actions, callback, opts){
	if (!opts){
		opts={};
	}
	
	var html=AP.render(actions, function(arr){
		var label="";
		if (arr.label){
			label="<div class='ap-xdot -name'>"+arr.label+"</div>";
		}
		if (arr.label_full){
			label="<div class='-name'>"+arr.label+"</div>";
		}
		
		var sub="";
		if (arr.sublabel){
			sub="<div class='sub'>"+arr.sublabel+"</div>";
		}
		return "<div class='li item unselectable' onclick='__selectItem(this);'>"+label+sub+" <div class='-ricon'><span class='ficon-angle-right'></span></div></div>";
	});
	
	
	var mh=$(window).height()-200;
	if (mh<200){
		mh=200;
	}
	
	html="<div class='rh' style='max-height:"+mh+"px; overflow-y:auto;'><div class='list list-actions no-icon -border'>"+html+"</div></div>";
	
	if (opts.filter || opts.search){
		html="<div class='isearch'><input type='text' id='selection-filter-ip' placeholder='Type to quickly search'/></div>" +html;
	}
	
	if (opts && opts.title){
		html="<div class='title'>"+opts.title+" <div class='-dx-close' onclick='AP.closeDialog(this);'></div></div>"+html;
	}
	
	if (!Client.mobile){
		AP.customDialog(html,"custom-selection").style("-full").width(500).show();	
	}else{
		AP.customDialog(html,"custom-selection").style("-full").show();
	}
	
	$("#custom-selection").data("object", actions).data("callback", callback).addClass("__canvas");
	if (opts.filter){
		$("#selection-filter-ip").on("input", function(){
			local_filter($(this).val());
		});
		if (!Client.native){
			$("#selection-filter-ip").autofocus();
		}
	}
	
	
	function local_filter(q){
		$("#custom-selection .li").each(function(){
			var matched=false;
			if (!q || !q.length){
				matched=true;
			}else{
				var str=$(this).text();
				matched= AP.word.fulltextMatch(str, q);
			}
			
			if (matched){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
	};
};



AP.selectActions=function(actions, callback, opts){
	opts=$.extend({width: 600}, opts);
	
	var html=AP.render(actions, function(arr){
		var sub="";
		if (arr.sublabel){
			sub="<div class='sub'>"+arr.sublabel+"</div>";
		}
		var selected="";
		if (arr.selected){
			selected=" selected";
		}
		return "<div data-value='"+arr.value+"' class='li item unselectable"+selected+"' onclick='__selectItems(this);'> <div class='ap-xdot'>"+arr.label+"</div>"+sub+" <div class='-ricon'><span class='-select'></span></div></div>";
	});
	
	html="<div class='list list-actions no-icon -border -mlist'>"+html+"</div>";
	html+="<div class='buttons -two' style='border-top:2px solid #eee; margin:0; padding:20px; background-color:#f8f8f8;'> <div class='button -first -passive -rounded' onclick='AP.closeDialog(this);'>Cancel</div> <div class='button -second -success -rounded' onclick='__final_select_items(this);'>OK</div> </div>";
	
	if (opts && opts.title){
		html="<div class='title'>"+opts.title+"</div>"+html;
	}
	
	AP.customDialog(html,"custom-selection").style("-full selection-list").width(opts.width).show();
	$("#custom-selection").data("options", actions);
	$("#custom-selection").data("callback", callback);
	
	if (opts.selected){
		$("#custom-selection .li.item").each(function(){
			if (AP.array.contain(opts.selected, $(this).data("value"))){
				__selectItems(this);
			}
		});
	}
	
	if (opts.select_all){
		$("#custom-selection .li.item").each(function(){
			__selectItems(this);
		});
	}
	
	return;
};


/**
 * @desc Action menu
 */
AP.actionMenu=function(actions, opts){
	opts=$.extend({title: ""}, opts);
	
	var title="";
	if (opts.title && opts.title.length){
		title="<div class='title'>"+opts.title+"</div>"; 
	}
	
	AP.customDialog(title+"<div class='list list-actions -border'></div>","custom-selection").style("-full selection-list").width(400).show();
	
	AP.render(actions, function(e){
		var sublabel="";
		if (e.sublabel){
			sublabel="<small>"+e.sublabel+"</small>";
		}
		
		var icon="<span class='-ap icon-"+(e.icon)+"'></span>";
		if (AP.word.prefix(e.icon, "ficon-")){
			icon="<span class='ap-f14 "+(e.icon)+"'></span>";
		}
		
		var html="<div class='li item unselectable' onclick='__selfaction(this);'><span class='-icon'>"+(icon)+"</span> "+(e.label)+""+(sublabel)+" <div class='-ricon'><span class='ficon-angle-right'></span></div></div>";
		var id=AP.uuid();
		
		if (e.role=="url" || e.url){
			if (!AP.word.prefix(e.url,"http")){
				if (e.target && e.target=="blank"){
					html="<div class='li item unselectable url' data-url='"+e.url+"' data-blank='1'><span class='-icon'><span class='-ap icon-"+e.icon+"'></span></span> "+e.label+sublabel+" <span class='-ricon'><span class='ficon-angle-right'></span></span></div>";
				}else{
					html="<div class='li item unselectable url' data-url='"+e.url+"'><span class='-icon'><span class='-ap icon-"+e.icon+"'></span></span> "+e.label+sublabel+" <span class='-ricon'><span class='ficon-angle-right'></span></span></div>";	
				}
			}else{
				html="<a class='li item unselectable' target='_blank' href='"+e.url+"'><span class='-icon'><span class='-ap icon-"+e.icon+"'></span></span> "+e.label+sublabel+" <span class='-ricon'><span class='ficon-angle-right'></span></span></a>";	
			}
		}else if (e.role=="upload"){
			html="<div class='li item unselectable' id='"+id+"'><span class='-icon'><span class='-ap icon-"+e.icon+"'></span></span> "+e.label+sublabel+" <span class='-ricon'><span class='ficon-angle-right'></span></span></div>";
		}
		
		
		if (e.role=="upload"){
			$(html).appendTo("#custom-selection .list-actions").data("action", e.action).data("__params", e);
			AP.uploadable("#"+id, e.data, function(code){
				AP.dialog("#custom-selection").hide();
				e.callback(code);
			});
		}else{
			$(html).appendTo("#custom-selection .list-actions").data("action", e.action).data("__params", e);
		}
	});
	
	AP.dialog("#custom-selection").balance();
};



AP.boxMenu=function(actions, opts){
	opts=$.extend({title: ""}, opts);
	
	var title="";
	if (opts.title && opts.title.length){
		title="<div class='title'>"+opts.title+"</div>"; 
	}
	
	AP.customDialog(title+"<div class='list list-action-boxes -border'></div>","custom-selection").style("-full selection-list").width(602).show();
	
	AP.render(actions, function(e){
		var sublabel="";
		if (e.sublabel){
			sublabel="<small>"+e.sublabel+"</small>";
		}
		
		var icon="<div class='-icon'><img src='"+e.icon+"'/></div>";
		var label="<div class='label'>"+e.label+"</div>";
		
		var html="<div class='li js-item unselectable' onclick='__selfaction(this);'>"+icon + label+sublabel+"</div>";
		var id=AP.uuid();
		
		if (e.role=="url" || e.url){
			if (!AP.word.prefix(e.url,"http")){
				html="<div class='li js-item unselectable url' data-url='"+e.url+"'>"+icon+label+sublabel+"</div>";
			}else{
				html="<a class='li js-item unselectable' target='_blank' href='"+e.url+"'>"+icon+label+sublabel+"</a>";	
			}
		}else if (e.role=="upload"){
			html="<div class='li item unselectable' id='"+id+"'>"+icon+e.label+sublabel+"</div>";
		}
		
		
		if (e.role=="upload"){
			$(html).appendTo("#custom-selection .list-actions").data("action", e.action).data("__params", e);
			AP.uploadable("#"+id, e.data, function(code){
				AP.dialog("#custom-selection").hide();
				e.callback(code);
			});
		}else{
			$(html).appendTo("#custom-selection .list-action-boxes").data("action", e.action).data("__params", e);
		}
	});
	
	AP.dialog("#custom-selection").balance();
};




AP.pickable=function(canvas, options){
	if (!options){
		options={};
	}
	
	options=$.extend({}, {name: "file"}, options);
	
	options=$.extend({}, {name: options.name, format: 0, preview: 0, 'data': {}, multi: false}, options);
	var id=AP.uuid();
	var fid=AP.uuid();
	
	if (options.drive){
		$(canvas).click(function(){
			Base.drive.pick({multi: (options.multi?1:0), ext: 0, callback: function(files){
				options.callback.apply(this, [files]);
			}});
		});
		
		return;
	}
	
	if (!$(canvas).find(".upload-form").length){
		var html="<div class='upload-form'> <input type='file' name='"+(options.name)+"' id='"+(fid)+"' multiple/> </div>";
		$(canvas).append(html);	
	}else{
		$(canvas).find('.upload-form').empty().html("<input type='file' name='"+(options.name)+"' id='"+(fid)+"'/>");
	}
	
	$(canvas).find('.upload-form input').change(function(){
		var fn=getUploadFN($(this).val());
		options.callback.apply(this, [fn, this]); // YOU MUST REMOVE this
		AP.pickable(canvas, options);
	});
};


AP.uploadable=function(canvas, data, callback, $this){
	if (!data){
		data={};
	}
	
	data=$.extend({}, {name: 'file', format: 0, preview: 0, 'data': {}, multi: false}, data);
	
	if ($(canvas).hasClass('uploadable')){
		return;
	}
	
	if (data.drive){
		$(canvas).click(function(){
			var ext_val = 0;
			if (Client.system && (Client.system.id == 1 || Client.system.id == 79)) {
				ext_val = 1;
			}
			Base.drive.pick({multi: (data.multi?1:0), ext: ext_val, callback: function(files){
				var temp=shallowClone(data.data);
				Base.drive.append(temp, files);
				
				UI.ajaxShow();
				AP.post(data.action, temp, function(code){
					UI.ajaxHide();
					if (!code.good()){
						return AP.alertError(code.message);
					}
					
					callback(code);
					
//					if ($this){
//						callback.apply($this, [code]);
//					}else{
//						callback(code);	
//					}
				});
			}
		})});
		
		return;
	}
	
	
	
	
	$(canvas).addClass('uploadable');
	var id=AP.uuid();
	var fid=AP.uuid();
	var upload_icon="";
	
	if ($(canvas).data('format')){
		upload_icon="<span class='upload-icon icm icon-upload2'></span>"
	}
	
	var name=$(canvas).data("name");
	if (!name){
		name=data.name;
	}
	
	if (!name){
		name="file";
	}

	var show_preview=0;
	
	var action=$(canvas).data('action');
	if (!action){
		action=data.action;
	}
	
	var image_required=0;
	if ($(canvas).data('image')==1 || $(canvas).data('image')=='1' || data.image == 1){
		image_required=1;
	}
	
	if ($(canvas).data('preview')==1 || $(canvas).data('preview')=='1' || data.preview==1){
		show_preview=1;
	}
	
	var placeholder="";
	if (data.placeholder){
		placeholder="<div class='upload-placeholder'>"+data.placeholder+"</div>";
	}
	
	
	
	if (!action || !action.length){
		var preview_image="<div class='upload-preview'></div>";
		if (data.preview_image && data.preview_image.length){
			preview_image="<div class='upload-preview'><img src='"+data.preview_image+"'/></div>";
		}
		
		$("<div class='upload-form'>" +
			placeholder +
			upload_icon +
			preview_image+
			"<input type='file' name='"+name+"' id='"+fid+"'/>" +
		"</div><div class='upload-fn'></div>").appendTo(canvas);
		
		
		$("#"+fid).change(function(){
			if ('FileReader' in window && this.files.length && image_required){
				
				if (!this.files[0].type.match('image.*')) {
					return AP.alertError("Please select an image");
				}
			}
			
			var fname=getUploadFN($(this).val());
			$(canvas).addClass("-selected").find(".upload-fn").html("<span class='ap-xdot'>"+fname+"</span>");
			
			if (show_preview){
				if ('FileReader' in window && this.files.length){
					if (!this.files[0].type.match('image.*')) {
						return;
					}
					
					var reader=new FileReader;
					reader.onload=function(e){
						$(canvas).find(".upload-preview").html("<img src=''/>");
						$(canvas).find(".upload-preview img")[0].src=e.target.result;
					};
					reader.readAsDataURL(this.files[0]);
				}
			}
			
		});
		return;
	}
	
	
	var multi="";
	if (data.multi){
		multi=" multiple";
		$("<div class='upload-form'><form method='post' id='"+id+"' action='"+action+"'>" +
			"<input type='hidden' name='__multi' value='1'/>" +
			upload_icon+
			placeholder+
			"<input type='file' name='"+name+"[]' id='"+fid+"'"+multi+"/>" +
		"</form></div>").appendTo(canvas);
	}else{
		$("<div class='upload-form'><form method='post' id='"+id+"' action='"+action+"'>" +
			upload_icon+
			placeholder+
			"<input type='file' name='"+name+"' id='"+fid+"'/>" +
		"</form></div>").appendTo(canvas);
	}
	
	
	$("#"+fid).change(function(){
		var cid=$(this).closest('form').attr('id');
		$.log("FILE_CHANGED ...");
		
		AP.ajaxShow();
		AP.submit("#"+cid, function(code){
			AP.ajaxHide();
			
			$("#"+fid).val('');
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			if ($this){
				callback.apply($this, [code]);
			}else{
				callback(code);	
			}
			
		}, data.data);
	});
};


AP.dnd_lock=false;
AP.dnd=function(canvas, url, data, callback, options){
	options=$.extend({}, {name: 'file', layout: 'white', image: 0, max_files: 5, multi: true}, options);
	
	var $canvas=$(canvas);
	if ($canvas.hasClass("js-dndcanvas")){
		return;
	}
	
	var id=AP.uuid();
	$canvas.addClass("js-dndcanvas").append("<div class='js-dndicanvas' id='"+id+"'></div>");
	var $cx=$("#"+id);
	
	if (!$canvas.length){
		$.log("DND failed. Cannot find the canvas");
		$.log([canvas, url, data]);
		return;
	}
	
	if ($canvas.find(".dnd-mask").length){
		return;
	}
	
	this.dnd_lock=false;
	
	id=AP.uuid();
	$("<div id='"+id+"' class='dnd-mask'>" +
		"<div style='display:none'>" +
		"	<form name='dnd-form' id='"+id+"-form' action='"+url+"'></form>" +
		"</div>" +
		"<div class='mask full-mask'></div>" +
		"<div class='cancel' onclick='dnd_cancel(this);'>" +
		"	<span class='-ap icon-uniF109'></span>" +
		"	<div class='text'>Cancel</div>" +
		"</div>" +
		"<div class='dnd-main'><div class='inner'>" +
		"	<div class='dnd-image'><img src='"+Client.share_url+"/messages/uploadbg.png'/></div>" +
		"	<div class='dnd-title'>Drop the file to start uploading ...</div>" +
		"</div></div>" +
	"</div>").appendTo($cx);
	
	var $box=$("#"+id);
	if (options.layout=='dark'){
		$box.addClass('-dark');
	}
	
	var supported = function() {
		  var div = $box[0];
		  return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
	}();
	
	if (!supported){
		$.log("FILE DRAG AND DROP DISABLED");
		return;
	}
	
	$canvas.on("dragstart dragover", function(e){
		var dt = e.originalEvent.dataTransfer;
		if (dt && dt.types && (dt.types.indexOf ? dt.types.indexOf('Files') != -1 : dt.types.contains('Files'))) {
			$cx.addClass('-dragover');
		}
	});
	
	$cx.on('drag dragstart dragend dragover dragenter dragleave drop', function(e) {
		e.preventDefault();
		e.stopPropagation();
	}).on("dragstart", function(e){
		$cx.addClass('-dragover');
	})
	.on('dragover dragenter', function(){
		$cx.addClass('-dragover');
	})
	.on('dragleave dragend', function(){
		$cx.removeClass("-dragover");
	})
	.on('drop', function(e) {
		$cx.removeClass('-dragover');
		var droppedFiles = e.originalEvent.dataTransfer.files;
		if (AP.dnd_lock || !droppedFiles.length){
			return;
		}
		
		if (options.confirm){
			return AP.confirm(options.confirm, function(){
				AP.dnd_lock=true;
				dnd_upload("#"+id+"-form", droppedFiles, function(code){
					AP.dnd_lock=false;
					callback(code);
				},data, options);
			});
		}
		
		
		AP.dnd_lock=true;
		dnd_upload("#"+id+"-form", droppedFiles, function(code){
			AP.dnd_lock=false;
			callback(code);
		},data, options);
	});
};


AP.fileExt = function(fname) {
	var regEx = /(?:\.([^.]+))?$/;
	return regEx.exec(fname)[1];
};

function dnd_cancel(ref){
	$(ref).closest(".dnd-mask").parent().removeClass("-dragover");
};

function dnd_upload(form, files, callback, data, options){
	var $form=$(form);
	var formData=new FormData($form.get(0));
	
	for (var key in data){
		formData.set(key, data[key]);
	}
	
	for (var key in AP.ajax_data){
		formData.set(key, AP.ajax_data[key]);
	}
	
	
	formData.set("dnd", 1);
	formData.set("__code", Client.code);
	
	
	var nf=0;
	$.each(files, function(i, file) {
		if (nf > options.max_files){
			return;
		}
		
		
		if (options.image){
			var name=options.name+"-"+nf;
			if (!options.multi){
				name=options.name;
			}
			
			var imageType = /image.*/;
			if (file.type.match(imageType)) {
				formData.append(name, file, file.name);
				nf++;
			}else{
				
			}
		}else{
			var name=options.name+"-"+nf;
			if (!options.multi){
				name=options.name;
			}
			
			formData.append(name, file, file.name);
			nf++;
		}
	});
	
	formData.set("nf", nf);
	
	UI.ajaxShow();
	var url=$form.attr("action");
	if (!AP.word.isURL(url)){
		url=Client.ajax_url+"/"+url;
	}
	
	$.ajax({
		url: url,
		type: "POST",
		dataType: 'json',
		data: formData,
		processData: false,  // tell jQuery not to process the data
		contentType: false,   // tell jQuery not to set contentType,
		complete: function(){
			
		},
		success: function(data){
			UI.ajaxHide();
			var code = new Code(data);
			callback(code);
		},
		error: function(e){
			console.log(e);
			
			UI.ajaxHide();
			callback(new Code({code: 0, message: "Something wrong, or the file was too big"}));
		}
	});
	
};



function __selfaction(ref){
	var action=$(ref).data("action");
	if (action){
		var params=$(ref).data("__params");
		action(params);
	}
	
	AP.closeDialog(ref);
};

function __selectItems(ref){
	$(ref).toggleClass('selected');
	var value=parseInt($(ref).data("value"));
	var saved=$(ref).hasClass("selected");
	
	var data=$("#custom-selection").data("options");
	
	data=AP.select(data, function(e){
		if (e.value && parseInt(e.value)==value){
			if (saved){
				e.selected=1;
			}else{
				e.selected=0;
			}
		}
		return e;
	});
	
	$("#custom-selection").data("options", data)
};



function __selectItem(ref){
	var index=$(ref).parent().find(".li").index(ref);
	var $canvas=$(ref).closest(".__canvas");
	var $fn=$canvas.data("callback");
	AP.closeDialog(ref);
	
	return $fn($canvas.data("object")[index]); 
};




function __final_select_items(ref){
	var $canvas=$(ref).closest(".__canvas");
	var data=$("#custom-selection").data("options");
	var $fn=$("#custom-selection").data("callback");
	
	data=AP.select(data, function(e){
		if (e.selected){
			return e;
		}
		return null;
	});
	
	$fn(data);
	AP.closeDialog(ref);
};




var CustomDialogEngine=new function __CustomDialogEngine(){
	
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		var close_button="";
		if (dialog._close_button){
			close_button="<div class='__close_button' onclick='AP.closeDialog(this);'><span class='-ap icon-close'></span></div>";
		}
		
		
		var closable="<div class='full-mask' onclick='AP.closeDialog(this);'></div>";
		if (!dialog._closable){
			closable="<div class='full-mask'></div>";
		}
		
		
		$(dialog.canvas()).append("" +
			"<div class='__customdialog' id='"+dialog.w(true)+"'>" +
				"<div class='__dialogwrapperscroller scroll-y forced-scroll'>"+
					closable +
					"<div class='__dialogwrapper'>" +
						"<div class='__dialogwrapper-inner'>" +
							"<div class='__dialogmain'>" +
								"<div class='__dialogtitle ap-xdot'>"+"&nbsp;</div>"+
								close_button+
								"<div class='__dialogcontent simple-form'></div>" +
							"</div>"+
						"</div>"+
					"</div>" +
					"<div class='clear'></div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		$(wid).css("right", $.sbWidth());
		
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').height()/2-45;
		if (!Client.native && !Client.mobile){
			var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
			$(wid+' .__dialogwrapper').css('left', l);
		}else{
			if (dialog._data && dialog._data.full){
				$(wid+' .__dialogwrapper').css({float: 'none'}).css({width: '100%'}).css({margin: 'auto'});				
			}else{
				$(wid+' .__dialogwrapper').css({float: 'none'}).css({width: '90%'}).css({margin: 'auto'});
			}

		}
		
		if (t<50){
			t=50;
		}
		
		if (dialog._data && dialog._data.full){
			$(wid+' .__dialogwrapper').css('top', 0).css('bottom', 0);
		}else{
			$(wid+' .__dialogwrapper').css('top', t);	
		}
	};
};






var EmptyDialogEngine=new function __EmptyDialogEngine(){
	
	this.canvas=function(){
		return $("#apdialogs");
	};
	
	/**
	 * @desc Render the dialog.
	 */
	this.render=function(dialog){	
		var closable="<div class='full-mask' onclick='AP.closeDialog(this);'></div>";
		if (!dialog._closable){
			closable="<div class='full-mask'></div>";
		}
		
		$(dialog.canvas()).append("" +
			"<div class='__customdialog __emptydialog' id='"+dialog.w(true)+"'>" +
				closable +
				"<div class='__dialogwrapper'>" +
					"<div class='__dialogwrapper-inner'>" +
						"<div class='__dialogmain'>" +
							"<div class='__dialogcontent'></div>" +
						"</div>"+
					"</div>"+
				"</div>"+
			"</div>");
	};
	
	
	/**
	 * @desc Balancing the dialog.
	 */
	this.balance=function(dialog){
		var wid=dialog.w();
		var t=$(window).height()/2- $(wid+' .__dialogwrapper').outerHeight(true)/2-45;
		if (!Client.native && !Client.mobile){
			var l=$(window).width()/2- $(wid+' .__dialogwrapper').outerWidth(true)/2;
			$(wid+' .__dialogwrapper').css('left', l);
		}else{
			if (dialog._data && dialog._data.full){
				$(wid+' .__dialogwrapper').css({float: 'none'}).css({width: '100%'}).css({margin: 'auto'});				
			}else{
				$(wid+' .__dialogwrapper').css({float: 'none'}).css({width: '90%'}).css({margin: 'auto'});
			}

		}
		
		if (t<50){
			t=50;
		}
		
		if (dialog._data && dialog._data.full){
			$(wid+' .__dialogwrapper').css('top', 0).css('bottom', 0);
		}else{
			$(wid+' .__dialogwrapper').css('top', t);	
		}
	};
};
















var styles = [
 'color: #2a91d6', 'display: block', 'margin: 5px 0', 'line-height: 40px', 'text-align: center', 
 'font-size: 22px', , 'font-weight: bold'
].join(';');

//http://baseinc.talent.vn/
console.log('%c Wow, you find us! Join Base.vn now >>> https://baseinc.talent.vn ', styles);
var Tag=new function __Tag(){
	this.use_context=1;
	this.__log_people=null;
	
	this.context=function(flag, people){
		this.use_context=flag;
		
		this.__log_people=null;
		if (flag && people){
			this.__log_people=people;
		}
	};
	
	this.people=function(){
		if (Client.pageData.context && this.use_context){
			if (Client.pageData.context.__people){
				return Client.pageData.context.__people;
			}
			
			if (this.__log_people){
				return this.__log_people;
			}
			
			Client.pageData.context.__people=AP.array.filter(Client.people, function(p){
				return hasUser(Client.pageData.context.followers, p) || hasUser(Client.pageData.context.owners, p); 
			});

			if (!Client.pageData.context.__people.length){
				return Client.people;		
			}
			
			return Client.pageData.context.__people;
		}
		
		return Client.people;
	};
	
	
	this.line=function(input){
		if (!$(input).length){
			return;
		}
		return $(input).apcomplete('api/tag/user', true);
	};
	
	
	this.singleUser=function(input, array){
		if (!$(input).length){
			return;
		}
		
		$(input).data("single-tag", 1);
		
		this.user(input, array);
	};

	
	this.user=function(input, array, callback){
		if (!$(input).length){
			return;
		}
		
		
		$(input).attr('autocomplete', 'off');

		if (AP.data.isInt(array) || array=="auto"){
			var id=array;
			if (array=="auto"){
				id=0;
				if (Client.data.network){
					id=Client.data.network.id;
					alert(id);
				}
			}
			
			return $(input).each(function(){
				$(this).tag(Client.people, function(item){
					return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
				}, function(item, q){
					var str="";
					if (item && item.keywords){
						str+=item.keywords;
					}
					
					if (item && item.name){
						str+=item.name;
					}
					
					item.__keywords=str;
					
					if (AP.word.fulltextMatch(str, q) && (!id || AP.array.contain(item.networks, id))){
						if (!item.value){
							item.value="@"+item.username;
						}
						
						return true;
					}
					
//					if (item && item.name && item.name.toLowerCase().indexOf(q.toLowerCase())>-1 && (!id || AP.array.contain(item.networks, id))){
//						if (!item.value){
//							item.value="@"+item.username;
//						}
//						
//						return true;
//					}
					
					return false;
				}, function(item, q){
					return Tag.order_fn(item, q);
				}, callback);
			});
		}
		
		
		
		if (array && array.length){
			return $(input).each(function(){
				$(this).tag(array, function(item){
					return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
				}, function(item, q){
					if (!item.value){
						item.value="@"+item.username;
					}
					
					var keywords=item.__keywords;
					var qf=purify(q.toLowerCase()).replace(/[\s\-]/g,'');
					
					if (!keywords){
						keywords=item.name;
						if (item.keywords){
							keywords+=item.keywords;
						}
						
						if (item.name){
							keywords+=item.name;
						}
						
						if (item.name){
							keywords+=item.title;
						}
						
						keywords=purify(keywords.toLowerCase()).replace(/[\s\-]/g,'');
						item.__keywords=keywords+' ';
					}
					
					if (keywords && keywords.indexOf(qf)!=-1){
						return true;
					}
					
					return false;
				}, function(item, q){
					return Tag.order_fn(item, q);
				}, callback);
			});
		}
		
		
		return $(input).each(function(){
			$(this).tag('api/tag/user', function(item){
				return "<span class='image'><img src='"+AP.xthumb(item.gavatar)+"'></span> <span class='block ap-xdot'><span class='bold'>"+item.value+"</span> &middot; <span class='sub'>"+item.name+" &middot; "+___(item.title,"<em>No official title</em>")+"</span></span>";
			}, function(value, q){
				if (value && value.length && value.toLowerCase().indexOf(q.toLowerCase())>-1){
					return true;
				}
				return false;
			}, function(item, q){
				return Tag.order_fn(item, q);
			});
		});
	};
	
	
	
	this.team=function(input){
		var sources=AP.select(Client.units, function(e){
			return {id: e.id, path: e.path, label: "<b>"+e.name+"</b> /"+e.path, value: e.name+" (@"+e.path+")"}
		});
		
		return $(input).each(function(){
			var $this=$(this);
			return $(this).autocomplete({
				source: function(request,response){
					// delegate back to autocomplete, but extract the last term
					var q=ap_extractLast(request.term);
					if (q && q.length && q[0]=="@"){
						q=q.substr(1);
					}
					response($.ui.autocomplete.filter(sources, q));
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},select: function( event, ui ) {
					var terms = $(this).val().split(/,\s*/);
					terms.pop();
					terms.push(ui.item.value);
					terms.push("");
					this.value=terms.join(", ");
					return false;
				}
			}).data("ui-autocomplete")._renderItem = function(ul, item) {
				return $("<li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo(ul);
			};
		});
	};
	
	
	this.teamOptions=function(){
		var sources=AP.render(Client.units, function(e){
			if (e.metatype=="user"){
				return "";
			}
			return "<option value='"+e.id+"'>"+e.name+"</option>";
		});
		
		sources="<option value='0'>-- Select team --</option>"+sources;
		
		return sources;
	};
	
	
	this.teamSelect=function(selector, context){
		this.team(selector);
	};
	
	
	this.teamExtend = function(input){
		var sArray = Client.units;
		if (Client.units && Client.units.length){
			for(var i = 0; i < Client.units.length; i++) {
				var test = AP.array.findObj(Client.units, Client.units[i].id);
				if(test) {
				}else{
					sArray.push(Client.units[i]);
				}
			}
		}
		
		var sources = AP.select(sArray, function(e){
			return {id: e.id, path: e.path, label: "<b>"+e.name+"</b> /"+e.path, value: e.name+" (@"+e.path+")"}
		});
		
		return $(input).each(function(){
			var $this = $(this);
			return $(this).autocomplete({
				source: function(request,response){
					// delegate back to autocomplete, but extract the last term
					var q=ap_extractLast(request.term);
					if (q && q.length && q[0]=="@"){
						q=q.substr(1);
					}
					response($.ui.autocomplete.filter(sources, q));
				},
				focus: function() {
					// prevent value inserted on focus
					return false;
				},select: function( event, ui ) {
					var terms = $(this).val().split(/,\s*/);
					terms.pop();
					terms.push(ui.item.value );
					terms.push("");
					this.value=terms.join(", ");
					return false;
				}
			}).data("ui-autocomplete")._renderItem = function(ul, item) {
				return $("<li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo(ul);
			};
		});	
	};
	
	
	this.networkValues=function(teams){
		var text="";
		for (var i=0; i<teams.length; i++){
			text+=teams[i].name+" (@"+teams[i].path+"), ";
		}
		
		return text;
	};
	
	
	
	this.order_fn=function(item, q){
		q=q.toLowerCase();
		var username=item.username.toLowerCase();
		
		if (q==username){
			return 10;
		}
		
		if (username.indexOf(q)==0){
			return 9;
		}
		

		return 1;
	};
	
	
	
	
	function hasUser(users, user){
		return AP.array.contain(users, user, function(e, f){
			return e.username==f.username;
		});
	};
};
var Form=new function __Form(){
	this.render=function(canvas, options){
		if (!options){
			options={};
		}
		
		var $c=$(canvas);
		if ($c.data("role")=="material" || $c.data("role")=="flat" || options.role=="flat"){
			$c.materialForm();
		}
		
		$c.find(".select-m").each(function(){
			var $this=$(this);
			$this.find(".option").each(function(){
				setMState(this);
				
				$(this).click(function(){
					updateMState(this);
				});
			});
		});
		
		$c.find("input, select, textarea").each(function(){
			var tagname=$(this)[0].nodeName.toLowerCase();
			
			if (tagname=="select"){
				var val=$(this).data("value");
				if (val===null || typeof val=="undefined" || val===""){
				}else{
					$(this).val(val);
				}
			}
			
			if ($(this).is(':checkbox')){
				var val=$(this).data("value");
				if (val==1 || parseInt(val)==1){
					$(this).prop("checked", true);
				}else{
					$(this).prop("checked", false);
				}
				
				return;
			}
			
			if ($(this).data("cid")){
				if (tagname=="input" || tagname=="textarea"){
					var val=$(this).data("value");
					if (val===null || typeof val=="undefined"){
					}else{
						$(this).val(val);
					}
				}
			}
			
			if (tagname=="textarea"){
				if ($(this).data("autoexpand") || $(this).data("autoextend")){
					$(this).autoExpand();
				}
			}
			
			if ($(this).data("unit")){
				var unit=$(this).data('unit');
				var icon="<span class='unit-text' style='position: absolute; right:10px; top:9px; color:#aaa; font-size:12px; text-transform:uppercase'>"+(unit)+"</span>";
				$(this).parent().append(icon);
			}
			
			if ($(this).data("label") && tagname=="input"){
				var label=$(this).data('label');
				var icon="<span style='position: absolute; display:none; right:10px; top:9px; color:#aaa; font-size:12px;' class='unit-text js-input-xlabel'>"+(label)+"</span>";
				$(this).parent().append(icon);
				$(this).on("input focus", function(){
					var v=$(this).val();
					if (v && v.length){
						$(this).parent().find(".js-input-xlabel").show();
					}else{
						$(this).parent().find(".js-input-xlabel").hide();
					}
				}).trigger("input");
			}
			
			var role=$(this).data("role");
			if (!role || !role.length){
				return;
			}
			
			if (role=="markdown"){
				return $(this).markdownEditor();
			}
			
			if (role=="date"){
				var val=$(this).data("value");
				if (val){
					$(this).data("ts", val);
				}else{
					val=$(this).val();
					if (val && val.length && AP.data.isInt(val)){
						$(this).data("ts", val);	
					}	
				}
				
				$(this).attr("autocomplete", "off");
				return $(this).selectDate();
			}
			
			if (role=="drive"){
				Base.drive.init(this, $(this).data("multi"));
			}
			
			if (role=="editor"){
				var height=$(this).data("height");
				if (!height){
					height=200;
				}
				
				return UI.editor(this,{
					minHeight: height
				});
			}
			
			if (role=="day" && tagname=="select"){
				var opts="<option> -- Chọn ngày --</option>";
				for (var i=1; i<=31; i++){
					opts+="<option value='"+i+"'>"+AP.data.zeroPrefix(i)+"</option>";
				}
				$(this).html(opts);
			}
			
			
			if (role=="month" && tagname=="select"){
				var opts="<option> -- Chọn tháng --</option>";
				for (var i=1; i<=12; i++){
					opts+="<option value='"+i+"'>"+AP.data.zeroPrefix(i)+"</option>";
				}
				$(this).html(opts);
			}
			
			
			if (role=="year" && tagname=="select"){
				var opts="<option> -- Chọn năm --</option>";
				for (var i=2015; i>1960; i--){
					opts+="<option value='"+i+"'>"+AP.data.zeroPrefix(i)+"</option>";
				}
				$(this).html(opts);
			}
			
			if (role=="time"){
				return $(this).selectTime();
			}
			
			if (role=="teams"){
				return Tag.team(this, $(this).data("context"));
			}
			
			if (role=="team"){
				return Tag.teamSelect(this, $(this).data("context"));
			}

			if (role=="users" || role=="tag"){
				var context=$(this).data("context");
				if (context && context=="global"){
					return Tag.user(this, Client.people);
				}
				
				if (context){
					return Tag.user(this);
				}else{
					return Tag.user(this, Tag.people());
				}
			}
			
			if (role=="user"){
				Tag.singleUser(this, Tag.people());
			}
			
			
			if (role=="int"){
				return better_int_enter($(this));
			}

		});
		
		$c.find("input, select, textarea").each(function(){
			var tagname=$(this).tagName();
			if ($(this).data("display")==1){
				var v=$(this).val();
				if (tagname=="select"){
					v=$(this).find("option:selected").text();
				}
				
				if (v===null || v==""){
					v="--- &nbsp;";
				}
				
				if (tagname=="textarea"){
					v=v.nl2br();
				}
				
				if ($(this).attr("type")=="hidden"){
					return;
				}
				
				$(this).hide().after("<div class='vd' data-name='"+$(this).attr('name')+"' title='"+tagname+"'>"+v+"</div>");
			}
		});
		
		$c.find(".js-select-tags").each(function(){
			
		});
		
	};
	
	this.edit=function(options, callback){
		options=$.extend({},{type: "input","name":"input", "button":"Edit now","placeholder":"content", data:{}, editor: 0}, options);
		options.callback=callback;
		
		var id=AP.uuid();
		var style='';
		if (options.height){
			style='height: '+options.height+"px;";
		}
		
		var title='<br>';
		if (options.title){
			title="<div class='bold ap-f18 center'>"+options.title+"</div><br>";
		}
		
		if (!options.content){
			options.content='';
		}
		
		if (!options.editor){
			options.content=safe(options.content);
			options.content=options.content.replace(/\{\{\@([a-zA-Z0-9]+)\}\}/g,'@$1');
		}else{
			
		}		
		
		
		var html="<form id='"+id+"' action='"+options.action+"'>" +title+
				"<textarea class='__input' name='"+options.name+"' placeholder='"+options.placeholder+"' style='"+style+"'>"+options.content+"</textarea>" +
				"<div class='buttons -two'>" +
				"	<div class='button -first -passive-2 -rounded' onclick='AP.closeDialog(this)'>Cancel</div>" +
				"	<div class='button -second -success -rounded' onclick='Form.editNow(this);'>"+options.button+"</div>" +
				"</div>" +
			"</form>";
		
		AP.customDialog(html).width(500).show();
		$("#"+id).data("object", options).find(".__input").autofocus();
		
		if (options.editor){
			UI.editor("#"+id+" textarea");
			$("#"+id+" textarea").closest('.trumbowyg-box').css("border","1px solid #ddd");
		}
	};
	
	
	this.editNow=function(ref){
		var $form=$(ref).closest("form");
		var obj=$form.data("object");
		AP.ajaxShow();
		
		AP.submit($form, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			AP.closeDialog(ref);
			obj.callback(code);
		},obj.data);
	};
	
	
	this.convert=function(data, filter){
		if (filter){
			var f=AP.array.filter(data, filter);
			
			return AP.array.select(f, function(e){
				return {label: e.name, value: e.id};
			});
		}
		
		return AP.array.select(data, function(e){
			if ("id" in e){
				return {label: e.name, value: e.id};
			}
			
			return {label: e.value, value: e.key};
		});
	};
	
	this.create= function(id, options){
		return new UIForm(id, options);
	};
	
	
	this.pop=function(options){
		return new UIPopForm(options);
	};
	
	this.hide=function(ref){
		if (AP.data.isString(ref) && ref.charAt(0)!="#"){
			ref="#"+ref;
		}
		
		if (Client.native){
			var dx=$(ref).closest(".page");
			if (dx && dx.length){
				return Page.back();
			}
		}
		
		var dx=$(ref).closest(".__apdialog");
		if (dx && dx.length){
			AP.dialog("#"+dx.attr('id')).hide();	
		}
	};
	
	
	this.balance=function(ref){
		if (AP.data.isString(ref) && ref.charAt(0)!="#"){
			ref="#"+ref;
		}
		
		var dx=$(ref).closest(".__apdialog");
		if (dx && dx.length){
			AP.dialog("#"+dx.attr('id')).balance();	
		}
	};
	
	
	this.submit=function(ref, callback, data){
		if (!data){
			data={};
		}
		
		if (ref.charAt(0)!="#"){
			ref="#"+ref;
		}
		
		UI.ajaxShow();
		AP.submit(ref, function(code){
			UI.ajaxHide();
			callback(code);
		}, data);
	};
	
	
	this.submitFrom= function(ref, callback, data){
		if (!data){
			data={};
		}
		
		var form=$(ref).closest('form');
		if (!form || !form.length){
			$.log("No form can be founed.");
			return;
		}
		
		var id;
		
		if (!form.attr('id') || !form.attr('id').length){
			var tid=AP.uuid();
			form.attr('id',tid);
			id=tid;
		}else{
			id=form.attr('id');
		}
		
		id='#'+id;
		
		AP.ajaxShow();
		AP.submit(id, function(code){
			AP.ajaxHide();
			callback(code);
		}, data);
	};
	
	
	this.val=function(form, data){
		$("input, textarea, select", form).each(function(){
			var name=$(this).attr('name');
			if (name && name.length){
				if (!data[name]){
					data[name]="Not provided";
				}
				$(this).val(data[name]);
			}
		});
	};
	
	
	this.radioVal=function(canvas, name, preset_val){
		$(canvas).find(".li").each(function(){
			var name=$(this).data('name');
			var val=$(this).data('value');
			if (name.length){
				if (AP.data.equal(val, preset_val)){
					$(this).find(".radio-button").addClass('active');
				}
			}
		});
	};

	

	this.match=function(form, data){
		$("input, textarea", form).each(function(){
			var name=$(this).attr('name');
			if (name && name.length){
				if (!data[name]){
					data[name]="Not provided";
				}
				$(this).val(data[name]);
				$(this).hide();
				$(this).parent().addClass("real-display");
				$(this).after("<div class='real'>"+data[name]+"</div>")
			}
		});
	};
	

	
	this.objSelection=function(arr){
		return AP.array.select(arr, function(e){
			return {label: e.name, value:e.id};
		})
	};
	
	
	this.label= function(data){
		return new UILabel(data);
	};
	
	
	this.noLabel = function(){
		return new UILabel(null);
	};
	

	this.row=function(label, input){
		return new UIRow(label, input);
	};
	
	this.placeholder=function(id, raw_html){
		if (!raw_html){
			raw_html='';
		}
		
		return new UIRow(id, {raw_html: raw_html}, "placeholder");
	};
	
	this.rowHidden=function(label, input){
		input.hidden=true;
		return new UIRow(label, input);
	};
	
	this.rowNone=function(label, input){}
	
	this.noRow=function(label){
		return new UIRow(label, null);
	};

	
	this.rowCustom=function(html, opts){
		return new UIRow(html, opts, "custom-html");
	};
	
	
	this.note=function(note, type){
		return (new UIRow(note, type,"note")).setType("note");
	};
	
	
	this.input=function(data){
		return new UIInput(data);
	};
	
	this.inputHTML=function(html){
		return new UIInputHTML(html);
	};
	
	this.inputGroup=function(data){
		return new UIInputGroup(data);
	};
	
	this.wrapper=function(label, id){
		return new UIRow(label, id, "wrapper");
	};

	
	this.inlineCleaner=function(canvas){
		$(canvas).click(function(e){
			$(canvas).find(".activated").each(function(){
				if ($.contains(this, e.target) || this==e.target || $(e.target).closest(".ui-datepicker-header").length){
				}else{
					$(this).removeClass("activated");
				}
			});
		});
	};
	
	
	this.inlineDatePicker=function(selector, callback, options){
		options=$.extend({
			clickOut: false,
			click: false,
			auto: true
		}, options);
		
		var id=AP.uuid();
		
		if ($(selector).hasClass("ap-inline-datepicker-wrap")){
			return;
		}else{
			$(selector).addClass("ap-inline-datepicker-wrap unselectable");
			$(selector).append("<div class='ap-inline-datepicker'><div class='ap-datepicker' id='"+id+"'></div></div>");
		}
		
		if (options.position){
			if (options.position.top){
				$(selector).find(".ap-inline-datepicker").css("top", options.position.top);
			}
			
			if (options.position.left){
				$(selector).find(".ap-inline-datepicker").css("left", options.position.left);
			}
			
			if (options.position.right){
				$(selector).find(".ap-inline-datepicker").css({"left": "auto", "right": options.position.right});
			}
		}
		
		
		var dd=0;
		if (options.value){
			dd=new Date(parseInt(options.value) * 1000);
		}
		
		$("#"+id).datepicker({
			firstDay: 1,
			defaultDate: dd,
			onSelect: function(dateText, inst){
				var day=new Date(dateText);
				var ms = day.valueOf();
				var s = Math.floor(ms / 1000);
				callback.call($(this).closest(".ap-inline-datepicker-wrap")[0], s);
				$("#"+id).closest(".ap-inline-datepicker-wrap").removeClass("activated");
			}
		});
	
		if (options.clickOut){
			$(selector).click(function(){
				$(this).toggleClass("activated");
			}).clickOut(function(){
				$(this).removeClass("activated");
			});
		}else{
			$(selector).data("__jsoptions", options);
			$(selector).click(function(e){
				if ($(e.target).closest(".ui-datepicker-header").length){
				}else{
					if (options.click){
						$(this).addClass("activated");
					}else if (options.auto){
						$(this).toggleClass("activated");
					}
				}
				
				if (!$(this).hasClass("activated")){
					var $box=$(this).closest(".ap-inline-datepicker-wrap");
					var opts=$box.data("__jsoptions");
					if (opts.hide){
						opts.hide.apply($box, []);
					}
				}
			});
		}
		
		if (options.click){
			$(selector).click();
			return;
		}
	};
	
	
	/**
	 * @desc Inline color selector
	 */
	this.inlineColorTagger=function(selector, callback, options){
		if (callback=="set"){
			
			$(selector).find(".ap-color").each(function(){
				var val=$(this).data("color");
				if (parseInt(val)==parseInt(options)){
					$(this).addClass("selected");
					$(this).siblings().removeClass("selected");	
				}
			});
			
			return;
		}
		
		
		if ($(selector).hasClass("ap-inline-colors-wrap")){
			
		}else{
			var colors=AP.render(range(0,9), function(e){
				return "<div class='ap-color -bg-alt"+e+"' data-color='"+e+"'></div>";
			});
			
			$(selector).addClass("ap-inline-colors-wrap unselectable").append("<div class='ap-inline-colors'>" +
				"<div class='apir'></div>" +
				"<div class='ap-inline-title'>Select color</div>" +
				"<div class='ap-inline-box'>"+colors+"</div>" +
			"</div>");
			
			$(selector).find(".ap-color").click(function(){
				var color=$(this).data("color");
				$(this).addClass("selected");
				$(this).siblings().removeClass("selected");
				
				if (callback){
					$(this).closest(".ap-inline-colors").hide();
					callback.call(this, color);
				}
			});
			
			if (options.auto){
				$(selector).click(function(e){
					if (!$(e.target).hasClass("ap-color")){
						$(this).find(".ap-inline-colors").toggle();	
					}
				});
				
			}
			
			if (options.left){
				$(selector).find(".ap-inline-colors").css({left: options.left}).find(".apir").css({left: -options.left+10});
			}
			
			if (options.click && !$(selector).hasClass("__inited")){
				$(selector).addClass("__inited").find(".ap-inline-colors").show();
			}
		}
	};
	
	
	this.inlineTagger=function(selector, options){
		if ($(selector).hasClass("ap-inline-tagger-wrap unselectable")){
			if (options.click){
				// $(selector).find(".-close").click();
				// $(selector).addClass("activated");
			}
			
			return;
		}
		
		options=$.extend({}, {label: "Type to search", multi: false, users: Client.people}, options);
		var multi="multi";
		if (!options.multi){
			multi="single";
		}
		
		var users=AP.render(options.users, function(e){
			if (options.filter && !options.filter(e)){
				return "";
			}
			
			return "<div class='api-user' data-username='"+e.username+"' data-kw='"+e.name+" "+e.username+" "+e.title+"'>" +
				"<div class='avatar avatar-24 -circled'><div class='image'><img src='"+AP.xthumb(e.gavatar)+"'/></div></div>" +
				"<div class='api-context'><div class='api-name'>"+e.name+"</div> <div class='api-info ap-xdot'>"+e.title+"</div></div>" +
			"</div>";
		});
		
		if (options.remove){
			users+="<div class='api-user' data-kw='' data-cancel='1'>" +
				"<div class='avatar avatar-24 -circled'><div class='c'><div class='-ap icon-close' style='padding-top:2px;'></div></div></div>" +
				"<div class='api-context'><div class='api-name'><div class='red normal' style='padding-top:4px'>Remove</div></div></div>" +
			"</div>";
		}
		
		
		var id=AP.uuid();
		$(selector).addClass("ap-inline-tagger-wrap unselectable");
		
		var title="";
		if (options.title){
			title="<div class='api-title'>"+options.title+"</div>";
		}
		
		var footer="";
		if (options.footer){
			footer="<div class='api-footer'>"+(options.footer)+"</div>";
		}
		
		$(selector).append("<div class='-close full-mask'></div> <div class='ap-inline-tagger'><div id='"+id+"' class='ap-tagger is"+multi+"'>" +
			title +
			"<div class='api-sb'><input type='text' placeholder='"+options.label+"'/></div>" +
			"<div class='api-users'>"+users+"</div>" +
			footer+
		"</div></div>");
		
		
		
		
		if (options.width){
			$(selector).find(".ap-inline-tagger").css("width", options.width);
		}
		
		if (options.position){
			if (options.position.top){
				$(selector).find(".ap-inline-tagger").css("top", options.position.top);	
			}
			
			if (options.position.left){
				$(selector).find(".ap-inline-tagger").css("left", options.position.left);	
			}
			
			if (options.position.right){
				$(selector).find(".ap-inline-tagger").css({"right": options.position.right, left: "auto"});	
			}
		}
		
		$(selector).data("__jsoptions", options);
		$(selector).find(".-close").click(function(){
			$(this).parent().toggleClass("activated");
			
			if (!$(this).parent().hasClass("activated")){
				var $box=$(this).closest(".ap-inline-tagger-wrap");
				var opts=$box.data("__jsoptions");
				if (opts.hide){
					opts.hide.apply($box, []);
				}
			}
		});			
		
		
		$(selector).find(".api-user").on("click", function(){
			var cancel=$(this).data("cancel");
			if (cancel){
				var $box=$(this).closest(".ap-inline-tagger-wrap");
				var opts=$box.data("__jsoptions");
				opts.remove.apply($box, []);
				$(this).closest(".ap-inline-tagger-wrap").removeClass("activated");
				return;
			}
			
			var username=$(this).data("username");
			var user=People.get(username);
			if (user){
				options.select.apply($(this).closest(".ap-inline-tagger-wrap"), [user, $(this).closest(".ap-inline-tagger-wrap")]);
				$(this).closest(".ap-inline-tagger-wrap").removeClass("activated");
			}
		});
		
		
		if (options.search || $(selector).find(".api-sb").length){
			$(selector).find(".api-sb input").quickFilter($(selector).find(".api-users .api-user"),function($e, q){
				q=AP.purify(q);
				var kw=$e.data("kw").toLowerCase();
				if (kw.indexOf(q.toLowerCase())!=-1){
					return true;
				}
				
				return false;
			});
		}
		
		
		if (options.click){
			$(selector).find(".-close").click();
		}
	};
	
	
	

	this.inlineLabelTagger=function(selector, callback, options){
		options=$.extend({}, {label: "Type to search", multi: false, search: false, click: false, fill: false, multi: false}, options);
		
		if ($(selector).hasClass("ap-inline-tagger-wrap")){
			if (options.click){
				// $(selector).find(".-close").click();
			}
			return;
		}
		
		var multi="multi";
		if (!options.multi){
			multi="single";
		}
		
		var tags=AP.render(options.labels, function(e){
			if (options.filter && !options.filter(e)){
				return "";
			}
			
			if (options.render){
				return "<div class='js-tagitem' data-color='"+(e.color)+"' data-name='"+(e.name)+"' data-id='"+(e.id)+"' data-key='"+(e.key)+"'> "+(options.render(e))+" </div>";
			}
			
			return "<div class='api-tag js-tagitem' data-color='"+(e.color)+"' data-name='"+(e.name)+"' data-id='"+(e.id)+"' data-key='"+(e.key)+"'> <div class='square -bg-alt"+(e.color)+"'></div> <div class='api-context'><div class='api-txt'>"+(e.name)+"</div></div> </div>";
		});
		
		
		var id=AP.uuid();
		$(selector).addClass("ap-inline-tagger-wrap unselectable");
		
		
		var title="";
		if (options.title){
			title="<div class='api-title'>"+options.title+"</div>";
		}
		
		$(selector).append("<div class='-close full-mask'></div> <div class='ap-inline-tagger -compact'><div id='"+id+"' class='ap-tagger is"+multi+"'>" +
			title +
			(options.search?("<div class='api-sb'><input type='text' placeholder='"+options.label+"'/></div>"):"") +
			"<div class='api-tags'>"+tags+"</div>" +
		"</div></div>");
		
		if (options.width){
			$(selector).find(".ap-inline-tagger").css("width", options.width);
		}
		
		if (options.position){
			if (options.position.top){
				$(selector).find(".ap-inline-tagger").css("top", options.position.top);	
			}
			
			if (options.position.left){
				$(selector).find(".ap-inline-tagger").css("left", options.position.left);	
			}
			
			if (options.position.right){
				$(selector).find(".ap-inline-tagger").css({"right": options.position.right, left: "auto"});	
			}
		}
		
		
		if (!options.click){
			$(selector).find(".-close").click(function(){
				$(this).parent().toggleClass("activated");
			});	
		}else{
			$(selector).click(function(){
				$(this).toggleClass("activated");
			});
		}
		
		
		$(selector).find(".js-tagitem").on("click", function(){
			// var item=$(this).closest(".ap-tag");
			
			if (!options.multi){
				$(this).closest(".ap-inline-tagger-wrap").removeClass("activated");	
			}else{
				$(this).toggleClass("selected");
			}
			
			callback.apply($(this).closest(".ap-inline-tagger-wrap"), [this]);
		});
		
		
		if (options.search){
			$(selector).find(".api-sb input").quickFilter($(selector).find(".api-tags .api-tag"),function($e, q){
				var kw=$e.data("kw").toLowerCase();
				if (kw.indexOf(q.toLowerCase())!=-1){
					return true;
				}
				
				return false;
			});
		}
		
		if (options.selected && options.selected.length){
			$(selector).find(".js-tagitem").each(function(){
				var id=$(this).data("id");
				if (AP.data.isInt(id)){
					id=parseInt(id);
				}
				
				if (AP.array.contain(options.selected, id)){
					$(this).addClass("-selected");
				}
			});
		}
		
		if (options.click){
			$(selector).addClass("activated");
		}
	};
	
	
	
	this.editorEscape=function(content){
		content=AP.word.replaceAll('&#8221;', '\"', content);
		content=AP.word.replaceAll('&#8220;', '\"', content);
		content=AP.word.replaceAll('&#8216;', "'", content);
		
		content=AP.word.replaceAll('<br>', "\n", content);
		content=AP.word.replaceAll('"', '\"', content);
		
		return content;
	};
	
	
	
	function setMState(ref){
		var val=$(ref).data("value");
		var $input=$(ref).closest(".select-m").find("input");
		var vals=AP.word.split(",", $input.val());
		if (vals.indexOf(val)!=-1){
			active=1;
		}else{
			active=0;
		}
		
		$input.val(vals.join(","));
		
		if (active){
			$(ref).addClass("active");
		}else{
			$(ref).removeClass("active");
		}
	};
	
	
	function updateMState(ref){
		var val=$(ref).data("value");
		var $input=$(ref).closest(".select-m").find("input");
		var vals=AP.word.split(",", $input.val());
		var active=0;
		
		if (vals.indexOf(val)!=-1){
			vals=AP.array.remove(vals, val);
			active=0;
		}else{
			vals.push(val);
			active=1;
		}
		
		
		$input.val(vals.join(","));
		
		if (active){
			$(ref).addClass("active");
		}else{
			$(ref).removeClass("active");
		}
	};
};












function UIPopForm(options){
	options=$.extend({}, {id: 'popform','width': 800, label: 'Form dialog', closable: true}, options);
	this.options=options;
	this.formobj=null;
	this.html="";

	
	this.setForm=function(formObj){
		var inline="form-inline";
		if (formObj.__settings.block || Client.native || options.layout=="flat" ||  options.layout=="block" || Client.mobile){
			inline="";
		}
		
		if (Client.native){
			this.html="<div class='form form-dialog "+inline+"'><form method='post' id='"+formObj.__id+"' action='"+formObj.__options.action+"'><div class='form-main'><div class='form-scroll'>"+formObj.html()+"</div></div><div class='form-buttons'></div></form></div>";	
		}else{
			this.html="<div class='form form-dialog "+inline+"'><form method='post' id='"+formObj.__id+"' action='"+formObj.__options.action+"'>"+formObj.html()+"<div class='form-buttons'></div></form></div>";
		}
		
		
		this.formObj=formObj;
		return this;
	};
	
	this.show=function(){
		if (Client.mobile){
			this.options.width='100%';
		}
		
		if (Client.native){
			this.options.engine=FormDialogMobile;
			AP.dialog(this.options.id, FormDialogMobile)
			.title("<div class='title-1 ap-xdot'>"+this.options.label+"</div>")
			.content(this.html)
			.show();
		}else{
			if (this.options.sublabel){
				this.options.engine=FormDialogEngine2;
				AP.dialog(this.options.id)
				.engine(FormDialogEngine2)
				.width(this.options.width, AP.mobile)
				.title("<div class='title-1'>"+this.options.label+"</div><div class='title-2'>"+this.options.sublabel+"</div>")
				.content(this.html)
				.closable(this.options.closable)
				.show();
			}else{
				this.options.engine=FormDialogEngine;
				AP.dialog(this.options.id)
				.engine(FormDialogEngine)
				.width(this.options.width, AP.mobile)
				.title(this.options.label)
				.content(this.html)
				.closable(this.options.closable)
				.show();	
			}
		}
		
		

		
		this.placeButtons(this.formObj);
		this.update();
		if (this.formObj.__callback){
			(this.formObj.__callback).apply(this.formObj, [this.formObj]);
		};
		
		$("input, textarea","#"+this.formObj.__id).each(function(){
			var role=$(this).data("role");
			if (role=="date"){
				$(this).selectDate();
			}
			
			if (role=="time"){
				$(this).selectTime();
			}
			
			if (role=="tag"){
				if ($(this).data("context")=="global"){
					Tag.user(this, Client.people);
				}else{
					Tag.user(this, Tag.people());	
				}
			}
			
			if (role=="teams"){
				Tag.teamExtend(this);
			}
			if (role=="user"){
				Tag.singleUser(this, Tag.people());
			}
			
			if (role=="int"){
				better_int_enter($(this));
			}
			
			if (role=="editor"){
				
			}
		});
		
		
		$(document).on("keypress", "#"+this.formObj.__id+" input", function(event){
			if (event.keyCode == 13) {
		        event.preventDefault();
		    }
		});
		
		if (this.options.layout=="flat"){
			$("#"+this.formObj.__id).parent().addClass("-flat");
			$("#"+this.formObj.__id).find(".input-fake, select").closest(".row").addClass("-active");
			$("#"+this.formObj.__id).find("input[type=file]").closest(".row").addClass("-active");
			$("#"+this.formObj.__id).find(".input.xflat").closest(".row").addClass("-active noflat");
			
			$("#"+this.formObj.__id).find("input, textarea").each(function(){
				if ($(this)[0].type=="file"){
					return;
				}
						
				var $temp=$(this).closest(".row");
				var phv=$(this).attr('placeholder');
				if (!phv || !phv.length){
					phv=false;
				}else{
					phv=true;
				}
				
				if ($temp.hasClass("noflat") || phv){
					$temp.addClass("-active");
					return;
				}
				
				$(this).focus(function(){
					$(this).closest(".row").addClass("-active");
				}).blur(function(){
					var val=$(this).val();
					if (!val || !val.length){
						$(this).closest(".row").removeClass("-active");	
					}
				});
				
				var val=$(this).val();
				if (val && val.length){
					$(this).closest(".row").addClass("-active");
				}
			})
		}
		
		return this;
	};
	
	
	
	this.closable=function(opt){
		AP.dialog(this.options.id).closable(opt)
		
		return this;
	};
	
	
	
	this.placeButtons=function(form){
		var html=form.renderButtons();
		var count="";
		var bcount=form.__buttons.length;
		if (bcount==1){
			count="-one";
		}
		if (bcount==2){
			count="-two";
		}
		if (bcount==3){
			count="-three";
		}
		$(".form-buttons", "#"+this.options.id).html(html).addClass(count);
		
		$(".form-buttons .button", "#"+this.options.id).each(function(index){
			$(this).data("action", form.getButton(index).action);
			$(this).click(function(){
				var action=$(this).data("action");
				action();
			});
		});
	};
	
	this.update=function(){
		this.formObj.update();
		AP.dialog(this.options.id, this.options.engine).balance();
	};
	
	this.focus=function(name){
		this.formObj.focus(name);
		return this;
	};
	
	this.addClass=function(name){
		$("#"+this.options.id).closest(".__dialog").addClass(name);
		return this;
	};
	
	
};


function inputIntegerFormat(input){
	better_int_enter($(input));
};

function better_int_enter($input){
	$input.on("input", function(){
		var val=$(this).val();
		if (val.length && val.charAt(val.length-1)=="."){
			return;
		}
		
		val=val.replace(/,/g,"");

		if (AP.data.isNumber(val)){
			val=AP.data.numberFormat(val);
			$input.val(val);
		}
	}).trigger("input");
};




Form.icon=new function __FormIcon(){
	// this.icons={"heartbeat":, "idea", "grow", "star",  "box", "book", "office", "paper", "health", "report", "alarm", "chart", "time", "connect", "todo", "contact", "folder", "pin", "tag","cart", "heart"};
	
	this.icons={"heartbeat": "Health", "h-square":"House", "heart":"Heart", "gittip": "Heart 2", "wpforms": "Note form", "delicious":"Square", "adn": "A label", "bandcamp": "Trepeziod", "google-wallet": "Wallet", "pie-chart": "Pie chart", "dot-circle-o": "Dot circle", "plane":"Plane", "sun-o":"Sunny", "adjust": "Contrast", "automobile": "Automobile", "bicycle": "Bicycle", "briefcase": "Briefcase", "bug": "Bug", "bus": "Bus", "cab": "Cab", "bullseye": "Bullseye", "cutlery": "Cutlery", "birthday-cake":"Birthday Cake", "fax":"Phone & Fax", "mortar-board": "Education", "plug": "Plug", "print": "Print", "recycle":"Recycle", "shopping-bag":"Shopping Bag", "support":"Life buoy", "tv":"Television", "truck": "Truck", "tree":"Tree", "video-camera":"Camrea", "train":"Train", "credit-card":"Credit card", "ticket":"Ticket"};
	this.fav_icons=range(1,60);
	
	
	this.render=function(options){
		return "<div class='input data pointer' onclick=\"$(this).toggleClass('active')\"'> <input id='"+options.id+"' type='text' name='"+options.name+"' placeholder='Click to select icon' readonly/> <div class='icon-display' style='position:absolute; font-size:14px; color:#aaa; right:0px; bottom:9px;'></div><div class='form-icons'>"+getIcons(this.icons)+"</div></div>";
	};
	
	
	this.renderFav=function(options){
		return "<div class='input data pointer' onclick=\"$(this).toggleClass('active')\"'> <input id='"+options.id+"' type='text' name='"+options.name+"' placeholder='Click to select icon' readonly/> <div class='icon-display' style='position:absolute; font-size:14px; color:#aaa; right:0px; bottom:9px;'></div><div class='form-icons'>"+getFavIcons(this.fav_icons)+"</div></div>";
	};
	
	
	this.inlinePicker=function(){
		var html="";
		for (var i=0; i<this.fav_icons.length; i++){
			var key = this.fav_icons[i];
			html+= "<div class='sx-icon' data-value='"+(key)+"' onclick='Form.icon.selectInline(this);'> <img style='width:16px; height:16px;' src='"+(Client.share_url)+"/fav_icons/"+(key)+".png'/> </div>";
		}
		
		return "<div class='sx-icons'>"+(html)+"</div>";
	};
	
	
	
	this.select=function(ref){
		var $canvas=$(ref).closest(".input");
		var v=$(ref).data("value");
		
		$canvas.find("input").val(v);
		$canvas.find(".icon-display").html("<span class='ficon-"+v+"'></span>");
	};
	
	
	this.selectInline=function(ref){
		var $this=$(ref);
		var v=$this.data("value");
		$this.closest(".inline-icon-picker").find(".icon-display").html("<img src='"+(Client.share_url)+"/fav_icons/"+(v)+".png'/>");
		$this.closest(".inline-icon-picker").removeClass("active");
		$this.closest(".inline-icon-picker").find("*[name=icon]").val(v);
	};
	
	
	function getIcons(icons){
		var html="";
		for (var key in icons){
			html+= "<div class='form-icon' data-value='"+key+"' onclick='Form.icon.select(this);'><span class='inline ap-f14' style='width: 20px;'><span class='ficon-"+key+"'></span></span> "+icons[key]+"</div>";
		}
		return html;
	};
	
	
	function getFavIcons(icons){
		var html="";
		for (var i=0; i<icons.length; i++){
			var key = icons[i];
			html+= "<div class='form-icon' data-value='"+key+"' onclick='Form.icon.select(this);'><span class='inline ap-f14' style='width: 20px;'><img style='width:16px; height:16px;' src='"+Client.share_url+"/fav_icons/"+key+".png'/></span></div>";
		}
		return html;
	};
	
};


function __FormTouch(url, data){
	this.url=url;
	this.data={};
	
	if (url){
		this.url=url;
	}
	
	if (data){
		this.data=data;
	}
	
	this.msg_confirm=null;
	this.msg_success=null;
	
	this.success=function(msg, fn){
		this.msg_success=msg;
		this.success_fn=fn;
		return this;
	};
	
	this.confirm=function(msg){
		this.msg_confirm=msg;
		return this;
	};
	
	this.run=function(){
		if (this.msg_confirm){
			var $this=this;
			AP.confirm(this.msg_confirm, function(){
				$this.execute();
			});
			
			return;
		}else{
			this.execute();
		}
	};
	
	
	this.execute=function(){
		UI.ajaxShow();
		
		var $this=this;
		AP.post(this.url, this.data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash($this.msg_success);
			$this.success_fn(code);
		});
	};
};

Form.touch=function(url, data){
	return new __FormTouch(url, data);
};


Form.list=new function __FormList(){
	this.init=function(input, options){
		options=$.extend({}, {url: "", data: {}, placeholder:"Type the next line here"}, options);
		if (options.__data){
			options.data=$.extend(options.data, options.__data);
		}
		
		options.name=$(input).attr("name");
		
		$(input).each(function(){
			var $input=$(this);
			var simple=($input.data("role")=="simple");
			
			var id=AP.uuid();
			$input.addClass("-js-value").wrap("<div class='line-inputs' id='"+id+"'></div>");
			$input.wrap("<div class='hidden'></div>");
			$("#"+id+"").data("options", options).append("<div class='js-lines'></div>");
			
			var value="";
			if (options.value){
				value=options.value;
			}
			
			if (!value && $input.val() && $input.val().length){
				value=$input.val();
			}
			
			initRow($input[0], value);
		});
	};
	
	
	/**
	 * @desc Directly set values
	 */
	this.setValue=function(input, value){
		$(input).each(function(){
			initRow(this, value);
			$(this).closest(".line-inputs").find(".hidden .-js-value").val(value);
		});
	};
	
	
	/**
	 * @desc Remove the line containing ref, update JS/textarea content
	 */
	this.removeLine=function(ref){
		var $last=$(ref).closest(".js-lines").find(".line-input.last");
		$(ref).closest(".line-input").remove();
		
		updateContent($last[0]);
	};
	
	
	function initRow(ref, value){
		var $c=$(ref).closest(".line-inputs");
		var id=$c.attr("id");
		var options=$c.data("options");
		var html="";
		var attrs="";
		if (options.data.taggable){
			attrs+="data-role='tag'";
		}
		
		if (AP.data.isArray(value)){
			var rv="";
			html=AP.render(value, function(line){
				var lx=line;
				
				if (AP.data.isObject(line)){
					lx=line;
				}else{
					lx={key: AP.random.word(32), value: lx};
				}
				
				rv+=""+(lx.key)+":"+(lx.value)+"\n";
				return "<div class='line-input -real'> <textarea name='line-"+(lx.key)+"' "+(attrs)+" data-rid='"+(lx.key)+"'>"+(lx.value)+"</textarea> <div class='line-actions'> <div class='-action red' onclick='Form.list.removeLine(this)'>Remove</div> </div> </div>";
			});
			
			$(ref).val(rv);
		}else{
			var lines=value.split("\n");
			html=AP.render(lines, function(line){
				var p=safeSplit(line, ":", 2);
				if (p.length!=2){
					return "";
				}
				
				return "<div class='line-input -real'> <textarea name='line-"+(p[0])+"' "+(attrs)+" data-rid='"+(p[0])+"'>"+(p[1])+"</textarea> <div class='line-actions'> <div class='-action red' onclick='Form.list.removeLine(this)'>Remove</div> </div> </div>";
			});	
		}
		
		if (options){
			html+="<div class='line-input focus last'><textarea name='temp' "+(attrs)+" placeholder='"+(options.placeholder)+"'></textarea></div>";	
		}
		
		
		$("#"+id+" .js-lines").empty().html(html);
		Form.render("#"+id+" .js-lines");
		bindEvents("#"+id, options);
	};
	
	
	function bindEvents(canvas, options){
		$(canvas).find(".line-input textarea").each(function(){
			$(this).enter(function(){
				updateContent(this);
				saveContent(this);
			}).on("input change", function(){
				silentSync(this);
			});
		});
	};
	
	
	function updateContent(ref){
		var $c= $(ref).closest(".line-inputs");
		var html="";
		$c.find(".line-input textarea").each(function(){
			var rid=$(this).data("rid");
			var content=safe($(this).val());
			if (!content || !content.length){
				return;
			}
			
			if (!rid){
				rid=AP.random.word(32);
			}
			
			html+=rid+":"+content+"\n";
		});
		
		$c.find("textarea.-js-value").val(html);
	};
	
	
	function syncBackContent(ref){
		var $c= $(ref).closest(".line-inputs");
		var val=$c.find("textarea.-js-value").val();
		initRow(ref, val);
		$c.find(".line-input.last textarea").focus();
	};
	
	function silentSync(ref){
		var $cs= $(ref).closest(".line-inputs");
		var val="";
		
		$cs.find(".line-input textarea").each(function(){
			var rid=$(this).data("rid");
			var content=safe($(this).val());
			if (!content || !content.length){
				return;
			}
			
			if (!rid){
				rid=AP.random.word(32);
			}
			
			val+=rid+":"+content+"\n";
		});
		
		$cs.find("textarea.-js-value").val(val)
	};
	
	
	function saveContent(ref){
		var $c=$(ref).closest(".line-inputs");
		var opts=$c.data("options");
		var name=opts.name;
		
		var rid=$(ref).data("rid");
		
		if (!opts.url || !opts.url.length){
			syncBackContent(ref);
			return;
		}
		
		var data=shallowClone(opts.data);
		data[name]=$c.find("textarea.-js-value").val();
		
		UI.ajaxShow();
		AP.post(opts.url, data, function(code){
			UI.ajaxHide();
			if (code.good()){
				syncBackContent(ref);
			}
		});
	};
	
	
	
	function safeSplit(line, splitter, limit){
		var p=line.split(splitter);
		if (p.length<limit){
			return p;
		}
		
		// p.length >= limit
		
		var s=[];
		for (var i=0; i<limit-1; i++){
			s.push(p[i]);
		}
		
		var tail="";
		for (var i=limit-1; i<p.length; i++){
			tail+=p[i];
			if (i<p.length-1){
				tail+=splitter;
			}
		}
		
		s.push(tail);
		return s;
	};
};


Form.select=new function(){
	this.improve=function(selector, opts){
		$(selector).each(function(){
			Form.improveSelect(this, opts);
		});
	}
};

Form.improveSelect=function(selector, opts){
	if (!$(selector).length){
		return;
	}
	
	$(selector).hide();
	var placeholder=$(selector)[0].placeholder;
	if (!placeholder){
		placeholder='---';
	}
	
	var items=[];
	var emp=null;
	var cv=$(selector).val();
	
	opts=$.extend({search: true, with_empty: 1}, opts);
	
	$(selector).find("optgroup").each(function(){
		items.push({label: $(this).attr("label"), type: "optgroup"});
		
		$(this).find("option").each(function(){
			if (AP.data.equal(this.value, opts.empty)){
				emp="<em>"+$(this).text()+"</em>";
			}else{
				items.push({label: $(this).text(), value: this.value, selected: this.selected?1:0});	
			}
		});
	});
	
	if (!items.length){
		$(selector).find("option").each(function(){
			if (AP.data.equal(this.value, opts.empty)){
				emp="<em>"+$(this).text()+"</em>";
			}else{
				items.push({label: $(this).text(), value: this.value, selected: this.selected?1:0});	
			}
		});	
	}
	
	
	if (opts.items && !items.lenth){
		items=AP.select(opts.items, function(e){
			return {label: e.name, value: e.id};
		});
		
		if (opts.empty){
			items.unshift({label:"---", value: ""});
		}
		
		$(selector).html(AP.render(items, function(e){
			return "<option value='"+(e.value)+"'>"+(e.label)+"</option>";
		}));
	}
	
	if (placeholder=="---" && emp){
		placeholder=emp;
	}
	
	
	var $p=$(selector).parent();
	var items_html=AP.render(items, function(e){
		if (e.type && e.type=="optgroup"){
			return "<div class='is-label'>"+(e.label)+"</div>";
		}
		
		var label=e.label;
		if (opts.render){
			var fn=opts.render;
			label=fn(e.value, label);
		}
		
		return "<div class='is-item' onclick='Form.improveSelectHelper.pickup(this);' data-value='"+(e.value)+"'>"+(label)+"</div>";
	});
	
	var name=AP.uuid();
	var search="<div class='is-search'><input type='text' name='"+(name)+"' placeholder='Quick filter'/></div>";
	if (!opts.search){
		search='';
	}
	
	var html="<div class='improve-select unselectable'> <div class='is-display url' data-url=':active:parent'><div class='ap-xdot'>"+(placeholder)+"</div></div> <div class='is-box'> "+(search)+" <div class='is-scroll scroll-y url' data-url=':active:parent:parent'> <div class='is-items'>"+(items_html)+"</div> </div> </div> </div>";
	
	$p.append(html).addClass("js-improved-select");
	var tname=$p.find("select").attr("name");
	
	if (opts.multiple || opts.multi){
		$p.find("select").hide().attr("name", AP.uuid()).after("<input type='hidden' class='js-select' name='"+(tname)+"'/>");
		$p.data("multiple", 1);
	}else{
		// $p.find("select").hide().attr("name", AP.uuid()).after("<input type='hidden' class='js-select' name='"+(tname)+"'/>");
	}
	
	$p.find("input[name="+name+"]").on("input keypress", function(){
		var v=$(this).val();
		if (!v || !v.length){
			$p.find(".is-scroll").find(".is-item").show();
			return;
		}
		
		$p.find(".is-scroll").find(".is-item").each(function(){
			var txt=$(this).text();
			if (AP.word.fulltextMatch(txt, v)){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
	});
	
	if (opts.multi || opts.multiple){
		if (opts.value && opts.value.length){
			$p.find(".is-item").each(function(){
				if (AP.array.contain(cv, $(this).data("value"))){
					$(this).click();
					$p.find(".improve-select").removeClass("active");
				}
			});	
		}
		
		return;
	}
	
	
	// Set current value
	if (!cv && "value" in opts){
		cv=opts.value;
	}
	
	
	$p.find(".is-item").each(function(){
		if (AP.data.equal(cv, $(this).data("value"))){
			$(this).click();
			$p.find(".improve-select").removeClass("active");
		}
	});
};



Form.improveSelectHelper=new function __FormIMPHelper(){
	this.pickup=function(ref){
		var $p=$(ref).closest(".js-improved-select");
		
		if ($p.data("multiple")){
			return this.pickupMulti(ref);
		}
		
		
		var label=$(ref).text();
		
		$(ref).siblings().removeClass("active");
		$(ref).toggleClass("active");
		
		var value=$(ref).data("value");
		if (!$(ref).hasClass("active")){
			value="";
			$p.find(".is-display div").html("---");
		}else{
			$p.find(".is-display div").html(safe(label));
		}
		
		$p.find("select").val(value).trigger("change");	
		
	};
	
	
	this.pickupMulti=function(ref){
		$(ref).toggleClass("active");
		var $p=$(ref).closest(".js-improved-select");
		
		var value=[];
		var label=[];
		
		$p.find(".is-item.active").each(function(){
			var lab=safe($(this).text());
			label.push("<span class='is-itag'>"+(lab)+"</span>");
			value.push($(this).data("value"));
		});
		
		value=AP.array.unique(value);
		
		$p.find(".is-display div").html(label.join(" ")+"&nbsp;").removeClass("ap-xdot");
		$p.find(".js-select").val(value.join(", ")).trigger("change");

	};
};


Form.v2=function(opts){
	opts=$.extend({}, {width: 450, layout:"flat"}, opts)
	var form = Form.create('form-v2-fx', {'action': opts.action});
	var focus= 'name';
	
	var hiddens = {};
	if (opts.hiddens){
		hiddens=opts.hiddens;
	}
	
	if (opts.data){
		hiddens=opts.data;
	}
	
	for (var i=0; i< opts.rows.length; i++){
		var r=opts.rows[i];
		
		if (AP.data.isArray(r)){
			var gs=[Form.v2.getIPData(r[0]), Form.v2.getIPData(r[1])];
			
			form.row(
				Form.label({label: r[0].label, extra_label: r[1].label}),
				Form.inputGroup(gs)
			).addClass("-active");
		}else{
			var ip= Form.v2.getIPData(r);
			
			if (r.type=="placeholder"){
				form.row(
					Form.label({label: r.label}),
					Form.input({name: r.name, type: "placeholder", id: r.id})
				).addClass("-active");
			}else if (r.type=="html"){
				var id=AP.uuid();
				form.placeholder(id, r.html);
			}else{
				var cx=(r.classes?r.classes:"");
				if (!cx && r.style){
					cx=r.style;
				}
				
				if (!r.label){
					cx+=" -upper";
				}
				
				if (r.hidden){
					form.rowHidden(
						Form.label({label: r.label}),
						ip
					);
				}else{
					form.row(
						Form.label({label: r.label}),
						ip
					).addClass("-active "+cx);
				}
				
				if (r.focus){
					focus=r.name;
				}
			}	
		}
	}
	
	if (opts.buttons){
		if (AP.data.isArray(opts.buttons)){
			form.buttons(opts.buttons);
		}else{
			form.buttons(opts.buttons.release());
		}
	}
	
	form.hiddens(hiddens).render(function(f){
		if (opts.render){
			opts.render.apply(f);	
		}
	});

	Form.pop({id: "form-v2-dx", width: opts.width, label: opts.title, layout: opts.layout}).setForm(form).show().focus(focus);
	
};


Form.v2.getIPData=function(r){
	if (!r.label){
		r.label="";
	}
	
	var ip_data={name: r.name, type: r.type, placeholder: r.placeholder?r.placeholder:r.label};
	
	if (r.role){
		ip_data.role=r.role;
	}
	
	if (r.data){
		ip_data.data=r.data;
	}
	
	if (r.color_picker){
		ip_data.color_picker=r.color_picker;
	}
	
	if (r.color){
		ip_data.color=r.color;
	}
	
	if (r.icon_picker){
		ip_data.icon_picker=r.icon_picker;
	}
	
	if (r.options){
		var opts = r.options;
		if (!AP.data.isArray(opts)){
			opts=[];
			for (var key in r.options){
				opts.push({value: key, label: r.options[key]});
			}
		}
		
		ip_data.options = opts;
		
		if (!ip_data.type || ip_data.type=="text"){
			ip_data.type="select";	
		}
		
		if (r.multiple || (r.data && r.data.multiple)){
			ip_data.multiple=1;
		}
	};
	
	if (r.groups){
		ip_data.optgroups = r.groups;
		ip_data.type="select";
	}
	
	if (!ip_data.type){
		ip_data.type="text";
	}
	
	if (r.empty && ip_data.type=="select"){
		ip_data.empty={label:"-- Please select --", value: 0};
		if (AP.data.isString(r.empty)){
			ip_data.empty={label: r.empty, value: 0};
		}
	}
	
	if (r.minHeight){
		ip_data.height=r.minHeight;
	}else if (r.height){
		ip_data.height=r.height;
	}
	
	if (r.unit){
		ip_data.unit=r.unit;
	}
	
	var ip=Form.input(ip_data).valueIf(r.value, "value" in r);
	if (r.css){
		ip.css(r.css);
	}
	
	if (r.height && r.role!="editor"){
		ip.css({minHeight: r.height+"px"})
	}
	
	if (r.extra){
		ip.extra(r.extra);
	}
	
	return ip;
}


Form.v2.hide=function(){
	return Form.hide("form-v2-fx");
};

Form.v2.submit=function(callback){
	return Form.submit("#form-v2-fx", callback);
};

Form.v2.balance=function(){
	return AP.dialog("form-v2-dx").balance();
};

Form.button=function(btn, cb){
	return new FormButtonV2(btn, cb);
};



function FormButtonV2(btn, cb){
	this.btns=[];
	this.button=function(btn){
		if (btn==":cancel"){
			btn={label: "Cancel", action: function(){
				Form.v2.hide();
			}};
		}else if (btn==":submit"){
			btn={
				label: "Save", style: "ok", action: function(){
					Form.v2.submit(function(code){
						if (!code.good()){
							return AP.alertError(code.message);
						}
						
						if (!cb){
							AP.xRefresh();	
						}else{
							cb(code);
						}
					});
				}
			};
		}else if (btn==":submit-refresh"){
			btn={
					label: "Save", style: "ok", action: function(){
						Form.v2.submit(function(code){
							if (!code.good()){
								return AP.alertError(code.message);
							}
							
							AP.refresh();
						});
					}
				};
			}
		
		
		if (btn.type=="good" || btn.style=="good" || btn.type=="ok" || btn.style=="ok"){
			btn.style="ok -success -rounded bold";
		}else{
			btn.style="cancel -passive-2 -rounded";
		}
		
		this.btns.push(btn);
		return this;
	};
	
	if (btn){
		this.button(btn);	
	}
	
	this.release=function(){
		return this.btns;
	}
};
function UIForm(id, options){
	if (typeof id=='undefined'){
		id=null;
	}
	
	if (typeof options=='undefined'){
		options={};
	}
	
	if (id && id.charAt(0)=='#'){
		id=id.substr(1);
	}
	
	this.__id=id;
	this.__rows=[];
	this.__hiddens={'__code': Client.code};
	this.__buttons=[];
	this.__settings={};
	this.__options=$.extend({},{action: '', method: 'POST'}, options);
	this.__warning=null;
	
	this.find=function(name){
		return $("*[name="+name+"]", "#"+this.__id);
	};
	
	
	this.findRow=function(name){
		return $("[name^="+name+"]", "#"+this.__id).closest(".row");
	};
	
	
	this.matchRow=function(selector){
		return $(selector, "#"+this.__id).closest(".row");
	};
	
	
	this.elem=function(name){
		return $(name, "#"+this.__id);
	};
	
	this.selector=function(name){
		return this.elem(name);
	};
	
	this.row=function(label, input){
		this.__rows.push(Form.row(label, input));
		return this;
	};
	
	this.placeholder=function(id, raw_html){
		this.__rows.push(Form.placeholder(id, raw_html));
		return this;
	};
	
	this.inline=function(html){
		this.__rows[this.__rows.length-1].inline(html);
		return this;
	};
	
	
	this.css=function(css){
		this.__rows[this.__rows.length-1].css(css);
		return this;
	};
	
	this.addClass=function(classname){
		this.__rows[this.__rows.length-1].addClass(classname);
		return this;
	};
	
	
	this.option=function(opts){
		this.__rows[this.__rows.length-1].setOptions(opts);
		return this;
	};
	
	
	this.rowIf=function(label, input, cond){
		if (!cond){
			return this;
		}
		this.__rows.push(Form.row(label, input));
		return this;
	};
	
	this.rowHidden=function(label, input){
		this.__rows.push(Form.rowHidden(label, input));
		return this;
	};
	
	this.rowNone=function(label, input){
		return this;
	};
	
	this.customForm=function(cform, values){
		cForm.attach(this, cform, values);
		return this;
	};
	
	
	this.custom=function(html, opts){
		opts = $.extend({}, {display: 'block', id: AP.uuid()}, opts);
		this.__rows.push(Form.rowCustom(html, opts));
		return this;
	};
	
	
	this.wrap=function(title, id){
		this.__rows.push(Form.wrapper(title, id));
		return this;
	};
	
	this.noRow=function(label){
		this.__rows.push(Form.noRow(label, null));
		return this;
	};
	
	
	this.note=function(label, type){
		this.__rows.push(Form.note(label, "note", type));
		return this;
	};
	
	
	this.plain=function(label, type){
		this.__rows.push(Form.note(label, "plain", type));
		return this;
	};
	
	
	this.rowHTML=function(html){
		this.__rows.push(Form.note(html, "html"));
		return this;
	};

	
	this.rowSep=function(str){
		if (str && str.length){
			return this.rowHTML("<div class='row-hr'><span class='hr-label'>"+str+"</span></div>");	
		}
		
		return this.rowHTML("<div class='row-hr'></div>");
	};
	
	this.hiddens=function(hiddens){
		for (var key in hiddens){
			this.__hiddens[key]=hiddens[key];
		};
		
		return this;
	};
	
	
	this.buttons=function(buttons){
		for (var i=0; i<buttons.length; i++){
			this.__buttons.push(buttons[i]);
		};
		
		return this;
	};
	
	
	
	this.settings=function(settings){
		for (var key in settings){
			this.__settings[key]=settings[key];
		};
		
		return this;
	};
	
	
	this.__callback=null;
	
	this.render=function(callback){
		this.__callback=callback;
		return this;
	};
	
	
	this.html=function(){
		var html="";
		
		if (this.__warning){
			html+="<div class='warning'>"+this.__warning+"</div>";
		}
		
		for (var i=0; i<this.__rows.length; i++){
			html+=this.__rows[i].html();
		}
		
		var hidden="";
		for (key in this.__hiddens){
			hidden+="<input type='hidden' name='"+key+"' value='"+this.__hiddens[key]+"'/>";
		}
		
		
		return html+"<div style='display:none'>"+hidden+"</div>";
	};
	
	
	this.update=function(){
		for (var i=0; i<this.__rows.length; i++){
			if (this.__rows[i].good){
				this.__rows[i].input.update();
				this.__rows[i].update(this.__rows[i]);
			}
		}
	};
	
	
	this.getButton=function(index){
		return this.__buttons[index];
	};
	
	
	
	this.renderButtons=function(){
		var html="";
		for (var i=0; i<this.__buttons.length; i++){
			html+=this.renderButton(this.__buttons[i]);
		}
		return html;
	};
	
	
	this.renderButton=function(button){
		return "<div class='button "+button.style+"'>"+button.label+"</div>";
	};
	
	this.placeTo=function(id){
		var html=this.html();
		$(id).html(html);
		this.update();
	};
	
	this.focus=function(name){
		$("*[name="+name+"]", "#"+this.__id).autofocus();
	};
	
	this.warning=function(w){
		this.__warning=w;
		return this;
	};
	
	this.balance=function(){
		AP.dialog(this.id).balance();
	};
};function UILabel(data){
	this.real=true;
	this.options="";
	
	if (data===null){
		this.real=false;
	}else{
		if (AP.data.isObject(data)){
			this.options=$.extend({}, {label:"Label", sublabel:"", role:"", extra_label:""}, data);
		}else{
			this.options=$.extend({}, {label:data, sublabel:"", role:"", extra_label:""});
		}
	}
	
	this.html=function(){
		if (!this.real){
			return '';
		}
		var sublabel="";
		if (this.options.sublabel && this.options.sublabel.length){
			sublabel="<div class='sublabel'>"+this.options.sublabel+"</div>";
		}
		
		var extra_label='';
		if (this.options.extra_label && this.options.extra_label.length){
			extra_label="<div class='absolute' style='left:50%; padding-left:15px;'>"+(this.options.extra_label)+"</div>";
		}
		
		return "<div class='label "+(this.options.label && this.options.label.length?"":"-empty")+"'>"+extra_label + this.options.label+sublabel+"</div>";
	};
	
	
	
};


function UIInputGroup(data){
	this.length=data.length;
	this.data=[];
	for (var i=0; i<data.length; i++){
		this.data.push(data[i]);
	}
	
	this.html=function(){
		var html="";
		var w=100.0/this.data.length; 
		
		for (var i=0; i<this.data.length; i++){
			html+="<div class='gi' style='width: "+w+"%'>"+this.data[i].html()+"</div>";
		}
		return "<div class='input-group -count-"+this.data.length+"'>"+html+"<div class='clear'></div></div>";
	};
	
	this.update=function(){
		for (var i=0; i<this.data.length; i++){
			this.data[i].update();
		}
	};
};



function UIInputHTML(html){
	this.__html=html;
	
	this.html=function(){
		return "<div class='input data'>"+html+"</div>";
	}
	
	this.update=function(){
		return;
	}
};	


function UIInput(data){
	if (data.type && data.type=="colors" && !data.options){
		data.options=[{value:"1", label: "<div class='square box-alt1'><div class='square-in'></div></div>"},
			{value:"2", label: "<div class='square box-alt2'><div class='square-in'></div></div>"},
			{value:"3", label: "<div class='square box-alt3'><div class='square-in'></div></div>"},
			{value:"4", label: "<div class='square box-alt4'><div class='square-in'></div></div>"},
			{value:"5", label: "<div class='square box-alt5'><div class='square-in'></div></div>"},
			{value:"6", label: "<div class='square box-alt6'><div class='square-in'></div></div>"},
			{value:"7", label: "<div class='square box-alt7'><div class='square-in'></div></div>"},
			{value:"8", label: "<div class='square box-alt8'><div class='square-in'></div></div>"},
			{value:"9", label: "<div class='square box-alt9'><div class='square-in'></div></div>"}
		];
		
		if (data.role=="heatmap"){
			data.options=[
				{value:"1", label: "<div class='square' style='background-color:#f44242'><div class='square-in'></div></div>"},
	  			{value:"2", label: "<div class='square' style='background-color:#f4a341'><div class='square-in'></div></div>"},
	  			{value:"3", label: "<div class='square' style='background-color:#f7e411'><div class='square-in'></div></div>"},
	  			{value:"4", label: "<div class='square' style='background-color:#96e530'><div class='square-in'></div></div>"},
	  			{value:"5", label: "<div class='square' style='background-color:#2cd64c'><div class='square-in'></div></div>"}
			  ];
		}
	};
	
	this.__value=null;
	this.__data=null;
	this.__css={};
	this.options=$.extend({}, {type:"text", name:"input", "placeholder":"", css:"", id: AP.uuid(), 'class':'', readOnly: false, role: "", extra: {}}, data);
	this.__fx=null;
	this.__extra="";
	
	this.value=function(value){
		if (this.options && this.options.type && (this.options.type=="textarea"|| this.options.type=="text")){
			if (this.options.role!="editor"){
				value=cleanText(value);	
			}
		}
		
		if ($.isFunction(value)){
			this.__value=value();
		}else{
			this.__value=value;	
		}
		return this;
	};
	
	
	/**
	 * @desc Set extra HTML below the row
	 */
	this.extra=function(extra_html){
		this.options.__extra=extra_html;
		return this;
	};
	
	this.valueIf=function(value, cond){
		if (!cond){
			return this;
		}
		
		return this.value(value);
	};
	
	
	this.data=function(data){
		this.__data=data;
		return this;
	};
	
	
	this.autoSubmit=function(){
		this.__autos=1;
		return this;
	};
	
	
	this.readOnly=function(){
		this.options.readOnly=true;
		return this;
	}
	
	this.css=function(css){
		this.__css=css;
		return this;
	};
	
	this.fx=function(fx){
		this.__fx=fx;
		return this;
	};
	
	this.on=function(cond, fx){
		if (cond){
			fx.apply(this);
		}
		
		return this;
	};
	
	this.html=function(){
		if (this.options.type=='placeholder'){
			return UIInputRender.placeholder(this.options);
		}
		
		if (this.options.type=='text'){
			return UIInputRender.text(this.options);
		}
		
		if (this.options.type=='textarea'){
			return UIInputRender.textarea(this.options);
		}
		
		if (this.options.type=='icons'){
			return Form.icon.render(this.options);
		}
		
		if (this.options.type=='fav'){
			return Form.icon.renderFav(this.options);
		}
		
		if (this.options.type=='select'){
			return UIInputRender.select(this.options);
		}
		
		if (this.options.type=='fake'){
			return UIInputRender.fake(this.options, this.__value);
		}
		
		if (this.options.type=='file'){
			return UIInputRender.file(this.options, this.__value);
		}
		
		if (this.options.type=='files' || this.options.type=='filelist'){
			return UIInputRender.files(this.options, this.__value);
		}
		
		if (this.options.type=='password'){
			return UIInputRender.password(this.options);
		}
		
		if (this.options.type=='checkbox'){
			return UIInputRender.checkbox(this.options);
		}
		
		if (this.options.type=='checkboxes'){
			return UIInputRender.checkboxes(this.options);
		}
		
		if (this.options.type=='checkbox-list'){
			return UIInputRender.checkboxList(this.options);
		}
		
		if (this.options.type=='colors'){
			return UIInputRender.pickColors(this.options);
		}
		
		if (this.options.type=='orgchart' || this.options.type=='usergroup'){
			return UIInputRender.pickOrgchart(this.options);
		}
		
		if (this.options.type=='datetime'){
			return UIInputRender.datetime(this.options);
		}
		
		if (this.options.type=='tags'){
			return UIInputRender.tags(this.options);
		}
		
		if (this.options.type=='dob'){
			return UIInputRender.dob(this.options);
		}
		
		if (this.options.type=='list'){
			return UIInputRender.list(this.options);
		}
		
		if (this.options.type=='lines'){
			return UIInputRender.lines(this.options);
		}
		
		return "";
	};
	
	this.update=function(canvas){
		if (this.__data!==null){
			for (var key in this.__data){
				$("#"+this.options.id).data(key, this.__data[key]);
			}
		}
		
		if (this.__value!==null){
			if (this.options.type=='checkbox'){
				if (parseInt(this.__value)){
					$("#"+this.options.id).prop("checked", true);
				}else{
					$("#"+this.options.id).prop("checked", false);
				}
			}else if (this.options.type=='colors'){
				uiinput_pick_by_id(this.options.id, this.__value);
			}else if (this.options.type=='datetime'){
				if (this.__value && parseInt(this.__value)){
					$("#"+this.options.id+"-date").val(UI.inputDate(this.__value));
					$("#"+this.options.id+"-time").val(AP.time.time("%H:%i", this.__value));	
				}
			}else if (this.options.role=='time'){
				if (AP.data.isInt(this.__value)){
					$("#"+this.options.id+"").val(AP.time.time("%H:%i", this.__value));
				}else{
					$("#"+this.options.id+"").val(this.__value);
				}
				
			}else if (this.options.role=='date'){
				var val=this.__value;
				if (AP.data.isInt(val) && val!="0"){
					val=UI.inputDate(val);
				}
				$("#"+this.options.id+"").val(val);
			}else if (this.options.role=='tag' || this.options.role=='user'){
				var val=this.__value;
				if (AP.data.isArray(val)){
					val=AP.word.join(val, " ",function(e){
						if (AP.data.isObject(e)){
							return "@"+e.username;
						}
						return "@"+e;
					});
				}else if (val && AP.data.isString(val)){
					if (!AP.word.prefix(val, "@")){
						val="@"+val;	
					}
				}
				$("#"+this.options.id+"").val(val);
			}else if (this.options.role=='teams'){
				var val=this.__value;
				var e_val="";
				if (AP.data.isArray(val)){
					e_val=AP.word.join(val, " ",function(e){
						if (AP.data.isString(e)){
							var ts=UserGroup.get(e);
							
							if (ts){
								return ts.name+" (@"+ts.path+"), ";
							}
						}else if (AP.data.isInt(e)){
							var ts=UserGroup.get(e);
							if (ts){
								return ts.name+" (@"+ts.path+"), ";
							}
						}
						
						return e.name+" (@"+e.path+"), ";
					});
				}
				
				$("#"+this.options.id+"").val(e_val);
			}else if (this.options.type=='checkbox-list'){
				uiinput_check_setval($("#"+this.options.id).closest('.list-checkbox'), null, this.__value);
			}else if (this.options.type=='checkboxes'){
				if (this.__value && this.__value.length){
					var __value=this.__value;
					$("#"+this.options.id+" input[type=checkbox]").each(function(){
						var value=$(this).data("dvalue");
						if (__value==":all" || AP.array.contain(__value, value)){
							$(this).prop("checked", true);
						}
					});
				}
			}else if (this.options.type=='list'){
				// uiinput_pick($("#"+this.options.id).closest('.list-checkbox'), null, this.__value);
				uiinput_pick_by_id(this.options.id, this.__value);
			}else if (this.options.type!='fake' && this.options.type!='file'){
				$("#"+this.options.id).val(this.__value);
			}else if (this.options.type=='lines'){
				$.log([$("#"+this.options.id)]);
			}
		};
		
		$("#"+this.options.id).css(this.__css);
		if (this.__fx){
			this.__fx.apply($("#"+this.options.id));
		}
		
		
		if (this.__autos){
			$("#"+this.options.id).enter(function(){
				$(this).closest("form").find(".form-buttons .button.ok").click();
			});
		}
		
		if (this.options.role=="editor"){
			var mh=200;
			if (this.options.minHeight){
				mh=this.options.minHeight;
			}else if (this.options.height){
				mh=this.options.height;
			}
			
			$("#"+this.options.id).css("min-height", mh);
			
			UI.editor("#"+this.options.id, {
				panel: "bottom",
				minHeight: mh
			});
			
			if (this.__value && AP.config && AP.config.editor=="quill"){
				UI.editorValue("#"+this.options.id, this.__value);
			}
			
			return;
		}
		

		if (this.options.type=="lines" || this.options.role=="lines"){
			Form.list.init("#"+this.options.id,{
				value: this.__value,
				placeholder:this.options.placeholder,
				__data: this.options.data
			});
		}
		
		if (this.options.type=="select" && this.options.multiple){
			Form.improveSelect("#"+this.options.id, {
				multi: this.options.multiple,
				value: this.__value||null
			});
		}
	};
	
	
	function cleanText(str){
		if (str && AP.data.isString(str)){
			return str.toTextarea();
		}
		
		return str;
	};
};



var UIInputRender=new function __UIInputRender(){
	
	this.placeholder=function(options){
		return "<div class='ui-placeholder' id='"+(options.id)+"'></div>";
	};
	
	this.text=function(options){
		
		var note="";
		if (options.note){
			note="<div class='note'>"+options.note+"</div>";
		}
		
		var icon_picker='';
		if (options.icon_picker){
			var icx="";
			if (AP.data.isInt(options.icon_picker)){
				icx="<img src='"+(Client.share_url)+"/fav_icons/"+(options.icon_picker)+".png'/>";
			}
			
			icon_picker="<span class='inline-icon-picker'> <input type='hidden' name='icon'/> <span class='icon-display url' data-url=':active:parent'>"+(icx)+"</span> "+(Form.icon.inlinePicker())+" </span>";
		}
		
		
		if (options.color_picker){
			var color_display='';
			if (!options.color){
				options.color=0;
			}else{
				options.color=parseInt(options.color);
				color_display="<div class='icx -bg-alt"+(options.color)+"'></div>";
			}
			
			icon_picker="<span class='inline-icon-picker url' data-url=':fn:UIInputRender.pickColor'> <input type='hidden' name='color' value='"+(options.color)+"'/><span class='icon-display url' data-url=':active:parent'>"+(color_display)+"</span> </span>";
		}
		
		
		var icon="";
		if (options.role=="date"){
			icon="<span class='-ap icon-uniF1072' style='position: absolute; right:10px; top:10px; color:#aaa; font-size:16px;'></span>";
		}
		
		var unit="";
		if (options.unit && options.unit.length){
			icon="<span class='unit-text' style='position: absolute; right:10px; top:9px; color:#aaa; font-size:12px; text-transform:uppercase'>"+options.unit+"</span>";
		}
		
		return "<div class='input data'>"+icon+unit+"<input autocomplete='off' data-role='"+options.role+"' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"' type='text' name='"+options.name+"' placeholder='"+options.placeholder+"' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'/></div>"+note + icon_picker+getExtra(options);
	};
	
	this.textarea=function(options){
		var input="<textarea data-role='"+options.role+"' "+(options.readOnly?" readonly ":"")+" id='"+options.id+"' name='"+options.name+"' placeholder='"+options.placeholder+"'></textarea>";
		if (options.role=="editor"){
			return "<div class='input data'><div class='input-editor'>"+input+"</div></div>";	
		}
		
		return "<div class='input data'>"+input+"</div>"+getExtra(options);
	};
	
	this.lines=function(options){
		var input="<textarea data-role='"+options.role+"' "+(options.readOnly?" readonly ":"")+" id='"+options.id+"' name='"+options.name+"' placeholder='"+options.placeholder+"'></textarea>";
		return "<div class='input data'>"+input+"</div>";
	};
	
	
	this.password=function(options){
		return "<div class='input data'><input "+(options.readOnly?" readonly ":"")+" id='"+options.id+"' class='std' type='password' name='"+options.name+"' placeholder='"+options.placeholder+"'/></div>";
	};
	
	this.select=function(options){
		if (options.role=="team"){
			return "<div class='select data' data-role='team'><select "+(options.readOnly?" disabled ":"")+" id='"+options.id+"' name='"+options.name+"'>"+Tag.teamOptions()+"</select></div>";
		}
		
		var data="";
		
		if (options.optgroups && options.optgroups.length){
			for (var i=0; i<options.optgroups.length; i++){
				var g=options.optgroups[i];
				
				data+="<optgroup label='"+g.name+"'>"+AP.render(g.items, function(e){
					return "<option value='"+e.id+"'>"+e.name+"</option>";
				})+"</optgroup>";
			}
			
			if (options.empty){
				data="<option value='"+options.empty.value+"'>"+options.empty.label+"</option>"+data;
			}
		}else{
			if (AP.data.isString(options.options)){
				data=options.options;
			}else{
				for (var i=0; i<options.options.length; i++){
					var opt=options.options[i];
					if (AP.data.isObject(opt)){
						if (!opt.label && (!opt.value || opt.name) && opt.id){
							data+="<option value='"+opt.id+"'>"+opt.name+"</option>";
						}else{
							data+="<option value='"+opt.value+"'>"+opt.label+"</option>";	
						}	
					}else{
						data+="<option value='"+opt+"'>"+opt+"</option>";
					}
				}
			}
			
			
			if (options.empty){
				data="<option value='"+options.empty.value+"'>"+options.empty.label+"</option>"+data;
			}
		}
		
		
		return "<div class='select data'> <select "+((options.readOnly?' disabled ':''))+" "+((options.multiple?' multiple':''))+" id='"+(options.id)+"' name='"+(options.name)+"'> "+(data)+" </select> </div>"+(getExtra(options))+"";
	};
	
	this.fake=function(options, value){
		return "<div class='input data'><div class='input-fake ap-xdot' id='"+options.id+"'>"+value+"</div></div>";
	};
	
	this.file=function(options, value){
		var extra="";
		if (value && value.length){
			extra="<div class='filelink'><a href='"+value+"' target='_blank'>"+options.placeholder+"</a></div>";
		}
		
		return "<div class='input data'><input id='"+options.id+"' type='file' name='"+options.name+"'/>"+extra+"</div>"+getExtra(options);
	};
	
	
	this.files=function(options, value){
		var extra="";
		var files="";
		var max=options.max;
		if (!max){
			max=options.max_files;
		}
		
		if (!max){
			max=3;
		}
		
		for (var i=0; i<max; i++){
			files+="<div class='fi "+(i==0?"":"hidden")+"'><input id='"+options.id+"-"+i+"' onchange='UIInputRender.__fileUpdate(this);' type='file' name='"+options.name+"-"+i+"'/></div>";
		}
		
		return "<div class='input data xflat'>"+files+"</div>"+getExtra(options);
	};
	
	/**
	 * @desc Update file on filelist
	 */
	this.__fileUpdate=function(ref){
		var val=$(ref).val();
		if (!val){
			return;
		}
		var $next=$(ref).closest(".fi").next();
		if ($next.length){
			$next.show();
		}
	};
	
	
	this.checkbox=function(options){
		var checked="";
		if (options.checked){
			checked="checked";
		}
		return "<div class='data ap-f15 -ischeckbox'><label class='block'><input id='"+options.id+"' style='vertical-align:-2px' type='checkbox' "+checked+" name='"+options.name+"'/><span class='checkmark'></span> "+options.placeholder+"</div></label>";
	};
	
	
	this.checkboxes=function(options){
		var html="";
//		if (options.checked){
//			checked="checked";
//		}
//		return "<div class='data ap-f15'><input id='"+options.id+"' style='vertical-align:-2px' type='checkbox' "+checked+" name='"+options.name+"'/> &nbsp; "+options.placeholder+"</div>";
		
		for (var i=0; i<options.options.length; i++){
			var name=options.name;
			
			var opt=options.options[i];
			var label=opt.label;
			var value=opt.value;
			
			if (typeof(opt.id) != "undefined" && typeof(opt.name) != "undefined"){
				value=opt.id;
				label=opt.name;
			}
			
			html+="<label class='li block' data-value='"+value+"'><input type='checkbox' name='"+name+"[]' value='"+value+"' data-dvalue='"+value+"'/><span class='checkmark'></span>"+label+"</label>";
		}
		
		return "<div class='data'><div class='list checkboxes' id='"+options.id+"'>"+html+"</div></div>";
	};
	
	
	this.pickColors=function(options){
		var html="";
		for (var i=0; i<options.options.length; i++){
			var opt=options.options[i];
			html+="<div class='opt' data-value='"+opt.value+"' onclick=\"uiinput_pick(this);\">"+opt.label+"</div>";
		}
		return "<div class='colors data'>" +
				"<div style='display:none'><input id='"+options.id+"' style='display:none' name='"+options.name+"'/></div>" +
				"<div class='options'>"+html+"</div>" +
			"</div>";
	};

	
	this.pickOrgchart=function(options){
		var users=getUserCheckboxes(options.options);
		return "<div class='form-org-picker'> <div class='hidden'><textarea name='"+(options.name)+"'></textarea></div> <div class='form-org-users scroll-y unselectable'>"+(users)+"</div> </div>";
	};
	
	
	this.datetime=function(options){
		if (Client.native){
			return "<div class='input data'>" +
				"<input style='' data-role='date' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-date' type='text' name='"+options.name+"-date' placeholder='Type to select a date' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'/>" +
				"<input style='margin-top:10px' data-role='time' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-time' type='text' name='"+options.name+"-time' placeholder='Type to select a time' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'/>" +
			"</div>";
		}
		
		var dicon="<span class='-ap icon-uniF1072' style='position: absolute; right:8px; top:7px; color:#aaa; font-size:16px;'></span>";
		var ticon="<span class='-ap icon-uniF10B' style='position: absolute; right:8px; top:7px; color:#aaa; font-size:16px;'></span>";
		
		return "<div class='input data'>" +
			"<div class='relative' style='float:left; width:200px'>"+dicon+"<input data-role='date' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-date' type='text' name='"+options.name+"-date' placeholder='Click to select a date' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'/></div>" +
			"<div class='relative' style='float:left; margin-left:6px; width:200px'>"+ticon+" <input data-role='time' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-time' type='text' name='"+options.name+"-time' placeholder='Click to select a time' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'/></div>" +
		"</div>";
	};
	
	
	this.tags=function(options){
		return "<div class='input data'> <div class='selected-tags-wrapper'> <input type='hidden' name='"+(options.name)+"'/> <div class='selected-tags'> <div class='none'>Please select tags</div> </div> </div> </div>";
	};
	
	
	this.dob=function(options){
		if (Client.native){
			
		}
		
		return "<div class='input data'>" +
			"<select style='float:left; width:32%' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-day' type='text' name='"+options.name+"-day' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'>"+dobDays()+"</select>" +
			"<select style='float:left; width:32%; margin-left:2%'"+(options.readOnly?" readonly ":"")+"id='"+options.id+"-month' type='text' name='"+options.name+"-month' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'>"+dobMonths()+"</select>" +
			"<select style='float:left; width:32%; margin-left:2%' "+(options.readOnly?" readonly ":"")+"id='"+options.id+"-year' type='text' name='"+options.name+"-year' class='std "+(options.readOnly?" -readonly ":"")+""+options['class']+"'>"+dobYears()+"</select>" +
		"</div>";
	};
	
	

	this.list=function(options){
		var html="";
		for (var i=0; i<options.options.length; i++){
			var opt=options.options[i];
			var sublabel=(opt.sublabel)?"<div class='sublabel'>"+opt.sublabel+"</div>":"";
			html+="<div class='opt' data-value='"+opt.value+"' onclick=\"uiinput_pick(this);\"><div class='circle'><div class='cin'></div></div>"+opt.label+sublabel+"</div>";
		}
		
		if (options.wrap){
			html="<div class='list-wrap'>"+html+"</div>";
		}
		
		return "<div class='list-radio data' data-empty='"+(options.empty?1:0)+"'>" +
				"<div style='display:none'><input id='"+options.id+"' style='display:none' name='"+options.name+"'/></div>" +
				"<div class='options'>"+html+"</div>" +
			"</div>";
	};
	
	
	this.checkboxList=function(option){
		return "<div class='list-checkbox unselectable' onclick=\"uiinput_check(this);\">" +
				"<div style='display:none'><input id='"+option.id+"' type='text' style='display:none' name='"+option.name+"' value='0'/></div>" +
				"<div class='checkbox-ui'><div class='square'><span></span></div></div>" +
				"<div class='checkbox-label'><div class='checkbox-main'>"+option.label+"</div><div class='checkbox-sub'>"+option.sublabel+"</div></div>" +
			"</div>";
	};

	
	
	this.pickColor=function(ref){
		Form.inlineColorTagger(ref, function(color){
			$(this).closest(".ap-inline-colors-wrap").find(".icon-display").html("<div class='icx -bg-alt"+(color)+"'></div>")
			$(this).closest(".ap-inline-colors-wrap").find("input[name=color]").val(color);
		}, {
			auto: true,
			click: true,
			left:-100
		});
	};

	
	function dobDays(){
		return quickOptions(1, 31, "Chọn ngày");
	};
	
	function dobMonths(){
		return quickOptions(1, 12, "Chọn tháng");
	};
	
	function dobYears(){
		return quickOptions(1900, 2016, "Chọn năm");
	};
	
	function quickOptions(start, end, empty){
		var html="<option value='0'>"+empty+"</option>";
		for (var i=start; i<=end; i++){
			html+="<option value='"+i+"'>"+AP.data.zeroPrefix(i)+"</option>";
		}
		
		return html;
	};
	
	
	
	/**
	 * @desc Getting extra options
	 */
	function getExtra(options){
		if (!options.__extra){
			return "";
		}
		
		return "<div class='fi-extra'>"+(options.__extra)+"</div>";
		
	};
	
	
	
	function getUserCheckboxes(tree){
		var users=AP.render(tree.nodes, function(e){
			if (e.metatype=="user"){
				return "<div class='fo-user' data-username='"+(e.username)+"' onclick='fo_toggleUser(this)'> <div class='level level-"+(e.level)+"'> <div class='fo-cb'></div> <div class='fo-display-name'>"+(e.name)+" <span class='fo-username'>@"+(e.username)+"</span></div> </div> </div>";
			}else{
				return getUserCheckboxes(e);
			}
		});
		
		var manager="";
		if (tree.user_id && parseInt(tree.user_id) && tree.username){
			var u=People.get(tree.user_id);
			if (u && parseInt(u.id)){
				manager="<div class='fo-user' data-username='"+(u.username)+"' onclick='fo_toggleUser(this)'> <div class='level level-"+(tree.level+1)+"'> <div class='fo-cb'></div> <div class='fo-display-name'>"+(u.name)+" <span class='fo-username'>Manager &middot; @"+(u.username)+"</span></div> </div> </div>";	
			}
		}
		
		var html="<div class='fo-node level-"+(tree.level)+"' data-id='"+(tree.id)+"'> <div class='fo-group' data-group='"+(tree.id)+"' onclick='fo_toggleGroup(this)'> <div class='level level-"+(tree.level)+"'> <div class='fo-cb'></div> <span class='fo-triangle'><span class='-ap icon-triangle-down'></span></span> &nbsp; "+(tree.name)+" </div> </div> <div class='fo-subnodes'> "+(manager)+" "+(users)+" </div> </div>";
		
		return html;
	};
	
	
};


function fo_toggleUser(ref){
	var $node=$(ref);
	
	var username=$node.data("username");
	$node.toggleClass("selected");
	
	if ($node.hasClass("selected")){
		fo_upperSelected($node);
	}else{
		$node.parents(".fo-node").each(function(){
			$(this).children(".fo-group").removeClass("selected");
		});
	}
	
	fo_syncData($node);
};

function fo_toggleGroup(ref){
	var $node=$(ref);
	
	var username=$node.data("username");
	$node.toggleClass("selected");
	
	if ($node.hasClass("selected")){
		$node.parent().find(".fo-user").addClass("selected");
		$node.parent().find(".fo-group").addClass("selected");
		
		fo_upperSelected($node);
	}else{
		$node.parent().find(".fo-user").removeClass("selected");
		$node.parent().find(".fo-group").removeClass("selected");
		
		$node.parents(".fo-node").each(function(){
			$(this).children(".fo-group").removeClass("selected");
		});
	}
	
	fo_syncData($node);
};


function fo_syncData($node){
	var $box=$node.closest(".form-org-picker");
	var $input=$box.find("textarea");
	var usernames=[];
	
	$box.find(".fo-user.selected").each(function(){
		usernames.push("@"+$(this).data("username"));
	});
	
	$input.val(usernames.join(" "));
};


function fo_upperSelected($node){
	var skip=false;
	$node.parents(".fo-node").each(function(){
		if (skip){
			return;
		}
		
		var total=$(this).children(".fo-subnodes").children().length;
		var user_selected=$(this).children(".fo-subnodes").children(".fo-user.selected").length;
		var group_selected=0;
		$(this).children(".fo-subnodes").children(".fo-node").each(function(){
			if ($(this).children(".fo-group.selected").length){
				group_selected++;
			}
		});
		
		
		if (total==user_selected+group_selected){
			$(this).children(".fo-group").addClass("selected");
		}else{
			skip=true;
		}
	});
};

function uiinput_pick(ref){
	var value=$(ref).data('value');
	var $options=$(ref).closest('.options');
	var $input=$options.prev().find('input');
	var empty=$(ref).closest(".data").data("empty");
	if (empty && (empty=="1" || empty==1)){
		empty=1;
	}else{
		empty=0;
	}
	
	$options.find('.opt').each(function(){
		if (AP.data.equal($(this).data('value'), value)){
			if (empty){
				if ($(this).hasClass("selected")){
					value=0;
					$(this).removeClass('selected');
				}else{
					$(this).addClass('selected');	
				}
			}else{
				$(this).addClass('selected');	
			}
		}else{
			$(this).removeClass('selected');
		}
	});
	
	$input.val(value).change();
};





function uiinput_pick_by_id(id, value){
	var $input=$("#"+id);
	var $options=$input.parent().next();
	
	$options.find('.opt').each(function(){
		if (AP.data.equal($(this).data('value'), value)){
			$(this).addClass('selected');
		}else{
			$(this).removeClass('selected');
		}
	});
	
	$input.val(value).change();
};




function uiinput_check(ref){
	var $ref=$(ref);
	var $input=$ref.find('input');
	var val=parseInt($input.val());
	
	if (val==0){
		uiinput_check_setval($ref, $input, 1);
	}else if (val==1){
		uiinput_check_setval($ref, $input, 0);
	}
};


function uiinput_check_setval($ref, $input, val){
	if ($input===null){
		$input=$ref.find('input');
	}
	
	if (val==1){
		$input.val(1);
		$ref.find('.square').replaceWith("<div class='square active'><span class='-ap icon-check2'></span></div>");
	}else{
		$input.val(0);
		$ref.find('.square').replaceWith("<div class='square'><span></span></div>");
	}

};function UIRow(label, input, type){
	this.label="";
	this.good=false;
	this.type="";
	this.input="";
	this.opts={};
	this.__css={};
	this.__classes=[];
	this.__inlinehmtl="";
	
	if (type){
		this.type=type;
		this.label=label;
		this.input=input;
	}else{
		if (input===null){
			this.label=label;
			this.good=false;
		}else{
			this.label=label;
			this.input=input;
			this.good=true;	
		}
	}
	
	this.id=AP.uuid();
	
	this.setType=function(type){
		this.type=type;
		return this;
	};
	
	
	this.setOptions=function(opts){
		this.opts=opts;
	};
	
	
	this.css=function(css){
		this.__css=css;
	};
	
	
	this.inline=function(html){
		this.__inlinehtml=html;
	};
	
	this.addClass=function(classname){
		this.__classes.push(classname);
	};
	
	this.html=function(){
		if (this.type && this.type=="custom-html"){
			return "<div class='row -custom' style='display:"+this.input.display+"' id='"+this.input.id+"'>"+this.label+"</div>";
		}
		
		if (this.type && this.type=="placeholder"){
			var raw_html='';
			if (this.input && this.input.raw_html){
				raw_html=this.input.raw_html;
			}
			
			return "<div class='row-placeholder' id='"+(this.label)+"'>"+(raw_html)+"</div>";
		}
		
		if (this.type && this.type=="wrapper"){
			if (!this.label){
				return "</div>";
			}else{
				var id=this.input;
				if (id){
					if (id.charAt(0)=="#"){
						id=id.substr(1);
					}
				}
				
				return "<div class='wrapper hidden'"+((id && id.length)?" id='"+id+"'":"")+"><div class='wtitle'>"+this.label+"</div> <div class='__ph'></div>"; // One DIV missing by intention
			}
		}
		
		
		if (this.type && this.type=="note"){
			return "<div class='row -"+this.input+"'>"+this.label+"</div>";
		}
		
		if (!this.good){
			return "<div class='row-sep'><div class='render'></div><em>"+this.label+"</em></div>";
		}
		
		var eclass="";
		if (this.opts.classes){
			eclass+=" "+this.opts.classes;
		}
		
		var extra_inline="";
		if (this.__inlinehtml && this.__inlinehtml.length){
			extra_inline="<div class='extra'>"+this.__inlinehtml+"</div>";
		}
		var etype="base";
		if (this.input && this.input.options && this.input.options.type){
			etype=this.input.options.type;
		}
		
		return "<div class='row -is"+etype+" "+eclass+((this.input && this.input.hidden)?" hidden":"")+"' id='"+this.id+"'>"+this.label.html()+this.input.html()+extra_inline+"<div class='clear'></div></div>";
	};
	
	
	this.update=function(row){
		$("#"+this.id).css(this.__css);
		for (var i=0; i<this.__classes.length; i++){
			$("#"+this.id).addClass(this.__classes[i]);
		}
	};
};var cForm=new function __cForm(){
	this.inputs=[];
	this.complete=null;
	this.saved=[];
	
	this.clean=function(){
		this.saved=[];
		this.inputs=[];
	};
	
	
	this.get=function(){
		return this.saved;
	};
	
	
	this.quickEdit=function(obj, url, callback){
		return this.edit.quick(obj, url, callback);
	};
	
	
	
	this.design=function(complete){
		this.inputs=[];
		this.ui.newForm();
		this.complete=complete;
		
		if (this.saved && this.saved.length){
			this.set(this.saved);
		}
	};
	
	
	this.set=function(inputs){
		this.inputs=inputs;
		for (var i=0; i<inputs.length; i++){
			this.ui.previewAdd(inputs[i]);
		}
		Form.balance("#custom-form-fx");
	};
	
	
	this.finishDesign=function(ref){
		// AP.closeDialog(ref);
		var fn=this.complete;
		var preview=this.ui.getPreview(this.inputs);
		fn(this.inputs, preview, this.ui.makeForm(this.inputs));
		this.saved=this.inputs;
	};
	
	
	this.attach=function(form, cform, values){
		var has_title=false;
		
		for (var i=0; i<cform.length; i++){
			var input=cform[i];
			if (input.disabled && parseInt(input.disabled)){
				continue;
			}
			
			var val = "";
			if (values != null && values.length) {
				for (var j = 0; j < values.length; j++) {
					if (values[j].id == cform[i].id) {
						val = values[j].value;
						break;
					}
				}
			}
			
			var name=input.name;
			if (parseInt(input.required)){
				name=name+" *";
			}
			
			if (input.placeholder) {
				input.placeholder=input.placeholder.replace(/⑊/g,'&#92;').replace(/&#9290;/g, '&#92;');
			}
			var placeholder=input.placeholder;
			if (!placeholder || !placeholder.length){
				placeholder=getDefaultPlaceHolder(input.type);
			}
			
			if (input.type=="select"){
				var opts=[];
			
				if(typeof input.options == 'undefined' || input.options == null) {
					input.options = input.values;
				}
				
				for (var j=0; j<input.options.length; j++){
					opts.push({label: input.options[j], value: input.options[j]});
				}
				
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'select', "placeholder": placeholder, name:"custom_"+input.id, options: opts}).value(val)
				);
			}else if (input.type=="int"){
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'text', role:"int", "placeholder": placeholder, name:"custom_"+input.id, unit:"<em>int</em>"}).value(val)
				);
			}else if (input.type=="float"){
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'text', role:"float", "placeholder": placeholder, name:"custom_"+input.id, unit:"<em>decimal</em>"}).value(val)
				);
			}else if (input.type=="date"){
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'text', role:"date", placeholder: placeholder, name:"custom_"+input.id, unit:"<em>date</em>"}).value(val)
				);
			}else if (input.type=="datetime"){
				var val_datetime = "";
				
				//check datetime val
				if (val) {
					var val_arr = val.split(" ");
					if (val_arr.length == 2){
						var val_date = val_arr[0];
						var val_time = val_arr[1];

						var val_date_arr = val_date.split("/");
						var val_time_arr = val_time.split(":");
						if (val_date_arr.length == 3 && val_time_arr.length == 2) {
							var date_obj = new Date(val_date_arr[1] + "/" + val_date_arr[0] + "/" + val_date_arr[2]);
							val_datetime = Math.floor(date_obj.getTime() / 1000);
							val_datetime += val_time_arr[0] * 3600 + val_time_arr[1] * 60;
						}
					}
				}

				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'datetime', role:"datetime", placeholder: placeholder, name:"custom_"+input.id}).value(val_datetime)
				);
			}else if (input.type=="textarea"){
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'textarea', "placeholder": placeholder, name:"custom_"+input.id}).css({height: 120}).value(Textarea.simple(val))
				);
			}else if (input.type=="title"){
				has_title=true;
				form.rowHTML("<div class='row-subtitle'>"+input.name+"</div>");	
			}else if (input.type=="file"){
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'file', role:"file", "placeholder": placeholder, name:"custom_"+input.id, unit:"<em>file</em>"}).value(val)
				);
			} else if (input.type=="select-m") {
				var opts = [];

				for (var j = 0; j < input.options.length; j++) {
					opts.push({label: input.options[j], value: input.options[j]});
				}

				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type': 'checkboxes', "placeholder": placeholder, name:"custom_" + input.id, options: opts}).value(val.split(","))
				);
			} else {
				form.row(
					Form.label({label: name, "sublabel":input.placeholder}),
					Form.input({'type':'text', "placeholder": placeholder, name:"custom_"+input.id, unit:"<em>text</em>"}).value(val)
				);	
			}
		}
		
		if (has_title){
			form.rowHTML("<div class='row-subtitle -none'></div>");
		}
	};	
	
	
	this.attachInline=function(fields, canvas, values){
		for (var i=0; i<fields.length; i++){
			var val = "";
			if (values != null && values.length) {
				for (var j = 0; j < values.length; j++) {
					if (values[j].id == fields[i].id) {
						val = values[j].value;
						break;
					}
				}
			}
			
			attachSingleField(fields[i], canvas, val);
		};
		
		Form.render(canvas);
	};
	
	
	
	this.submit=function(url, exported, callback, extra_data){
		if ($("#instant-file-upload").length){
			$("#instant-file-upload").html("").empty().remove();
		}
		
		var $form=$("<form id='instant-file-upload' action='"+url+"' class='__temp'></form>");
		$form.appendTo("#ap-temp");
		$form.html(exported);
		
		UI.ajaxShow();
		AP.submit($form, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback();
		}, extra_data);
	};
	
	
	function getDefaultPlaceHolder(type){
		if (type=="int"){
			return "Please enter a number";
		}
		
		if (type=="double" || type=="float"){
			return "Please enter a number with possible decimal points";
		}
		
		if (type=="text"){
			return "Please enter an inline text";
		}
		
		if (type=="date"){
			return "Click to select a date";
		}
		
		return "";
	};
	
	
	/**
	 * @desc Insert a single filed 
	 */
	function attachSingleField(field, canvas, value){
		var df="";
		var name=field.name;
		if (parseInt(field.required)){
			name=name+" *";
		}
		
		var placeholder=field.placeholder;
		if (!placeholder || !placeholder.length){
			placeholder=getDefaultPlaceHolder(field.type);
		}
		if (placeholder && placeholder.length) {
			df="active";
		}
		
		var input="<input name='custom_"+(field.id)+"' value='"+(value)+"' placeholder='"+(placeholder)+"'/>";
		
		if (field.type=="date"){
			input= "<input name='custom_"+(field.id)+"' data-value='"+(value)+"' data-role='date' placeholder='"+(placeholder)+"'/>";
		}
		
		if (field.type=="datetime"){
			df="active";
			input= "<div class='wrap inline relative' style='width:60%'><input name='custom_"+(field.id)+"-date' data-value='"+(value)+"' placeholder='Click to select a date' data-role='date'/></div> <div class='wrap inline relative' style='width:30%'><input name='custom_"+(field.id)+"-time' data-value='"+(value)+"' data-role='time'/></div>";
		}
		
		if (field.type=="textarea"){
			input= "<textarea name='custom_"+(field.id)+"' data-role='date' data-autoexpand='1' data-maxheight='50'>"+(value)+"</textarea>";
		}
		
		if (field.type=="select"){
			df="active";
			var opts=AP.render(field.options, function(e){
				return "<option value='"+(AP.purify(e))+"'>"+(e)+"</option>";
			});
			
			input= "<select name='custom_"+(field.id)+"' data-value='"+(value)+"'>"+(opts)+"</select>";
		}
		
		if (field.type=="checkbox"){
			df="active";
			var opts="<option value='no'>Unchecked</option><option value='yes'>Checked</option>";
			
			input= "<select name='custom_"+(field.id)+"'>"+(opts)+"</select>";
		}
		
		
		var html= "<div class='row "+(df)+"' data-type='"+(field.type)+"'> <div class='label'>"+(name)+" <span class='normal'> &nbsp; &mdash; &nbsp; "+(placeholder)+"</span></div> <div class='input'>"+(input)+"</div> </div>";
		
		
		$(canvas).append(html);
	};
};


cForm.edit=new function __CFormEdit(){
	this.quick=function(obj, url, callback){
		cForm.clean();
		
		if (!obj.form || !obj.form.length){
			return cForm.edit.quickDesign(obj, url);
		}
		
		var options=[];
		for (var i=0; i<obj.form.length; i++){
			var xobj=obj.form[i];
			xobj.origin={hid: obj.hid, token: obj.token};
			options.push({label: "["+obj.form[i].type+"] "+ obj.form[i].name, sublabel: obj.form[i].placeholder, icon:"arrow-right2", 'xobj': xobj, action: function(elem){
				cForm.edit.row(elem.xobj, url, callback);
			}});
		}
		
		options.push({"label": "Insert more inputs to the custom form", sublabel:"Click to add more inputs to the custom form", icon:"plus", action: function(){
			cForm.edit.quickDesign(obj, url);
		}});
		
		AP.actionMenu(options,{title:"Please select an input to start editing"});
	};

	
	this.quickDesign=function(obj, url, callback){
		cForm.design(function(inputs, preview, tf){
			cForm.submit(url, tf, function(code){
				UI.flash("Save successfully ...");
				AP.xRefresh();
			},{hid: obj.hid, token: obj.token});
		});
	};
	

	this.row=function(row, url, callback){
		var data={hid: row.origin.hid, token: row.origin.token, id: row.id};
		
		var opts=[{label: "Short text", value:"text"}, {label: "Long text", value:"textarea"}, {label: "Date", value:"date"}, {label: "Integer", value:"int"}, {label: "Selection", value:"select"}];
		
		var form=Form.create('fly-custom-fx',{'action': url})
		.row(
			Form.label({label: "Input name *",sublabel: "The name of the custom input"}),
			Form.input({name: 'name', "placeholder":"The name of the custom input"}).value(row.name)
		)
		.row(
			Form.label({label: "Input type *",sublabel: "The input type"}),
			Form.input({name: 'type', type:"select", options: opts}).value(row.type)
		)
		.rowHidden(
			Form.label({label: "Possible options *",sublabel: "Please list all possible options, separated by (,)"}),
			Form.input({name: 'values', type:"textarea"}).value(row.values.join(", "))
		)
		.row(
			Form.label({label: "Guideline text",sublabel: "The text to hint users"}),
			Form.input({name: 'placeholder', "placeholder":"The text to hint users"}).value(row.placeholder)
		)
		.row(
			Form.label({label: "Require answer?",sublabel: ""}),
			Form.input({name: 'required', type:"select", options: [{label: "No", value:0}, {label: "Yes", value:1}]}).value(row.required)
		)
		.row(
			Form.label({label: "Disabled?",sublabel: "Disable this custom input?"}),
			Form.input({name: 'disabled', type:"select", options: [{label: "No", value:0}, {label: "Yes", value:1}]}).value(row.disabled)
		)
		.buttons([
			 {label: "Edit custom input", action: function(){
				 Form.submit("#fly-custom-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					callback(code);
				 })
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("fly-custom-fx");
			 }, style:'cancel -passive-2 -rounded'}
		])
		.hiddens(data)
		.render(function(form){
			form.find("type").change(function(){
				var val=$(this).val();
				if (val=="select"){
					form.findRow("values").show();
				}else{
					form.findRow("values").hide();
				}
			}).change();
		});	
		
		
		Form.pop({width: 720, label: 'Edit custom input'
		}).setForm(form).show().focus('name');
	};
};



cForm.ui=new function __cFormUI(){
	this.addInput=function(){
		var name=safe($("#custom-form-fx input[name=name]").val());
		var type=$("#custom-form-fx select[name=type]").val();
		var placeholder=safe($("#custom-form-fx input[name=placeholder]").val());
		var required=parseInt($("#custom-form-fx select[name=required]").val());
		var values=[];
		var id=AP.uuid();
			
		if (type=="select"){
			values=$("#custom-form-fx input[name=values]").val().split(",");
			if (!values.length){
				return AP.alertError("Please enter possible options for the input.")
			}
		}
		
		var disabled=0;
		
		if (!name || !name.length){
			return AP.alertError("Please enter the input name");
		}
		
		var input={id: id, name: name, type: type, values: values, required: required, disabled: disabled, placeholder:placeholder};
		cForm.inputs.push(input);
		
		this.previewAdd(input);
		this.clearInput();
	};
	
	
	this.clearInput=function(){
		$("#custom-form-fx input").val("");
		$("#custom-form-fx select[name=required]").val(0);
		$("#custom-form-fx select[name=type]").val("text");
		$("#custom-form-fx input[name=values]").closest(".row").hide();
		Form.balance("#custom-form-fx");
	};
	
	
	
	this.makeForm=function(inputs){
		var form="";
		for (var i=0; i<inputs.length; i++){
			var ip=inputs[i];
			form+="<input type='hidden' name='custom-name-"+i+"' value='"+ip.name+"'>" +
				"<input type='hidden' name='custom-type-"+i+"' value='"+ip.type+"'>" +
				"<input type='hidden' name='custom-required-"+i+"' value='"+ip.required+"'>" +
				"<input type='hidden' name='custom-placeholder-"+i+"' value='"+ip.placeholder+"'>" +
				"<input type='hidden' name='custom-values-"+i+"' value='"+ip.values.join(",")+"'>";	
		}
		
		return "<div style='display:none'><input type='hidden' name='__cform' value='1'/> "+form+"</div>";
	};
	
	
	this.getPreview=function(inputs){
		var html="";
		for (var i=0; i<inputs.length; i++){
			html+=getInputPreview(inputs[i]);
		}
		
		return "<div class='embed -cform'>"+html+"</div>";
	};
	
	
	
	this.previewAdd=function(input){
		var html=getInputPreview(input);
		$(html).appendTo("#custom-form-fx .embed.-cform").addClass("pointer").attr("title","Click to clear this input").click(function(){
			var $this=$(this);
			AP.confirm("Remove this input?", function(){
				$this.slideUp(400, function(){
					$this.remove();
					cForm.ui.removeInput(input);
				});
			});
		});
	};
	
	
	this.removeInput=function(input){
		var r=[];
		for (var i=0; i<cForm.inputs.length; i++){
			if (cForm.inputs[i].id==input.id){
			}else{
				r.push(cForm.inputs[i]);
			}
		}
		
		cForm.inputs=r;
		return;
	};
	
	
	this.newForm=function(){
		
		var html="<div class='design form form-inline'>" +
		"	<h1>Tạo custom form</h1>" +
		"	<div class='row flat'>" +
		"		<div class='label'>Tên trường *</div>" +
		"		<div class='input data'><input type='text' name='name' placeholder='The question you want to ask'/></div>" +
		"	</div>" +
		"	<div class='row'>" +
		"		<div class='label'>Loại dữ liệu type *</div>" +
		"		<div class='select data'><select name='type'>" +
		"			<option value='text'>Text ngắn (một dòng)</option>" +
		"			<option value='textarea'>Text dài (nhiều dòng)</option>" +
		"			<option value='int'>Integer (số nguyên)</option>" +
		"			<option value='float'>Float (số thực)</option>" +
		"			<option value='date'>Date (ngày)</option>" +
		"			<option value='datetime'>Datetime (ngày và giờ)</option>" +
		"			<option value='select'>Dropdown list (danh sách chọn)</option>" +
		"		</select></div>" +
		"	</div>" +
		"	<div class='row row-options hidden'>" +
		"		<div class='label'>Tất cả các lựa chọn cho danh sách *</div>" +
		"		<div class='input data'><input type='text' placeholder='Enter all possible options; separated by commans (,)' name='values'/></div>" +
		"	</div>" +
		"	<div class='row'>" +
		"		<div class='label'>Yêu cầu trả lời? *</div>" +
		"		<div class='select data'><select name='required'>" +
		"			<option value='0'>Không bắt buộc</option>" +
		"			<option value='1'>Bắt buộc trả lời</option>" +
		"		</select></div>" +
		"	</div>" +
		"	<div class='row'>" +
		"		<div class='label'>Gợi ý trả lời</div>" +
		"		<div class='input data'><input type='text' name='placeholder' placeholder='The guideline text (not required)'/></div>" +
		"	</div>" +
		"	<div class='buttons -two' style='padding-top:15px;'>" +
		"		<div class='button -first -gradient -big -rounded -stroked' onclick='cForm.ui.clearInput();'>Clear input</div>" +
		"		<div class='button -second -cta -big -rounded -stroked' onclick='cForm.ui.addInput();'>Add input</div>" +
		"	</div>" +
		"</div>";
		
		html+="<div class='results'>" +
				"<div class='title'>Form được khởi tạo</div>" +
				"<div class='embed -cform'></div>" +
			"</div>";

		
		html="<div class='custom-form-design' id='custom-form-design'>"+html+"" +
			"<div class='buttons'>" +
			"	<div class='button -success -big -rounded' onclick='cForm.finishDesign(this);'>Finish designing custom form</div>" +
			"	<div class='cancel pointer' onclick='AP.closeDialog(this);'>Cancel</div>" +
			"</div>"
		"</div>";
		
		
		AP.customDialog(html, "custom-form-fx").width(700).show();
		
		$("#custom-form-fx select[name=type]").change(function(){
			var val=$(this).val();
			if (val=="select"){
				$("#custom-form-fx .row-options").show();
			}else{
				$("#custom-form-fx .row-options").hide();
			}
		});
		
		$("#custom-form-fx input[name=name]").autofocus();
	};
	
	
	
	function getInputPreview(input){
		var star="";
		if (parseInt(input.required)){
			star="<span class='red bold'>*</span>";
		}
		
		var values="";
		if (input.type=="select"){
			if(typeof input.options == 'undefined' || input.options == null) {
			   input.options = input.values;
			}
			values="<div class='values'>{"+AP.word.join(input.values,",")+"}</div>";
		}
		
		var placeholder="";
		if (input.placeholder && input.placeholder.length){
			placeholder="<div class='ph'>"+input.placeholder+"</div>";
		}
		
		return "<div class='item' data-id='"+input.id+"'>" +
			"<div class='name'>"+input.name+star+"</div>" +
			placeholder+
			"<div class='type'>"+input.type+"</div>" +
			values+
		"</div>";
	};
};







// Custom Form v2

var CustomForm = new function __CustomForm(){
	this.dialog=function(canvas, object, url, formKey, options){
		return new CustomFormAPI({canvas: canvas, object: object, url: url, formKey: formKey, extra: options}, 'dialog');
	};
	
	this.inline=function(canvas, object, url, formKey, options){
		return Line.initCustom({canvas: canvas, object: object, url: url, formKey: formKey, extra: options}, 'inline');
	};
	
	this.line=function(canvas, object, url, reorder){
		return Line.init({canvas: canvas, object: object, url: url, reorder: reorder});
	};
	
	this.complex=function(canvas, object, url, reorder){
		return Line.complex({canvas: canvas, object: object, url: url, reorder: reorder});
	};
};




function CustomFormAPI(options, type){
	this.options=options;
	this.type=type;
	
	
	this.data=function(rows){
		cForm.edit.quickDesign(this.options.object, this.option.url, function(code){
			$.log(code);
		});
	};
	
	
	this.show=function(){
		var html=getRowsHTML(this.rows);
	};
	
	this.flat=function(){
		
	};
};var CheckList=new function __CheckList(){
	this.check=function(url, data, callback){
		UI.ajaxShow();
		AP.post(url, data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.origin, code.item);
		});
	};
	
	
	this.edit=function(checklist, url, data){
		var html="<h1 class='center'>Edit stage checklist</h1><div class='sep-10'></div>";
		
		for (var i=0; i<checklist.length; i++){
			var item=checklist[i];
			
			html+="<div class='item -checklist'>" +
				"<div class='row row-hidden'><div class='input'><input data-name='"+item.name+"' data-id='"+item.id+"' type='text' name='item-"+item.id+"' placeholder='Checklist item' value='"+item.name+"'></div> " +
					"<div class='buttons -two unselectable'>"+
					"	<div class='button -first -success -rounded' onclick='CheckList.editItem(this);'>Edit</div>" +
					"	<div class='button -second -gradient -stroked -rounded' onclick='CheckList.cancelEditItem(this);'>Cancel</div>" +
					"</div>" +
				"</div>" +
				"<div class='real'>" +
				"	<div class='icon'><span class='-ap icon-checkbox-unchecked'></span></div>" +
				"	<div class='name' onclick=\"CheckList.showEdit(this);\">"+item.name+"</div>" +
				"	<div class='actions'>" +
				"		<span class='action a' onclick=\"CheckList.showEdit(this);\">Edit now</span> &middot; " +
				"		<span class='action a' onclick=\"CheckList.moveUp('"+item.id+"');\">Move up</span> &middot; " +
				"		<span class='action a' onclick=\"CheckList.moveDown('"+item.id+"');\">Move down</span> &middot; " +
				"		<span class='action a' onclick=\"CheckList.removeItem(this);\">Remove</span>" +
				"	</div>" +
				"</div>" +
			"</div>";
		}
		
		html+="<div class='sep-20'></div>" +
		"<div class='item more'><div class='row'>" +
			"<h3 style='padding-bottom:8px;'>Add more checklist item</h3>" +
			"<div class='input'><input type='text' name='name' placeholder='Checklist item name'></div> " +
			"<div class='buttons -two unselectable'>"+
			"	<div class='button -first -success -rounded' onclick='CheckList.addMore(this);'>Add</div>" +
			"	<div class='button -second -gradient -stroked -rounded' onclick='CheckList.resetEdit(this);'>Reset</div>" +
			"</div>" +
		"</div></div>";
		
		html+="<div class='cancel'><span onclick='CheckList.closeEdit(this);'>Close dialog</span></div>";
		
		AP.customDialog(html, "checklist-edit").closable(true).width(600).show();
		$("#checklist-edit").data("data", data).data("url", url);
	};
	
	
	this.closeEdit=function(ref){
		AP.closeDialog(ref);
	};
	
	this.showEdit=function(ref){
		$("#checklist-edit .item.-checklist").removeClass("editing");
		$(ref).closest(".item").addClass("editing");
	};
	
	this.resetEdit=function(ref){
		$(ref).closest(".row").find("input[type=text]").val("");
	};
	
	this.addMore=function(ref){
		var val=$(ref).closest(".item").find("input[type=text]").val();
		if (val && val.length){
			var data=$("#checklist-edit").data("data");
			var url=$("#checklist-edit").data("url");
			
			data.name=val;
			data.action="add";
			
			update(data, url);
		}
	};
	
	
	this.editItem=function(ref){
		var $input=$(ref).closest(".item").find("input[type=text]");
		var val=$input.val();
		var item_id=$input.data("id");
		
		if (val && val.length){
			var data=$("#checklist-edit").data("data");
			var url=$("#checklist-edit").data("url");
			
			data.name=val;
			data.item_id=item_id;
			data.action="edit";
			
			update(data, url);
		}
	};
	
	this.cancelEditItem=function(ref){
		$(ref).closest(".item").removeClass("editing");
	};
	
	
	this.removeItem=function(ref){
		var $input=$(ref).closest(".item").find("input[type=text]");
		var item_id=$input.data("id");
		var name=$input.data("name");
		
		AP.confirm("Are you sure that you want to remove this checklist item? This action cannot be undone and will affect every job of the current workflow.", function(){
			var data=$("#checklist-edit").data("data");
			var url=$("#checklist-edit").data("url");
			
			data.action="remove";
			data.item_id=item_id;
			
			update(data, url);
		});
	};
	
	
	
	this.moveUp=function(item_id){
		var data=$("#checklist-edit").data("data");
		var url=$("#checklist-edit").data("url");
		
		data.action="up";
		data.item_id=item_id;
		
		update(data, url);
	};
	
	
	this.moveDown=function(item_id){
		var data=$("#checklist-edit").data("data");
		var url=$("#checklist-edit").data("url");
		
		data.action="down";
		data.item_id=item_id;
		
		update(data, url);
	};
	
	
	
	

	this.updateAdd=function(item){
		
	};
	
	
	function update(data, url){
		AP.ajaxShow();
		AP.post(url, data, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			// Update checklist
			var data=$("#checklist-edit").data("data");
			var url=$("#checklist-edit").data("url");
			
			CheckList.edit(code.checklist, url, data);
		});
	}
};Form.inline = new function __FormInline(){
	/**
	 * @desc Bind a color picker on a selector click
	 */
	this.color=function(selector, callback, opts){
		if (!opts){
			opts={};
		}
		
		opts=$.extend({}, {auto: 1, left: -10}, opts);
		
		$(selector).click(function(){
			Form.inlineColorTagger(this, callback, opts);
		});
	};
	
	
	this.text=function(selector, options){
		options=$.extend({}, {data: {}, position: {top:0, left:0}, placeholder: "Edit", loading: false}, options);
		
		var $handler=$(selector);
		
		if (options.handler){
			$handler=options.handler;
		}
			
		$handler.click(function(){
			var $this=$(selector);
			
			var val=$(selector).data('value');
			if (typeof val=="undefined" || val===null){
				if ('value' in options){
					val=options.value;
				}else if ('val' in options){
					val=options.val;
				}else{
					val=$(selector).text();
				}
				
				val=$.trim(safe(val));
			}
			
			var html="<div class='xform-inline' title='Press enter to save'>" +
					"<div class='input'><input type='text' value='"+val+"' placeholder='"+options.placeholder+"'/></div>" +
					"<div class='close' onclick='Form.inline.cancel_text_input(this);'><span class='-ap icon-undo' title='Cancel'></span></div>" +
				"</div>";
			
			var $canvas=null;
			var binding=false;
			if ($this.parent().hasClass("js_xform_wrap")){
				$canvas=$this.parent();
				binding=true;
			}else{
				var id=AP.uuid();
				$this.addClass("js_xform_initial").wrap("<div id='"+id+"' class='js_xform_wrap'></div>");	
				$canvas=$("#"+id);
				$canvas.append(html);
			}
			
			$this.hide();
			
			$canvas.find(".xform-inline").show().cloneCSS($this, "padding, margin, fontSize, color");
			
			if (!binding){
				$canvas.find("input").enter(function(){
					save_text_input(this, options, $(this).val());
				});
			}
			
			$canvas.find("input").autofocus().val(val);
			
		});
	};
	
	
	
	
	function save_text_input(ref, options, val){
		var url=options.url;
		var data=options.data;
		if (!data){
			data={};
		}
		
		data.value=val;
		
		var $canvas=$(ref).closest(".js_xform_wrap");
		$canvas.ajaxShow();
		
		if (options.loading){
			UI.ajaxShow();
		}
		AP.post(url, data, function(code){
			if (options.loading){
				UI.ajaxHide();
			}
			
			$canvas.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			if (options.done){
				Form.inline.cancel_text_input(ref);
				options.done.call($canvas.find(".js_xform_initial")[0], code);
			}
		});
	};
	
	
	this.cancel_text_input=function(ref){
		var $canvas=$(ref).closest(".js_xform_wrap");
		$canvas.find(".xform-inline").hide();
		$canvas.find(".js_xform_initial").show();
	};
};var Comment=new function __Comment(){
	this.on={};
	
	this.canvas=null;
	
	this.quickPost=function(input, callback, error_callback){
		var $form=$(input).closest("form");
		
		if ($form.parent().ajaxOn()){
			return;
		}
		
		var hid=$(input).data('hid');
		var token=$(input).data('token');
		var content=$(input).val();
		var file=$form.find("input[name=file]").val();
		
		if (!file || !file.length){
			if (!content || !content.length){
				return; // NO CONTENT
			}
		}
		
		$form.find('.textarea').ajaxShow();
		
		
		AP.submit($form, function(code){
			$form.find('.textarea').ajaxHide();
			
			if (!code.good()){
				if (error_callback){
					error_callback(code);
				}
				return AP.alertError(code.mesage);
			}
			
			$(input).val("").restore();
			$form.find("input[type=file]").val("");
			$form.find(".comment-file").hide();
			
			if (callback){
				callback.apply(input, [code.origin, code.comment]);	
			}
			
			AP.fire("comment.posted",[code.origin, code.comment]);
		}, {hid: hid, token: token, content: content});
	};
	
	
	this.quickRefPost=function(ref, callback, error_callback){
		var $input=$(ref).closest(".post").find("textarea");
		$input.triggerEnter();
	};
	
	
	
	this.taggable=function(input, network_id){
		Tag.user(input, network_id);
	};
	
	
	this.get=function(hid, token, callback, error_callback){
		AP.post("api/comment/get",{'hid': hid, 'token': token}, function(code){
			if (!code.good()){
				if (error_callback) error_callback(code);
				return;
			}
			callback(code.comment);
		});
	};
	
	
	
	/**
	 * @desc Load comment on a hash id
	 */
	this.load=function(hid, token, options, callback, error_handler){
		if (!hid){
			return;
		}	
		
		AP.post("api/comment/load",{'hid': hid, 'token': token, 'method': options.method, 'position': options.position}, function(code){
			if (!code.good()){
				if (error_handler){
					error_handler(code);
				}
				return;
			}
			
			callback(code.origin, code.comments);
		});
	};
	
	
	
	this.uploadForm=function(ref){
		var $area=$(ref).prev();
		var hid=$area.data("hid");
		var token=$area.data("token");
		
		var object={hid: hid, token: token};
		
		var $canvas=$(ref).closest(".box.comments");
		
		FileX.create(object, function(_origin, comment, log){
			Comment.ui.insert($canvas, _origin, comment);
			$canvas.find(".__updateinfo").replaceWith(Comment.ui.header(_origin));
			$canvas.trigger("commentposted", _origin);
			$canvas.find(".comment-count").html(_origin.stats.comments);
			
			AP.fire("comment-"+_origin.hid, [_origin, comment]);
		});
	};
	
	
	this.pickFile=function(input){
		var $input=$(input);
		var $box=$input.closest(".textarea");
		var name=getUploadFN($input.val());
		if (!name || !name.length){
			return;
		}
		
		$box.find(".comment-file").show();
		$box.find(".comment-file em").html(name);
	};
	
	
	this.removePickedFile=function(ref){
		var $box=$(ref).closest(".textarea");
		$box.find("input[name=file]").val("");
		$box.find(".comment-file").hide();
	};
	
	
	this.emoji=function(ref){
		var $box=$(ref).closest(".textarea");
		Emoji.pick(function(emoji){
			var $input=$box.find("textarea");
			var content=$input.val();
			if (content && content.length){
				$input.val(content+" "+emoji+" ").focus();
			}else{
				$input.val(emoji).triggerEnter();
			}
			
			
		});
	};
	
	
	this.auto=function(canvas, obj, opts){
		opts=$.extend({},{placeholder: "Comment and press Enter to post", order: "bottom", header: true, subheader: 0, autofocus: false, tagdir:"top", api: "api/comment", counter: ".comment-counter-"+obj.hid, theme: ''}, opts);
		
		this.canvas=canvas;
		
		var $canvas=$(canvas);
		$canvas.addClass("__comment_canvas");
		var hid=obj.hid;
		var token=obj.token;
		
		$canvas.data('hid', hid);
		$canvas.data('hid', hid);
		$canvas.data('object', obj);
		
		var prefix=$canvas.data('prefix');
		if (!prefix){
			prefix=AP.uuid();
			$canvas.data('prefix', prefix);
		}
		
		
		var theme="-white";
		if (opts && opts.theme){
			theme=opts.theme;
			if (theme[0]!='-'){
				theme="-"+theme;
			}
		}
		
		var header="<h1>Comments <small class='comment-count-"+obj.hid+"'>("+obj.stats.comments+")</small></h1>";
		if (opts.header==false){
			header="";
		}
		
		var upload="<span class='upload'><input type='file' name='file' onchange='Comment.pickFile(this);'/><span class='-ap icon-upload3'></span></span> " +
		"<div class='comment-file hidden'>To be uploaded: <em>...</em> &middot; <span class='a normal std' onclick='Comment.removePickedFile(this);'>remove</span> &middot; <span class='a normal std' onclick='Comment.quickRefPost(this);'>post comment</span></div>";
		
		var emoji="<span class='emoji' onclick='Comment.emoji(this);'><span class='-ap icon-happy'></span></span>";
		
		var form="	<div class='post'><form method='post' action='api/comment/post'>" +
		"		<div class='textarea'><textarea data-hid='"+hid+"' data-token='"+token+"' name='comment' placeholder='"+opts.placeholder+"'></textarea> "+upload+emoji+"</div>" +
		"	</form></div>";
		
		var form_top="";
		var form_bottom="";
		
		if (opts.order=="bottom"){
			form_bottom=form;
		}else{
			form_top=form;
		}
		
		var html="";
		if (opts.order=="bottom"){
			html="<div class='box comments "+theme+"' id='auto-comments-"+obj.hid+"'>" +
				((opts && opts.layout && opts.layout=="-wide" && opts.header)?"<h1>Comments <small>("+obj.stats.comments+")</small></h1>":"")+
				(obj.subheader?getHeader(obj, opts):"")+
				"	<div class='arrow'></div>" +
				"	<div class='more'></div>" +
				"	<div class='__comments'></div>" +
				form+
			"</div>";
		}else{
			html="<div class='box comments "+theme+"' id='auto-comments-"+obj.hid+"'>" +
				((opts && opts.layout && opts.layout=="-wide" && opts.header)?"<h1>Comments <small>("+obj.stats.comments+")</small></h1>":"")+
				(obj.subheader?getHeader(obj, opts):"")+
				form+
				"	<div class='arrow'></div>" +
				"	<div class='__comments'></div>" +
				"	<div class='more'></div>" +
			"</div>";
		}
		
		$canvas.html(html).data("options", opts).data("order", opts.order);
		
		if (opts.tagdir=="bottom"){
			$canvas.find(".post textarea").data("tagdir", "bottom");	
		}
		
		
		if (opts.theme && opts.theme.length){
			$canvas.addClass("theme-"+opts.theme);
		}
		
		if (opts && !opts.autofocus){
		}else if (!Client.native){
			$(".post textarea", $canvas).focus();
		}
		
		if (opts.order=="bottom"){
			$(canvas).find("> .comments").addClass("bottom_top");
		}
		
		$(opts.counter).html(obj.stats.comments);
		
		$(".post textarea", $canvas).autoExpand().enter(function(){
			var $this=$(this);
			Comment.quickPost(this, function(origin, comment){
				Comment.liveInsert(origin, comment, $this);
			});
		}).screencopy("api/comment/post", function(code, $_this){
			var origin=code.origin;
			var comment=code.comment;
			
			Comment.ui.insert($canvas, origin, comment);
			$canvas.find(".__updateinfo").replaceWith(Comment.ui.header(origin));
			$canvas.trigger("commentposted", origin);
			$canvas.find(".comment-count").html(origin.stats.comments);
			
			AP.fire("comment-"+origin.hid, [origin, comment]);
		},{hid: hid, token: token});
		
	
		this.taggable($canvas.find(".post textarea"), Client.people);
		
		
		var last_id=$canvas.data("last-id");
		if (!last_id){
			last_id=0;
		}
		
		last_id=parseInt(last_id);
		
		var options={method: 'prev', position: last_id};
		Comment.load(hid, token, options, function(origin, comments){
			Comment.ui.show($canvas, origin, comments);
			AP.fire("comments.loaded."+origin.hid,null);
		});
		
	};
	
	
	this.response=function(comment, origin){
		var $canvas=$("#auto-comments-"+origin.hid);
		
		if ($canvas.length){
			Comment.ui.insertTop($canvas, origin, comment);	
		}
		
		$canvas=$("#comments-"+origin.hid);
		
		if ($canvas.length){
			Comment.ui.insert($canvas, origin, comment);	
		}
		
//		if ($("#live").length){
//			Update.comment.response(comment, origin);
//		}
	};
	

	
	this.autoFocus=function(){
		$(this.canvas).find("textarea").focus();
	};
	
	
	this.liveInsert=function(origin, comment, $iref){
		var $c=$iref.closest(".__comment_canvas");
		var options=$c.data("options");
		
		Comment.ui.insert($c, origin, comment);
		$c.find(".__updateinfo").replaceWith(Comment.ui.header(origin));
		$c.trigger("commentposted", origin);
		$(options.counter).html(origin.stats.comments);
		
		AP.fire("comment-"+origin.hid, [origin, comment]);
	};
	
	
	/**
	 * @desc Attach the form at bottom when the comments are over full-height
	 */
	this.attachBottom=function(box, obj){
		$(box).find(".comments").data("attach-bottom",1).data("attach-to", box);
		
		var nobox=(!$(box).find('.__postbottom').length || !$(box).find('.__postbottom').text().length);
		
		if (nobox){
			var id=AP.uuid();
			
			var upload="<span class='upload'><input type='file' name='file' onchange='Comment.pickFile(this);'/><span class='-ap icon-upload3'></span></span> " +
			"<div class='comment-file hidden'>To be uploaded: <em>...</em> &middot; <span class='a normal std' onclick='Comment.removePickedFile(this);'>remove</span> &middot; <span class='a normal std' onclick='Comment.quickRefPost(this);'>post comment</span></div>";
			var emoji="<span class='emoji' onclick='Comment.emoji(this);'><span class='-ap icon-mood'></span></span>";
			
			var html="<div class='__postbottom'><div class='post'><form method='post' action='api/comment/post'>" +
			"	<div class='textarea'><textarea id='"+id+"' data-hid='"+obj.hid+"' data-token='"+obj.token+"' name='comment' placeholder='Comment and press Enter to post'></textarea>"+upload+emoji+"</div>" +
			"</form></div></div>";
			
			$(html).appendTo(box);
			$("#"+id).enter(function(){
				var $this=$(this);
				var $canvas=$(box).find(".box.comments");
				
				Comment.quickPost(this, function(origin, comment){
					Comment.ui.insert($canvas, origin, comment);
					$canvas.find(".__updateinfo").replaceWith(Comment.ui.header(origin));
					$this.focus();
				});
			}).screencopy("api/comment/post", function(code, $_this){
				var origin=code.origin;
				var comment=code.comment;
				var $canvas=$(box).find(".box.comments");
				
				Comment.ui.insert($canvas, origin, comment);
				$canvas.find(".__updateinfo").replaceWith(Comment.ui.header(origin));
				$canvas.trigger("commentposted", origin);
				$canvas.find(".comment-count").html(origin.stats.comments);
				
				AP.fire("comment-"+origin.hid, [origin, comment]);
			},{hid: obj.hid, token: obj.token});
		}
		
	};
	
	

	this.like=function(ref){
		var $this=$(ref);
		var $canvas=$this.closest('.__comment_canvas');
		var hid=$canvas.data('hid');
		var token=$canvas.data('token');
		
		if ($this.hasClass('unlike')){
			Like.unlike(hid, token, function(origin, like){
				Comment.ui.updateOrigin($canvas, origin);
			});
		}else{
			Like.like(hid, token, function(origin, like){
				Comment.ui.updateOrigin($canvas, origin);
			});
		}
	};
	
	
	this.editOptions = function(ref) {
		var options = [];
		
		options.push({label: "Sửa nội dung bình luận", icon: "uniF11A", action: function(){
			Comment.edit(ref);
		}});
		
		options.push({label: "Xoá bình luận", icon: "uniF11F", action:function(){
			Comment.remove(ref);
		}});
		
		AP.actionMenu(options);
	};
	
	
	this.edit = function(ref){
		var $this=$(ref);
		var $box=$this.closest(".comment");
		var hid=$box.data('hid');
		var token=$box.data('token');
		
		
		$(ref).ajaxShow();
		this.get(hid, token, function(comment){
			$(ref).ajaxHide();
			Form.edit({type: "textarea","height":200, "title":"Edit comment", "action":"api/comment/edit", "content":comment.content.br2nl(),"button":"Edit comment", data: {hid: comment.hid, token:comment.token}, "name":"content"}, function(code){
				var html=Comment.ui.html(code.comment, $box.data("ns"));
				$box.replaceWith(html);
			});
		}, function(){
			$(ref).ajaxHide();
		});
	};
	
	this.remove = function(ref){
		AP.confirm("Bạn có chắc muốn xoá bình luận này? Nội dung bị xoá sẽ không thể khôi phục.", function() {
			var $this = $(ref);
			var $box = $this.closest(".comment");
			var hid = $box.data('hid');
			var token = $box.data('token');
			var $parent = $box.parent().parent();
			var origin_hid = $parent.data('hid');
			
			$(ref).ajaxShow();
			AP.post("api/comment/remove", {hid: hid, token: token, origin_hid: origin_hid}, function(code) {
				$(ref).ajaxHide();
				if (!code.good()){	
					return AP.alertError(code.message, function() {
						AP.xRefresh();
					});
				}
				// var html = Comment.ui.html(code.comment, $box.data("ns"));
				$box.remove();
				// $(".post", $parent).hide(); 
				
				if (Comment.on.removed){
					Comment.on.removed(code, $parent);
				}
				
				var options=$parent.data("options");
				if (!options){
					return;
				}
				
				$(options.counter).each(function(){
					var v=parseInt($(this).text()) || 0;
					v=v-1;
					if (v<=0){
						v=0;
					}
					
					$(this).html(v);
				});
			});
		});
	};
	
	
	
	this.more=function(ref){
		var $canvas=$(ref).closest(".__comment_canvas");
		var obj=$canvas.data("object");
		var last_id=$canvas.data("last-id");
		if (!last_id){
			last_id=0;
		}
		
		last_id=parseInt(last_id);
		
		var options={method: 'prev', position: last_id};
		Comment.load(obj.hid, obj.token, options, function(origin, comments){
			Comment.ui.show($canvas, origin, comments);
			AP.fire("comments.loaded."+origin.hid,null);
		});
	};
	
	
	
	
	this.likeComment=function(ref){
		var $this=$(ref);
		var $box=$this.closest(".comment");
		
		var hid=$box.data('hid');
		var token=$box.data('token');
		var $canvas=$this.closest('.__comment_canvas');
		
		
		if ($this.hasClass('unlike')){
			Like.unlike(hid, token, function(origin, like){
				Comment.ui.update($box, origin);
			});
		}else{
			Like.like(hid, token, function(origin, like){
				Comment.ui.update($box, origin);
			});
		}
	};
	
	this.onLike=function(comment){
		$(".comment-"+comment.hid).each(function(){
			var $box=$(this);
			var hid=$box.data("hid");
			var token=$box.data("token");
			
			var html="&middot; <span class='-ap icon-like2'></span> <span class='link' onclick=\"Like.who('"+hid+"','"+token+"');\">"+comment.likes+" "+AP.word.plural("like", comment.likes)+"</span>";
			$box.find(".comment-counter-ph").html(html).show();
		});
	};
	
	
	
	
	
	this.getContentHTML=function(comment){
		return this.getDefaultContentHTML(comment);
	};
	
	
	this.getDefaultContentHTML=function(comment){
		var content=comment.content;
		if (content && content.length){
			content=content.replace(/⑊/g,'&#92;').replace(/&#9290;/g, '&#92;');
		}
		
		return "<span class='message'>"+UI.emotion(UI.parse(content))+"</span>";
	};
	
	
	
	this.focusComment=function(ref){
		$(ref).closest(".comments").find("textarea").focus();
	};
	
	
	/**
	 * @desc For case comments and logs to be separated, show logs in a canvas 
	 */
	this.showLogs=function(canvas, logs){
		logs.sort(function(e, f){
			return parseInt(f.since)-parseInt(e.since);
		});
		
		$(canvas).html("<div class='comment-logs'></div>");
		for (var i=0; i<logs.length; i++){
			appendLog($(canvas).find(".comment-logs"), logs[i]);
		}
	};
	
	
	/**
	 * @desc Insert a new log, public function
	 */
	this.insertLog=function(canvas, log){
		var $canvas=$(canvas).find(".comment-logs");
		
		var date=AP.time.time('%d%m%Y',log.since);
		var $ms=$canvas.find(".c-date.js-"+date).first();
		if ($ms.length){
			$ms.after(getLog(log));
			return;
		}
		
		$canvas.append("<div class='c-date js-"+(date)+"'>"+(AP.time.time('%V, %d/%m',log.since))+"</div>");
		$canvas.find(".js-"+date).after(getLog(log));
	};
	
	
	
	function appendLog($canvas, log){
		var date=AP.time.time('%d%m%Y',log.since);
		var $ms=$canvas.find(".js-"+date).last();
		if ($ms.length){
			$ms.after(getLog(log));
			return;
		}
		
		$canvas.append("<div class='c-date js-"+(date)+"'>"+(AP.time.time('%V, %d/%m',log.since))+"</div>");
		$canvas.find(".js-"+date).after(getLog(log));
	};
	
	
	
	function getLog(e){
		var u=People.get(e.user_id);
		return "<div class='comment-log js-comment-log-"+(e.id)+" js-"+(AP.time.time('%d%m%Y',e.since))+"'> <div class='c-avatar'> <div class='image'><img src='"+(AP.xthumb(u.gavatar))+"'/></div> </div> <div class='c-display'> <em>"+(u.name)+"</em> <span class='content'>"+(e.content)+"</span> &middot; <span class='time'>"+(AP.i18n.time(e.since))+"</span> </div> </div>";
	};
	
	
	function getHeader(obj, opts){
		if (!opts.header){
			return "";
		}
		return Comment.ui.header(obj);
	}
};



Comment.ui=new function __CommentUI(){
	this.show=function($canvas, obj, comments){
		var last_id=0;
		var options=$canvas.data("options");
		if (!options){
			options={};
		}

		if (comments.length == 0) {
            $canvas.find(".more").hide();
            fixBottom($canvas.find(".comments"), true);
            return;
		}
		
		if (options.order=="top"){
		}else{
			comments=comments.reverse();
		}
		
		var html=AP.render(comments, function(comment){
			if (parseInt(comment.id) < last_id || last_id==0){
				last_id=parseInt(comment.id);
			}
			return Comment.ui.html(comment, $canvas.data("ns"));
		});
		
		
		$canvas.data("last-id", last_id).find(".__comments").after(html);
		
		var total=$canvas.find(".comment").length;
		
		if (total < parseInt(obj.stats.comments)){
			$canvas.find(".more").replaceWith(getMoreLink(total, obj));
			$canvas.find(".more").show();
			$.log($canvas.find(".more").html());
		}else{
			$canvas.find(".more").hide();
		}
		
		
		fixBottom($canvas.find(".comments"), true);
	};
	
	
	this.insert=function($canvas, obj, comment){
		if ($canvas.data("order")=="bottom"){
			$canvas.data('object', obj).find(".post").before(this.html(comment, $canvas));
		}else{
			$canvas.data('object', obj).find(".__comments").after(this.html(comment, $canvas));
		}
		
		fixBottom($canvas, true);
	};
	
	this.insertTop=function($canvas, obj, comment){
		if ($canvas.hasClass("bottom_top")){
			Comment.ui.insert($canvas, obj, comment);	
		}else{
			$canvas.prepend(this.html(comment, $canvas));
		}
		
	};
	
	this.update=function($box, comment){
		$box.replaceWith(this.html(comment, $box));
	};
	
	
	this.updateOrigin=function($canvas, obj){
		$canvas.find(".__updateinfo").replaceWith(this.header(obj));
	};
	
	
	
	this.html=function(comment, ns){
		var prefix="comment";
		
		if (ns && AP.data.isString(ns)){
			ns=ns+"-";
		}else{
			ns="";
		}
		
		var like_action="<span class='action a std' onclick='Comment.likeComment(this);'>Like</span>";
		if (parseInt(comment.liked)){
			like_action="<span class='action a std unlike' onclick='Comment.likeComment(this);'>Unlike</span>";
		}
		
		like_action="<div class='js-action inline'>"+(Like.reaction.getReactionButton(comment))+"</div>";
		
		var eclass="";
		if (comment.metatype){
			eclass=" -alt";
		}
		
		
		return "<div class='comment-"+comment.id+" comment __origin' data-id='"+comment.id+"' data-hid='"+comment.hid+"' data-token='"+comment.token+"' id='"+ns+prefix+"-"+comment.id+"'>" +
			"<div class='image avatar avatar-32 -rounded'><img src='"+AP.xthumb(comment.gavatar)+"'></div>" +
			"<div class='text'><b href='#' class='a url username std' data-username='"+comment.username+"'>"+name(comment.username)+"</b>&nbsp; "+Comment.getContentHTML(comment)+"</div>" +
			getAttachment(comment)+
			"<div class='info'>"+like_action+" &middot; "+UI.simpleTime(comment.since)+ 
			"	<div class='comment-reactions'>"+Like.reaction.getReactions(comment)+"</div>"+
			"</div>" +
			getActions(comment)+
		"</div>";
		
	};
	
	
	this.header=function(obj){
		var action_like="<span class='action action-like' onclick='Comment.like(this);'>Like</span>  &nbsp; &middot; &nbsp; ";
		if (obj.liked && parseInt(obj.liked)){
			action_like="<span class='action action-like unlike' onclick='Comment.like(this);'>Unlike</span>  &nbsp; &middot; &nbsp; ";
		}
		
		return "<div class='info __updateinfo'>" +
			action_like+
			"<span class='action' onclick='Comment.focusComment(this);'>Comment</span> &nbsp; &middot; &nbsp; <em>"+obj.stats.comments+"</em> "+AP.word.plural("comment", obj.stats.comments)+" &nbsp; &middot; &nbsp; " +
			"<span class='-ap icon-like2'></span>&nbsp; <span class='link pointer' onclick=\"Like.who('"+obj.hid+"','"+obj.token+"');\"><em>"+obj.stats.likes+"</em> "+AP.word.plural("like", obj.stats.likes)+"</span>" +
		"</div>";
	};
	
	
	
	this.fixFocus=function($canvas){
		fixBottom($canvas, true);
	};
	
	function getAttachment(comment){		
		var att=comment.attachment;
		if (!att || !att.type){
			return "";
		}
		
		if (att.type=="file"){
			return FileX.inlinePreview(att);
		}
		
		if (att.image && att.title){
			return "<div class='attachment with-cover small' title='"+att.title+"'>" +
				"<div class='cover'><img src='"+AP.thumb(att.image)+"'/></div>" +
				"<div class='-text'><div><a class='title std' href='"+att.url+"' target='_blank''>"+att.title+"</a></div><div class='desc ap-xdot'>"+att.description+"</div></div>"+
			"</div>";	
		}else if (att.title){
			return "<div class='attachment simple' title='"+att.title+"'>" +
				"<div class='-text'><div><a class='title std' href='"+att.url+"' target='_blank''>"+att.title+"</a></div><div class='desc ap-xdot'>"+att.description+"</div></div>"+
			"</div>";
		}
	}
	
	
	function fixBottom($canvas, scroll_down_now){
		if ($canvas.data("attach-bottom") && parseInt($canvas.data("attach-bottom")) && $canvas.data("attach-to")){
			var box=$canvas.data("attach-to");
			
			if ($canvas.parent().parent().height() >= $(box).height()-30){
				if (!$(box).hasClass("__bottomshowup")){
					$(box).addClass("__bottomshowup");
					if (Client.native){
						$(box).find(".__postbottom textarea").val($canvas.find(".post textarea").val());	
					}else{
						$(box).find(".__postbottom textarea").val($canvas.find(".post textarea").val()).focus();	
					}
				}
				
				
				
				if (scroll_down_now){
					Layout.scrollDown(box);
				}
			}else{
				$(box).removeClass("__bottomshowup");
			}
		}
	};
	
	
	
	function getMoreLink(total, obj){
		return "<div class='more'>" +
				"<span class='pointer' onclick='Comment.more(this);'><span class='-ap icon-feed'></span>&nbsp; Load previous comments</span>" +
				"<div class='info'>Display "+total+" of "+obj.stats.comments+" comments</div>" +
			"</div>";
	};
	
	
	function getActions(comment){
		var actions="";
		if (parseInt(comment.user_id)==parseInt(Client.viewer.id)){
			if (comment.metatype=="system"){
				actions+="<div class='action' title='This comment cannot be editted'><span class='-ap icon-lock'></span></div>";
			}else{
				actions+="<div class='action' onclick='Comment.editOptions(this);'><span class='-ap icon-mode_edit'></span></div>";	
			}
			
		}
		
		return  "<div class='actions'>"+actions+"</div>";
	};
};


Comment.v2 = function (opts){
	
	if (!parseInt(Client.env)){
		var params={
			"origin": "[REQUIRED] The origin object, DB release",
			"canvas": "[REQUIRED] The canvas selector, string or jQuery",
			"header": "boolean (TRUE|FALSE) - should we show header?",
			"form": "string {top|bottom} - should the input form at top or bottom (this will impact the comment loading order)",
			"placeholder": "string - input placeholder, default as #Comment and press Enter to post#",
			"tag": "string {up|down} - should the tagging user function appear above the form or under the form"
		};
		
		var str = JSON.stringify(params, null, 2);
		$.log("Comment.v2(opts) opts param:")
		$.log(str);
	}
	
	if (!opts.obj){
		opts.obj=opts.origin;
	}
	
	var obj=opts.obj;
	var canvas=opts.canvas;
	
	opts=$.extend({}, {placeholder: "Comment and press Enter to post", align: "bottom", tagdir:"bottom", header: true, counter: ".comment-counter-"+obj.hid, layout: "standard"}, opts);
	
	Comment.auto(canvas, obj, opts);
};
var Post=new function __Post(){
	this.obj=null;
	this.init=function(obj, canvas, post_form){
		obj.canvas=canvas;
		this.obj=obj;
		this.highlight();
		Post.form.init(post_form);

		var $canvas=$(Post.obj.canvas);

		Post.load(this.obj.hid, this.obj.token, 0, function(origin, posts){
			for (var i=0; i< posts.length; i++){
				Post.insert(posts[i], $canvas);
			}
		});
	};


	this.standardize=function(post){
		post.original={hid: post.hid, token: post.token};

		if (post.attachment && post.attachment.id && post.attachment.type){
			post.hid=post.attachment.hid;
			post.token=post.attachment.token;
			post.stats=post.attachment.stats;
			post.liked=post.attachment.liked;
		}
	};


	this.response=function(post, origin){
		if (!this.obj || this.obj.hid!=origin.hid){
			return;
		};

		this.insert(post, this.obj.canvas, true);
	};


	this.quickPost=function(input, callback){
		if ($(input).parent().ajaxOn()){
			return;
		}

		$(input).parent().ajaxShow();
		var hid=$(input).data('hid');
		var token=$(input).data('token');
		var content=$(input).val();

		if (!content || !content.length){
			return; // NO CONTENT
		}

		var data={hid: hid, token: token, content: content};
		if (AP.isset("Channel")){
			data.channel_id= Channel.channel.id;
		}

		AP.post("api/post/post",data, function(code){
			$(input).parent().ajaxHide();

			if (!code.good()){
				return AP.alertError(code.mesage);
			}

			$(input).val("").restore();
			callback(code.origin, code.comment);
		});

	};



	/**
	 * @desc Load comment on a hash id
	 */
	this.load=function(hid, token, last_id, callback, error_handler){
		this.cid=hid;

		if (!hid){
			return;
		}

		AP.post("api/post/load",{'hid': hid, 'token': token, 'last_id': last_id}, function(code){
			if (!code.good()){
				if (error_handler){
					error_handler(code);
				}
				return;
			}

			callback(code.origin, code.posts);
			AP.fire("POST.LOADED", code.posts.length);
		});
	};


	this.loadMore=function(ref){
		var $master_canvas=$(ref).closest(".__auto_post");
		var origin=$master_canvas.data("object");

		var last_id=0;
		var $canvas=$master_canvas.find(".list.-posts");

		$canvas.find(".li.post").each(function(){
			var id=parseInt($(this).data("id"));
			if (id<last_id || last_id==0){
				last_id=id;
			}
		});

		AP.ajaxShow();
		AP.post("api/post/load",{'hid': origin.hid, 'token': origin.token, 'last_id': last_id}, function(code){
			AP.ajaxHide();

			if (!code.good()){
				return AP.alertError(code.message);
			}

			for (var i=0; i< code.posts.length; i++){
				Post.insert(code.posts[i], $canvas);
			}

			AP.fire("posts.loaded", code.posts.length);
		});
	};


	this.highlight=function(){
		AP.on("post.loaded", function(num_posts){
			if (num_posts && num_posts==10){
				$("#topic-loadmore").show();
			}else{
				$("#topic-loadmore").hide();
			}

			var hl=Query.get("hl");

			if (!hl || !hl.length || !hl.isAlphaNumeric()){
				return;
			}


			if ($("#post-embed-"+hl).length){
				var $box=$("#post-embed-"+hl).closest(".post");
				AP.ajaxShow();
				setTimeout(function(){
					AP.ajaxHide();
					Layout.scrollTo($box, 100, 200);
					Post.comment.show($box.find("> .footer .comment"));
				}, 300);
			}else{
				if (!$("#post-"+hl).length){
					return;
				}

				AP.ajaxShow();
				setTimeout(function(){
					AP.ajaxHide();

					Layout.scrollTo("#post-"+hl, 100, 200);
					Post.comment.show($("#post-"+hl).find("> .footer .comment"));
				}, 500);
			}
		});
	};


	this.insert=function(post, $canvas, prepend){
		this.standardize(post);

		var context_menu="<div class='-dd' onclick='Post.contextMenu(this);'></div>";
		if (!AP.data.equal(post.user_id,Client.viewer.id)){
			context_menu="";
		}

		if (post.metatype=="system"){
			context_menu="<div class='-di' title='This post is locked'><span class='-ap icon-lock5'></span></div>";
		}

		var html= "<div class='li post' id='post-"+post.hid+"' data-id='"+post.id+"' data-hid='"+post.hid+"' data-token='"+post.token+"' data-xhid='"+post.original.hid+"' data-xtoken='"+post.original.token+"'>" +
			context_menu+
			"<div class='title'>" +
			"	<div class='avatar avatar-48 -circled pull-left'><div class='image'><img src='"+AP.xthumb(post.gavatar)+"'/></div></div>" +
			getTitle(post)+
			"	<div class='info'>"+AP.time.time("%H:%i",post.since)+" <em>"+AP.time.time("%M %d", post.since)+"</em></div>" +
			"</div>" +
			getContent(post)+
			getInfo(post)+
			"<div class='post-comments inline-comments' id='post-comments-"+post.id+"'></div>"+
			"</div>";

		if (prepend){
			$(html).prependTo($canvas);
		}else{
			$(html).appendTo($canvas);
		}

		$("#post-"+post.hid).data("object", post);

		$("#post-comments-"+post.id).bind("commentposted", function(event, obj){
			var $box=$(this).closest(".post");
			Post.updateInfo($box, obj);
		});

		$("#post-embed-"+post.id).bind("voted", function(event, obj){
			var $box=$(this).closest(".post");
			Post.updateInfo($box, obj);
		});

		MarkDown.render("#post-"+post.hid);
		$("#post-"+post.hid).linkify();
	};



	this.insertTop=function(post, $canvas){
		this.insert(post, $canvas, true)
	};



	this.contextMenu=function(ref){
		var actions=[];
		actions.push({label:"Edit this post", icon: "pencil", action:function(){
				Post.editMe(ref);
			}});

		actions.push({label:"Delete this post", icon: "block", action:function(){
				Post.deleteMe(ref);
			}});

		AP.actionMenu(actions);
	};



	this.like=function(ref){
		var $this=$(ref);
		var $canvas=$(ref).closest(".post");
		var hid=$canvas.data("hid");
		var token=$canvas.data("token");

		$canvas.ajaxShow();
		if ($this.hasClass('unlike')){
			Like.unlike(hid, token, function(origin, like){
				$canvas.ajaxHide();
				Post.updateInfo($canvas, origin);
			}, function(){
				$canvas.ajaxHide();
			});
		}else{
			Like.like(hid, token, function(origin, like){
				$canvas.ajaxHide();
				Post.updateInfo($canvas, origin);
			}, function(){
				$canvas.ajaxHide();
			});
		}
	};


	this.updateInfo=function($canvas, post){
		$canvas.find(".footer").replaceWith(getInfo(post));
	};


	this.__latest=null;

	/**
	 * @desc Auto post
	 */
	this.auto=function(canvas, obj, opts){
		opts = $.extend({}, {
			poll: 1,
			file: 1,
			placeholder: "Viết thảo luận của bạn"
		}, opts);

		this.__latest=canvas;
		$(canvas).html(getAutoPostForm(obj, opts)).data("object", obj).addClass("__auto_post");
		Post.form.init(canvas);


		Post.init(obj, "#obj-posts", "#obj-post");

		if (Query.getInt("auto_post")){
			$("textarea", canvas).autofocus();
		}


		AP.rebind("new-file-"+obj.hid, function(file, log){
			if ($("#obj-files").length){
				$("#obj-files .none").hide();
				$("#obj-files").prepend(getFileHTML(file));
			}

			Post.insert(log, "#obj-posts", true);
		});


		AP.rebind("new-post-"+obj.hid, function(post, origin){
			Post.insert(post, "#obj-posts", true);
			var counter = origin.stats.posts + origin.stats.files;

			if (typeof origin.stats.comments !== "undefined") {
				counter += origin.stats.comments;
			}

			if (isNaN(counter)) {
				counter = 0;
			}

			$(".post-counter-"+origin.hid).html(counter);
		});
	};


	this.triggerAction=function(action){
		if (action=='reply'){
			setTimeout(function(){
				$(Post.__latest).find(".box.-postform textarea").focus();
			},300);
		}else if (action=='file'){
			$(this.__latest).find(".box.-postform .tab.tab-file").click();
		}else if (action=='poll'){
			$(this.__latest).find(".box.-postform .tab.tab-poll").click();
		}
	};


	this.addFile=function(ref){
		var obj=$(ref).closest(".__auto_post").data("object");
		
		var form=Form.create('invite-fx',{'action':'api/post/post'})
		.row(
			Form.label({label: "Select one or multiple files *",sublabel: ""}),
			Form.input({name: 'file', type:"files", "placeholder":""})
		)
		.row(
			Form.label({label: "Your comment",sublabel: ""}),
			Form.input({name: 'content', type:"textarea", "placeholder":"Some comments, not required"})
		)
		.hiddens({
			"type":"file",
			"hid": obj.hid,
			"token": obj.token,
		})
		.buttons([
		     {label: "Upload file", action: function(){
		    	 Form.submit("#invite-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    		 Form.hide("invite-fx");
		    		 AP.fire("new-post-"+code.origin.hid, [code.post, code.origin]);
		 			 AP.fire("new-post", [code.post, code.origin]);
		    	 });
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("invite-fx");
		     }, style:'cancel -passive-2 -rounded'}
		]).settings({block: true});
	
		Form.pop({id:'invite-fx-dx', width: 480, label: 'Upload files'}).setForm(form).show();
	
		
		// FileX.create(obj);
	};


	this.addPoll=function(ref){
		var obj=$(ref).closest(".__auto_post").data("object");
		Poll.create(obj);
	};


	this.editMe=function(ref){
		var $canvas=$(ref).closest('.li.post');
		var hid=$canvas.data("xhid");
		var token=$canvas.data("xtoken");

		var post=$canvas.data("object");
		
		Form.edit({
			type: "textarea",
			content: post.content,
			name: "content",
			action: "api/post/edit",
			data:{hid: hid, token: token},
			height:130
		}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}

			UI.flash("The post was edited...");
			$canvas.find(".text.-content").html(UI.emotion(UI.parse(code.post.content))).removeClass("-no-data");
			$canvas.find(".text.-content").linkify();
		});
	};



	this.deleteMe=function(ref){
		var $canvas=$(ref).closest('.li.post');
		var hid=$canvas.data("xhid");
		var token=$canvas.data("xtoken");

		AP.confirm("Are you sure that you want to delete this post?", function(){
			AP.ajaxShow();
			AP.post("api/post/delete",{hid: hid, token: token}, function(code){
				AP.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}

				UI.flash("The post was removed");
				$canvas.slideUp(500, function(code){
					$canvas.remove();
				});
			});
		});
	};



	function getTitle(obj){
		var txt="";
		if (obj.attachment && obj.attachment.id && obj.attachment.type){
			if (obj.attachment.type=="poll"){
				txt=" shared a poll";
			}

			if (obj.attachment.type=="file"){
				if (parseInt(obj.attachment.image)){
					txt=" shared an image <span class='a normal std' onclick=\"FileX.preview('"+obj.attachment.hid+"','"+obj.attachment.token+"');\">"+obj.attachment.name+"</span>";
				}else{
					txt=" shared a file";
				}
			}
			
			if (obj.attachment.type=="task"){
				txt=" created a task";
			}

			if (obj.attachment.type=="request"){
				txt=" created a request";
			}
		}
		
		if (obj.metatype=="files"){
			if (obj.attachments.length==1){
				txt=" shared a file";
			}else{
				txt=" shared "+obj.attachments.length+" files"; 
			}
		}

		if (obj.metatype=="system"){
			return "<div class='name'><b class='url username' data-username='"+obj.username+"'>"+name(obj.username)+"</b> "+obj.title+"</div>";
		}else if (obj.title=="note"){
			return "<div class='name ap-xdot'><b class='url username' data-username='"+obj.username+"'>"+name(obj.username)+"</b> shared a note</div>";
		}else if (obj.title=="system"){
			return "<div class='name'><b class='url username' data-username='"+obj.username+"'>"+name(obj.username)+"</b> "+obj.content+"</div>";
		}
		return "<div class='name ap-xdot'><b class='url username' data-username='"+obj.username+"'>"+name(obj.username)+"</b>"+txt+"</div>";
	}


	function getContent(obj){
		if (obj.title=="system"){
			return "";
		}

		if (obj.attachment && obj.attachment.id && obj.attachment.type){
			if (obj.attachment.type=="poll"){
				return "<div class='text'><div class='embed' id='post-embed-"+obj.attachment.gid+"'>"+Poll.embed.html(obj.attachment)+"</div></div>";
			}
			if (obj.attachment.type=="file"){
				return getRealContent(obj)+"<div class='text'><div class='embed' id='post-embed-"+obj.attachment.gid+"'>"+FileX.ui.embed(obj.attachment)+"</div></div>";
			}
			if (obj.attachment.type=="task"){
				return getRealContent(obj)+"<div class='text'><div class='embed' id='post-embed-"+obj.attachment.gid+"'>"+Task.ui.embed(obj.attachment)+"</div></div>";
			}
			if (obj.attachment.type=="request"){
				return getRealContent(obj)+"<div class='text'><div class='embed' id='post-embed-"+obj.attachment.gid+"'>"+Request.ui.embed(obj.attachment)+"</div></div>";
			}
		}
		
		if (obj.attachments && obj.attachments.length){
			return getRealContent(obj)+"<div class='text js-files item-post-files'>"+AP.render(obj.attachments, function(e){
				return getFileItemHTML(e);
			})+"</div>";
		}

		if (obj.attachment && !obj.attachment.id && obj.attachment.type=="file"){
			var att=obj.attachment;
			var icon=UI.file.icon(att.name);

			return getRealContent(obj)+"<div class='text'>" +
				"<div class='ifile'>" +
				"	<div class='ifileicon'><img src='"+Client.share_url+"/mimex/"+icon+".png'/></div>" +
				"	<div class='name ap-xdot' onclick=\"Base.file.preview('"+att.src+"');\">"+att.name+"</div>" +
				"	<div class='actions'>" +
				"		<div class='action' onclick=\"Base.file.preview('"+att.src+"');\">Preview</div> &middot; " +
				"		<a class='action' target='_blank' href=\""+att.download+"\">Download</div></a>" +
				"</div>" +
				"</div>";
		}

		return getRealContent(obj);
	}


	function getRealContent(obj){
		if (!obj.content){
			return "<div class='text -content -no-data'></div>";
		}
		return "<div class='text -content'>"+UI.emotion(UI.parse(obj.content))+"</div>";
	}


	function getInfo(obj){
		if (obj.attachment && obj.attachment.id && obj.attachment.type && obj.attachment.type=="request"){
			return "<div class='footer'>" +
				"	<span class='comment url' data-url='requests/show/"+obj.attachment.id+"'><span class='-ap icon-forward'></span> &nbsp; <span class='normal'>View request details</span></span>" +
				"</div>";
		}

		var preview_action="";
		if (obj.attachment && obj.attachment.id && obj.attachment.type){
			if (obj.attachment.type=="poll"){
//				return "<div class='footer'>" +
//					"<span class='comment' onclick=\"Poll.preview('"+obj.attachment.hid+"','"+obj.attachment.token+"');\">Comments <span class='count'>"+obj.attachment.stats.comments+"</span></span> " +
//					" &nbsp; &middot; &nbsp; "+obj.attachment.stats.votes+" " +AP.word.plural("vote", obj.attachment.stats.votes)+
//					" &nbsp; &middot; &nbsp; "+obj.attachment.stats.likes+" " +AP.word.plural("like", obj.attachment.stats.likes)+
//				"</div>";
				preview_action="<span class='a action std' onclick=\"Poll.preview('"+obj.attachment.hid+"','"+obj.attachment.token+"');\">Preview</span> &nbsp; &middot; &nbsp; ";

			}else if (obj.attachment.type=="file"){
				// return "<div class='sep-15'></div>";
				preview_action="<span class='a action std' onclick=\"FileX.preview('"+obj.attachment.hid+"','"+obj.attachment.token+"');\">Preview</span> &nbsp; &middot; &nbsp; ";
			}
		}



		var like_action="<span class='a action std' onclick='Post.like(this);'>Like</span>";
		var me="";
		var who="<span class='subaction pointer' onclick=\"Like.who('"+obj.hid+"','"+obj.token+"');\">"+obj.stats.likes+" "+AP.word.plural("like",obj.stats.likes)+"</span>";

		if (parseInt(obj.liked)){
			like_action="<span class='a action std unlike' onclick='Post.like(this);'>Unlike</span>";
			me=" &nbsp;&middot;&nbsp; You liked it";
		}

		return "<div class='footer'> <span class='comment' onclick='Post.comment.show(this);'> Comments <span class='count'>"+(obj.stats.comments)+"</span> </span> &nbsp; &middot; &nbsp; "+(preview_action)+" <div class='like inline'> "+(Like.reaction.getReactionButton(obj))+" </div> <div class='post-reactions'> "+(Like.reaction.getReactions(obj))+" </div> </div>";
	}


	/**
	 * Create a auto post form
	 * ---
	 * @param obj
	 * @param opts
	 * @returns {string}
	 */
	function getAutoPostForm(obj, opts) {

		// Poll and File buttons
		var poll_button = "";
		var file_button = "";
		var num_conversions = obj.stats.posts + obj.stats.files;

		if (typeof obj.stats.comments !== "undefined") {
			num_conversions += obj.stats.comments;
		}

		if (isNaN(num_conversions)) {
			num_conversions = 0;
		}

		if (opts.poll && opts.poll === 1){
			poll_button= "<div class='action' onclick='Post.addPoll(this);'>" +
				"	<span class='-ap icon-equalizer'></span>" +
				"	<span class='info'><span>Thêm bình chọn</span></span>" +
				"</div>";
		}

		if (opts.file || opts.file == 0){
			file_button= "<div class='action' onclick='Post.addFile(this);'>" +
				"		<span class='-ap icon-attach_file'></span> Add file" +
				"		<span class='info'><span>Thêm file</span></span>" +
				"	</div>";
		}

		// Skeleton of Post Form
		var html = "<div id='obj-post' class='box -postform' data-hid='" + obj.hid + "' data-token='" + obj.token + "'>" +
			"<div class='user'>" +
			"	<div class='avatar avatar-40 -circled'><div class='image'><img src='" + AP.xthumb(Client.viewer.gavatar) + "'></div></div>" +
			"	<div class='name'>" +
			"		<em>" + Client.viewer.name + "</em>" +
			"		<div class='info'>" + Client.viewer.title + " &middot; @" + Client.viewer.username + "</div>" +
			"	</div>" +
			"</div>" +
			"<div class='form'>" +
			"	<form method='post' action='api/post/post'>" +
			"	<input type='hidden' name='hid' value='" + obj.hid + "'/>" +
			"	<input type='hidden' name='token' value='" + obj.token + "'/>" +
			"	<input type='hidden' name='title' value='note'/>" +
			"	<div class='textarea'>" +
			"		<div class='rg'></div><div class='r'></div>" +
			"		<div class='real real-editor'>" +
			"			<textarea name='content' placeholder='" + opts.placeholder + "'></textarea>" +
			"		</div>" +
			"	</div>" +
			"	<div class='real'>" +
			"		<div class='buttons xo'>" +
			"			<div class='button -rounded -cta left' onclick='Post.form.submit(this);'>Post now</div>" +
			"			<div class='cancel right' onclick='Post.form.hide(this);'><span class='-ap icon-cross2'></span> &nbsp; Cancel</div>" +
			"		</div>" +
			"	</div>" +
			"	</form>" +
			"</div>" +
			"<div class='actions'>" + poll_button + file_button +"</div>" +
			"</div>" +
			"<div class='postnform'>" +
			"	<div class='postbox-header'><span class='post-counter-" + obj.hid + "'>" + num_conversions + "</span> thảo luận</div>" +
			"	<div class='list -posts' id='obj-posts' data-origin_hid='"+obj.hid+"'></div>" +
			"	<div class='postbox-loadmore' onclick='Post.loadMore(this);'>Load previous posts</div>" +
			"</div>";

		return html;
	};
	
	
	function getFileItemHTML(e){
		var att=e;
		var icon=UI.file.icon(att.name);

		return "<div class='js-file-item'> <div class='ifile'> <div class='ifileicon'><img src='"+(Client.share_url)+"/mimex/"+(icon)+".png'/></div> <div class='name ap-xdot' onclick='Base.file.preview(\""+(att.src)+"\")'>"+(att.name)+"</div> <div class='actions'> <div class='action' onclick='Base.file.preview(\""+(att.src)+"\")'>Preview</div> &nbsp;&middot;&nbsp; <a class='action' target='_blank' href='"+(att.download)+"'>Download</a> </div> </div> </div>";
	}

};




Post.socket=new function __PostSocket(){
	this.prepend=function(post, origin){
		if ($("#obj-posts").length && $("#obj-posts").data("origin_hid")==origin.hid){
			Post.insert(post, "#obj-posts", true);	
		}
	};
	
	this.append=function(post, origin){
		if ($("#obj-posts").length && $("#obj-posts").data("origin_hid")==origin.hid){
			Post.insert(post, "#obj-posts", false);
		}
	};
};







Post.form=new function __PostForm(){
	this.init=function(canvas){
		$('textarea[name="content"]', canvas).autoExpand();
		Tag.user($('textarea[name="content"]', canvas), Client.people);

		$(canvas+" textarea").on("input change blur", function(){
			var val=$(this).val();
			if (val && val.length){
				$(this).closest(".-postform").addClass("writing");
			}else{
				$(this).closest(".-postform").removeClass("writing");
			}
		});

	};

	this.submit=function(ref){
		Form.submitFrom(ref, function(code){
			if (!code.good()){
				return AP.alertError(code.message)
			}
			UI.flash("The post was saved ...");
			var $p=$(ref).closest(".form");
			$p.find("textarea").val("").change();

			AP.fire("new-post-"+code.origin.hid, [code.post, code.origin]);
			AP.fire("new-post", [code.post, code.origin]);
		});
	};


	this.hide=function(ref){
		var $p=$(ref).closest(".form");
		var val=$.trim($p.find("textarea").val());
		if (val && val.length){
			return AP.confirm("Are you sure that you want to discard this post?", function(){
				$p.find("textarea").val("");
				$p.removeClass("writing");
				AP.hideAlert();
			});
		}
		$p.removeClass("writing");
	};

};Post.comment=new function __PostComment(){
	this.show=function(ref){
		var $canvas=$(ref).closest(".post");
		if (!$canvas.hasClass("__inited")){
			$canvas.addClass("__inited");
			var obj=$canvas.data("object");
			Comment.auto("#post-comments-"+obj.id, obj,{focus: true});
		}
		
		var $box=$canvas.find(".post-comments");
		if ($box.is(":visible")){
			$box.hide();
			return;
		}
		
		
		$box.show();
		if (!Client.native){
			$box.find("textarea").focus();
		}
		
		setTimeout(function(){
			$box.slideDown(200);
		});
	};
};var Like=new function __Like(){
	this.like=function(hid, token, callback, error_callback){
		AP.post("api/like/like",{hid: hid, token: token}, function(code){
			if (!code.good()){
				if (error_callback){
					error_callback(code);
				}
				return AP.alertError(code.message);
			}
			
			callback(code.origin, code.like);
		});
		
	};
	
	
	this.unlike=function(hid, token, callback, error_callback){
		AP.post("api/like/unlike",{hid: hid, token: token}, function(code){
			if (!code.good()){
				if (error_callback){
					error_callback(code);
				}
				return AP.alertError(code.message);
			}
			
			callback(code.origin, code.like);
		});
		
	};
	
	
	this.react=function(ref, reaction, callback){
		var $box=$(ref).closest(".reaction-box");
		var hid=$box.data("hid");
		var token=$box.data("token");
		
		var endpoint="";
		if ($box.data("objtype") && $box.data("objtype")=="messages"){
			endpoint=Base.domain("message")+"/ajax/";
		}
		
		UI.ajaxShow();
		AP.post(endpoint+"api/like/reaction",{hid: hid, token: token, reaction: reaction}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			if (callback){
				callback(code.origin, code.like);	
			}else{
				safeReactionUpdate(ref, code.origin);
			}
		});
	};
	
	
	this.who=function(hid, token){
		AP.post("api/like/who", {hid: hid, token: token}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.user.list("People who like this", code.users);
		});
	};
	
	
	this.response=function(origin){
		if (!origin){
			return;
		}
		
		if (origin.type=="comment"){
			return Comment.onLike(origin);
		}
		
		
		$(".likecount-"+origin.gid).each(function(){
			var val=parseInt($(this).text());
			val++;
			$(this).html(val);
		});
	};
	
	
	this.explain=function(obj){
		if (!obj){
			$.log("Error explaining like.explain");
			return;
		}
		
		if (obj.type=="file"){
			$.log(obj);
		}
		
		obj.stats.likes=parseInt(obj.stats.likes);
		if (obj.stats.likes && (!obj.likes || !obj.likes.length)){
			return simpleCase(obj);
		}
		
		var text="";
		
		if (obj.stats.likes){
			var last=getThree(obj.likes);
			if (obj.liked){
				last.unshift(Client.viewer);
			}
			
			
			if (obj.stats.likes > last.length){
				text= "<span class='lb2'><span class='-ap icon-thumb_up'></span></span> &nbsp; "+getExplain(last, true)+" and <span class='sharper pointer' onclick=\"Like.who('"+obj.hid+"','"+obj.token+"');\">"+(obj.stats.likes-3)+" other</span> liked it";
			}else{
				text= "<span class='lb2'><span class='-ap icon-thumb_up'></span></span> &nbsp; "+getExplain(last, false)+" liked it";
			}
				
		}
		
		if (text && text.length){
			 text=" &nbsp; &middot;  &nbsp; "+text;
		}
		
		return text;
	};
	
	
	function simpleCase(obj){
		var like_promotion="<em class='likecount-"+obj.gid+"'>"+obj.stats.likes+"</em> " +AP.word.plural("like", obj.stats.likes)+"";
		
		return " &nbsp; &middot;  &nbsp; <span class='lb2'><span class='-ap icon-thumb_up'></span></span>&nbsp; <span class='link pointer' onclick=\"Like.who('"+obj.hid+"','"+obj.token+"');\">"+like_promotion+"</span>"+
		(obj.liked?" <span class='ilikeit'>&nbsp;&middot&nbsp; You liked it</span>":"");
	}
	
	
	function getExplain(last, has_more){
		var text="";
		for (var i=0; i<last.length; i++){
			var p=last[i];
			if (p && p.id==Client.viewer.id){
				text+="<span class='sharper url username' data-username='"+p.username+"'>You</span>";
			}else{
				text+="<span class='sharper url username' data-username='"+p.username+"'>"+name(p)+"</span>";
			}
			
			
			if (i<last.length-1){
				if (i==last.length-2 && !has_more){
					text+=" and ";
				}else{
					text+=", ";
				}
				
				
			}
		}
		
		return text;
		
	};
	
	
	function getThree(likes){
		if (!likes){
			return [];
		}
		
		var r=[];
		for (var i=0; i<likes.length; i++){
			var id=likes[i];
			if (id!=Client.viewer.id){
				r.push(id);
			}
			
			if (r.length>=3){
				break;
			}
		}
		
		var ps=[];
		for (var i=0; i<r.length; i++){
			var p=People.getID(r[i]);
			if (p){
				ps.push(p);
			}
		}
		
		return ps;
	};
	
	
	function safeReactionUpdate(ref, origin){
		return Like.reaction.onUpdate(ref, origin);
	};
	
};







Like.reaction=new function __LikeReaction(){
	this.getReactionButton=function(obj){
		var reactions=obj.reactions;
		if (!reactions){
			reactions=[];
		}
		
		var icon="<span class='reaction-default pointer'><span class='-ap icon-thumb_up'></span>&nbsp; Like</span>";
		var reacted=false;
		
		for (var i=0; i<reactions.length; i++){
			if (parseInt(reactions[i].user_id)==parseInt(Client.viewer.id)){
				reacted=true;
				icon="<span class='reacted re-"+(reactions[i].reaction)+"'> <span class='reaction-me'><img src='"+(Client.share_url)+"/reactions/"+(reactions[i].reaction)+".svg'/></span> &nbsp; <b>"+(AP.word.capitalize(reactions[i].reaction))+"</b> </span>";
				
				break;
			}
		}

		return "<div class='reaction-wrapper'> "+(icon)+" <div class='reaction-area'> "+(this.getPopup(obj))+" </div> </div>";
	};
	
	
	this.getReactionIcon=function(obj){
		var icon="<span class='-ap icon-insert_emoticon'></span>";
		var reacted=false;
		
		for (var i=0; i<obj.reactions.length; i++){
			if (parseInt(obj.reactions[i].user_id)==parseInt(Client.viewer.id)){
				reacted=true;
				icon="<span class='reaction-me'><img src='"+(Client.share_url)+"/reactions/"+(obj.reactions[i].reaction)+".svg'/></span>";
				break;
			}
		}
		
		return "<div class='reaction-wrapper'> "+(icon)+" <div class='reaction-area'> "+(this.getPopup(obj))+" </div> </div>";
	};
	
	
	
	this.getReactions=function(obj){
		var reactions=obj.reactions;
		if (!reactions){
			reactions=[];
		}
		
		var list=getReactionOverview(reactions);
		var reactions_html=AP.render(list, function(e){
			var users=AP.render(e.users, function(u){
				return "<div class='reaction-user ap-xdot'>"+(u.name)+"</div>"; 
			});
			
			return "<div class='reaction-item'> <div class='reaction-img'> <img src='"+(Client.share_url)+"/reactions/"+(e.reaction)+".svg'/> <span class='reaction-count'>"+(e.count)+"</span> <div class='reaction-users'>"+(users)+"</div> </div> </div>";
		});
		
		var html= "<div class='reaction-list rc-"+(reactions.length)+"' title='Reactions'>"+(reactions_html)+"</div>";
		return html;
	};
	
	
	this.getPopup=function(obj){
		return "<div class='reaction-box' data-hid='"+(obj.hid)+"' data-token='"+(obj.token)+"' data-objtype='"+(obj.type)+"'> <div class='reaction-icon' onclick='Like.react(this, \"like\");'> <label>Like</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/like.svg'></div> </div> <div class='reaction-icon' onclick='Like.react(this, \"love\");'> <label>Love</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/love.svg'></div> </div> <div class='reaction-icon' onclick='Like.react(this, \"haha\");'> <label>Haha</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/haha.svg'></div> </div> <div class='reaction-icon' onclick='Like.react(this, \"wow\");'> <label>Wow</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/wow.svg'></div> </div> <div class='reaction-icon' onclick='Like.react(this, \"sad\");'> <label>Sad</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/sad.svg'></div> </div> <div class='reaction-icon' onclick='Like.react(this, \"angry\");'> <label>Angry</label> <div class='reaction-img'><img src='"+(Client.share_url)+"/reactions/angry.svg'></div> </div> </div>";
	};
	
	
	/**
	 * @desc Action call after successfully update reaction
	 */
	this.onUpdate=function(ref, origin){
		var $box=$(ref).closest(".reaction-box");
		
		// Reaction on comment
		if (origin.type && origin.type=="comment"){
			$box.closest(".comment").find(".comment-reactions").html(this.getReactions(origin));
			$box.closest(".comment").find(".reaction-wrapper").replaceWith(this.getReactionButton(origin));
		}else if (origin.type && origin.type=="post"){
			$box.closest(".footer").find(".post-reactions").html(this.getReactions(origin));
			$box.closest(".footer").find(".reaction-wrapper").replaceWith(this.getReactionButton(origin));
		}else if (origin.type && origin.type=="update"){
			$box.closest(".update").find(".update-reactions").html(this.getReactions(origin));
			$box.closest(".js-update-actions").find(".reaction-wrapper").replaceWith(this.getReactionButton(origin));
		}else{
			AP.sys.trigger("reaction", [ref, origin]);
		}
	};
	
	
	/**
	 * @desc Embed the object reaction quickly
	 */
	this.embed=function(obj, canvas, opts){
		$(canvas).html("<div class='reaction-embed-button'></div><div class='reaction-embed-list'></div>").addClass("reaction-embed");
		$(canvas+" .reaction-embed-button").html(Like.reaction.getReactionButton(obj));
		$(canvas+" .reaction-embed-list").html(Like.reaction.getReactions(obj));
	};
	
	
	
	
	function getReactionOverview(reactions){
		var u={};
		for (var i=0; i<reactions.length; i++){
			var r=reactions[i];
			
			if (u[r.reaction]){
				u[r.reaction].users.push(r.user_id);
			}else{
				u[r.reaction]={reaction: r.reaction, users: [r.user_id]}
			}
		}
		
		var list=[];
		for (var key in u){
			u[key].count=u[key].users.length;
			list.push(u[key]);
		}
		
		for (var i=0; i<list.length; i++){
			list[i].users=People.getList(list[i].users);
		}
		return list;
	};
	
};
var Pin=new function __Pin(){
	this.pin=function(object, callback){
		AP.post("api/pin/pin",{hid: object.hid, token: object.token}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			object.pin=1;
			UI.flash("Content pinned ...");
			
			updateDisplay(object, code.pin);
			
			
			
			if (callback){
				callback(object, code.pin);	
			}
		});
	};
	
	
	this.unpin=function(object, callback){
		AP.post("api/pin/unpin",{hid: object.hid, token: object.token}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			object.pin=0;
			UI.flash("Content unpinned ...");
			
			updateDisplay(object, code.pin);
			
			if (callback){
				callback(object, code.pin);	
			}
		});
	};
	
	
	
	this.pinUpdate=function(ref){
		var $this=$(ref);
		var $canvas=$this.closest('.update');
		var object=$canvas.data('object');
		
		this.pin(object);
	};
	
	
	this.unpinUpdate=function(ref){
		var $this=$(ref);
		var $canvas=$this.closest('.update');
		var object=$canvas.data('object');
		
		this.unpin(object);
		
	};
	
	
	this.removePin=function(ref){
		$("#home-pins .li").each(function(){
			if ($(this).data("ref")==ref.gid){
				$(this).remove();
			}
		});
	};
	
	
	
	function updateDisplay(object, pin){
		var $canvas=$("#update-"+object.id);
		
		if ($canvas && $canvas.length){
			$canvas.each(function(){
				Update.update(object, $(this));		
			});
		}
		
		if (pin){
			if (parseInt(object.pin)){
				Update.home.updatePin(pin, false);
			}else{
				Update.home.updatePin(pin, true);
			}
		}
	};
};var Poll=new function __Poll(){
	this.getForm=function(url, callback){
		this.form.create(url, {type: 'poll'}, callback);
	};
	
	
	this.hideForm=function(){
		Form.hide("#fly-poll-fx");
	};
	
	
	this.create=function(params, callback){
		
		
		params.type="poll";
		this.form.create("api/survey/create", params, function(form){
			UI.ajaxShow();
			AP.submit(form, function(code){
				UI.ajaxHide();
				Poll.form.hide();
				callback(code);
				
				if (params && params.gid){
					AP.fire("new-poll-"+params.gid, [code.poll, code.log, _origin]);
	                AP.fire("new-poll", [code.poll, code.log, _origin]);
				}
			});
		});
	};
	
	
	this.edit=function(){
		Poll.form.edit(Poll.ui.current, function(poll){
			Poll.ui.display(poll);
		});
	};
	
	
	this.vote=function(hid, token, answers, callback, error_callback){
		answers.hid=hid;
		answers.token=token;
		
		AP.post("api/survey/vote", answers, function(code){
			if (!code.good()){
				AP.alertError(code.message);
				if (error_callback) error_callback();
				return;
			};
			
			callback(code.survey);
		});
	};
	
	
	this.preview=function(hid, token){
		AP.ajaxShow();
		AP.post("api/survey/get",{hid: hid, token: token}, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				AP.alertError(code.message);
				return;
			}
			
			Poll.ui.display(code.survey);
		});
	};
};



Poll.ui=new function __PollUI(){
	this.current=null;
	
	this.display=function(poll){
		this.current=poll;
		BC.title(getTitle(poll));
		BC.side(getSide(poll));
		BC.main(getMain(poll));
		BC.show();
		
		Comment.auto("#side-comment-"+poll.id, poll);
		Comment.attachBottom("#bside", poll);
		$("#side-followers").html(BC.ui.followers(poll));
	};
	
	
	
	function getTitle(poll){
		var edit="";
		var export_link = "";
		if (poll.user_id===Client.viewer.id){
			edit=" <span class='a std' onclick='Poll.edit();'>Chỉnh sửa</span> &middot; ";
			export_link = " <a class='std' style='font-size: 11px;' href='" + Client.url + "/survey/export/" + poll.id + "'>Xuất ra excel</a> &middot; ";
		}
		
		var extra="Hoạt động cuối lúc "+UI.simpleTime(poll.last_update);
		if (poll.expired && parseInt(poll.expired)){
			extra="Hết hạn vào "+UI.simpleDate(poll.expired);
		}
		
		return "" +
		"<div class='image'><img src='"+Client.share_url+"/32/chart.png'></div>"+
		"<h1><span class='sub'>Poll:</span> "+poll.name+"</h1>" +
		"<h3>Created by <span class='a std url' data-username='"+poll.username+"'>"+name(poll.username)+"</span> &middot; "+ edit + export_link + "" + UI.simpleTime(poll.since)+" &middot; "+extra+"</h3>" +
		"<div class='actions align-right'>" +
		"	<div class='stat'><b>"+poll.stats.votes+"</b> votes</div>" +
	"</div>";
	};
	
	
	function getSide(poll){
		return "<div id='side-followers' class='section'></div> <div id='side-comment-"+poll.id+"'></div>";
	};
	
	
	function getMain(poll){
		return "<div class='embed-20 fill scroll-y'><div class='in'>"+Poll.embed.html(poll, true)+"</div></div>";			
	};
};Poll.form=new function __PollForm(){
    this.maxOpts = 20;
    
	this.create=function(url, data, callback){
	    // get end of day
	    var t = new Date();
	    t.setSeconds(59);
        t.setMinutes(59);
        t.setHours(23);
        var timeEndOfDay = Math.floor(t.getTime()/1000);
	    
		var form=Form.create('fly-poll-fx',{'action': url})
			.row(
				Form.label({label: "Poll name *",sublabel: "the name of the poll"}),
				Form.input({name: 'name', "placeholder":"Choose a short name for the poll"})
			)
//			.row(
//				Form.label({label: "Multiple selection?",sublabel: "do you allow multiple selections?"}),
//				Form.input({name: 'ptype', type:'select', "placeholder":"The content of the email", options:[
//                     {value: 0, 'label':'Each person could only select a single option'},
//                     {value: 1, 'label':'Allow multiple selections'},
//                ]})
//			)
			.noRow("Poll options (max of " + Poll.form.maxOpts + " options)")
			.row(
				Form.label({label: "Option 1"}),
				Form.input({name: 'option-1', type:'text', "placeholder":"Option 1", "class":"__choice"})
			)
			.addClass("pollopt")
			.row(
				Form.label({label: "Option 2"}),
				Form.input({name: 'option-2', type:'text', "placeholder":"Option 2", "class":"__choice"})
			)
			.addClass("pollopt")
			.row(
				Form.label({label: "Option 3"}),
				Form.input({name: 'option-3', type:'text', "placeholder":"Option 3", "class":"__choice"})
			)
			.addClass("pollopt")
			.row(
				Form.label({label: "Option 4"}),
				Form.input({name: 'option-4', type:'text', "placeholder":"Option 4", "class":"__choice"})
			)
			.addClass("pollopt")
			.rowHTML("<div class='link'>-- More advanced options --</div>")
			.wrap("Advanced poll options","#advopts")
			.row(
				Form.label({label: "Người theo dõi",sublabel: "Thành viên theo dõi bình chọn này. Bạn có thể để trống."}),
				Form.input({name: 'usernames', "placeholder":"Sử dụng @ tag thành viên theo dõi", role:"tag"})
			)
			.row(
				Form.label({label: "Hình ảnh",sublabel: "Đăng hình ảnh cho bình chọn"}),
				Form.input({name: 'image', type:"file"})
			)
			.row(
                Form.label({label: "Thời hạn *",sublabel: "Để trống nếu không có thời hạn bình chọn"}),
                Form.input({name: 'expcheckbox', "placeholder":"", type:"checkboxes", 
                    options:[{label:"Bình chọn có thời hạn", value:0, name: "expcheck"}]})
            )
			.rowHidden(
                Form.label({label: "Thời điểm hết hạn *"}),
                Form.input({name: 'expired', type: 'datetime', "role":"date", "placeholder":"Chọn thời điểm bình chọn hết hạn"}).value(timeEndOfDay)
            )
			.wrap()
			.buttons([
			     {label: "Create a new poll", action: function(){
			    	 var callback=$("#fly-poll-fx").data("callback");
			    	 callback("#fly-poll-fx");
			     }, style: 'ok -success -rounded bold'},
			     {label: "Cancel", action: function(){
			    	 Form.hide("fly-poll-fx");
			     }, style:'cancel -passive-2 -rounded'}
			])
			.hiddens(data)
			.render(function(form){
				form.elem(".link").click(function(){
					$(this).hide();
					$("#advopts").show();
				});
				
				$("#fly-poll-fx").data("callback", callback);
				$("#fly-poll-fx").on("focus", ".input input.__choice", function(){
					var $next=$(this).closest(".row").next(".pollopt");
					if (!$next  || !$next.length){
						var index= $("#fly-poll-fx .row .input input.__choice").length+1;
						if (index > Poll.form.maxOpts){
							return;
						}
						
						$("#fly-poll-fx .row input.__choice").last().closest(".row").after("<div class='row pollopt'><div class='label'>Option "+index+"</div><div class='input data'><input class='std __choice' type='text' name='option-"+index+"' placeholder='Option "+index+"'></div><div class='clear'></div></div>"); 
					}
				});
				
				$('input[name="expcheckbox[]"]').change(function(){
	                var $row = $(this).closest(".row");
	                var $next = $row.next(".row");
	                
	                if($('input[name="expcheckbox[]"]').is(':checked')) {
	                    $next.show();
	                } else {
	                    $next.hide();
	                }
	            });
			});
		
		Form.pop({width: 720, label: 'Create a poll'
		}).setForm(form).show().focus('name');
	};
	
	
	this.edit=function(poll, callback){
		if (!poll){
			return;
		}
		var data={hid: poll.hid, token:poll.token};
		
		var form=Form.create('fly-poll-fx',{'action': "api/survey/edit"})
		.row(
			Form.label({label: "Poll name *",sublabel: "the name of the poll"}),
			Form.input({name: 'name', "placeholder":"Choose a short name for the poll"}).value(poll.name)
		)
		.row(
			Form.label({label: "Cover image",sublabel: "Upload poll's cover image (not required)"}),
			Form.input({name: 'image', type:"file"})
		)
		.row(
            Form.label({label: "Thời hạn *",sublabel: "Để trống nếu không có thời hạn bình chọn"}),
            Form.input({name: 'expcheckbox', "placeholder":"", type:"checkboxes", 
                options:[{label:"Bình chọn có thời hạn", value:0, name: "expcheck"}]})
        )
        .rowHidden(
            Form.label({label: "Thời điểm hết hạn *"}),
            Form.input({name: 'expired', type: 'datetime', "role":"date", "placeholder":"Chọn thời điểm bình chọn hết hạn"}).value(poll.expired)
        )
		.buttons([
		     {label: "Edit poll", action: function(){
		    	 Form.submit("#fly-poll-fx", function(code){
		    		 if (!code.good()){
		    			 return AP.alertError(code.message);
		    		 }
		    		 
		    		 Form.hide("#fly-poll-fx");
		    		 callback(code.poll);
		    	 })
		     }, style: 'ok -success -rounded bold'},
		     {label: "Cancel", action: function(){
		    	 Form.hide("fly-poll-fx");
		     }, style:'cancel -passive-2 -rounded'}
		])
		.hiddens(data)
		.render(function(form){
		    if(typeof poll.expired !== 'undefined' && poll.expired != 0) {
		        $('input[name="expcheck"]').prop('checked', true);
		        var $expcheckRow = $('input[name="expired-date"]').closest(".row");
		        $expcheckRow.show();
		    }
		    $('input[name="expcheck"]').change(function(){
                var $row = $(this).closest(".row");
                var $next = $row.next(".row");
                
                if($('input[name="expcheck"]').is(':checked')) {
                    $next.show();
                } else {
                    $next.hide();
                }
            });
		});
		
		Form.pop({width: 720, label: 'Edit poll'
		}).setForm(form).show().focus('name');
	};
	
	
	
	this.hide=function(){
		Form.hide("fly-poll-fx");
	};
	
	this.submit=function(success_callback){
		Form.submit("#fly-poll-fx", function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			Poll.form.hide();
			success_callback(code);
		});
	};
	
	
	this.insertData=function(form, data){
		var html="";
		for (var key in data){
			html+="<input type='hidden' name='"+key+"' value='"+data[key]+"'/>";
		}
		
		if (!$(".__insert", form).length){
			$("<div class='hidden __insert'></div>").appendTo(form);
		}
		
		$(".__insert", form).html(html);
	};
};/**
 * Poll Embed
 * Used to embed form in another applications
 * ---
 */
Poll.embed = new function __PollEmbed() {

	/**
	 * Poll Embed HTML
	 * Everything about HTML on here.
	 * ---
	 * @param {object} poll
	 * @param {boolean} on_popup
	 * @returns {string}
	 */
	this.html = function (poll, on_popup) {
		var answer = null;
		if (parseInt(poll.voted)) {
			answer = poll.vote.answers[0];
		}

		var question = poll.questions[0];
		var poll_voted_class = answer ? " -voted" : "";
		var poll_voted_title = answer ? " title='You voted on this poll'" : "";
		var poll_cover = (poll.cover && poll.cover.length) ? "<div class='cover'><img src='"+(poll.cover)+"'/></div>" : "";
		var poll_options = (question.choices.length > 0) ? AP.render(question.choices, function (option, index) {
			return getChoice(option, index, question, answer);
		}) : "";
		var poll_submit = "";

		if (parseInt(poll.expired) && parseInt(poll.expired) < AP.time.now()) {
			poll_submit = "<div class='submit'> <div class='txt red' style='font-style:normal'>The poll is expired and cannot accept votes anymore.</div> </div>";
		} else {
			if (!parseInt(poll.voted)) {
				poll_submit = "<div class='submit'> <div class='button -success -rounded' onclick='survey_vote_now(this);'>Vote now</div> </div>";
			} else {
				poll_submit = "<div class='submit'><div class='txt'>You already voted at <span>" + UI.simpleTime(poll.vote.since) + "</span> " +
					(on_popup ? "" : "&middot; <span class='a std action' onclick=\"Poll.preview('" + poll.hid + "','" + poll.token + "');\">Voting details</span>") +
					"</div></div>";
			}
		}

		return "<div class='poll -embed box box-survey -survey-question "+(poll_voted_class)+"' data-hid='"+(poll.hid)+"' data-token='"+(poll.token)+"' "+(poll_voted_title)+"> <div class='title'>"+(question.name)+"</div> "+(poll_cover)+" <div class='choices'> "+(poll_options)+" <input type='hidden' name='answer-0' value='-1'/> </div> "+(poll_submit)+" </div>";
	};


	this.update = function (poll, $canvas) {
		$canvas.replaceWith(this.html(poll));
	};


	function getChoice(choice, choice_index, question, answer) {
		if (answer === null) {
			return "<div class='choice relative' onclick='survey_select_choice(this)' data-token='" + choice.key + "'><div class='-radio -unchecked -big pull-left'></div> <div class='-text'>" + choice.text + "</div></div>";
		} else {
			var count = parseInt(choice.count);
			var total = 0;
			for (var i = 0; i < question.choices.length; i++) {
				total += parseInt(question.choices[i].count);
			}
			var percent = 0;
			if (total > 0) {
				percent = Math.floor(count * 100 / total);
			}

			var bar = "<div class='process-bar'>" +
				"<div class='-process'><div class='-bar -bg-success' style='width:" + percent + "%'></div></div> " +
				"<div class='-text'><b>" + percent + "%</b> (" + count + " " + AP.word.plural("vote", count) + ")</div>" +
				"</div>";

			if (parseInt(answer) === choice_index) {
				return "<div class='choice relative voted -checked' data-token='" + choice.key + "'><div class='-radio -checked -big pull-left'></div> <div class='-text'>" + choice.text + "</div>" + bar + "</div>";
			} else {
				return "<div class='choice relative voted' data-token='" + choice.key + "'><div class='-radio -unchecked -big pull-left'></div> <div class='-text'>" + choice.text + "</div>" + bar + "</div>";
			}
		}

	};
};


function survey_select_choice(ref) {
	var $ref = $(ref);
	$ref.closest(".choices").find(".choice").removeClass("-checked").find(".-radio").removeClass("-checked").addClass("-unchecked");
	$ref.closest(".choices").find("input").val($($ref.parent().find('.choice')).index($ref));
	$ref.find(".-radio").removeClass("-unchecked").addClass("-checked");
	$ref.addClass("-checked");
};


function survey_vote_now(ref) {
	var $canvas = $(ref).closest(".box-survey");
	var hid = $canvas.data("hid");
	var token = $canvas.data("token");

	var answers = {};


	$canvas.find("input").each(function () {
		answers[$(this).attr("name")] = $(this).val();
	});

	if ($canvas.ajaxOn()) {
		return;
	}


	$canvas.ajaxShow();

	Poll.vote(hid, token, answers, function (poll) {
		$canvas.ajaxHide();
		Poll.embed.update(poll, $(ref).closest(".box-survey"));
	}, function () {
		$canvas.ajaxHide();
	});
};var FileX = new function __File(){
	this.inited=false;
	this.pickerCallback=null;	
	this.fileTypes = {
			'GDOC': '0',
			'GXLS': '1',
			'GPPT': '2',
			'GDRAW': '3',
			'GFILE': '4'
		};
	
	
	this.create=function(origin, callback){
		FileX.pick(function(file){
			if (file.type=="dropbox" || file.type=="onedrive" || file.type=="google"){
				FileX.save(file, {hid: origin.hid, token: origin.token}, function(_origin, file, log){
					// Handle file add
					FileX.hideForm();
					UI.flash("The file was saved ...");
					AP.fire("new-file-"+_origin.gid, [file, log, _origin]);
					AP.fire("new-file", [file, log, _origin]);
					
					if (callback){
						callback(file, log, _origin);
					}
				});
			}else if (file.type=="upload"){
				var data={hid: origin.hid, token: origin.token};
				if (AP.isset("Channel")){
					// data.channel_id=Channel.channel.id;
				}
				FileX.upload.now(file, data, function(_origin, file, log){
					//$.log([origin, file, log]);
					FileX.hideForm();
					UI.flash("The file was uploaded ...");
					AP.fire("new-file-"+_origin.gid, [file, log, _origin]);
					AP.fire("new-file", [file, log, _origin]);
					
					if (callback){
						callback(file, log, _origin);
					}
				});
			} else if(file.type == "txt") {
				FileX.upload.txt({hid: origin.hid, token: origin.token, filename: file.name, filecontent: file.content}, function(_origin, file, log) {
					FileX.hideForm();
					UI.flash("The file was created!");
					AP.fire("new-file-" + _origin.gid, [file, log, _origin]);
					AP.fire("new-file", [file, log, _origin]);
					
					if (callback){
						callback(file, log, _origin);
					}
				});
			}
		});
	};
	
	
	this.pick=function(callback){
		if (!this.inited){
			this.inited=true;
			this.initPicker();
		}
		
		this.pickerCallback=callback;
		
		var domain = "//" + CONFIG.home_src;
		var html="" +
			"<div class='title'>Select a file <div class='-close' onclick='AP.closeDialog(this);'></div></div>"+
			"<div class='list list-actions -border'>" +
				"<div class='li item unselectable'>" +
				"   <div class='-icon -big'><span class='-ap icon-cloud_upload'></span></div>" +
				"   Browse file from computer <div class='sub'>Click to browse and upload the file</div>" +
				"   <div class='full-mask fileapi' id='file-upload-input-inv'><input type='file' name='file' onchange='file_local_change(this, FileX.localSelect);'/></div>" +
				"</div>" +
				"<div class='li item unselectable' style='display: none;'>" +
				"   <div class='-icon -big'><span class='-ap icon-dropbox2'></span></div>" +
				"   Pick from Dropbox <div class='sub'>You can select a file from your Dropbox account</div>" +
				"   <div class='full-mask fileapi'><iframe src='"+domain+"/filepick/dropbox' frameBorder='0' width='100%' height='100%' allowTransparency='true'></iframe></div>" +
				"</div>" +
				"<div class='li item unselectable' style='display: none;'>" +
				"   <div class='-icon -big'><span class='-ap icon-google-drive'></span></div>" +
				"   Pick from Google Drive <div class='sub'>You can select a file from your Google Drive account</div>" +
				"   <div class='full-mask fileapi'><div style='width:100%; height:100%' onclick='FileX.replaceGdriveFrame();'></div></div>" +
				"</div>" +
				"<div class='li item unselectable' style='display: none;'>" +
				"   <div class='-icon -big'><span class='-ap icon-onedrive'></span></div>" +
				"   Pick from Microsoft OneDrive <div class='sub'>You can select a file from your OneDrive account</div>" +
				"   <div class='full-mask fileapi'><iframe src='"+domain+"/filepick/onedrive' frameBorder='0' width='100%' height='100%' allowTransparency='true'></iframe></div>" +
				"</div>" +
				"<div class='li -sep' style='display: none;'></div>" +
				"<div class='li item unselectable' onclick='FileX.createTextFile();' style='display: none;'>" +
				"   <div class='-icon -big'><span class='-ap icon-add_circle_outline'></span></div>" +
				"   Create a text document <div class='sub'>Create a new document file directly in WorkTime</div>" +
				"</div>" +
				"<div class='li item unselectable' onclick='FileX.createGDoc();' style='display: none;'>" +
				"   <div class='-icon -big'><span class='-ap icon-add_circle_outline'></span></div>" +
				"   Create a new file via Google Docs <div class='sub'>Create a collaborative file (document, presentation, spreadsheet) via Googe Docs</div>" +
				"   <div class='full-mask fileapi'><iframe id='gjs-iframe' src='"+domain+"/filepick/gdoc' frameBorder='0' width='0' height='0' allowTransparency='true'></iframe></div>" +
				"</div>" +
			"</div>";
		
		AP.customDialog(html, "custom-selection").width(600).style("-full").show();
	};
	
	
	this.unpick=function(){
		AP.closeDialog("#custom-selection");
	};
	
	
	
	this.pick2Save=function(base, callback){
		FileX.pick(function(file){
			if (file.type=="dropbox" || file.type=="onedrive" || file.type=="google"){
				FileX.save(file, {hid: base.hid, token: base.token}, function(origin, file, log){
					UI.flash("Upload successfully!");
					AP.fire("upload-"+base.gid, [origin, file, log]);
					FileX.unpick();
					if (callback){
						callback(origin, file, log);
					}
				});
			}else if (file.type=="upload"){
				var data={hid: base.hid, token: base.token};
				
				FileX.upload.now(file, data, function(origin, file, log){
					//$.log(base);
					UI.flash("Upload successfully!");
					// AP.xRefresh();
					// AP.fire("upload-"+base.gid, [origin, file, log]);
					FileX.unpick();
					if (callback){
						callback(origin, file, log);
					}
				});
			} else if(file.type == "txt") {
				FileX.upload.txt({hid: base.hid, token: base.token, filename: file.name, filecontent: file.content}, function(origin, file, log) {
					
					UI.flash("The file was created!");
					AP.fire("upload-" + base.gid, [origin, file, log]);
					FileX.unpick();
					if (callback){
						callback(origin, file, log);
					}
				});
			}
		});
	};
	
	
	
	this.hideForm=function(){
		return this.unpick();
	};
	
	
	
	this.save=function(file, data, callback, error_callback){
		for (var key in data){
			file[key]=data[key];
		}
		
		AP.ajaxShow();
		AP.post("api/file/create",file, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.origin, code.file, code.log);
		});
	};
	
	
	
	
	this.preview=function(hid, token){
		AP.ajaxShow();
		AP.post("api/file/get",{hid: hid, token: token}, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				AP.alertError(code.message);
				return;
			}
			
			FileX.display(code.file);
		});
	};

	
	this.inlinePreview=function(file){
		if (!file || !file.src){
			return "";
		}
		
		var src=file.src;
		var download=file.download;
		if (!download){
			download=src;
		}
		
		if (file.image && parseInt(file.image)){
			return "<div class='inline-file-preview' style='padding-left:0px' onclick=\"FileX.quickPreview('"+src+"');\">" +
				"<div class='preview-image'><img src='"+AP.zthumb(src)+"'/></div>" +
			"</div>";
		}
		
		return "<div class='inline-file-preview -line' onclick=\"FileX.quickPreview('"+src+"');\">" +
			"<span class='icon'><span class='-ap icon-uniF10A'></span></span>" +
			"<div class='name ap-xdot'>"+file.name+"</div>" +
			"<a class='download' target='_blank' href='"+download+"'>Download</a>" +
		"</div>";
	};
	
	
	
	this.__cache=null;
	
	this.quickPreview=function(file_src, multiple){
		if (!multiple){
			multiple={};
			this.cache=null;
		}else if (multiple==1 && this.__cache){
			multiple=this.__cache;
		}else{
			this.__cache=multiple;
		}
		
		if (mobile()){
			window.open(getMobileFileURL(file_src));
			return;
		}
		
		if (AP.data.isObject(file_src)){
			BC.show();
			BC.noSide();
			BC.main(FileX.ui.getMain(file_src));
			return;
		}
		
		var is_image=0;
		var ext=UI.file.ext(file_src);
		if (ext=="jpg" || ext=="png" || ext=="bmp" || ext=="jpeg" || ext=="gif"){
			is_image=1;
		}
		
		var file={name: file_src, src: file_src, image: is_image};
		BC.show();
		BC.noSide();
		BC.main(FileX.ui.getMain(file));
		
		// Handle multiple
		$("#bcanvas .-in .mnav").remove();
		
		if (multiple.container && $(multiple.container).find(multiple.filter).length>1){
			var prev=file_src;
			var next=file_src;
			
			$(multiple.container).find(multiple.filter).each(function(index){
				var fid=$(this).data("file");
				
				if (fid==file_src){
					var $prev=$(multiple.container).find(multiple.filter).eq(index-1);
					var $next=$(multiple.container).find(multiple.filter).eq(index+1);
					
					if ($prev.length){
						prev=$prev.data("file");
					}
					
					if ($next.length){
						next=$next.data("file");
					}
					
					return;
				}
			});
			
			$("#bcanvas .-in").append("<span class='mnav -left pointer' onclick=\"FileX.quickPreview('"+(prev)+"', 1);\"><span class='-ap icon-arrow-left2'></span></span> <span class='mnav -right pointer' onclick=\"FileX.quickPreview('"+(next)+"', 1);\"><span class='-ap icon-arrow-right2'></span></span>");
		}
	};
	
	
	this.display=function(file){
		FileX.ui.file=file;
		BC.title(FileX.ui.getTitle(file));
		BC.side(FileX.ui.getSide(file));
		BC.main(FileX.ui.getMain(file));
		BC.show();
		
		Comment.auto("#side-comment-"+file.id, file);
		Comment.attachBottom("#bside", file);
		$("#side-followers").html(BC.ui.followers(file));
	};
	
	
	this.edit=function(hid, token, name){
		Form.edit({type: 'input', action:"api/file/edit", content: name, button:"Edit filename", data:{hid: hid, token:token},"name":"name"}, function(code){
			UI.flash("Filename edited successfully")
			var file=code.file;
			$("#bcanvas .__title h1").html(file.name);
		});
	};
	
	
	this.options=function(){
		var file=FileX.ui.file;
		var actions=[];
		
		var download=file.src;
		if (file.metatype=="" || file.metatype=="upload"){
			download=Client.url+'/files/download?id='+file.id+"&token="+file.token+"&key="+file.src;
		}
		
		actions.push({label: "Download this file", icon: "download", url: download});
		
		if (file.user_id==Client.viewer.id){
			actions.push({label: "Add a new revision", icon: "upload3", action: function(){
				FileX.newRev(file.hid,file.token,file.gid);
			}});
		}
		
		actions.push({label: "Extend preview windows", icon: "open_in_new", action: function(){
			BC.extend();
		}});
		
		actions.push({label: "Share to company's knowledge-base", icon: "documents", action: function(){
			KBase.shareFrom(file);
		}});
		
		
		AP.actionMenu(actions);
	};
	
	
	this.setPrivate=function(hid, token){
		AP.confirm("Are you sure that you want to set this file as <i>private</i>? If this file is set <i>private</i>, you can browse it in <b>Files</b> &rsaquo; <b>My Files</b>", function(){
			UI.ajaxShow();
			AP.post("api/file/setprivate",{hid: hid, token: token, privacy: 1}, function(code){
				UI.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("This file is private now. Only you can view it.");
				$("#bcanvas .__title .set_privacy").replaceWith("<span class='a action std set_privacy' onclick=\"FileX.setPublic('"+hid+"','"+token+"');\">Set public</span>");
			});
		});
	};
	
	
	this.setPublic=function(hid, token){
		AP.confirm("Are you sure that you want to set this file as <i>public</i>? This will allow other people to read this file.", function(){
			UI.ajaxShow();
			AP.post("api/file/setprivate",{hid: hid, token: token, privacy: 0}, function(code){
				UI.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("This file is set public now.");
				$("#bcanvas .__title .set_privacy").replaceWith("<span class='a action std set_privacy' onclick=\"FileX.setPublic('"+hid+"','"+token+"');\">Set private</span>");
			});
		});
	};
	
	
	
	this.newRev=function(hid, token, gid){
		this.pick2Save({hid: hid, token:token, gid: gid}, function(origin, file, log){
			FileX.ui.showRev(origin, file);
		});
	};
	
	
	this.initPicker=function(){
		var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
		var eventer = window[eventMethod];
		var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";

		// Listen to message from child window
		eventer(messageEvent,function(e) {
			switch(e.data) {
				case "validToken":
					FileX._showCreateForm();
					break;
				case "GoogleAPI failed":
					AP.ajaxHide();
					AP.alert("Something went wrong with Google Drive API. Please try again.")
					break;
				case "!_{h:''}":
					break;
				default:
					try{
						var data = JSON.parse(e.data);
						if(data.result == "gsuccess") {
							FileX.successGDoc(data);
						} else {
							FileX.pickerCallback(data);
						}
					} catch(e) {
						// !_h{}
						console.log(e);
					}
					break;
			}
		},false);
	};
	
	
	this.localSelect=function(file){
		FileX.pickerCallback(file);
	};
	
	this.replaceGdriveFrame = function(callback) {
		AP.closeDialog("#custom-selection");
		if (Client.https) {
			var extGTab = window.open("https://" + CONFIG.home_src + "/filepick/google", "_blank");
		} else {
			var extGTab = window.open("http://" + CONFIG.home_src + "/filepick/google", "_blank");
		}
	};
	
	this.sendMessage = function(child_id, msg) {
		var iframe = document.getElementById(child_id);
		iframe.contentWindow.postMessage(msg, '*');
	};
	
	this.createGDoc = function() {
		this.sendMessage('gjs-iframe', 'doAuth');
	};
	
	this._showCreateForm = function() {
		var text = "<h2>Create new public file in Google Drive</h2>";
		text += "<h6>Document title</h6><input type='text' name='title' id='gdoc-title' placeholder='Insert title of document'/>";
		text += "<h6>Choose type</h6><select name='type' placeholder='Type of document' id='gdoc-type'>";
		
		text += "<option value='" + this.fileTypes.GDOC + "'>Google Docs</option>";
		text += "<option value='" + this.fileTypes.GXLS + "'>Google Sheets</option>";
		text += "<option value='" + this.fileTypes.GPPT + "'>Google Slides</option>";
		text += "<option value='" + this.fileTypes.GDRAW + "'>Google Drawing</option>";
		text += "<option value='" + this.fileTypes.GFILE + "'>Google File</option>";
		
		text += "</select>";
			
		text += "<div class='buttons -two'><div class='button -error -first -rounded' onclick='AP.closeDialog(this);'>Cancel</div><div class='button -success -second -rounded' onclick='FileX.createNew(FileX.successGDoc);'>Create</div></div>";
	
		AP.customDialog(text)
		.width(500)
		.show();
	};
	
	
	this.createNew = function() {
		AP.ajaxShow();
		var title = $('#gdoc-title').val();
		
		if (!title || title.length == 0) {
			AP.alertError("Please enter file name.");
			AP.ajaxHide();
		} else {
			var type = $('#gdoc-type').val();
			var txtMsg = JSON.stringify({action: "create", title: title, type: type});
			this.sendMessage('gjs-iframe', txtMsg);
		}
	};
	

	
	/**
	 * Default callback when successfully creating new (public) file in Google Drive
	 */
	this.successGDoc = function(successObj) {
		AP.ajaxHide();
		var file = ({
			name:successObj.fileTitle,
			src: successObj.altLink,
			type:"google",
			preview:"https://drive.google.com/file/d/" + successObj.fileId + "/preview"
		});
		FileX.pickerCallback(file);
		AP.closeDialog('#custom-dialog');
		AP.closeDialog("#custom-selection");
		AP.alertSuccess("Your file has been created! <a target='_blank' href='"+successObj.altLink+"'>Click here</a> to edit.");
	};
	
	
	this.createTextFile = function() {
		var form = Form.create('textfile-create-fx', {action: 'api/file/prepare.text'})
		.row(
			Form.label({label: "File name *", "sublabel":"The name of the text file"}),
			Form.input({name: 'name', "placeholder":"A short name for the text file"})
		)
		.rowHTML(
			"<div class='input'><textarea placeholder='Fill content of text file here' name='content' style='height: 300px; width: 100%;'></textarea></div>" +
			"<div class='clear'></div>"
		)
		.render()
		.buttons([
			 {label: "Create text file", action: function() {
				 Form.submit("textfile-create-fx", function(code) {
					 if(code.good()) {
						 Form.hide("textfile-create-fx");

						 var file = {name: code.filename, content: code.txt, icon: UI.file.fontIcon("untitled.txt"), type: "txt"};
						 FileX.pickerCallback(file);
					 } else {
						 return AP.alertError(code.message);
					 }
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function() {
				 Form.hide("textfile-create-fx");
			 }, style:'-cancel -passive-2 rounded'}
		]);
		
		
		Form.pop({id:'textfile-create-fx-dx', width: 720, 
			label: 'Create a new text file'
		}).setForm(form).show().focus('name');
	};
	
	
	function getMobileFileURL(file_url){
		return file_url;
	};
};




FileX.ui=new function __FileUI(){
	this.file=null;
	
	this.embed=function(file){
		if (parseInt(file.image)){
			return "<div class='box -fileemebd -full-image'><div class='-canvas'><img onclick=\"FileX.preview('"+file.hid+"','"+file.token+"');\" src='"+file.url+"'/></div></div>";
		}
		
		var icon=UI.file.icon(file.name);
		var preview="";
		if (file.metatype=="dropbox"){
			preview="<div class='-meta'><span class='ap-f14 ficon-dropbox'></span> &nbsp; <a class='normal std' target='_blank' href='"+file.src+"'>View on Dropbox</a></div>";
		}else if (file.metatype=="onedrive"){
			preview="<div class='-meta'><span class='ap-f14 ficon-windows'></span> &nbsp; <a class='normal std' target='_blank' href='"+file.src+"'>View on OneDrive</a></div>";
		}
		
		var stats=" &middot; "+file.stats.comments+" "+AP.word.plural("comment",file.stats.comments);
		
		
		return "<div class='box -fileembed'>" +
			"<div class='-image pull-left'><img src='"+Client.share_url+"/64/file-"+icon+".png'/></div>" +
			"<div class='-name'><b class='pointer' onclick=\"FileX.preview('"+file.hid+"','"+file.token+"');\">"+file.name+"</b></div>" +
			"<div class='-meta'>Created by @<b class='url username'>"+file.username+"</b> at "+UI.simpleTime(file.since)+"</div>" +
			preview+
		"</div>";
	};
	
	
	this.showRevs=function(){
		var file=this.file;
		if (!file){
			return;
		}
		
		var options=AP.select(file.revs, function(e, index){
			return {data: e, type: 'rev', label: "<b>Rev "+(index+1)+"</b>: "+e.name, sublabel: "Created at "+UI.simpleTime(e.since),"icon":"label_outline"};
		});
		
		options.push({type:'rev','label':"<b>Current version</b>: "+file.name, sublabel: "Created at "+UI.simpleTime(file.since), data: file});
		
		if (parseInt(file.user_id)==parseInt(Client.viewer.id)){
			options.push({type:'action','label':'<b>Create/upload a new revison</b>', sublabel:'Click to start creating a new version of this file', data: file});
		}
		

		AP.selectAction(options, function(opt){
			if (opt.type && opt.type=='action'){
				return FileX.newRev(opt.data.hid, opt.data.token, opt.data.gid);
			}
			
			FileX.ui.showRev(FileX.ui.file,opt.data);
			
		});
	};
	
	
	this.showRev=function(file, rev){
		BC.main(FileX.ui.getMain(rev));
		BC.title(FileX.ui.getTitle(file, rev));
	};
	
	
	
	this.getTitle=function(file, rev){
		var name=file.name;
		
		var meta=file.metatype;
		var since=file.since;
		if (rev){
			name=rev.name;
			download=rev.src;
			meta=rev.metatype;
			since=rev.since;
		}
		
		
		var icon=UI.file.icon(name);
		
		var download=file.src;
		if (meta=="" || meta=="upload"){
			download=Client.url+'/files/download?id='+file.id+"&token="+file.token+"&key="+file.src;
		}
		
		var rev_action='';
		if (parseInt(file.user_id)==parseInt(Client.viewer.id)){
		}
		
		
		var edit_action=" &middot; <span class='a action std' onclick=\"FileX.edit('"+file.hid+"','"+file.token+"','"+file.name+"');\">Edit</span>";
		var set_private=" &middot; <span class='a action std set_privacy' onclick=\"FileX.setPrivate('"+file.hid+"','"+file.token+"','"+file.name+"');\">Set private</span>";
		if (parseInt(file.privacy)==1){
			set_private=" &middot; <span class='a action std set_privacy' onclick=\"FileX.setPublic('"+file.hid+"','"+file.token+"','"+file.name+"');\">Set public</span>";
		}
		
		if (parseInt(file.user_id)!= parseInt(Client.viewer.id)){
			edit_action="";
			set_private="";
		}
		
		var revs_action="";
		if (file.revs && file.revs.length){
			revs_action="<span class='action icon' title='Revisions' onclick='FileX.ui.showRevs();'><span class='count'>"+file.revs.length+"</span><span class='-ap icon-layers2'></span></span>";
		}
		
		var other=" &middot; <span class='a action std advanced' onclick=\"FileX.options('"+file.hid+"','"+file.token+"','"+file.name+"');\">More options</span>";
		
		
		return "" +
			"<div class='image'><img src='"+Client.share_url+"/32/file-"+icon+".png'></div>"+
			"<h1 class='ap-xdot' title='"+name+"'>"+name+"</h1>" +
			"<h3>Created by <span class='a std url username'>@"+file.username+"</span> &middot; "+UI.simpleTime(since)+" &middot; Last activity "+UI.simpleTime(file.last_update)+" " +
			edit_action+set_private+
			rev_action+
			other+
			"</h3>" +
			"<div class='actions align-right'>" +
			revs_action+
			"   <span class='action icon' title='Extend preview' onclick='BC.extend();'><span class='-ap icon-open_in_new'></span></span>" +
			"   <a class='action icon' target='_blank' href='"+download+"' title='Download the file'><span class='-ap icon-get_app'></span></a>" +
		"</div>";
	};
	
	
	this.getSide=function(file){
		return "<div id='side-followers' class='section'></div> <div id='side-comment-"+file.id+"'></div>";
	};
	
	
	this.getMain=function(file){
		var regEx = /(?:\.([^.]+))?$/;
		var fileExtension = regEx.exec(file.name)[1];
		if (isImage(file)){
			return "<div class='embed-20 embed-image'><div class='image'><img src='"+file.src+"'/></div></div>";
		}else if (isEmbeddable(file) || (fileExtension == "txt")){
			
			if (file.metatype=="onedrive"){
				var url=file.src+"&em=2";
				
				// get cid
				var pos = url.indexOf('resid=');
				var suburl = url.substring(pos);
				var pivot = suburl.indexOf('!');
				var cid = suburl.substring(6, pivot);
				
				url = url.replace("redir?","embed?cid="+cid+"&");
				
				return "<div class='embed-20 embed-file -iframe'>" +
					"<iframe src=\""+url+"\" style='width:100%; height:100%;' frameborder='0' scrolling='no'></iframe>"+
				"</div>";
			}else if (file.metatype=="dropbox"){
				var url=file.preview;
				if (!url){
					return "<div style='margin-top: 60px; font-size: 15px; text-align:center;'>" +
							"<div class='featured' style='margin-bottom: 15px;'>This file has been picked from Dropbox and can't be previewed.</div>" +
							"<a href='" + file.src + "'>Click here to download file</a>" +
							"</div>";
				}
				
				url=url.replace("bounding_box=75","bounding_box=800");
				return "<div class='embed-20 embed-image'><div class='image'><img src='"+url+"'/></div></div>"
			}else if (file.metatype == "google" || file.metatype == "googledrive"){
				if ($.inArray(fileExtension, ['gdoc', 'gsheet', 'gdraw', 'gslides']) < 0) {
					return "<div class='embed-20 embed-file'>" +
						"<iframe src=\""+file.preview+"\" style='width:100%; height:100%;' frameborder='0'></iframe>"+
					"</div>";
				} else {
					return "<div class='embed-20 embed-file'>" +
						"<iframe src=\""+file.src.substr(0, file.src.lastIndexOf('?'))+"\" style='width:100%; height:100%;' frameborder='0'></iframe>"+
					"</div>";
				}
			}
			
			// M$ Office file types
			if ($.inArray(fileExtension, ['doc', 'docx', 'xls', 'xlsx', 'xlsm', 'ppt', 'pptx']) >= 0) {
				return "<div class='embed-20 -iframe embed-file'>" +
					"<iframe src=\"https://view.officeapps.live.com/op/view.aspx?src="+file.src+"\" style='width:100%; height:100%;' frameborder='0'></iframe>"+
				"</div>";
			}

			if (fileExtension == "pdf") {
				return "<div class='embed-20 embed-file -iframe'>"+
					"<iframe src='" + file.src + "' style='width:100%; height:100%;' frameborder='0'></iframe>" +
				"</div>";
			}

			if (Client.https) {
				return "<div class='embed-20 -iframe embed-file'>" +
					"<iframe src=\"https://docs.google.com/gview?url="+file.src+"&embedded=true\" style='width:100%; height:100%;' frameborder='0'></iframe>"+
				"</div>";
			}
			return "<div class='embed-20 -iframe embed-file'>" +
				"<iframe src=\"http://docs.google.com/gview?url="+file.src+"&embedded=true\" style='width:100%; height:100%;' frameborder='0'></iframe>"+
			"</div>";
		}else{
			var download=file.src;
			return "<div class='center' style='padding:20px;'>No preview avaiable. Please <a href='"+download+"' target='_blank'>download the file</a>.</div>";
		}
	};
	
	
	
	function isImage(file){
		if (file.image && parseInt(file.image)){
			return true;
		}

		return false;
	};
	
	
	function isEmbeddable(file){
		var ext=UI.file.icon(file.name);
		
		if (file.metatype=="onedrive"){
			return true;
		}
		
		if (file.metatype=="dropbox" && file.preview && file.preview.length && (ext=="png" || ext=="jpg" || ext=="jpeg" || ext=="gif")){
			return true;
		}
		
		if (file.metatype == "google" || file.metatype == "googledrive"){
			return true;
		}
		
		if (ext=="word" || ext=="excel" || ext=="pdf" || ext=="ppt" || ext=="txt"){
			return true;
		}
		
		return false;
	};
};



function file_local_change(ref, callback){
	var $ref=$(ref);
	var val=$ref.val();
	var $p=$ref.parent();
	
	var filename=getUploadFN(val);
	
	if (!AP.word.fileX(filename,'png jpg jpeg gif bmp psd pdf ai doc docx ppt pptx xls xlsx xlsm txt zip rar log csv txt pps tar')){
		return AP.alertError("Please choose an regular file");
	}
	
	var id=AP.uuid();
	var icon=UI.file.fontIcon(filename);
	
	var file={name: filename, icon: icon, input: $ref, type: "upload"};
	
	callback(file);
};FileX.upload=new function __FileUpload(){
	this.now=function(file, data, callback, error_callback){
		if ($("#instant-file-upload").length){
			$("#instant-file-upload").html("").empty().remove();
		}
		
		var $form=$("<form id='instant-file-upload' action='api/file/upload' class='__temp'></form>");
		$form.appendTo("#ap-temp");
		this.copy(file, $form);
		
		AP.ajaxShow("Uploading ...");
		
		AP.submit($form, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.origin, code.file, code.log);
		}, data);
	};
	
	
	this.copy=function(file, $form){
		file.input.appendTo($form);
		$("#file-upload-input-inv").html("<input type='file' name='file' onchange='file_local_change(this, FileX.localSelect);'/>");
	};
	
	this.txt = function(data, callback, error_callback){
        AP.ajaxShow("Uploading ...");
        
        AP.post("api/file/create.text", data, function(code){
            AP.ajaxHide();
            
            if (!code.good()){
                return AP.alertError(code.message);
            }
            
            callback(code.origin, code.file, code.log);
        });
    };
};FileX.auto=function(canvas, obj, opts){
	var counter="";
	if (obj.stats && obj.stats.files){
		counter="("+obj.stats.files+")";
	}
	
	var html="<span class='button -stroked -rounded'><span class='-ap icon-upload3'></span>&nbsp; Upload</span><h1>Files <small class='file-counter-"+obj.gid+"'>"+counter+"</small></h1> <div class='sep-10'></div> <div class='list list-files -no-border'></div>";
	
	$(canvas).html(html);
	$(canvas).find(" > .button").click(function(){
		FileX.create(obj, function(file, log){
		});
	});
	
	
	AP.post("api/file/load",{hid: obj.hid, token: obj.token}, function(code){
		if (!code.good()){
			$.log("ERROR: File cannot be loaded");
			$.log(obj);
			// return AP.alertError(code.message);
			return;
		}
		
		
		for (var i=0; i<code.files.length; i++){
			var html=getFileHTML(code.files[i]);
			$(html).appendTo($(canvas).find(".list-files")).data("object", code.files[i]).click(function(){
				var obj=$(this).data("object");
				FileX.quickPreview(obj);
			});
		}
		
		
		if (!code.files.length){
			html ="<div class='empty -side'>No file was found in here ...</div>";
			$(canvas).find(".list-files").html(html);
		}
		
	});
	
	
	AP.removeListener("new-file-"+obj.gid);
	
	AP.on("new-file-"+obj.gid, function(file, log, origin){
		$(canvas).find(".list-files").prepend(getFileHTML(file)).data("object", file).click(function(){
			var _obj=$(this).data("object");
			FileX.quickPreview(_obj);
		});
		
		$(".file-counter-"+origin.gid).html("("+origin.stats.files+")");
		$(canvas).find(".empty").hide();
	});
	
	
	function getFileHTML(f){
		var icon=Client.share_url+"/32/file-"+UI.file.icon(f.name)+".png";
		return "<div class='li'><span class='icon -fi'><img src='"+icon+"'></span>" +
				"<div class='text ap-xdot'>"+f.name+"" +
					"<div class='sub'>Created by @<span class=''>"+f.username+"</span> &middot; "+UI.simpleTime(f.since)+"</div>" +
				"</div>" +
			"</div>";
	};
};var N=new function __N(){
	this.api=Base.apiURL()+"api/me/";
	
	
	this.tabID=AP.uuid();
	this.appID=((Client.base && Client.base.app)? Client.base.app :"none"); 
	this.__off=false;
	this.__init=false;
	
	this.off=function(){
		this.__off=true;
	};
	
	this.init=function(){
		if (this.__off || this.__init){
			return;
		}
		
		this.__init=true;
		
		this.ui.init();
		DN.init();
		
	};
	
	
	this.hideAll=function(){
		N.ui.hide();
		// N.work.hide();
		// Chat.panel.hide();
		// Todo.notis.hide();
	};
	
	
	this.broadcast=function(){
		if ((typeof Client.base !== 'undefined') && (typeof Client.base.app !== 'undefined')){
			Clog.log("appid", this.appID);
			Clog.log("tabid", this.tabID);
			
			$(window).focus(function() {
				Base.__systemActive=1;
				Clog.log("tabid", N.tabID);
				Clog.log("appid", N.appID);
			}).on("blur", function(){
				Base.__systemActive=0;
			});	
		}
	};
};




N.live=new function __NLive(){
	this.init=function(){
		
	};
};



N.ui=new function __NotisUI(){	
	this.last_load=0;
	this.has_new=true;
	this.canvas="#base-notis";
	this.__inited=false;
	
	
	this.init=function(){
		this.has_new=true;
		
//		Client.num_notis=parseInt(Client.num_notis);
//		if (Client.num_notis){
//			show_badge(Client.num_notis);
//		}
	};
	
	
	this.update=function(user){ 
		this.trigger(user);
	};
	
	this.toggle=function(ref){
		if (!$(this.canvas).is(":visible")){
			N.hideAll('notis');
			this.load(ref);
		}else{
			this.hide();
		}
	};
	
	this.show=function(ref){
		this.load(ref);
	};
	
	
	this.trigger=function(user){
		this.has_new=true;
		show_badge(user.num_notis);
		animate_badge();
	};
	
	
	this.load=function(ref){
		if (AP.time.now()-this.last_load>30*60){
			// 30 min waiting
			this.has_new=true;
		}
		
		if (!this.has_new){
			$(this.canvas).show();
			return;
		}
		
		if ($(ref).ajaxOn()){
			return;
		}
		
		
		if (Live.mode=="socket"){
			// Use socket instead of get
			Live.post("notifications.get", {last_update: 0}, function(data){
				// $(ref).ajaxOn();
				if (!data.params){
					return;
				}
				
				N.ui.last_load=AP.time.now();
				N.ui.has_new=false;
				clear_badge();
				
				if (data.params.load_more){
					N.ui.displayAppend(data.rows);
					if (!data.rows.length){
						N.ui.showNoMore();
					}
				}else{
					if (data.rows && data.rows.length){
						N.ui.display(data.rows);
					}else{
						N.ui.showNoMore();
					}
				}
			});
		}else{
			UI.ajaxShow();
			AP.post(N.api+"notification/load",{stoken: Client.base.secureData.token}, function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				N.ui.last_load=AP.time.now();
				N.ui.has_new=false;
				N.ui.display(code.notifications);
				clear_badge();
			});
		}
	};
	
	
	this.hide=function(){
		$(this.canvas).hide();
	};

	
	this.insert=function(notis){
		var html=get_html(notis);
		var last_update=real_ts(notis.last_update);
		var lsince=0;
		
		if (!AP.time.sameDay(last_update, AP.time.now())){
			var date=AP.time.time('%d%m%Y',last_update);
			
			if (!$("#base-notis-items .js-sep-"+(date)+"").length){
				var dago=Math.floor((AP.time.now()-AP.time.beginOfDay(last_update))/(24*3600));
				ago="<span class='diff'>"+dago+" days ago</span>";
				
				$(this.canvas+"-items").append("<div class='datesep js-sep-"+(date)+"'><span class='d'>"+(AP.i18n.date(last_update))+"</span> "+(ago)+"</div>");	
			}
		}	
		
		
		$(this.canvas+"-items").append(html);
	};
	
	
	this.display=function(notifications){
		$(this.canvas+"-items").html('');
		
		for (var i=0; i<notifications.length; i++){
		   this.insert(notifications[i]);
		}
		
		$(this.canvas).show();
		update_last(notifications);
		this.scrollable();
	};
	
	
	this.displayAppend = function(notifications){
		for (var i=0; i<notifications.length; i++){
			this.insert(notifications[i]);
		}
		
		
		// var html=AP.render(notifications, function(notis,index, total){
		//  return get_html(notis);
		// });
		// $(this.canvas+"-items").html(html);
		$(this.canvas).show();
		update_last(notifications);
		this.scrollable();
	};
	
	
	this.scrollable=function(){
		if (!this.__inited){
			Layout.scrollable(this.canvas+"-scroll");
			this.__inited=true;
		}
	}
		
	
	this.html=function(notis){
		return get_html(notis);
	}
	
	this.loadMore = function() {
		var last_update = $(this.canvas+"-items div.notis:last-child").data('ts');
		
		if (last_update == -1) return;
		
		if (Live.mode=="socket"){
			Live.emit("notifications.get", {stoken: Client.base.secureData.token, last_update: last_update, load_more: 1});
		}else{
			$("#item-notis").ajaxShow();
			AP.post(N.api+"notification/load", {stoken: Client.viewer.stoken, last: last_notis}, function(code){
				$("#item-notis").ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				if (code.notifications.length > 0) {
					N.ui.last_load = AP.time.now();
					N.ui.has_new = false;
					N.ui.displayAppend(code.notifications);
					clear_badge();
				} else {
					N.ui.showNoMore();
				}
				
			});
		}
	};
	
	
	this.showNoMore=function(){
		$(N.ui.canvas + "-items").append("<div class='notis' data-nid='-1' data-ts='-1' style='padding-top: 17px; display: inherit; text-align: center; font-size: 15px;'><em>No more notification</em></div>");
	};
	
	this.markRead=function(id, ref){
		if (!$(ref).hasClass("unread")){
			return;
		}
		
		if (Live.mode=="socket"){
			Live.post("notifications/mark.read", {notis_id: id}, function(data){
				if (data.code && parseInt(data.code)){
					$(ref).removeClass("unread");
				}
			});
		}else{
			AP.post(N.api+"notification/mark.read", {stoken: Client.viewer.stoken, notis_id: id}, function (code) {
				if (!code.good()) {
					AP.alertError(code.message);
				}else {
					$(ref).removeClass("unread");
				}
			});
		}
	};
	
	
	function clear_badge(){
		show_badge(0);
	};
	
	function show_badge(count){
		if (count && count>0){
			$(N.ui.canvas+"-badge").html(count).show();
		}else{
			count=0;
			$(N.ui.canvas+"-badge").hide();
		}
	};
	
	function animate_badge(){
		$(N.ui.canvas+"-badge").animate({fontSize: '15px'}, 400).animate({opacity:1.0}, 1000).animate({fontSize: '11px'}, 400, function(){});
	};
	
	
	function get_html(notis){
		if ($("#base-notis-items .js-notis-"+notis.id).length){
			return "";
		}
		
		var unread=false;
		
		if (parseInt(notis.last_update) > Client.last_seen_notis){
			// unread=true;
		}
		
		if (!parseInt(notis.last_clicked) && AP.time.now()-parseInt(notis.last_update)<60*24*3600){
			unread=true;
		}
		
		if (notis.link){
			var inspect=Base.inspect(notis.link);
			if (inspect.base){
				notis.link=inspect.url;
			}	
		}else{
			notis.link="";
		}
		
		
		if (unread){
			unread=' unread';
		}
		
		
		var app_icon="";
		if (!notis.app){
			var data=notis.data;
			
			if (AP.data.isString(data)){
				data = "";
				try{
					data = JSON.parse(notis.data);
				} catch (e) {
					console.log(e);
				}

			}
			
			if (data && data.__app){
				notis.app=data.__app;
			}
		}
		
		if (notis.app){
			app_icon="<div class='appicon'><img src='"+Client.share_url+"/apps/"+notis.app+".png'/></div>";
		}
		
		var ts=real_ts(notis.last_update);
		
		var items="";
		if (notis.lasts && notis.lasts.length){
			try{
				var lasts=JSON.parse(notis.lasts);
				if (lasts && lasts.length){
					items=AP.render(lasts, function(e, index){
						return "<div class='subitem'> <div class='sname ap-xdot'>"+(e.title)+"</div> <div class='stime' title='"+(AP.i18n.datetime(real_ts(e.since)))+"'>"+(AP.i18n.time(real_ts(e.since)))+"</div> </div>";
					});
					
					if (index>3){
						return "";
					}
				}
			}catch(e){
				
			}
			
		}
		
		var body=((notis.body && notis.body.length)?("<div class='body'>"+UI.clean(notis.body)+"</div>"):"");
		
		return "<div class='li url notis "+(unread)+" js-notis-"+(notis.id)+"' data-url='"+(notis.link)+"' data-nid='"+(notis.id)+"' data-ts='"+(ts*1000)+"' onclick='N.ui.hide(); N.ui.markRead("+(notis.id)+", this);' data-since='"+(ts*1000)+"'> <div class='avatar avatar-40 -circled'><div class='image'><img src='"+(AP.xthumb(notis.image))+"'/></div></div> <div class='text'> <div class='-title'>"+(notis.title)+"</div> "+(body)+" "+(items)+" <div class='info'>"+(AP.i18n.datetime(ts))+"</div> "+(app_icon)+" </div> </div>";
			
	};
	
	
	function real_ts(ts){
		ts=parseInt(ts);
		if (ts<1600000000){
			return ts;
		}
		
		return Math.floor(ts/1000);
	};
	
	function update_last(objs){
		for (var i=0; i<objs.length; i++){
			var since=parseInt(objs[i].since);
			if (since>Client.last_seen_notis){
				Client.last_seen_notis=since;
			}
		}
	};
};


/**
 * @desc Desktop notification
 */

// Log latest channels




var DN=new function __DN(){
	this.state="unset";
	this.direct=true;
	
	
	if (Client.url && Client.url.indexOf("account.base")!=-1){
		// this.direct=true;	
	}
	
	this.init=function(){
		if (mobile()){
			return;	
		}
		
		$("#fallback-notis").click(function(){
			var options=$(this).data("options");
			
			if (options.url && options.url.length){
				AP.toURL(options.url);	
			}else if (options.action){
				options.action();
			}else{
				$.log(options);
			}
			
			$("#fallback-notis").hide();
		});
		
		
		
		 if (!("Notification" in window)){
			 return;
		 }
		 
		 
		 if (!mobile()){
			 if (Notification.permission == "granted"){
			 }else if (Notification.permission == "denied"){
			 }else{
				 if (this.direct){
					 this.showRequestNotification(); 
				 }
			 }
			 
			 if (!this.direct){
				 DN.indirect.init(); 
			 } 
		 }
	};
	
	
	this.show=function(opts){
		if (!opts){
			return;
		}
		
		if (!opts.time){
			opts.time=5000;
		}
		
		if (!opts.tag){
			if (!opts.id){
				opts.tag=AP.time.now();
			}else{
				opts.tag=opts.id;
			}
		}
		
		if (!opts.__state){
			opts.__state=opts.tag;
		}
		
		if (!opts.url){
			opts.url='';
		}
		
		if (!opts.dir){
			opts.dir=null;
		}
		
		var options = {
			body: UI.clean(opts.body),
			icon: opts.icon,
			url: opts.url,
			tag: opts.tag,
			time: opts.time,
			title: opts.title,
			__state: opts.__state,
			__data: opts
	    };
		
		
		if (opts.action){
			options.action=opts.action;
		}
	
		var timer=500;
		var inspect=Base.inspect(opts.url);
		var test_url=opts.url;
		if (inspect.base){
			test_url=inspect.url;
		}
		
		if (AP.word.prefix(test_url, Client.url)){
			timer=0;
		}
		
		setTimeout(function(){
			notificationNow(opts, options);
		}, timer);
	};
	
	
	this.notify = this.show;
	
	this.bip=function(index, key){
		if (key && localStorage){
			var item=localStorage.getItem("sound");
			if (item==key){
				return;
			}
			localStorage.setItem("sound", key);
		}
		
		
		return document.getElementById('audio'+index).play();
		
	};
	
	
	this.bipInf=function(index, play){
		if (play){
			document.getElementById('audio'+index).play();
			$("#audio"+index).on("ended", function(){
				this.play();
			});	
		}else{
			var s=document.getElementById('audio'+index);
			s.pause();
			s.currentTime = 0;
		}
	};
	
	
	
	this.requestDesktopNotification=function(){
		if (!this.direct){
			return DN.indirect.openRequest();
		}
		
		Notification.requestPermission(function (permission) {
			if (!('permission' in Notification)) {
				Notification.permission = permission;
			}
		  
			if (permission === "granted") {
				// Okay, we are good
				// Get back to direct method
				DN.direct=true;
			}
		});
	};
	
	
	this.showRequestNotification=function(){
		$("#notification-request").show().find(".main").click(function(){
			 if (DN.indirect.request_popup){
				 $("#notification-request").hide();
			 }
			 DN.requestDesktopNotification();
		 });
	};
	
	
	
	function notificationNow(opts, options){
		if (!("Notification" in window) || DN.state=="denied") {
			logNotified(options.__state);
			return fallback(opts, options);
		}
		
		
		if (Base.systemActive()){
			logNotified(options.__state);
			return fallback(opts, options);
		}
		
		if (!options.flatten){
			var inspect=Base.inspect(options.url);
			
			if (inspect.base){
				options.url=inspect.url;
			}
		}
		
		realDesktopNotification(UI.clean(opts.title), options);
	};
	
	
	function realDesktopNotification(title, options){
		if (notified(options.__state)){
			Base.console("SKIP BECAUSE STATE FOUND",options.__state);
			return;
		}
		
		logNotified(options.__state);
		
		if (!DN.direct){
			DN.indirect.notify(title, options);
			return;
		}
		
		    
		// delete options.__data;
		// delete options.__state;
		// delete options.data;
		// options.image=options.icon;
		
		// options.silent=true;
		var notification = new Notification(title, options);

		notification.onclick=function(){
			window.focus();
			if (options.url && options.url.length){
				AP.toURL(options.url);	
			}else if (options.action){
				options.action();
			}else{
				
			}
			
	    	this.close();
		};
		
		notification.onerror=function(e){
		};
		
		notification.onshow=function(e){
		};
		
		notification.onclose=function(){
		};
		
		setTimeout(function(){
		    if (notification){
		    	notification.close();
		    }
		}, 5000);
	};
	
	
	
	function fallback(opts, options){
		var inspect=Base.inspect(options.url);
		if (inspect.base){
			options.url=inspect.url;
		}
		
		$("#fallback-notis .image").html("<img src='"+options.icon+"'/>");
		$("#fallback-notis .footer").html(UI.simpleTime(options.time));
		$("#fallback-notis .content").html(options.body);
		$("#fallback-notis .title").html(opts.title);
		
		$("#fallback-notis").data("options", options).data("timer", AP.time.now()).show();
		
		fallback_hide();
	};
	
	
	function fallback_hide(){
		setTimeout(function(){
			var timer=parseInt($("#fallback-notis").data("timer"));
			if (AP.time.now() - timer >= 5){
				$("#fallback-notis").hide();
			}else{
				fallback_hide();
			}
		},5500);
	};
	
	
	
	
	function notified(token){
		var ln=Clog.getCookie("__ln");
		if (!ln){
			ln="";
		}
		
		if (ln==token){
			return true;
		}
		
		return false;
	};
	
	
	function logNotified(token){
		Clog.setCookie("__ln", token);
	};
	
};



DN.indirect = new function __DNIndirect(){
	// Request on iframe or on a new windows
	this.request_popup=true;
	
	this.url="http://"+Client.domain;
	
	if (Client.https && parseInt(Client.https)){
		this.url="https://"+Client.domain;	
	}
	
	this.api=this.url+"/notify/";
	this.receiver = null;
	this.events={};
	this.last_clear=0;
	
	this.notify=function(title, options){
		var id=AP.uuid();
		var xopts={
			icon: options.icon,
			body: options.body,
			title: options.title,
			tag: options.tag
		};
		var obj={'title': title, 'options': xopts, __refid: id, __domain: Client.url}
		
		this.logEvent(id, options);
		this.receiver.postMessage(obj, this.url);
	};
	

	this.init=function(){
		if (!$("#idn_iframe").length){
			$("<iframe id='idn_iframe' style='display:none' src='"+this.api+"'/>").appendTo($(document.body));
			this.receiver = document.getElementById('idn_iframe').contentWindow;
		}
		
		window.addEventListener('message', function(e){
			var org=e.origin;
			if (org!=DN.indirect.url){
				return;
			}
			
			var data = e.data;
			
			if (data.event=="notis.perm"){
				return DN.indirect.request(data.p);
			}
			
			if (data.event=="int.perm.result"){
				return DN.indirect.response(data.event.p);
			}
			
			if (!data || data.event!="notis.indirect.click"){
				return;
			}
			
			var event=DN.indirect.getEvent(data.refid);
			if (!event){
				return;
			}
			
			var options=event.options;
			
			if (options.url && options.url.length){
				AP.toURL(options.url);	
			}else if (options.action){
				options.action();
			}else{
			}
		});
	};
	
	
	this.internalEvent=function(event, data){
		this.receiver.postMessage({
			'event': event,
			'data': data
		}, this.url);
	};
	
	
	this.getEvent=function(id){
		if (this.events[id]){
			return this.events[id];
		}
		
		return null;
	};
	
	
	this.logEvent=function(id, options){
		var limit=4;
		var now=AP.time.now();
		this.events[id]={time: now, options: options};
		
		if (now - this.last_clear>limit){
			this.last_clear=now;
			for (var key in this.events){
				if (now - this.events[key].time > limit){
					delete this.events[key];
				}
			}
		};
	};
	
	
	
	this.request = function(current){
		if (current=="denied"){
			DN.state="denied";
			
			checkIncognito(function(){
				$.log("INCOGNITO MODE!!!");
			}, function(){
				DN.showRequestNotification();
			});
		}
		
		if (current=="pending"){
			DN.showRequestNotification();
		};
		
		if (current=="granted"){
			// 
			$.log("Desktop notification is granted ...");
			DN.direct=true;
		};
	};
	
	
	this.openRequest=function(){
		if (this.request_popup){
			this.openRequestPopup();		
		}else{
			this.internalEvent("int.perm.request");
		}
	};
	
	
	this.openRequestPopup=function(){
		Clog.log("npe", 0);
		window.open(this.api+"?request=1");
		
//		var intv=setInterval(function(){
//			var n=Clog.getLog("npe");
//			if (n==1 || n=="1"){
//				return AP.refresh();
//			}
//		},500);
	};
	
	
	this.response=function(p){
		AP.refresh();
	};
	
	
	function checkIncognito(incog, notincog){
		var fs = window.RequestFileSystem || window.webkitRequestFileSystem;
		if (!fs){
			return false;
		}else{
			fs(window.TEMPORARY,100, function(){
				notincog();
			},function(){
				incog();
			});
		}
	};
};


N.reminder=new function __NReminder(){
	this.get=function(){
		
	};
	
	this.render=function(list){
		
	};
};


N.live=new function __NLive(){
	this.init=function(){
		
	};
};



N.broadcast();

var Reminder=new function __Reminder(){
	this.__inited=false;
	this.__state=AP.uuid();
	
	this.init=function(){
		if (mobile()){
			return;
		}
		
		prepare();
		scheduleAlert();
		
		this.api("meaningful", {}, function(rows, code){
			Reminder.ui.list(rows);
		});
	};
	
	
	/**
	 * @desc API endpoint
	 */
	this.api=function(endpoint, data, callback){
		data._rstate=Reminder.__state;
		data._endpoint=endpoint;
		
		Live.post("reminders."+endpoint, data, function(code){
			code.rows=AP.array.sortObj(code.rows, "time");
			for (var i=0; i<code.rows.length; i++){
				try {
					code.rows[i].data=JSON.parse(code.rows[i].data);
			    } catch(e) {
			        code.rows[i].data={};
			    }
			}
			
			return callback(code.rows, code);
		}, true);
	};
	
	
	/**
	 * @desc Loading tab
	 */
	this.loadTab=function(tab){
		if (tab=="today"){
			this.api("today", {}, function(rows, code){
				$("#reminder-items .tab-today .ritems").html(AP.render(rows, function(e){
					return Reminder.ui.getHTML(e);
				}));
			});
		}else if (tab=="late"){
			this.api("late", {}, function(rows, code){
				$("#reminder-items .tab-late .ritems").html(AP.render(rows, function(e){
					return Reminder.ui.getHTML(e);
				}));
			});
		}
	};
	
	
	this.insert=function(reminder){
		return Reminder.ui.insert(reminder);
	};
	
	
	this.remove=function(reminder){
		return Reminder.ui.remove(reminder);
	};
	
	
	/**
	 * @desc Check if a calendar is ever meaningful
	 */
	this.meaningful=function(e){
		var state=parseInt(e.state);
		var alert=parseInt(e.alert);
		var now=AP.time.now();
		var deadline=parseInt(e.time);
		var offset=7;
		
		if (deadline>now+offset*24*3600 || deadline<now-offset*24*3600){
			return 0;
		}
			
		
		if (state==1){ // ALREADY HANDLE
			return 0;
		}
		
		if (state==0){ // NO STATE
			if (deadline>=now){
				return 1;
			}else{
				return 0;
			}
		}
		
		if (state==-1){ // PENDING
			if (deadline>=now -offset *24*3600){
				return 1;
			}
			
			return 0;
		}
		
		return 0;
	};
	
	
	
	function prepare(opts){
		if (mobile()){
			return;
		}
		
		if (Reminder.__inited){
			return true;
		}
		
		Reminder.__inited=true;
		
		opts=$.extend({}, opts, {display: "notification"});
		Reminder.ui.initCanvas(opts);
		bindEvents();
	};
	
	
	
	function scheduleAlert(){
		setInterval(function(){
			Reminder.alarm.check();
		}, 2000);
	};
	
	
	
	function bindEvents(){
		Live.on("reminder", function(e){
			Reminder.insert(e);
		});
		
		Live.on("server.reminder.remove", function(e){
			Reminder.remove(e);
		});
	};
	
};



Reminder.ui=new function __ReminderUI(){
	this.rows=[];
	this.counter=0;
	
	/**
	 * @desc Show a list of reminders
	 */
	this.list=function(rows){
		rows=AP.array.uniqueObjects(rows);
		
		rows=AP.array.filter(rows, function(e){
			return Reminder.meaningful(e);
		});
		
		rows=AP.array.sortObj(rows, "time");
		rows=AP.array.cut(rows, 200);
		
		for (var i=0; i<rows.length; i++){
			rows[i].r0=0;
			rows[i].r30=0;
			rows[i].r60=0;
		}
		
		this.rows=rows;
		
		var total=0;
		sections={
			"today": "",
			"late": "",
			"upcoming": "",
			"other": ""
		};
		
		var counters={
			"today": 0,
			"late": 0,
			"upcoming": 0,
			"other": 0
		};
		
		for (var i=0; i<rows.length; i++){
			var meaningful=Reminder.meaningful(rows[i]);
			
			total+=meaningful;
			var section=getSection(rows[i]);
			counters[section]++;
			
			if (section=="upcoming"){
				sections[section]=Reminder.ui.getHTML(rows[i])+sections[section];	
			}else{
				sections[section]+=Reminder.ui.getHTML(rows[i]);
			}
		}
		
		var html="";
		if (sections.today.length){
			html+="<div class='section-title'>Today <span class='count'>"+(counters.today)+"</span></div><div class='section-body'>"+(sections.today)+"</div>";
		}
		
		if (sections.late.length){
			html+="<div class='section-title'>Late <span class='count'>"+(counters.late)+"</span></div><div class='section-body'>"+(sections.late)+"</div>";
		}
		
		if (sections.upcoming.length){
			html+="<div class='section-title'>Upcoming <span class='count'>"+(counters.upcoming)+"</span></div><div class='section-body'>"+(sections.upcoming)+"</div>";
		}
		
		if (sections.other.length){
			html+="<div class='section-title'>Other <span class='count'>"+(counters.other)+"</span></div><div class='section-body'>"+(sections.other)+"</div>";
		}
		
		$("#reminder-items .tab-meaningful .ritems").html(html);
		
		setCounter(total);
	};

	
	
	
	this.remove=function(reminder){
		$("#reminder-items .js-reminder-"+reminder.id).remove();
		$("#reminder-calendar .js-reminder-"+reminder.id).remove();
		
		this.rows=AP.array.removeByID(this.rows, reminder.id);
		this.list(this.rows);
	};
	
	this.insert=function(reminder){
		this.rows.unshift(reminder);		
		this.list(this.rows);
	};
	
	
	this.getHTML=function(e){
		var appicon="";
		if (e.data.app && e.data.app){
			appicon="<div class='appicon'><img src='"+(Client.share_url)+"/apps/"+(e.data.app)+".png'/></div>";
		}
		
		var overdue=0;
		if (parseInt(e.state)==-1 && parseInt(e.time)<AP.time.now()){
			overdue=1;
		}
		
		return "<div class='item meaningful-"+(Reminder.meaningful(e))+" overdue-"+(overdue)+" state-"+(e.state)+" alert-"+(e.alert)+" js-reminder-"+(e.id)+"' data-deadline='"+(AP.i18n.datetime(e.time))+"'> <div class='dot'></div> <div class='name'>"+(e.name)+"</div> <div class='info'><span class='time'>"+(AP.i18n.datetime(e.time))+"</span> <span class='hidden'>&middot; Overdue</span></div> <div class='trigger'>"+(appicon)+"<span class='-ap icon-keyboard_arrow_right'></span></div> <div class='alert'></div> <div class='actions'> <span class='action -ignored' title='Ignore this reminder' onclick='Reminder.action.ignore("+(e.id)+")'>Ignored</span> </div> <div class='mask url' data-url='"+(e.link)+"' ></div> </div>";
	};
	
	
	
	this.initCanvas=function(opts){
		var html="<div id='reminder-canvas-wrapper'> <div id='reminder-button' title='Reminders for you today'> <div id='reminder-round'></div> <div class='icon'><img src='"+(Client.share_url)+"/task.png'/></div> <div class='count'></div> </div> <div id='reminder-canvas'> <div class='reminder-header'> <div class='reminder-close' title='Close the reminder dialog'><span class='-ap icon-close'></span></div> <div class='title'>Reminders</div> <div class='tabs clear-fix'> <div class='tab active' data-tab='meaningful'><span class='icon ficon-bell'></span> Important</div> <div class='tab' data-tab='today'><span class='icon ficon-circle-o'></span> Today</div> <div class='tab' data-tab='late'><span class='icon ficon-exclamation-circle'></span> Lates</div> </div> </div> <div class='reminder-body scroll-y'> <div id='reminder-items'> <div class='tab tab-meaningful' data-tab='meaningful'> <div class='notice'>Several things needed your attention <div class='count'></div> </div> <div class='ritems only-meaningful'></div> </div> <div class='tab tab-today' data-tab='today'> <div class='ritems'></div> </div> <div class='tab tab-late' data-tab='late'> <div class='ritems'></div> </div> </div> </div> <div class='reminder-footer' onclick='Reminder.calendar.display();'> <span class='icon ficon-external-link-square'></span> &nbsp; Open calendar </div> </div> </div> "+(Reminder.calendar.getCanvas())+"";
		
		$("#base-notis").after(html);
		
		
		$("#reminder-button").click(function(){
			$("#reminder-canvas-wrapper").toggleClass("active");
		});
		
		$("#reminder-canvas .reminder-header .reminder-close").click(function(){
			$("#reminder-canvas-wrapper").removeClass("active");
		});
		
		UI.tabView("#reminder-canvas .reminder-header .tabs .tab", "#reminder-canvas .reminder-body .tab", function(tab){
			Reminder.loadTab(tab);
		});
		
		
		AP.html.resize(function(){
			$("#reminder-canvas").height($(window).height()-130);
		}, true);
		
		
		$("#reminder-calendar .header .tab").click(function(){
			var tab=$(this).data("tab");
			
			$(this).siblings().removeClass("active");
			$(this).addClass("active");
			
			if (tab=="meaningful"){
				$("#reminder-calendar").addClass("meaningful");
			}else{
				$("#reminder-calendar").removeClass("meaningful");
			}
		});
		
		if (Client.base && Client.base.app){
			var app=Client.base.app;
			if (app=="sysadmin"){
				$("#reminder-button").css({left: 20});
				$("#reminder-canvas").css({left: 2});
			}
		}
	};
	
	
	function setCounter(total){
		if (total){
			$("#reminder-button .count").html(total).show().addClass("hl");
			$("#reminder-items .notice .count").html("<em>"+total+"</em>")
			$("#reminder-items .notice").show();
			
			setTimeout(function(){
				$("#reminder-button .count").removeClass("hl");	
			},2000)
		}else{
			$("#reminder-button .count").hide();
			$("#reminder-items .notice").hide();
		}
	};
	
	
	function getHTML(r){
		
	};
	
	
	function getSection(e){
		var now=AP.time.now();
		var time=parseInt(e.time);
		if (AP.time.sameDay(time, now)){
			return "today";
		}
		
		if (time < now){
			if (e.state==-1){
				return "late";
			}
		}
		
		if (time > now){
			return "upcoming";
		}
		
		return "other";
	};
	
	
	function showSections(sections){
		
	};
};


Reminder.calendar=new function __ReminderCalendar(){
	this.ts=AP.time.now();
	this.__inited=false;
	
	this.show=function(ts){
		this.ts=parseInt(ts);
		
		initLayout(this.ts);
		loadReminders(this.ts);
	};

	this.today=function(){
		this.show(AP.time.now());
	};
	
	this.prev=function(){
		this.ts=this.ts-7*24*3600;
		this.show(this.ts);
	};
	
	this.next=function(){
		this.ts=this.ts+7*24*3600;
		this.show(this.ts);
	};
	
	this.display=function(){
		if (!this.__inited){
			this.__inited=true;
			this.show(AP.time.now());
		}
		
		$("#reminder-calendar-wrappers").show();
	};
	
	this.hide=function(){
		$("#reminder-calendar-wrappers").hide();
	};
	
	this.getCanvas=function(){
		var days="";
		for (var i=0; i<7; i++){
			days+="<div class='day js-day day-"+(i)+"'> <div class='dheader'></div> <div class='dbody'> <div class='dgrid'></div> <div class='ditems ditems-am'></div> <div class='ditems ditems-pm'></div> </div> </div>";
		};
		
		return "<div id='reminder-calendar-wrappers'> <div id='reminder-calendar'> <div class='header'> <div class='icon'><span class='-ap icon-calendar5'></span></div> <div class='title'><span title='Back to today' onclick='Reminder.calendar.today();'>"+(Client.viewer.name)+"</span></div> <div class='tabs'> <div class='tab active' data-tab=''>Everything</div> <div class='tab' data-tab='meaningful'>Only important</div> </div> <div class='side'> <div class='item nav' onclick='Reminder.calendar.prev();'><span class='-ap icon-keyboard_arrow_left'></span></div> <div class='item nav' onclick='Reminder.calendar.next();'><span class='-ap icon-keyboard_arrow_right'></span></div> <div class='item'>Week of <em></em></div> </div> <div class='close js-close' onclick='Reminder.calendar.hide();'><span class='-ap icon-close'></span></div> </div> <div class='body'>"+(days)+"</div> </div> </div>";
	};
	
	
	function initLayout(ts){
		$("#reminder-calendar .header em").html(AP.i18n.date(ts));
		
		
		$("#reminder-calendar .ditems").empty();
		$("#reminder-calendar .dheader").empty();
		$("#reminder-calendar .day").removeClass("today");
		
		
		var ft=AP.time.beginOfWeek(ts);
		var today=AP.time.beginOfDay();
		
		for (var i=0; i<7; i++){
			var d=ft+i*24*3600;
			
			var html="<div class='w'>"+(AP.time.tvDays[i])+"</div> <div class='d'>"+(AP.time.time('%d',d))+"</div>";
			$("#reminder-calendar .day-"+(i)+" .dheader").html(html);
			
			if (today==d){
				$("#reminder-calendar .day-"+(i)+"").addClass("today");
			}
		}
		
	};
	
	
	function showReminder(e){
		var html=getHTML(e);
		var dow=AP.time.time("%w",e.time);
		var apm=AP.time.time("%a",e.time);
		
		$("#reminder-calendar .day-"+dow+" .ditems-"+apm+"").append(html);
	};
	
	
	function getHTML(e){
		return "<div class='item meaningful-"+(Reminder.meaningful(e))+" state-"+(e.state)+" alert-"+(e.alert)+" url js-reminder-"+(e.id)+"' data-url='"+(e.link)+"' title='"+(stringSafe(e.name))+" - "+(AP.i18n.datetime(e.time))+"'> <div class='c'></div> <div class='name'>"+(e.name)+"</div> <div class='time'>"+(AP.time.time('%H:%i',e.time))+"</div> </div>";
	};
	
	function stringSafe(str){
		return str.replace(/'/g,'');
	};
	
	function loadReminders(ts){
		Reminder.api("week", {ts: ts}, function(reminders){
			reminders=AP.array.usort(reminders, function(e, f){
				return parseInt(e.time)-parseInt(f.time);
			});
			
			for (var i=0; i<reminders.length; i++){
				showReminder(reminders[i]);	
			}
			
			$.log("Finish rendering ... "+reminders.length);
		});
	};
	
};


Reminder.action=new function __ReminderAction(){
	
	/**
	 * @desc Remove a reminder by ID
	 */
	this.remove=function(id){
		AP.confirm("Remove this reminder?", function(){
			Live.post("reminders.remove", {id: id}, function(code){
				Reminder.ui.remove({id: id});
			});
		});
	};
	
	
	/**
	 * @des Alias of remove
	 */
	this.ignore=function(id){
		return this.remove(id);
	};
};


Reminder.alarm=new function __ReminderAlarm(){
	this.check=function(){
		for (var i=0; i<Reminder.ui.rows.length; i++){
			var e=Reminder.ui.rows[i];
			var al=getAlarm(e);
			if (al && al.length){
				if (al =="soon"){
					notify(e, "DUE: ");
				}
				
				if (al=="r60"){
					notify(e, "DUE IN 01 HOUR: ");
				}
			}
		}
	};
	
	
	function notify(e, prefix){
		var icon=Client.share_url+"/apps/base.png";
		if (e.data && e.data.app){
			icon=Client.share_url+"/apps/"+e.data.app+".png";	
		}
		
		var obj={
			url: e.link,
			tag: e.hid+"."+e.time,
			title: prefix+e.name,
			body: AP.i18n.date(e.time),
			time: 10000,
			icon: icon
		};
		
		DN.show(obj);
	};
	
	
	function getAlarm(e){
		var now=AP.time.now();
		var diff=parseInt(e.time)-now;
		
		if (!AP.time.sameDay(e.time, now)){
			return "";
		}
		
		if (diff<0){
			return "";
		}
		
		if (diff<10 && !e.r0){
			e.r0=1;
			return "now";
		}
		
		
		if (diff<30*60 && diff > 30*60-30){
			if (!e.r30){
				e.r30=1;
				return "r30";	
			}
			
			return "";
		}
		
		
		if (diff<60*60 && diff > 60*60-30){
			if (!e.r60){
				e.r60=1;
				return "r60";	
			}
		}
		
		return "";
	};
};
Base.task=new function __BaseTask(){
	this.endpoint=function(ep){
		return Base.domain("wework")+"/ajax/api/v2/"+ep;
	};
	
	this.enabled=function(){
		if (!hasApp("wework")){
			return false;
		}
		
		return true;
	};
	
	this.embed=function(obj, opts){
		if (!hasApp("wework")){
			return;
		}
		
		if (!$(opts.canvas).length){
			return;
		}
		
		$(opts.canvas).data("origin", obj);
		
		var header=getHeader(obj, opts);
		var form=getForm(obj, opts);
		
		
		$(opts.canvas).addClass("js-etask-wrapper etask-wrapper").html(header+form+"<div class='js-subtasks-list etasklist'></div>");
		showTasks(obj, opts);
		
		Form.render($(opts.canvas).find(".etaskform"));
		
		$(opts.canvas).find("input.js-subtask-ip").enter(function(){
			createTaskInline(this);
		}).on("focus", function(){
			$(this).closest(".etaskform").addClass("active");
		}).on("blur", function(){
			$(this).closest(".etaskform").removeClass("active");
		});
		
		$(opts.canvas).find(".esubmit").click(function(){
			createTaskInline($(this).parent().find(".minput"));
		});
		
		
		if (Client.base && Client.base.app=="wework"){
			$(opts.canvas).find(".js-subtasks-list").sortable({
				items: ".etask-detail",
				handle: ".icon-base-sorter",
				axis: "y",
				stop: function(event, ui){
					var id=$(ui.item).data("id");
					var pid=$(ui.item).data("pid");
					var pos=$(ui.item).index();
					
					reorder(id, pos, pid);
				}
			});
		}
	};
	
	
	this._check=function(ref){
		var $box=$(ref).closest(".etask-detail");
		if (!$box.hasClass("is-checkable")){
			return;
		}
		
		var set_status="check";
		if ($box.hasClass("status-1")){
			set_status="uncheck";
		}
		
		var data={id: $(ref).data("id"), "action": set_status};
		
		UI.ajaxShow();
		AP.post(Base.domain("wework")+"/ajax/api/task/check", data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			insertTaskAtTop(code.task, $(ref).closest(".js-etask-wrapper"));
			
			AP.sys.fire("subtask.updated", code.task);
		});
	};
	
	
	this._showID=function(id, token, view_token){
		if (Client.base && Client.base.app=="wework"){
			TaskDisplay.display(id);
			return;
		}
		
		window.open(Base.domain("wework")+"/tasks?task="+id+"&task_token="+token+"&view_token="+view_token);
	};
	
	
	this.exportHTML=function(task){
		return getHTML(task);
	};
	
	
	function hasApp(key){
		for (var i=0; i<Client.applist.length; i++){
			if (Client.applist[i].key==key){
				return true;
			}
		}
		
		return false;
	};
	
	
	function getHeader(obj, opts){
		if (!opts.header){
			return "";
		}
		
		return "<div class='etask-header'>"+opts.header+"</div>";
	};
	
	
	function getForm(obj, opts){
		if (!obj.signed_token){
			obj.signed_token="";
		}
		
		if (!obj.abs_link){
			obj.abs_link="";
		}
		
		if (!opts.project_id){
			opts.project_id=0;
		}
		
		var html="<div class='etaskform'> <div class='r'> <div class='einput js-container'> <div class='hidden'> <input type='hidden' name='project_id' value='"+(opts.project_id)+"'/> <input type='hidden' name='origin_hid' value='"+(obj.hid)+"'/> <input type='hidden' name='origin_token' value='"+(obj.token)+"'/> <input type='hidden' name='origin_signed_token' value='"+(obj.signed_token)+"'/> <input type='hidden' name='origin_abs_link' value='"+(obj.abs_link)+"'/> <input type='hidden' name='origin_name' value='"+(obj.name)+"'/> </div> <div class='minput'> <input class='js-subtask-ip' data-role='tag' data-context='global' type='text' name='name' autocomplete='off' placeholder='Create sub task, type @ to tag & assign, press enter to save'/> </div> <div class='extra-data' style='height:36px'> <div class='elem'><span class='icon ficon-calendar-o'></span><input type='text' data-role='date' name='deadline' placeholder='Deadline date (optional)'/></div> <div class='elem'><span class='icon ficon-clock-o'></span><input type='text' name='deadline-time' date-time='none' placeholder='Time (hh:mm, optional)'/></div> <div class='elem last'><span class='icon ficon-user-circle'></span><input type='text' name='assign' data-role='tag' data-context='global' placeholder='Tag @ to assign'/></div> </div> </div> <div class='esubmit'><img src='"+(Client.share_url)+"/send.svg'/></div> </div>";
		
		return html;
	};
	
	
	function showTasks(obj, opts){
		if (Client.tempData && Client.tempData.subtasks){
			for (var i=Client.tempData.subtasks.length-1; i>=0; i--){
				insertTaskAtTop(Client.tempData.subtasks[i], opts.canvas);
			}
			return;
		}
		
		
		AP.post(Base.task.endpoint("load"),{origin_id: obj.id, origin_type: obj.type, origin_hid: obj.hid, origin_token: obj.token, origin_signed_token: obj.signed_token}, function(code){
			if (!code.good()){
				console.log(code);
				return;
			}
			
			for (var i=code.tasks.length-1; i>=0; i--){
				insertTaskAtTop(code.tasks[i], opts.canvas);
			}
		});
		
		return "";
	};
	
	
	function createTaskInline(ref){
		var $c=$(ref).closest(".js-container");
		var data=assoc($c.find(":input").serializeArray());
		if (!data.name){
			return;
		}
		
		UI.ajaxShow();
		AP.post(Base.task.endpoint("create"), data, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			insertTaskAtTop(code.task, $(ref).closest(".js-etask-wrapper"));
			$c.find(".js-subtask-ip").val("").focus();
			
			AP.sys.fire("subtask.created", code.task);
		});
	};
	
	
	function insertTaskAtTop(task, canvas){
		var origin=$(canvas).closest(".js-etask-wrapper").data("origin");
		
		var html=getHTML(task, origin);
		if ($(canvas).find(".js-subtasks-list .etask-"+task.id).length){
			$(canvas).find(".js-subtasks-list .etask-"+task.id).replaceWith(html);
		}else{
			$(canvas).find(".js-subtasks-list").prepend(html);	
		}
	};
	
	
	
	
	function getHTML(task, origin){
		if (!origin){
			origin={};
		}
		
		var assign="<div class='no-assign'>Not assigned</div>";
		var u=People.get(task.user_id);
		if (u && parseInt(u.id)){
			assign="<div class='etask-user'><img src='"+(AP.xthumb(u.gavatar))+"'/> <span>"+(u.first_name)+"</span></div>";
		}
		
		var status_checkable="is-checkable";
		if (!parseInt(task.acl.status)){
			status_checkable="is-uncheckable";
		}
		
		var deadline=getDeadline(task);
		
		var html="<div class='etask-detail etask-"+(task.id)+" js-inline-subtask-"+(task.id)+" "+(status_checkable)+" status-"+(task.status)+"' data-status='"+(task.status)+"' data-id='"+(task.id)+"' data-pid='"+(task.parent_id)+"'> <div class='icon-base-sorter' style='left:-16px; top:14px;'></div> <div class='echeckbox' data-id='"+(task.id)+"' onclick='Base.task._check(this);'></div> <div class='etask-name' onclick='Base.task._showID("+(task.id)+",\""+(task.token)+"\",\""+(origin.viewed_token)+"\")'>"+(task.name)+"</div> <div class='etask-deadline'>"+(deadline)+"</div> "+(assign)+" </div>";
		
		return html;
	};
	
	
	
	function getDeadline(task){
		if (!task.deadline || !parseInt(task.deadline)){
			return "";
		}
		
		if (task.deadline_has_time){
			return "<span title='Deadline'>"+AP.i18n.datetime(task.deadline)+"</span>";
		}else{
			return "<span title='Deadline'>"+AP.i18n.date(task.deadline)+"</span>";
		}
	};
	
	
	
	function reorder(id, pos, pid){
		if (!pid || !parseInt(pid)){
			return;
		}
		
		UI.ajaxShow();
		AP.post("api/task/subtask.reorder", {id: id, position: pos, parent_id: pid}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Update successfully");
		});
	};
	
};







Base.drive=new function __Drive(){
	this.__inited=false;
	this.token="";
	this.callback=null;
	
	
	this.init=function(){
		if (this.__inited){
			return;
		}
		
		this.__inited=true;
		AP.postmessage.listen(function(data, origin){
			if (data.token!=Base.drive.token){
				return;
			}
			
			if (origin!=Base.domain("drive")){
				return;
			}
			
			$("#js-drive-picker").remove();
			AP.hideCustomDialog();
			
			if (Base.drive.callback){
				if (data.files && data.files.length){
					Base.drive.callback(AP.select(data.files, function(e, index){
						e._html=Base.drive.renderInputs(e, "file_"+index);
						return e;
					}));	
				}
			}
				
		});
	};
	
	this.pick=function(options){
		options=$.extend({multi: 0, ext: 0}, options);
		
		this.init();
		if (options.callback){
			this.callback=options.callback;	
		}
		
		this.token=AP.uuid();
		var picker_iframe=Base.domain("drive")+"/picker?multi="+options.multi+"&ext="+options.ext+"&base_token="+this.token+"&base_domain="+encodeURIComponent(Client.url);
		if (mobile()){
			var w=$(window).width();
			var h=$(window).height();
			var html="<div id='js-drive-picker' style='width:"+w+"px; height: "+h+"px; background-color:#fff; overflow:hidden;'><iframe style='width: 100%; height:100%' src='"+picker_iframe+"'/></div>";
		}else{
			var html="<div id='js-drive-picker' style='width:800px; height: 480px; background-color:#fff; overflow:hidden; border-radius:3px; -webkit-border-radius:3px;'><iframe style='width: 100%; height:100%' src='"+picker_iframe+"'/></div>";	
		}
		
		AP.customCanvas(html, true).data("full", (mobile()?1:0)).show().on({
			"close": function(){
				$("#js-drive-picker").remove();
			}
		});
		
		$("#__apdialog_custom-dialog .full-mask").off();
	};
	
	
	
	this.append=function(data, files, name){
		if (!name){
			name="file";
		}
		
		data.__drive_upload=1;
		
		for (var i=0; i<files.length; i++){
			data[name+""+i+"_name"]=files[i].name;
			data[name+""+i+"_refid"]=files[i].refid;
			data[name+""+i+"_metatype"]=files[i].metatype;
			data[name+""+i+"_size"]=files[i].size;
			data[name+""+i+"_fid"]=files[i].fid;
			data[name+""+i+"_is_image"]=files[i]["is_image"];
			data[name+""+i+"_download"]=files[i]["download"];
			data[name+""+i+"_preview"]=files[i]["preview"];
		}
		
		return data;
	};
	
	
	
	this.renderInputs=function(file, name){
		return "<div class='hidden js-basepicker js-base-picker-"+name+"' data-name='"+name+"'>" +
			"<input type='hidden' name='"+name+"_name' data-name='name' value='"+file.name+"'/>" +
			"<input type='hidden' name='"+name+"_refid' data-name='refid' value='"+file.refid+"'/>" +
			"<input type='hidden' name='"+name+"_metatype' data-name='metatype' value='"+file.metatype+"'/>" +
			"<input type='hidden' name='"+name+"_weblink' data-name='weblink' value='"+file.weblink+"'/>" +
			"<input type='hidden' name='"+name+"_size' data-name='size' value='"+file.size+"'/>" +
			"<input type='hidden' name='"+name+"_fid' data-name='fid' value='"+file.fid+"'/>" +
			"<input type='hidden' name='"+name+"_is_image' data-name='is_image' value='"+file.is_image+"'/>" +
			"<input type='hidden' name='"+name+"_preview' data-name='preview' value='"+file.preview+"'/>" +
			"<input type='hidden' name='"+name+"_download' data-name='download' value='"+file.download+"'/>" +
		"</div>";
	};
};Base.board=new function __BaseBoard(){
	
};var analytics = window.analytics = window.analytics || [];
if (!analytics.initialize) if (analytics.invoked) window.console && console.error && console.error("Segment snippet included twice.");
else {
	analytics.invoked = !0; analytics.methods = ["trackSubmit", "trackClick", "trackLink", "trackForm", "pageview", "identify", "reset", "group", "track", "ready", "alias", "debug", "page", "once", "off", "on"]; analytics.factory = function (t) { return function () { var e = Array.prototype.slice.call(arguments); e.unshift(t); analytics.push(e); return analytics } }; for (var t = 0; t < analytics.methods.length; t++) { var e = analytics.methods[t]; analytics[e] = analytics.factory(e) } analytics.load = function (t, e) { var n = document.createElement("script"); n.type = "text/javascript"; n.async = !0; n.src = "https://cdn.segment.com/analytics.js/v1/" + t + "/analytics.min.js"; var a = document.getElementsByTagName("script")[0]; a.parentNode.insertBefore(n, a); analytics._loadOptions = e }; analytics.SNIPPET_VERSION = "4.1.0";
	analytics.load("MGF8H9rbs8aPiKP5nXXbmu0RkWRjLo1M");//SegmentId
	analytics.page();
};


if ((Client.env == 1) && Client.viewer && Client.viewer.id && Client.base && Client.base.app){
	analytics.identify(Client.viewer.email,{
		name: Client.viewer.name, 
		email: Client.viewer.email, 
		account_id: "sys__"+Client.viewer.system_id,
		product_id: Client.base.app,
		user_base_uid: Client.viewer.id
	});
};


function url_track($ref){
	var feature=$ref.data("feature");
	if (!feature || !AP.data.isString(feature) || !feature.length){
		return;
	}
	
	var parts=feature.split(":");
	if (parts.length==3){
		return raw_track(parts[0], parts[1], parts[2]);
	}else if (parts.length==2){
		return raw_track(parts[0], parts[1]);
	}
	
};


function raw_track(module_id, feature_id, ref){
	if (!ref){
		ref="none";
	}
	
	if ((Client.env == 1) && Client.viewer && Client.viewer.id && Client.base && Client.base.app){
		analytics.track(feature_id, {
			account_id: Client.viewer.system_id,
			user_id: Client.viewer.email,
			user_base_uid: Client.viewer.id,
			product_id: Client.base.app,
			module_id: module_id,
			
			feature_id: feature_id,
			location: ref,
			type: ref,
		});
	}
};


function page_identify(){
	analytics.page({
		account_id: Client.viewer.system_id,
		user_id: Client.viewer.email,
		user_base_uid: Client.viewer.id
	});
};AP.sys.on("page.pre.transition", function(data){
	$("#ptransit").show();
	loadBar("#ptransit", true);
});

AP.sys.on("page.post.transition", function(data){
	setTimeout(function(){
		loadBar("#ptransit", false);
	},500);
	
	Context.hide();
	Context.gen.hide();
});


AP.sys.on("form.pre.submit", function(selector){
	if (Client.pageData.event && Client.pageData.event.id){
		$(selector).append("<input type='hidden' name='__event' value='"+Client.pageData.event.id+"'/>");
	}
});


AP.adaptive=function(u1, u2){	
	return true;
};



/**
 * @desc Reinit document
 */
function documentInit(){
	AP.initPageData();
	Client.title=document.title;
	nsUpdate();
	
	if (!Client.viewer || !Client.viewer.id){
	}else{
		Layout.start();
	}
};



function nsUpdate(){
	if (Client.pageData.user){
		if (!Client.data.user){
			Client.data.user=Client.pageData.user;
			AP.sys.fire("user.changed", Client.data.user, null);
		}else{
			if (Client.data.user.id!=Client.pageData.user.id){
				Client.data.user=Client.pageData.user;
				AP.sys.fire("user.changed", Client.pageData.user, Client.data.user);
			}else{
				Client.data.user=Client.pageData.user;
				AP.sys.fire("user.unchanged", Client.data.user);
			}
		}
		
		// W.log.setAdv('users', {"id":Client.data.user.id, "username": Client.data.user.username, "gavatar": Client.pageData.user.gavatar});
		// W.log.set('networks',-Client.data.user.id);
	}else{
		Client.data.user=null;
	}
	
	
	if (Client.pageData.network){
		if (!Client.data.network){
			Client.data.network=Client.pageData.network;
			AP.sys.fire("network.changed", Client.data.network, null);
		}else{
			if (Client.data.network.id!=Client.pageData.network.id){
				Client.data.network=Client.pageData.network;
				AP.sys.fire("network.changed", Client.pageData.network, Client.data.network);
			}else{
				Client.data.network=Client.pageData.network;
				AP.sys.fire("network.unchanged", Client.data.network);
			}
		}
		
		// W.log.set('networks', Client.data.network.id);
		
		
	}else{
		Client.data.network=null;
		// AP.sys.fire("network.change", network, null);
	}
};



/**
 * @desc Update HTML data to a specific div (selector)
 * @param selector
 * @param data
 */
function ap_update(selector, data){
	$(selector).html(data);
	AP.setContinuousRequest(selector);
	AP.html.init(selector);
};



/**
 * @desc Main RESET and UPDATE
 * @param callback
 */
function reset_page(callback){
	$("#page").children().remove();
	$("#page").empty().html("&nbsp;");
	// Clear lock
	
	AP.__lock=false;
	
	AP.resetPageData();
	AP.sys.fire("page.pre.transition");
	
	if (callback){
		callback();
	}
};

function update_page(data){
	$('#master').removeClass();
	ap_update("#page", data);
	
	window.scrollTo(0,0);
	$("#ap-data").empty();
	
	documentInit();
	
	AP.sys.fire("page.post.transition");
	AP.sys.fire(AP.EVENTS.PAGE_UNLOAD);
	
	
	if (AP.isset('FB')){
		try{
			FB.XFBML.parse(); 
		}catch(ex){};	
	}
};










function loadBar(canvas, status){
	if (!status){
		$(canvas).hide();
		$(canvas).data("lock", false);
		stopBar(canvas, 4)
	}else{
		$(canvas).data("lock", true);
		loadBarAnimation(canvas);
	}
};

function stopBar(canvas, len){
	for (var i=0; i<len; i++){
		$(canvas).find('.bar:eq('+i+') .anim').css({width: 0});			
	}
	
	for (var i=0; i<len; i++){
		$(canvas).find('.bar-'+i).appendTo(canvas);
	}
	
	$(canvas).data("ab",0);
}

function loadBarAnimation(canvas){
	var c=['#F03C32','#09A5E3','FFD726','#08D119'];
	var len=c.length;
	
	if (!$(canvas).data('__bars')){
		for (var i=0; i<len; i++){
			$(canvas).append("<div class='bar bar-"+i+"'><div  style='background-color:"+c[i]+"' class='anim'></div></div>");
		}
	}

	$(canvas).data('__bars',1);
	
	$(canvas).find('.bar:eq(0) .anim').show().css("width","100%");
	$(canvas).data('lock', true);
	$(canvas).show();
	
	animateBar(canvas, len);
};

function animateBar(canvas, len){
	var lock=$(canvas).data("lock");
	if (!lock){
		return;
	}
	
	var index=$(canvas).data("ab");
	if (!index){
		index=0;
	}
	index++;
	
	if (index>=len){
		index=0;
		
		for (var i=0; i<len-1; i++){
			$(canvas).find('.bar:eq('+i+') .anim').css({width: 0});			
		}
		$(canvas).find('.bar:last').prependTo(canvas);
		index++;
	}
	

	$(canvas).data("ab",index)
	$(canvas).find('.bar:eq('+index+') .anim').animate({'width':'100%'},800, function(){
		if (!$(canvas).data("lock")){
			stopBar(canvas, 4);
			return;
		}else{
			animateBar(canvas, len);
		}
	});
};/**
 * @desc Viewer Object
 */
var Viewer = new function _Viewer(){
	
	inherits(this, APViewer);

	
	this.editAccount=function(){
		AP.dialog("#account-edit-dx").temp(false).button($("#account-edit-dx").data("ok"), function(){
			Viewer.exeAccountEdit();
		},'ss').button($("#account-edit-dx").data("cancel"), function(){
			AP.dialog("#account-edit-dx").hide();
		}).show();
	};
	
	
	this.exeAccountEdit=function(){
		AP.submit("#account-edit-fx", function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			AP.alertSuccess(code.message, function(){
				AP.refresh();
			});
		});
	};
	
	
	this.editPassword=function(){
		AP.dialog("#password-edit-dx").temp(false).button($("#password-edit-dx").data("ok"), function(){
			Viewer.exePasswordEdit();
		},'ss').button($("#password-edit-dx").data("cancel"), function(){
			AP.dialog("#password-edit-dx").hide();
		}).show();
	};
	
	
	this.exePasswordEdit=function(){
		AP.submit("#password-edit-fx", function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			AP.alertSuccess(code.message, function(){
				AP.refresh();
			});
		});
	};
};// Require Configuration [Required]
AP.config.dialog={};
AP.config.dialog.engine=WTDialogEngine;
AP.config.alertDialogEngine=WTDialogEngine;
AP.config.uploadDialogEngine=UploadDialogEngine;
AP.config.ajaxAlertDialogEngine=WTAjaxDialogEngine;
AP.config.theme=0;


// Translate error messages [Required]
AP.error.messages=AP.data.assoc()
	.add(AP.error.code.CONFLICT_DATA, "Bad input. Please try again")
	.add(AP.error.code.INVALID_DATA, "Invalid data. Please try again.")
	.add(AP.error.code.INCOMPLETE_DATA, "Your submitted data is incomplete. Please try to complete all required fields.")
	.add(AP.error.code.INVALID_USER, "Authentication error. You may not be able to perform this action.")
	.add(AP.error.code.INVALID_AUTHENTICATION, "Invalid authentication. Please try again.")
	.add(AP.error.code.LOGIN_REQUIRED, "Please login to perform this action.")
	.add(AP.error.code.DB_ERROR, "Unexpected error (1). Please contact us for further information.")
	.add(AP.error.code.SV_ERROR, "Unexpected error (2). Please contact us for further information.")
	.add(AP.error.code.INVALID_PASSWORD, "Invalid password. Please try again.")
	.add(AP.error.code.INVALID_EMAIL, "Invalid or empty email. Please try again.")
	.add(AP.error.code.INVALID_USERNAME, "Invalid username. Please try again.")
	.add(AP.error.code.INVALID_CHARACTER, "Some characters you enter are not allowed. Please try again.")
	.add(AP.error.code.INVALID_CAPTCHA, "Invalid captcha security code. Please try again.")
	.add("BAD_XCODE","Your session was expired. Please refresh the page (press F5) to continue.")
	.add("FORCE_REDIRECT","Your session was expired. Please refresh the page (press F5) to continue.")
	.add("DUPLICATED EMAIL","Email bị trùng lặp vì đã đăng ký trong hệ thống trước đó.")
	.assoc();








/**
 * @desc Startup document
 */

$(document).ready(function(){
	AP.add('ap-root','ap-temp', 'ap-apps','overlay','alert','ap-data');
	$("<div id='ap-invs'></div>").appendTo(document.body);
	AP.initContinuousRequest();
	AP.setContinuousRequest();
	AP.html.init();
	documentInit();
	
	if (Client.people){
		for (var i=0; i<Client.people.length; i++){
			Client.people[i].value="@"+Client.people[i].username;
			Client.people[i].sub=Client.people[i].first_name+" "+Client.people[i].last_name;
		}
	}
	
});


function mapready(){
	AP.sys.release('mapready');
};
var TwoFactor=new function __TwoFactor(){
	
	this.init=function(){
		if (Client.viewer.tfa.status){
			$("#m_2factor .body").show();
		}
		
		$("#js-2factor-status").on("change", function(){
			var val=$(this).val();
			
			if (!parseInt(val)){
				UI.ajaxShow();
				AP.post("api/me/twofactor", {status: val}, function(code){
					UI.ajaxHide();
					if (!code.good()){
						return AP.alertError(code.message);
					}
					
					UI.flash("Updated successfully");
					AP.refresh();
				});	
			}else{
				$("#js-code-verify").show();
				$("#m_2factor .body").show();
				$("#js-code-verify input").focus();
			}
		}).val(Client.viewer.tfa.status);
	};
	
	
	this.activate=function(activate){
		var val=$("#js-code-verify input").val();
		
		UI.ajaxShow();
		AP.post("api/me/twofactor", {status: val, verifier: val}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Updated successfully");
			AP.refresh();
		});
	};
	
	
};


var LoginInfo=new function __LoginInfo(){
	this.list=function(){
		var html= AP.render(Client.pageData.logins, function(e){
			return getHTML(e);
		});
		
		$("#js-login-sessions").html(html);
	};
	
	
	function getHTML(e){
		return "<tr> <td>"+(e.medium.method)+" &middot; "+(e.email)+"</td> <td>"+(e.metatype)+" &middot; "+(e.ip_addr)+"</td> <td> Name: "+(e.data.name)+" &middot; User agent: "+(e.data.userAgent)+" &middot; Version: "+(e.data.version)+" &middot; Platform: "+(e.data.platform)+" &middot; </td> <td>"+(AP.i18n.datetime(e.since))+"</td> </tr>";
	};
	
};
Me.info=new function __WUserInfo(){
	this.edit=function(){
		AP.ajaxShow();
		AP.post("api/me/info", {}, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return;
			} 
			
			var dates=range(1,31);
			dates.unshift({label: "-- Select date --", value: 0});
			
			var months=range(1,12);
			months.unshift({label: "-- Select month --", value: 0});
			
			var years=range(2010,1930);
			years.unshift({label: "-- Select year --", value: 0});
			
			
			var user=code.user;
			
			var form=Form.create('edit-profile-fx',{'action':'api/me/edit'})
			.row(
				Form.label({label: "Your first name",sublabel: "Your first name"}),
				Form.input({name: 'first_name', "placeholder":"Your first name"}).value(user.first_name)
			)
			.row(
				Form.label({label: "Your last name",sublabel: "Your last name"}),
				Form.input({name: 'last_name', "placeholder":"Your last name"}).value(user.last_name)
			)
			.row(
				Form.label({label: "Email", sublabel: "Your email address"}),
				Form.input({name: 'email', type: "fake", "placeholder":"Your email address"}).value(user.email)
			)
			.row(
				Form.label({label: "Username", sublabel: "Your username"}),
				Form.input({name: 'username', type: "fake", "placeholder":"Your username"}).value("@<b>"+user.username+"</b>")
			)
			.row(
				Form.label({label: "Job title", sublabel: "Job title"}),
				Form.input({name: 'title', "placeholder":"Job title", readOnly:  (!Me.isSystemAdmin() && Client.system.settings.title=="no") }).value(user.title)
			)
			.row(
				Form.label({label: "Profile image", sublabel: "Profile image"}),
				Form.input({name: 'image', type: 'file', "placeholder":"&rarr; Xem ảnh đại diện"}).value((user.image.length)?user._image:null)
			)
			.row(
				Form.label({label: "Date of birth", sublabel: "Date of birth"}),
				Form.inputGroup([Form.input({name: 'dob_day', role:"dob_day", type: "select", options: dates}).value(Client.viewer.dob.day), 
				   Form.input({name: 'dob_month', "placeholder":"month", role:"dob", type: "select", options: months}).value(Client.viewer.dob.month),
				   Form.input({name: 'dob_year', "placeholder":"year", role:"dob", type: "select", options: years}).value(Client.viewer.dob.year)
				]) 
			)
			.row(
				Form.label({label: "Your phone number", sublabel: "Your phone number"}),
				Form.input({name: 'phone', "placeholder":"Your phone number"}).value(user.phone)
			)
			.row(
				Form.label({label: "Current address", sublabel: "Current address"}),
				Form.input({name: 'address', type:"textarea", "placeholder":"Current address"}).value(user.address)
			)
			.buttons([
				 {label: "Update", action: function(){
					 Form.submit("edit-profile-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
					
						 Form.hide("edit-profile-fx");
						 AP.alertSuccess(code.message, function(){
							 AP.refresh();
						 });
					 });
				 }, style: 'ok -success -rounded bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("edit-profile-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
		
			Form.pop({id:'edit-fx-dx', width: 720, label: 'Edit personal profile'}).setForm(form).show();
			
			
		});
		
	};
	
	
	/**
	 * @desc Edit account password
	 */
	this.editPassword = function(){
		var form=Form.create('edit-profile-fx',{'action':'api/me/edit.password'})
		.row(
			Form.label({label: "Current password",sublabel: "Current password"}),
			Form.input({name: 'password', "type":"password", "placeholder":"Current password"})
		)
		.row(
			Form.label({label: "New password",sublabel: "New password"}),
			Form.input({name: 'new_password', "type":"password", "placeholder":"New password"})
		)
		.row(
			Form.label({label: "Retype new password", sublabel: "Retype new password"}),
			Form.input({name: 'new_password2', type: "password", "placeholder":"Retype new password"})
		)
		.row(
			Form.label({label: "Force logout", sublabel: "Force logout from all devices"}),
			Form.input({name: 'force_logout', type: "select", options:[{label:"No", value:0}, {label:"Yes", value:1}]}).value(1)
		)
		.note("Change your password may force you to logout of every mobile device")
		.buttons([
			 {label: "Change password", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Password was updated successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 480, label: 'Change password'}).setForm(form).show();
		
	};
	
	
	
	/**
	 * @desc Edit personal account language
	 */
	this.editLanguage = function(){
		var form=Form.create('edit-profile-fx',{'action':'api/me/edit.language'})
		.row(
			Form.label({label: "Tùy chọn ngôn ngữ",sublabel: "Select your language"}),
			Form.input({name: 'lang', "type":"select", options: [{label:"Tiếng Việt | Vietnamese", value:"vi"}, {label:"Tiếng Anh | English", value:"en"}]}).value(Client.viewer.lang)
		)
		.buttons([
			 {label: "Change language", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Language preference updated successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 420, label: 'Change language'}).setForm(form).show();
		
	};
	

	/**
	 * @desc Edit timezone
	 */
	this.editTimezone = function(){
		var timezones=[];
		for (var i=-12; i<12; i++){
			if (i<0){
				timezones.push({label: "GMT"+i, value: i});
			}else{
				timezones.push({label: "GMT+"+i, value: i});	
			}
		}
		
		var form=Form.create('edit-profile-fx',{'action':'api/me/edit.timezone'})
		.row(
			Form.label({label: "Edit timezone (beta)",sublabel: "Edit timezone"}),
			Form.input({name: 'timezone', "type":"select", options: timezones}).value(Client.timezone)
		)
		.buttons([
			 {label: "Update", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Updated successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 420, label: 'Edit timezone'}).setForm(form).show();
		
	};
	
	
	
	
	
	this.editSocial=function(){
		AP.ajaxShow();
		AP.post("api/me/info", {}, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				return;
			}
			
			var user=code.user;
			
			var form=Form.create('edit-profile-fx',{'action':'api/me/edit.social'})
			.row(
				Form.label({label: "Homepage",sublabel: "Your personal homepage"}),
				Form.input({name: 'website', "placeholder":"Your personal homepage"}).value(user.social.website)
			)
			.row(
				Form.label({label: "Facebook",sublabel: "Your facebook profile link"}),
				Form.input({name: 'facebook', "placeholder":"Your Facebook profile link"}).value(user.social.facebook)
			)
			.row(
				Form.label({label: "Linkedin",sublabel: "Your Linkedin profile link"}),
				Form.input({name: 'linkedin', "placeholder":"Your Linkedin profile link"}).value(user.social.linkedin)
			)
			.row(
				Form.label({label: "Twitter",sublabel: "Your Twitter profile link"}),
				Form.input({name: 'twitter', "placeholder":"Your Twitter profile link"}).value(user.social.twitter)
			)
			.row(
				Form.label({label: "Skype",sublabel: "Your Skype username"}),
				Form.input({name: 'skype', "placeholder":"Your Skype username"}).value(user.social.skype)
			)
			.buttons([
				 {label: icon("lock",14)+ "Update social profiles", action: function(){
					 Form.submit("edit-profile-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
						 
						 AP.alertSuccess("Your profile was updated successfully", function(){
							 AP.xRefresh();
						 });
						 Form.hide("edit-profile-fx");
					 });
				 }, style: 'ok -success -rounded bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("edit-profile-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
		
			Form.pop({id:'edit-fx-dx', width: 600, label: 'Update social profiles'}).setForm(form).show();
		});
	};
	
	
	this.editAdvanced=function(){
		AP.ajaxShow();
		AP.post("api/me/info", {}, function(code){
			AP.ajaxHide();
			
			if (!code.good()){
				return;
			}
			
			var user=code.user;
			var about="";
			if (user.about && user.about.length){
				about=user.about.toTextarea();
			}
			
			var form=Form.create('edit-profile-fx',{'action':'api/me/edit.advanced'})
			.row(
				Form.label({label: "About me",sublabel: "Describe yourself in a few sentences"}),
				Form.input({name: 'aboutme', "placeholder":"Describe yourself in a few sentences", type: "textarea"}).value(about).css({height: 150})
			).rowHidden(
				Form.label({label: "Education",sublabel: "Your most recent school or university"}),
				Form.input({name: 'education', "placeholder":"Your most recent school or university"})
			).row(
				Form.label({label: "Interests",sublabel: "Your list of interests"}),
				Form.input({name: 'interests', "placeholder":"List of your interests"}).value(user.interests)
			).buttons([
				 {label: "Save now", action: function(){
					 Form.submit("edit-profile-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
						 AP.alertSuccess("Your profile was updated successfully.", function(){
							 AP.xRefresh();
						 });
						 Form.hide("edit-profile-fx");
					 });
				 }, style: 'ok -success -rounded bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("edit-profile-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
			
			Form.pop({id:'edit-fx-dx', width: 640, label:'Edit about-me and other personal information'}).setForm(form).show(); 
		});
	};
	
	
	this.editUnit = function(){
		AP.ajaxShow();
		
		if(!Me.isSystemAdmin()) {
			return;
		}
		
		if(Client.system.path != 'daily' && Client.system.path != 'uni') {
			return;
		}
		
		AP.post("api/me/info.mog", {}, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return;
			}
			
			var user = code.user;
			
			var form = Form.create('edit-profile-fx',{'action':'api/me/edit.mogunit'})
			.row(
				Form.label({label: "Chức vụ", sublabel: "Chức danh của thành viên trong công ty"}),
				Form.input({name: 'title', "placeholder":"Chức vụ"}).value(user.title)
			)
			.row(
				Form.label({label: "Phòng ban", sublabel: "Đơn vị làm việc"}),
				Form.input({name: 'mog_unit_code', type: 'select', options: code.mog_unit_options}).value(user.mog_unit_code)
			)
			.buttons([
				 {label: "Sửa thông tin đơn vị", action: function(){
					 Form.submit("edit-profile-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
					
						 Form.hide("edit-profile-fx");
						 AP.alertSuccess(code.message, function(){
							 AP.refresh();
						 });
					 });
				 }, style: 'ok -success -rounded bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("edit-profile-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
		
			Form.pop({id:'edit-fx-dx', width: 720, label: 'Sửa thông tin đơn vị'}).setForm(form).show();
			
			
		});
		
	};
};var Admin=new function __AdminTool(){
	this.deactivate=function(username){
		Context.close();
		AP.confirm("Deactivate @<b>"+(username)+"</b>'s account? The user will NOT be able to access the system again.", function(){
			AP.ajaxShow();
			AP.post("api/company/deactivate",{username: username}, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("Account deactivated.", function(){
					AP.refresh();
				});
			});
		});
	};
	
	
	
	
	this.reactivate=function(username){
		Context.close();
		AP.confirm("Please confirm that you will reactivate @<b>"+username+"</b>'s account? This action cannot be undone.", function(){
			AP.ajaxShow();
			AP.post("api/company/reactivate",{username: username}, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("Account reactivated.", function(){
					AP.refresh();
				});
			});
		});
	};
	
	
	
	
	this.edit=function(username){
		UI.ajaxShow();
		AP.post("api/company/user.info", {username: username}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return;
			}
			
			var user=code.user;
			var dates=range(1,31);
			dates.unshift({label: "-- Chọn ngày --", value: 0});
			
			var months=range(1,12);
			months.unshift({label: "-- Chọn tháng --", value: 0});
			
			var years=range(2010,1930);
			years.unshift({label: "-- Chọn năm --", value: 0});
			
			
			
			var form=Form.create('edit-profile-fx',{'action':'api/company/user.edit'})
			.row(
				Form.label({label: "First name",sublabel: "The first name"}),
				Form.input({name: 'first_name', "placeholder":"First name"}).value(user.first_name)
			)
			.row(
				Form.label({label: "Last name",sublabel: "The last name"}),
				Form.input({name: 'last_name', "placeholder":"Last name"}).value(user.last_name)
			)
			.row(
				Form.label({label: "Email", sublabel: "Email address"}),
				Form.input({name: 'email', type: "fake", "placeholder":"Email address"}).value(user.email)
			)
			.row(
				Form.label({label: "Username", sublabel: "The username"}),
				Form.input({name: 'username', type: "fake", "placeholder":"Email address"}).value("@<b>"+user.username+"</b>")
			)
			.row(
				Form.label({label: "Job title", sublabel: "Job title"}),
				Form.input({name: 'title', "placeholder":"Job title"}).value(user.title)
			)
			.row(
				Form.label({label: "Profile image", sublabel: "Profile image"}),
				Form.input({name: 'image', type: 'file', "placeholder":"&rarr; View your profile image"}).value((user.image.length)?user._image:null)
			)
			.row(
				Form.label({label: "Date of birth", sublabel: "Your date of birth"}),
				Form.inputGroup([Form.input({name: 'dob_day', "placeholder":"Day", role:"dob_day", type: "select", options: dates}).value(user.dob.day), 
				   Form.input({name: 'dob_month', "placeholder":"month", role:"dob", type: "select", options: months}).value(user.dob.month),
				   Form.input({name: 'dob_year', "placeholder":"year", role:"dob", type: "select", options: years}).value(user.dob.year)
				]) 
			)
			.row(
				Form.label({label: "Phone number", sublabel: "Primary phone number"}),
				Form.input({name: 'phone', "placeholder":"Primary phone number"}).value(user.phone)
			)
			.row(
				Form.label({label: "Current address", sublabel: "Current address"}),
				Form.input({name: 'address', type:"textarea", "placeholder":"Current address"}).value(user.address)
			)
			.hiddens({'username': username})
			.buttons([
				 {label: "Edit account info", action: function(){
					 Form.submit("edit-profile-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
					
						 Form.hide("edit-profile-fx");
						 // AP.alertSuccess(code.message);
						 UI.flash("Edited successfully");
						 AP.refresh();
					 });
				 }, style: 'ok -success -rounded bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("edit-profile-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
		
			Form.pop({id:'edit-fx-dx', width: 720, label: 'Edit account info of @'+username}).setForm(form).show();
			
		});
	};
	
	
	
	
	this.editManager=function(username){
		var user=People.get(username);
		
		var form=Form.create('edit-profile-fx',{'action':'api/company/user.manager'})
		.row(
			Form.label({label: "Manager", sublabel: "The direct manager"}),
			Form.input({name: 'manager', type: "text", "placeholder":"Type to select manager", role: "tag"}).value(user.manager)
		)
		.hiddens({
			username: username
		})
		.render(function($f){
			$f.find("manager").focus();
		})
		.buttons([
			 {label: "Set manager", action: function(){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("edit-profile-fx");
					 // AP.alertSuccess(code.message);
					 UI.flash("Editted successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 480, label: 'Set managers for '+user.name}).setForm(form).show();
		
	};
	
	
	
	this.createAccount=function(){
		var form=Form.create('create-account-fx',{action: 'api/company/account/create'})
		.row(
			Form.label({label: "Họ &amp; tên đệm *",sublabel: "Họ &amp; tên đệm"}),
			Form.input({name: 'last_name', "placeholder":"Họ & tên đệm"})
		)
		.row(
			Form.label({label: "Tên *",sublabel: "Tên tài khoản"}),
			Form.input({name: 'first_name', "placeholder":"Tên tài khoản"})
		)
		.row(
			Form.label({label: "Username *",sublabel: "<span class='red'>Username của tài khoản sẽ không thể thay đổi - vui lòng lựa chọn username phù hợp.</span>"}),
			Form.input({name: 'username', "placeholder":"Username", render:"<div class='input-render'>http://"+Client.system.domain+"/</div>"})
		)
		.row(
			Form.label({label: "Email *",sublabel: "Một mật khẩu tạm thời sẽ được gửi đến email này."}),
			Form.input({name: 'email', "placeholder":"Email tài khoản"})
		)
		.row(
			Form.label({label: "Chức danh",sublabel: "Chức danh, chức vụ hoặc vị trí trong công ty"}),
			Form.input({name: 'title', "placeholder":"Chức danh, chức vụ hoặc vị trí"})
		)
		.row(
			Form.label({label: "Phân quyền sử dụng",sublabel: "Phân quyền sử dụng hệ thống"}),
			Form.input({name: 'priv', type: "select", options:[{label: "Thành viên thông thường", value: "member"}, {label: "System admin - Quản trị", value: "admin"}, {label: "System owner - Quản trị cấp cao", value: "owner"}]})
		)
		.hiddens(
			{
				token:Client.system.token
			}
		)
		.buttons([
			 {label: "Tạo tài khoản mới", action: function(){
				 Form.submit("#create-account-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-account-fx");
					 AP.alertSuccess("Tài khoản đã được tạo thành công.", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-account-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Tạo tài khoản mới'}).setForm(form).show();
		
	};
	
	
	
	
	this.createNetwork = function(parent_id){
		if (!parent_id){
			parent_id=0;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/company/team/create'})
		.row(
			Form.label({label: "Tên nhóm *",sublabel: "The group name"}),
			Form.input({name: 'name', "placeholder":"The user group name"})
		)
		.row(
			Form.label({label: "Directory *",sublabel: "The relative directory from your domain <i>"+Client.system.domain+"</i>"}),
			Form.input({name: 'path', "placeholder":"Team directory", render:"<div class='input-render'>http://"+Client.system.domain+"/</div>"})
		)
		.row(
			Form.label({label: "Group owner *",sublabel: "Please select the user group's owner"}),
			Form.input({name: 'leader', "placeholder":"The group owner", role:"user"})
		)
		.row(
			Form.label({label: "Các thành viên khác *",sublabel: "People can be added to the business unit later on."}),
			Form.input({name: 'users', "placeholder":"Type @ to tag and add people to this business unit", role:"tag"})
		)
		.rowHidden(
			Form.label({label: "Membership", sublabel: "How people can view and join the group?"}),
			Form.input({name: 'type', 'type':'list', options: [
				{value: 1, "label":"Public membership", "sublabel":"Everyone can see the team and join"},
				{value: 3, "label":"Restricted membership", "sublabel":"The team is invisible to everyone and people outside can join by invitation only"}
			]}).value(3)
		)
		.rowHidden(
			Form.label({label: "Phòng ban cấp trên *", sublabel: "Select the parent business unit in the organization chart"}),
			Form.input({name: 'parent', 'type':'select', options: Company.chart.asOptions(null, function(e){
				if (e.metatype=="me"){
					return false;
				}
				return true;
			})}).value(parent_id)
		)
		.row(
			Form.label({label: "Giới thiệu thêm",sublabel: "Short description about the user group"}),
			Form.input({name: 'about', 'type':'textarea', "placeholder":"Short description about the user group"})
				.css({height: '80px'})
		)
		.render(function(fobj){
		})
		.hiddens({
			token:Client.system.token
		})
		.buttons([
			 {label: "Create user group", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("A new user group was just created", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Create a new user group'}).setForm(form).show();
		
	};
	
	
	
	this.checkUserQuota=function(){
		if (Client.quota_alert){
			$("#quota-alert").html("<div class='box'>Số lượng tài khoản trên hệ thống đã/sắp vượt qua giới hạn cho phép của <b>"+Client.system.name+"</b> (<b>"+Client.quota_alert.limit+"</b> tài khoản). Vui lòng <a href='https://"+Client.domain+"/private/upgrade' target='_blank'>nâng cấp tài khoản</a> để tạo thêm thành viên.</div>");
		}
	};
	
	
	
	/**
	 * @desc Let admin edit the company
	 */
	this.editCompany=function(){
		var form=Form.create('create-team-fx',{action: 'api/company/edit'})
		.row(
			Form.label({label: "Company name *",sublabel: "Company name"}),
			Form.input({name: 'name', "placeholder":"The company name"}).value(Client.system.name)
		)
		.row(
			Form.label({label: "Unique path *",sublabel: "Primary path only contains ONLY regular characters and MUST be unique within Base platform"}),
			Form.input({name: 'path', "placeholder":"Unique path", type:"fake"}).value(Client.system.path)
		)
		.row(
			Form.label({label: "Company address",sublabel: "Company address"}),
			Form.input({name: 'address', "placeholder":"Địa chỉ công ty"}).value(Client.system.address)
		)
		.row(
			Form.label({label: "Phone number",sublabel: "Phone number"}),
			Form.input({name: 'phone', "placeholder":"Phone number"}).value(Client.system.phone)
		)
		.row(
			Form.label({label: "Company website",sublabel: "Company website"}),
			Form.input({name: 'website', "placeholder":"Company website"}).value(Client.system.website)
		)
		.render(function(fobj){
			
		})
		.hiddens({
			token:Client.system.token
		})
		.buttons([
			 {label: "Update", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 UI.flash("Save successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Edit company info'}).setForm(form).show();
		
	};
	
};




Admin.sa=new function __AdminSpecialAccess(){
	this.edit=function(username){
		var user=People.get(username);
		if (!user){
			return;
		}
		
		// var accesses=[{name: "hr.admin", color: 4}, {name: "training.admin", color: 3}, {name: "checkin.admin", color: 5}, {name: "asset.admin", color: 2}, {name: "case.admin", color: 7}];
		
		var accesses=AP.array.select(Client.applist, function(e){
//			if (!AP.array.contain(Client.subs, e, function(s, v){
//				return s.app==v.key;
//			})){
//				return null;
//			}
			
			if (e.key=="base" || e.key=="message" || e.key=="drive" || e.key=="me" || e.key=="draw"){
				return null;
			}
			
			if (e.key=="account" || e.key=="sender" || e.key=="note" || e.key=="content"){
				return null;
			}
			
			return {name: e.key+".admin", label: e.key+".admin", color: UI.str2int(e.key)};
		});
		
		var form=Form.create('create-team-fx',{action: 'api/sa/edit'})
		.row(
			Form.label({label: "Tài khoản",sublabel: ""}),
			Form.input({name: 'name_fake', type: "fake", value: username}).value(user.name)
		)
		.row(
			Form.label({label: "Special accesses *",sublabel: "Pick all access"}),
			Form.input({name: 'accesses', placeholder: "Type to pick accesses"})
		)
		.hiddens({
			token:Client.system.token,
			username: username
		})
		.render(function($f){
			var $input=$f.find("accesses");
			AP.UI.tagcloud($input, accesses, user.sas);
		})
		.buttons([
			 {label: "Save accesses", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Special accesses updated for @"+username, function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 500, label: 'Grant special access'}).setForm(form).show();
		
	};
	
	
	
	this.setIPRange=function(){
		var form=Form.create('create-team-fx',{action: 'api/company/ipconfig/set'})
		.row(
			Form.label({label: "Set ip ranges (commas for multiple ranges)"}),
			Form.input({name: 'ips', type: "text", placeholder: "Leave blank for all ip accesses"}).value(Client.base.ipranges)
		)
		.hiddens({
			token:Client.system.token,
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Save setting", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Set IP range', layout: "block"}).setForm(form).show();
		
	};

	
	
	
	this.setUserIPRange=function(username, ranges){
		var user=PeopleMng.info(username, function(user){
			if (!user){
				return true;
			}
			
			var form=Form.create('create-team-fx',{action: 'api/company/ipconfig/user.set'})
			.row(
				Form.label({label: "Set ip ranges (commas for multiple ranges)"}),
				Form.input({name: 'ips', type: "text", placeholder: "Leave blank for all ip accesses"}).value(user.ips)
			)
			.hiddens({
				token:Client.system.token,
				username: user.username
			})
			.render(function($f){
			})
			.buttons([
				 {label: "Save setting", action: function(){
					 Form.submit("#create-team-fx", function(code){
						 if (!code.good()){
							 return AP.alertError(code.message);
						 }
					
						 Form.hide("create-team-fx");
						 AP.alertSuccess("Update successfully", function(){
							 AP.refresh();
						 });
					 });
				 }, style: 'ok -success -rounded -bold'},
				 {label: "Cancel", action: function(){
					 Form.hide("create-team-fx");
				 }, style:'cancel -passive-2 -rounded'}
			]).settings();
		
			Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Set IP range for '+user.name, layout: "block"}).setForm(form).show();
		});
	};
	
	
	
	
	this.setGroupIPRange=function(group_id, group_name){
		var form=Form.create('create-team-fx',{action: 'api/company/ipconfig/group.set'})
		.row(
			Form.label({label: "Set ip ranges (commas for multiple ranges)"}),
			Form.input({name: 'ips', type: "text", placeholder: "Leave blank to remove IP block"})
		)
		.hiddens({
			token:Client.system.token,
			id: group_id
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Save setting", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Set Group IP range for group: '+group_name, layout: "block"}).setForm(form).show();
	};
	
	
	this.setPrivacy=function(){
		var form=Form.create('create-team-fx',{action: 'api/company/privacy/set'})
		.row(
			Form.label({label: "Account view permission"}),
			Form.input({name: 'privacy', type: "select", 
				options: [{label:"Public (General user infos are public within the company)", value:0}, {label:"Private (General user infos are private within the company)", value:1}]}).value(Client.system.privacy)
		)
		.hiddens({
			token:Client.system.token,
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Update", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Account view permission', layout: "block"}).setForm(form).show();
		
	};
	
	
	this.setAppUser=function(){
		var actions=[];
		for (var i=0; i<Client.subs.length; i++){
			var limit=Client.subs[i].limit;
			if (!limit){
				limit=Client.system.user_limit;
				Client.subs[i].limit=limit;
			}
			actions.push({label: Client.subs[i].app+" &rsaquo; " +Client.subs[i].sub, sublabel: "No more than <b>"+limit+"</b> users",data: Client.subs[i]});
		}
		
		AP.selectAction(actions, function(e){
			setUsersForApp(e.data);
		}, {title:"Please pick a subscription"});
	};
	
	
	this.manageUserApps=function(appkey){
		$.log(Client.subs);
		$.log(Client);
		var sub=AP.array.single(Client.subs, function(e){
			return e.app==appkey;
		})
		
		if (sub){
			setUsersForApp(sub);	
		}
	};
	
	
	
	this.disable2FA=function(username){
		AP.confirm("Disable two factor authentication?", function(){
			UI.ajaxShow();
			AP.post("api/company/2fa/disable", {username: username}, function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("Disable successfully ...");
			});
		});
	};
	
	
	
	
	this.setUserPassword=function(username){
		var user=People.get(username);
		if (!user){
			return;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/company/user/setpassword'})
		.row(
			Form.label({label: "User"}),
			Form.input({name: 'text', type: "fake", placeholder: "User password"}).value("<b>"+user.name+"</b> ("+user.username+")")
		)
		.row(
			Form.label({label: "Password"}),
			Form.input({name: 'password', type: "password", placeholder: "User password"})
		)
		.row(
			Form.label({label: "Retype password"}),
			Form.input({name: 'repassword', type: "password", placeholder: "Retype password"})
		)
		.hiddens({
			username: username,
			token:Client.system.token,
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Set password", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Set user password', layout: "block"}).setForm(form).show();
		
	};
	
	
	this.setUserEmail=function(username){
		var user=People.get(username);
		if (!user){
			return;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/company/user/setemail'})
		.row(
			Form.label({label: "User"}),
			Form.input({name: 'text', type: "fake", placeholder: "User"}).value("<b>"+user.name+"</b> ("+user.email+")")
		)
		.row(
			Form.label({label: "Email"}),
			Form.input({name: 'email', type: "text", placeholder: "User email"})
		)
		.hiddens({
			username: username,
			token:Client.system.token,
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Set email", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Set user email', layout: "block"}).setForm(form).show();
		
	};
	
	
	
	function setUsersForApp(app){
		var users=[];
		if (app.users){
			users=app.users;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/sub/users'})
		.row(
			Form.label({label: "Targeted app"}),
			Form.input({name: 'text', type: "fake", placeholder: "App"}).value(app.app)
		)
		.row(
			Form.label({label: "Select users (limit "+app.limit+")"}),
			Form.input({name: 'usernames', type: "text", placeholder: "Type @ to tag", role:"tag", type:"textarea"}).value(users)
		)
		.row(
			Form.label({label: "Or select users by user groups"}),
			Form.input({name: 'teams', type: "text", placeholder: "Type @ to tag", role:"teams", type:"textarea"})
		)
		.hiddens({
			app: app.app
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Update", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Select users for app '+app.app, layout: "block"}).setForm(form).show();
		
	}
	
};


Admin.token=new function __AdminToken(){
	
	this.create=function(){
		var form=Form.create('create-team-fx',{action: 'api/tokens/issue'})
		.row(
			Form.label({label: "App ID"}),
			Form.input({name: 'appkey', type: "text", placeholder: "For example: wework, request"})
		)
		.hiddens({
			token:Client.system.token,
		})
		.render(function($f){
		})
		.buttons([
			 {label: "Generate token", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Update successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 450, label: 'Issue new app token', layout: "block"}).setForm(form).show();
			
	};
	
	
	this.remove=function(ref){
		var id=$(ref).closest(".js-token").data("id");
		
		AP.confirm("Confirm to remove this token? Current apps using this token will not be accepted.", function(){
			UI.ajaxShow();
			AP.post("api/tokens/remove",{id: id}, function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("Xóa thành công!", function(){
					AP.refresh();
				});
			});
		});
	};
	
	
	
	this.render=function(tokens){
		if (!tokens){
			return;
		}
		
		var html="";
		for (var i=0; i<tokens.length; i++){
			var e=tokens[i];
			
			html+="<tr class='js-token' data-id='"+e.id+"'>" +
				"<td><b>"+e.app+"</b></td>" +
				"<td><div class='textarea'><textarea>"+e.token+"</textarea></div></td>" +
				"<td><div>@"+e.issued_by+"<div></td>" +
				"<td><div class='actions'><div class='a action std normal' onclick='Admin.token.remove(this);'>Remove token</div></div></td>" +
			"</tr>";
		}
		
		
		$("#js-tokenlist tbody").html(html);
	};
	
};


Admin.media=new function __AdminMedia(){
	this.render=function(){
		$("#js-medialist tr.js-item").each(function(){
			var name=$(this).data("name");
			var id=$(this).data("id");
			
			var preview="";
			if (Client.pageData.media[id]){
				var url=Client.pageData.media[id];
				preview="<a target='_blank' href='"+url+"'>Preview</a>";
			}
			
			$(this).html("<td><b>"+name+"</b></td>" +
				"<td>"+preview+"</td>" +
				"<td>" +
				"	<div class='buttons'>" +
				"		<div class='button js-upload'>Upload</div>" +
				"		<div class='button js-remove'>Xóa</div>" +
				"	</div>" +
				"</td>");
			
			$(this).find(".js-remove").click(function(){
				var mid=$(this).closest("tr").data("id");
				AP.confirm("Are you sure to remove this resource?", function(){
					UI.ajaxShow();
					AP.post("api/company/media/remove",{id: mid}, function(code){
						UI.ajaxHide();
						
						if (!code.good()){
							return AP.alertError(code.message);
						}
						
						UI.flash("Remove successfully ...");
						AP.xRefresh();
					});
				});
			});
			
			
			AP.uploadable($(this).find(".js-upload"),{
				action: "api/company/media/upload",
				data: {id: id},
				name: "image"
			}, function(code){
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Update successfully");
				AP.xRefresh();
			})
		});
	};
};


Admin.safelogs=new function __AdminSafelog(){
	this.list=function(){
		$("#js-safelogs").html(AP.render(Client.pageData.safelogs, function(e){
			var u=People.get(e.user_id);
			return "<tr> <td><b class='upper url a' style='font-size:11px' data-urlparam='action' data-value='"+(e.action)+"'>"+(e.action)+"</b></td> <td>"+(e.message)+"</td> <td>"+(safe(e.label))+"</td> <td><span class='url a normal' data-urlparam='user' data-value='@"+(u.username)+"'>"+(u.name)+"</span></td> <td><span class='url a normal' data-url='syslogs/show/"+(e.id)+"' data-blank='1'>Raw data</span></td> </tr>";
		}));
		
		$("#js-safelogs").closest("table").after("<div id='js-pags' style='padding:50px 0'><div class='center'></div></div>");
		UI.paginate("#js-pags .center");
	};
};


Admin.msg=new function __AdminMsg(){
	/**
	 * @desc Set messaging status
	 */
	this.setStatus=function(user, flag){
		var opts=[{label:"Enabled", value:0}, {"label":"Block creating new channels", value: 1}, {label:"Block creating channels and receiving messages", value: 2}];
		
		var form=Form.create('edit-profile-fx',{'action':'api/company/user.message'})
		.row(
			Form.label({label: "Message status",sublabel: "Message status"}),
			Form.input({name: 'status', "type":"select", "placeholder":"Message status", options: opts}).value(user.disabled_message)
		)
		.hiddens({
			username: user.username
		})
		.buttons([
			 {label: "Save", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Saved successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 500, label: 'Change message status'}).setForm(form).show();
		
	};
};


var SAML=new function __SAML(){
	this.init=function(){
		getInfo(function(saml){
			edit(saml);
		});
	};
	
	
	/**
	 * @desc Login dialog
	 */
	this.login=function(){
		var cache=AP.log.getValue("sso_initial");
		
		var form=Form.create('create-team-fx',{action: 'a/saml'})
		.row(
			Form.label({label: "Enter your  email or system ID *"}),
			Form.input({name: 'initial', placeholder:"Enter your  email or system ID"}).value(cache)
		).buttons([
			 {label: "Continue", action: function(){
				 var val=safe($("#create-team-fx input[name=initial]").val());
				 AP.log.setValue("sso_initial", val);
				 
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 AP.redirect(Base.domain("sso")+"/saml/login/"+code.saml);
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 400, label: 'SAML Single SignOn', layout:"flat"}).setForm(form).show().focus("initial");
		
	};
	
	
	
	function edit(saml){
		var form=Form.create('create-team-fx',{action: 'api/sso/saml.update'})
		.row(
			Form.label({label: "Status *"}),
			Form.input({name: 'status', type:"select", options: [{label:"Enabled", value:0}, {label:"Disabled", value:-1}]}).value(saml.status)
		)
		.row(
			Form.label({label: "Require"}),
			Form.input({name: 'forced', type:"checkbox", "role":"checkbox", "placeholder":"Force using SAML when logging in"}).value(saml.forced)
		)
		.row(
			Form.label({label: "Entity ID *"}),
			Form.input({name: 'entity_id', "placeholder":"Entity ID"}).value(saml.entity_id)
		)
		.row(
			Form.label({label: "SSO URL *"}),
			Form.input({name: 'sso_url', "placeholder":"SSO URL"}).value(saml.sso_url)
		)
		.row(
			Form.label({label: "IdP POST Logout (SLO) URL"}),
			Form.input({name: 'idp_slo_url', "placeholder":"IdP POST Logout URL"}).value(saml.idp_slo_url)
		)
		.row(
			Form.label({label: "x509 Certificate *"}),
			Form.input({name: 'cert', "placeholder":"x509 Certificate", type:"textarea"}).css({minHeight: 300})
		)
		.row(
			Form.label({label: "Service Provider ACS URL"}),
			Form.input({name: 'sp_acs_url', "placeholder":"Service Provider Login URL", type:"fake"}).value(Base.domain("sso")+"/saml/exchange/"+Client.system.path+"-"+Client.system.id)
		)
		.row(
			Form.label({label: "Service Provider Entity ID"}),
			Form.input({name: 'sp_entity_id', "placeholder":"Service Provider Login URL", type:"fake"}).value(Base.domain("sso")+"/saml/"+Client.system.path+"-"+Client.system.id)
		)
		.row(
			Form.label({label: "Service Provider Logout URL"}),
			Form.input({name: 'logout_url', "placeholder":"Service Provider Login URL", type:"fake"}).value(Base.domain("sso")+"/saml/logout/"+Client.system.path+"-"+Client.system.id)
		)
		.render(function(fobj){
			fobj.find("cert").val(saml.cert)
		})
		.hiddens({
			token:Client.system.token
		})
		.buttons([
			 {label: "Update", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 UI.flash("Save successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'SAML IdP Config', layout:"flat"}).setForm(form).show();
	};
	
	
	
	/**
	 * @desc Get information
	 */
	function getInfo(callback){
		AP.post("api/sso/saml", {}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.saml);
		});
	};
};

Admin.ms=new function __AdminMS(){
	this.makeAdmin=function(username){
		Context.close();
		AP.confirm("Make @<b>"+username+"</b> an admin?", function(){
			AP.ajaxShow();
			var data;
			if (Client.data.network && Client.data.network.id){
				data={username: username, role:'admin', network: Client.data.network.id};
			}else{
				data={username: username, role:'admin', system: Client.system.id};
			}
			
			AP.post("api/network/role/set", data, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Privilege granted.");
				AP.trigger("user.updated", code.user);
				AP.refresh();
			});
		});
	};
	
	
	
	this.makeMember=function(username){
		Context.close();
		AP.confirm("Remove admin/owner access of @<b>"+username+"</b>?", function(){
			AP.ajaxShow();
			var data;
			if (Client.data.network && Client.data.network.id){
				data={username: username, role:'member', network: Client.data.network.id};
			}else{
				data={username: username, role:'member', system: Client.system.id};
			}
			
			AP.post("api/network/role/set", data, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Privilege granted.");
				AP.trigger("user.updated", code.user);
				AP.hideAlert();
				AP.refresh();
			});
		});
	};
	
	
	
	this.revoke=function(username){
		Context.close();
		AP.confirm("Revoke access of @<b>"+username+"</b> from this team?", function(){
			var data;
			if (Client.data.network && Client.data.network.id){
				data={username: username, network: Client.data.network.id, token: Client.data.network.token};
			}else{
				return AP.alertError("Cannot revoke access from the primary team. If you want to block this user from the company, please <b>Deactivate such account</b>.")
			}
			
			AP.ajaxShow();
			AP.post("api/network/member/revoke", data, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Access revoked.");
				AP.hideAlert();
				AP.refresh();
			});
		});
	};
	
	
	
	
	this.makeOwner=function(username){
		Context.close();
		AP.confirm("Make @<b>"+username+"</b> an owner?", function(){
			AP.ajaxShow();
			var data={};
			
			if (Client.data.network){
				data={username: username, role:'owner', network: Client.data.network.hid, token: Client.data.network.token};	
			}else{
				data={username: username, role:'owner', network: Client.root_nework_id};
			}
			
			
			AP.post("api/network/role/set",data, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Privilege granted.");
				AP.trigger("user.updated", code.user);
				AP.hideAlert();
			});
		});
	};
	
	
};var PeopleMng=new function __PeopleMng(){
	this.info=function(username, callback){
		AP.ajaxShow();
		AP.post("api/user/info", {username: username}, function(code){
			AP.ajaxHide();
			if (!code.good()){
				return;
			}
			
			callback(code.user);
		});
	};
	
	
	this.display=function(users){
		if (!users){
			users=Client.people;
		}
		
		var html=AP.render(users, getPersonHTML);
		$("#people-list tbody").html(html);
		
		fixCounters(users);
		
		var tab=Query.get("tab");
		if (tab && tab.length){
			PeopleMng.show(tab, true);
		}
		
		
		Online.loaded(function(){
			Online.reorder(users);
			var html=AP.render(users, getPersonHTML);
			$("#people-list tbody").html(html);
			
			fixCounters(users);
			
			var tab=Query.get("tab");
			if (tab && tab.length && tab!="all"){
				PeopleMng.show(tab, true);
			}else if (tab && tab=="all"){
				PeopleMng.show("", true);
				$("#mngheader .tab").setActive(0);
			}
		});
		
	};
	
	this.displayDeactivated=function(users){
		if (!users){
			users=Client.people;
		}
		
		var html=AP.render(users, getDeactivatedHTML);
		$("#people-list tbody").html(html);
		
		$("#mngheader .tab").setActive(3);
		$("#mngheader .tab").click(function(){
			var tab=$(this).data("tab");
			if (tab){
				AP.toURL("company?tab="+tab);
			}
		})
	};
	
	
	
	this.show=function(tab, inline){
		
		if (!tab){
			tab=Query.get("tab");
		}
		
		$("#mngheader .menu .tab").setActive(".tab-"+tab);
		
		if (Client.path.current=="company/chart" && !inline){
			if (tab=="chart"){
				return AP.toURL("company/chart");
			}else{
				return AP.toURL("company?tab="+tab);
			}
		}
		
		
		if (tab=="online"){
			clearSearch();
			$("#people-list .js-user").hide();
			$("#people-list .js-user.-online").show();
		}else if (tab=="admins"){
			clearSearch();
			$("#people-list .js-user").hide();
			$("#people-list .js-user.-admin").show();
			$("#people-list .js-user.-owner").show();
		}else if (tab=="chart" && !inline){
			AP.toURL("company/chart");
		}else{
			clearSearch();
			$("#people-list .js-user").show();
		}
	};
	
	
	this.filter=function(query){
		if (!query || !query.length){
			$("#people-list .js-user").show();
			return;
		}
		
		$("#people-list .js-user").each(function(){
			var k1=$(this).find(".user").text();
			var k2=$(this).find(".minfo").text();
			name=purifyStrict(k1+k2);
			
			if (name.indexOf(purify(query))>=0){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
	};


	this.selectOptions = function (ref, username) {
		var u=People.get(username);
		if (!u){
			return;
		}
		
		var edit_by_admin = [];

		if (Client.data.network && Me.isNetworkOwner(Client.data.network) && username != Client.viewer.username) {
			edit_by_admin = [
				{
					label: 'Set regular member',
					icon: "icon-star-empty",
					action: function () {
						Admin.ms.makeMember(username);
					}
				},
				{
					label: 'Grant admin access', icon: "icon-star-half", action: function () {
						Admin.ms.makeAdmin(username);
					}
				},
				{
					label: 'Grant owner access', icon: "icon-star", action: function () {
						Admin.ms.makeOwner(username);
					}
				},
			];


			if (Client.data.network && Client.pageData.network.metatype == "root") {
			} else {
				edit_by_admin.push({
					label: 'Remove user from this team',
					icon: "icon-uniF11F",
					action: function () {
						Admin.ms.revoke(username);
					}
				});
			}
		} else if (Me.isSystemOwner() && username != Client.viewer.username) {
			edit_by_admin = [
				{
					label: 'Set a regular member',
					icon: "icon-star-empty",
					action: function () {
						Admin.ms.makeMember(username);
					}
				},
				{
					label: 'Grant admin access', icon: "icon-star-half", action: function () {
						Admin.ms.makeAdmin(username);
					}
				},
				{
					label: 'Grant owner access', icon: "icon-star", action: function () {
						Admin.ms.makeOwner(username);
					}
				},
			];

			if (Client.pageData.network && Client.pageData.network.metatype == "root") {

			}else if (Client.pageData.network){
				edit_by_admin.push({
					label: 'Remove user from this team',
					icon: "icon-uniF11F",
					action: function () {
						Admin.ms.revoke(username);
					}
				});
			}
		}

		if (Me.isSystemOwner()) {
			edit_by_admin.push({'type': 'sep'});
			edit_by_admin.push({
				label: "Set custom IP range", "icon": "icon-security", action: function () {
					Admin.sa.setUserIPRange(username, $(ref).data("ips"));
				}
			});
			edit_by_admin.push({
				label: "Grant special access", "icon": "icon-shield", action: function () {
					Admin.sa.edit(username);
				}
			});
			edit_by_admin.push({
				label: "Change user email", "icon": "icon-mail2", action: function () {
					Admin.sa.setUserEmail(username)
				}
			});
			
			edit_by_admin.push({
				label: "Set a new password", "icon": "icon-lock2", action: function () {
					Admin.sa.setUserPassword(username)
				}
			});
			
			if (parseInt(u.disabled_message)){
				edit_by_admin.push({
					label: "Re-enable message", "icon": "icon-unlocked", action: function () {
						Admin.msg.setStatus(u, true)
				}});
			}else{
				edit_by_admin.push({
					label: "Disable message", "icon": "icon-blocked", action: function () {
						Admin.msg.setStatus(u, false)
				}});
			}
			 
			edit_by_admin.push({
				label: "Disable 02-factor authentication",
				"icon": "icon-unlocked",
				action: function () {
					Admin.sa.disable2FA(username);
				}
			});
		}

		if (Me.isSystemAdmin()) {
			edit_by_admin.push({'type': 'sep'});
			edit_by_admin.push({
				label: "Edit personal information",
				"icon": "icon-mode_edit",
				action: function () {
					Admin.edit(username);
				}
			});
			edit_by_admin.push({
				label: "Edit direct managers", "icon": "icon-mode_edit", action: function () {
					Admin.editManager(username);
				}
			});
		}

		if ((Me.isAppAdmin("account") || Me.isSystemOwner()) && Client.viewer.username != username) {
			edit_by_admin.push({'type': 'sep'});

			var user = AP.array.single(Client.pageData.people, function (e) {
				return e.username == username;
			});

			if (user && parseInt(user.status) == -1) {
				edit_by_admin.push({
					label: "Reactivate this account",
					"icon": "icon-ion-ios-checkmark",
					action: function () {
						Admin.reactivate(username);
					}
				});
			} else {
				edit_by_admin.push({
					label: "Deactivate this account", icon: "icon-stop3", action: function () {
						Admin.deactivate(username);
					}
				});
			}
		}

		
		if (edit_by_admin.length) {
				edit_by_admin.unshift({
					label: 'View profile page',
					'icon': 'icon-profile',
					action: 'user/' + username
				});
				
				edit_by_admin.unshift({
					label: 'Send message', 'icon': 'icon-bubble2', action: function () {
						Base.message.peer(username, {'from': 'context'});
						Context.hide();
					}
				});
			
			
		} else {
			edit_by_admin=[
				{
					label: 'View profile page',
					'icon': 'icon-profile',
					action: 'user/' + username
				},
				{
					label: 'Send message', 'icon': 'icon-bubble2', action: function () {
						Base.message.peer(username, {'from': 'context'});
						Context.hide();
					}
				}
			].concat(edit_by_admin);
		}
		
		edit_by_admin.unshift("<div class='cover'> <div class='avatar'><img src='"+(AP.xthumb(u.gavatar))+"'></div> <div class='name'>"+(u.name)+"</div> <div class='info ap-xdot'>"+(u.title)+"&nbsp;</div> </div>");
			
		return Context.menu(ref, {top: 30, left: -240, menu: edit_by_admin});
	};
	
	
	function fixCounters(users){
		var online=0;
		var admins=0;
		var owners=0;
		
		for (var i=0; i<users.length; i++){
			if (users[i].online){
				online++;
			}
			
			if (parseInt(users[i].role)==13){
				owners++;
			}else if (parseInt(users[i].role)==10){
				admins++;
			}
		}
		
		$("#mngheader .tab.tab-everyone .counter").html("("+users.length+"");
		$("#mngheader .tab.tab-online .counter").html("("+online+")");
		$("#mngheader .tab.tab-admins .counter").html("("+(admins+owners)+")");
	};
	
	
	function clearSearch(){
		$("#people-search-ip").val("");
	};
	
	
	
	function getPersonHTML(e){
		var priv="Member since "+AP.i18n.date(e.since);
		var status="";
		var eclass="";
		
		if (Online.online(e.username)){
			status=" -online";
			eclass=" -online";
		}
		
		var priv="";
		if (parseInt(e.ms.role)==13){
			priv="<b class='red'>Owner</b> &nbsp;&middot;&nbsp; ";
			eclass+=" -owner";
		}else if (parseInt(e.ms.role)==10){
			priv="<b class='red'>Admin</b> &nbsp;&middot;&nbsp; ";
			eclass+=" -admin";
		}
		
		var manager="";
		if (e.manager && e.manager.length){
			if (e.manager.length==1){
				var m=People.get(e.manager);
				if (m && parseInt(m.id)){
					manager="<div class='user'>" +
					"	<div class='icon url std' data-username='"+m.username+"'><div class='avatar'><span class='image'><img src='"+AP.xthumb(m.gavatar)+"'/></span></div></div>" +
					"	<div class='text'>" +
					"		<b class='url std' data-username='"+m.username+"'>"+m.name+"</b>" +
					"		<div class='sub'>@"+m.username+" &middot; "+m.title+"</div>" +
					"	</div>" +
					"</div>";	
				}
			}else{
				for (var i=0; i<e.manager.length; i++){
					var m=People.get(e.manager[i]);
					if (m && parseInt(m.id)){
						manager+="<div class='user -g'>" +
						"	<div class='icon url std' data-username='"+m.username+"'><div class='avatar'><span class='image'><img src='"+AP.xthumb(m.gavatar)+"'/></span></div></div>" +
						"</div>";
					}
				}
			}
		}else{
			manager="<div style='height:60px;' onclick=\"Admin.editManager('"+e.username+"');\"></div>";
		}
		
		var tfa="";
		if (Me.isSystemAdmin() && !mobile()){
			if (e.tfa_status && parseInt(e.tfa_status)){
				tfa="<span class='tfa' title='Two-factor authentication enabled'><span class='ficon-shield text-success'></span></span>";
			}else{
				tfa="<span class='tfa' title='Two-factor authentication disabled'><span class='ficon-shield text-c'></span></span>";
			}
		}
		
		var dob='Birth day not specified';
		if (Client.pageData.network){
			dob='';
		}else{
			if (e.dob && (e.dob.day||e.dob.month||e.dob.year)){
				dob=""+(___(e.dob.day,'--'))+"/"+(___(e.dob.month,'--'))+"/"+(___(e.dob.year,'----'))+"";
			}
		}
		
		
		var extra="<td> <div class='minfo list-info'> <div class='li ap-xdot'>"+(e.email)+"</div> <div class='li ap-xdot'>"+(___(e.phone,'<i class=\"opt-80\">Phone number not set</i>'))+"</div> <div class='li ap-xdot'>"+(dob)+"</div> </div> </td> <td>"+(manager)+"</td>";
		
		if (mobile()){
			extra=""; 
		}
		
		return "<tr class='li js-user unselectable"+(eclass)+"' data-username='"+(e.username)+"'> <td> <div class='user'> <div class='icon url' data-username='"+(e.username)+"'><div class='avatar "+(status)+"'> <span class='image'><img src='"+(AP.xthumb(e.gavatar))+"'/></span> </div></div> <div class='text'> <b class='url std' data-url='user/"+(e.username)+"'>"+(e.name)+"</b> <div class='sub ap-xdot'>@<b class=''>"+(e.username)+"</b> &nbsp;&middot;&nbsp; "+(___(e.title,'<i>No title</i>'))+"</div> <div class='sub ap-xdot'>"+(priv)+"Member since "+(AP.i18n.date(e.since))+"</div> </div> "+(tfa)+" </div> </td> "+(extra)+" <td> <div class='action -more pointer' onclick='PeopleMng.selectOptions(this, \""+(e.username)+"\");'></div> </td> </tr>";
	};
	
	
	
	
	
	
	
	function getDeactivatedHTML(e){
		var priv="Member since "+AP.i18n.date(e.since);
		var status="";
		var eclass="";
		
		if (Online.online(e.username)){
			status=" -online";
			eclass=" -online";
		}
		
		var priv="Deactivated";
		
		var manager="";
		if (e.manager && AP.data.isArray(e.manager)){
			for (var i=0; i<e.manager.length; i++){
				var m=People.get(e.manager[i]);
				if (m && parseInt(m.id)){
					manager="<div class='user'>" +
					"	<div class='icon url std' data-username='"+m.username+"'><div class='avatar'><span class='image'><img src='"+AP.xthumb(m.gavatar)+"'/></span></div></div>" +
					"	<div class='text'>" +
					"		<b class='url std' data-username='"+m.username+"'>"+m.name+"</b>" +
					"		<div class='sub'>@"+m.username+" &middot; "+m.title+"</div>" +
					"	</div>" +
					"</div>";
				}
			}
		}else{
			// manager="<div style='height:60px;' onclick=\"Admin.editManager('"+e.username+"');\"></div>";
		}
		
		return "" +
		"<tr class='li js-user unselectable"+eclass+"' data-username='"+e.username+"'>" +
			"<td>" +
			"	<div class='user'>" +
				"	<div class='icon url' data-username='"+e.username+"'><div class='avatar "+status+"'><span class='image'><img src='"+AP.xthumb(e.gavatar)+"'/></span></div></div>" +
				"	<div class='text'>" +
				"		<b class='url std' data-url='user/"+e.username+"'>"+e.name+"</b>" +
				"		<div class='sub ap-xdot'>@<b class=''>"+e.username+"</b> &nbsp;&middot;&nbsp; "+___(e.title,"<i class='opt-80'>No title</i>")+"</div>" +
				"		<div class='sub ap-xdot'>"+priv+"Member since "+AP.i18n.date(e.since)+"</div>"+
				"	</div>" +
			"	</div>" +
			"</td>" +
			(!mobile()?
			("<td>" +
			"	<div class='minfo list-info'>" +
			"		<div class='li ap-xdot'>"+e.email+"</div>" +
			"		<div class='li ap-xdot'>"+___(e.phone,"<i class='opt-80'>Phone number not set</i>")+"</div>" +
			"		<div class='li ap-xdot'>"+___(e.address,"<i class='opt-80'>Address not set</i>")+"</div>" +
			"	</div>" +
			"</td>" +
			"<td>"+manager+"</td>"):"")+
			"<td>"+
			"	<div class='action -more pointer' onclick=\"PeopleMng.selectOptions(this, '"+e.username+"');\"></div>" +
			"</td>" +
		"</tr>";
	};
};











var GuestMng=new function __PeopleMng(){
	
	this.reactivate=function(username){
		Context.close();
		AP.confirm("Please confirm that you will reactivate the guest account @<b>"+username+"</b>? This action cannot be undone.", function(){
			AP.ajaxShow();
			AP.post("api/guest/reactivate",{username: username}, function(code){
				AP.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("Guest account reactivated.", function(){
					AP.refresh();
				});
			});
		});
	};
	
	
	this.display=function(users){
		if (!users){
			users=Client.people;
		}
		
		var html=AP.render(users, getPersonHTML);
		$("#people-list").html(html);
		
		fixCounters(users);
		
		var tab=tab=Query.get("tab");
		if (tab && tab.length){
			PeopleMng.show(tab, true);
		}
		
		
		Online.loaded(function(){
			Online.reorder(users);
			var html=AP.render(users, getPersonHTML);
			$("#people-list").html(html);
			
			fixCounters(users);
			
			var tab=tab=Query.get("tab");
			if (tab && tab.length){
				PeopleMng.show(tab, true);
			}
		});
		
	};
	
	
	this.show=function(tab, inline){
		
		if (!tab){
			tab=Query.get("tab");
		}
		
		$("#mngheader .menu .tab").setActive(".tab-"+tab);
		
		if (Client.path.current=="company/chart" && !inline){
			if (tab=="chart"){
				return AP.toURL("company/chart");
			}else{
				return AP.toURL("company?tab="+tab);
			}
		}
		
		
		if (tab=="online"){
			clearSearch();
			$("#people-list > .li").hide();
			$("#people-list > .li.-online").show();
		}else if (tab=="admins"){
			clearSearch();
			$("#people-list > .li").hide();
			$("#people-list > .li.-admin").show();
			$("#people-list > .li.-owner").show();
		}else if (tab=="chart" && !inline){
			AP.toURL("company/chart");
		}else{
			clearSearch();
			$("#people-list > .li").show();
		}
	};
	
	
	this.filter=function(query){
		if (!query || !query.length){
			$("#people-list > .li").show();
			return;
		}
		
		query=query.toLowerCase();
		
		$("#people-list > .li").each(function(){
			var name=$(this).find(".text b.username").text().toLowerCase();
			var username=$(this).find(".text .sub b").text().toLowerCase();
			
			if (name.indexOf(query)>=0 || username.indexOf(query)>=0){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
	};
	
	
	
	this.selectOptions=function(ref, username){
		var edit_by_admin=[];
		
		if (Me.isSystemAdmin() && Client.viewer.username!=username){
			edit_by_admin.push({'type' :'sep'});
			edit_by_admin.push({label: "Chỉnh sửa tài khoản", "icon":"icon-uniF116", action: function(){Admin.edit(username);}});
		}
		
		if (Me.isSystemOwner()){
			edit_by_admin.push({label: "Phân quyền sử dụng apps", icon:"icon-uniF107", action: function(){GuestMng.editAccess(username);}});
			edit_by_admin.push({label: "Thay đổi email", icon:"icon-uniF117", action: function(){GuestMng.editEmail(username);}});
			edit_by_admin.push({label: "Thay đổi mật khẩu", icon:"icon-uniF14B", action: function(){GuestMng.editPassword(username);}});
			
			var user=AP.array.single(Client.pageData.guests, function(e){
				return e.username==username;
			});

			if (parseInt(user.disabled_message)){
				edit_by_admin.push({
					label: "Re-enable message", "icon": "icon-unlocked", action: function () {
						GuestMng.setMsgStatus(user, true)
					}});
			}else{
				edit_by_admin.push({
					label: "Disable message", "icon": "icon-blocked", action: function () {
						GuestMng.setMsgStatus(user, false)
					}});
			}

			if (user && parseInt(user.status)==-1){
				edit_by_admin.push({label: "Reactivate tài khoản này", "icon":"icon-ion-ios-checkmark", action: function(){GuestMng.reactivate(username);}});	
			}else{
				edit_by_admin.push({label: "Deactivate tài khoản này", icon:"icon-stop3", action: function(){Admin.deactivate(username);}});	
			}
			
			// edit_by_admin.push({label: "Deactivate tài khoản này", icon:"icon-uniF11F", action: function(){Admin.deactivate(username);}});
		}
		
		return Context.menu(ref, {top: 30, left:-240, menu: [
			{label: 'Xem profile chi tiết', 'icon': 'icon-uniF15F icm', action: 'user/'+username},
			{label: 'Chat với @<b>'+username+'</b>', 'icon': 'icon-uniF1D7', action: function(){
				Base.message.peer(username, {'from': 'context'});
				Context.hide();
			}}
		].concat(edit_by_admin)});
	};
	
	
	/**
	 * @desc Email password
	 * @return void
	 */
	this.editPassword = function(username){
		var form=Form.create('edit-profile-fx',{'action':'api/guest/edit.password'})
		.row(
			Form.label({label: "New password",sublabel: "New password"}),
			Form.input({name: 'new_password', "type":"password", "placeholder":"New password"})
		)
		.row(
			Form.label({label: "Retype new password", sublabel: "Retype new password"}),
			Form.input({name: 'new_password2', type: "password", "placeholder":"Retype new password"})
		)
		.hiddens({
			username: username
		})
		.buttons([
			 {label: "Update", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Password was updated successfully");
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 500, label: 'Change guest password'}).setForm(form).show();
		
	};
	
	
	
	/**
	 * @desc Edit guest email - MAKE actual request to update email in server
	 * @return void
	 */
	this.editEmail = function(username){
		var user=People.get(username);
		if (!user || user.__invalid){
			return;
		}
		
		var form=Form.create('edit-profile-fx',{'action':'api/guest/edit.email'})
		.row(
			Form.label({label: "Current email",sublabel: "Current guest email"}),
			Form.input({name: 'email_fake', "type":"fake", "placeholder":"Enter new email"}).value(user.email)
		)
		.row(
			Form.label({label: "New email",sublabel: "Guest new email"}),
			Form.input({name: 'email', "type":"text", "placeholder":"Enter new email"})
		)
		.hiddens({
			username: username
		})
		.buttons([
			 {label: "Change password", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Email was updated successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 500, label: 'Change guest email of '+user.name}).setForm(form).show().focus("email");
		
	};
	
	
	
	
	
	this.editAccess=function(username){
		var user=People.get(username);
		if (!user){
			return;
		}
		
		var v="";
		if (user.accesses && user.accesses.length){
			v=user.accesses.join(", ")
		}
		
		var accesses=[{name: "wework", color: 4}, {name: "talent", color: 3}, {name: "okr", color: 5}, {name: "request", color: 5}, {name: "inside", color: 5}];
		var form=Form.create('create-team-fx',{action: 'api/guest/access'})
		.row(
			Form.label({label: "Tài khoản",sublabel: ""}),
			Form.input({name: 'name_fake', type: "fake", value: username}).value(user.name)
		)
		.row(
			Form.label({label: "App accesses *",sublabel: "Pick all apps"}),
			Form.input({name: 'accesses', placeholder: "Type to pick accesses"})
		)
		.hiddens({
			token:Client.system.token,
			username: username
		})
		.render(function($f){
			var $input=$f.find("accesses");
			AP.UI.tagcloud($input, accesses, user.accesses);
		})
		.buttons([
			 {label: "Save accesses", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.alertSuccess("Special accesses updated for @"+username, function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 500, label: 'Grant app access'}).setForm(form).show();
	
		
	};


	/**
	 * @desc Set messaging status
	 */
	this.setMsgStatus = function (user, flag) {
		var opts = [{label: "Enabled", value: 0}, {
			"label": "Block creating new channels",
			value: 1
		}, {label: "Block creating channels and receiving messages", value: 2}];

		var form = Form.create('edit-profile-fx', {'action': 'api/guest/message.status'})
			.row(
				Form.label({label: "Message status", sublabel: "Message status"}),
				Form.input({
					name: 'status',
					"type": "select",
					"placeholder": "Message status",
					options: opts
				}).value(user.disabled_message)
			)
			.hiddens({
				username: user.username
			})
			.buttons([
				{
					label: "Save", action: function ($this) {
						Form.submit("edit-profile-fx", function (code) {
							if (!code.good()) {
								return AP.alertError(code.message);
							}

							Form.hide("edit-profile-fx");
							AP.alertSuccess("Saved successfully");
							AP.refresh();
						});
					}, style: 'ok -success -rounded bold'
				},
				{
					label: "Cancel", action: function () {
						Form.hide("edit-profile-fx");
					}, style: 'cancel -passive-2 -rounded'
				}
			]).settings();

		Form.pop({id: 'edit-fx-dx', width: 500, label: 'Change message status'}).setForm(form).show();

	};
	
	
	function fixCounters(users){
		var online=0;
		var admins=0;
		var owners=0;
		
		for (var i=0; i<users.length; i++){
			if (users[i].online){
				online++;
			}
			
			if (parseInt(users[i].role)==13){
				owners++;
			}else if (parseInt(users[i].role)==10){
				admins++;
			}
		}
		
		$("#mngheader .tab.tab-everyone .counter").html("("+users.length+")");
		$("#mngheader .tab.tab-online .counter").html("("+online+")");
		$("#mngheader .tab.tab-admins .counter").html("("+(admins+owners)+")");
	};
	
	
	function clearSearch(){
		$("#people-search-ip").val("");
	};
	
	function updateStatus(){
		$("#people-canvas .list").children().each(function(){
			var username=$(this).data("username");
			if (Online.online(username)){
				$(this).find(".avatar").addClass("-online");
				$(this).prependTo("#people-canvas .list");
			}
		});
	};
	
	
	function getPersonHTML(e){
		var priv="Member since "+UI.simpleTime(e.since);
		var status="";
		var eclass="";
		
		if (Online.online(e.username)){
			status=" -online";
			eclass=" -online";
		}
		
		var priv="";
		if (parseInt(e.role)==13){
			priv="<b class='red'>Owner</b> &nbsp;&middot;&nbsp; ";
			eclass+=" -owner";
		}else if (parseInt(e.role)==10){
			priv="<b class='red'>Admin</b> &nbsp;&middot;&nbsp; ";
			eclass+=" -admin";
		}
		
		return "<div class='li -icon-left unselectable"+eclass+"' data-username='"+e.username+"'>" +
			"	<div class='icon'><div class='avatar avatar-60 -rounded "+status+"'><span class='image'><img src='"+AP.xthumb(e.gavatar)+"'/></span></div></div>" +
			"	<div class='text ap-xdot'>" +
			"		<b class='url std' data-url='user/"+e.username+"'>"+e.name+"</b>" +
			"		<div class='sub ap-xdot'>@<b class=''>"+e.username+"</b> &nbsp;&middot;&nbsp; "+___(e.title,"<i class='opt-80'>No title</i>")+"</div>" +
			"		<div class='sub ap-xdot'>"+priv+"Member since "+UI.simpleTime(e.since)+"</div>"+
			"	</div>" +
			"	<div class='minfo list-info'>" +
			"		<div class='li ap-xdot'><span class='-ap icon-email'></span> &nbsp; "+e.email+"</div>" +
			"		<div class='li ap-xdot'><span class='-ap icon-phone4'></span> &nbsp; "+___(e.phone,"<i class='opt-80'>Phone number not set</i>")+"</div>" +
			"		<div class='li ap-xdot'><span class='-ap icon-location5'></span> &nbsp; "+___(e.address,"<i class='opt-80'>Address not set</i>")+"</div>" +
			"	</div>"+
			"	<div class='action -more pointer' onclick=\"GuestMng.selectOptions(this, '"+e.username+"');\"></div>" +
			"</div>";
	};
};
var NetworkMng=new function __NetworkMng(){
	this.display=function(networks){
		var temp=AP.array.filter(networks, function(e){
			if (e.metatype=="user" || e.metatype=="group"){
				return false;
			}
			
			if (Query.get("s")=="mine"){
				if (Me.isMemberOf(e)){
					return true;
				}
				
				return false;
			}
			
			return true;
		});
		
		var html=AP.render(temp, getNetworkHTML);
		$("#network-list").html(html);
		
		$("#mngheader .tab").setActiveURL();
	};
	
	this.filter=function(query){
		if (!query || !query.length){
			$("#people-list > .li").show();
			return;
		}
		
		query=query.toLowerCase();
		
		$("#network-list > .li").each(function(){
			var name=$(this).find(".text b.username").text().toLowerCase();
			var username=$(this).find(".text .sub b").text().toLowerCase();
			
			if (name.indexOf(query)>=0 || username.indexOf(query)>=0){
				$(this).show();
			}else{
				$(this).hide();
			}
		});
	};


	function getNetworkHTML(e, index, total) {
		var priv = "Created on " + UI.simpleTime(e.since);
		var eclass = "";


		var priv = "Company";
		if (e.metatype == "unit") {
			priv = "<b class='text-success'>Business unit</b>";
			eclass += " -unit";
		} else if (parseInt(e.role) == 10) {
			priv = "<b>Group</b>";
			eclass += " -group";
		}

		priv = ___(e.about, "Không có miêu tả");
		var num_people = AP.array.count(Client.people, function (e) {
			return e.metatype != "guest";
		});

		var leader = People.get(e.leader.username);
		var stats = "<div class='sub ap-xdot'><b>" + e.num_people + "</b> members &nbsp;&middot;&nbsp; Created on " + UI.simpleTime(e.since) + "</div>";
		if (e.metatype == "root" || e.metatype == "company") {
			stats = "<div class='sub ap-xdot'><b>" + num_people + "</b> members &nbsp;&middot;&nbsp; Main company</div>";
		}

		return "<div class='li -icon-left unselectable" + eclass + "' data-path='" + e.path + "' data-id=" + e.id + ">" +
			"	<div class='icon'><div class='count'>" + AP.data.zeroPrefix(index + 1) + "</div></div>" +
			"	<div class='text ap-xdot'>" +
			"		<b class='url std' data-url='company/g/" + e.path + "'>" + e.name + "</b>" +
			"		<div class='sub ap-xdot'>@<b class=''>" + e.path + "</b> &nbsp;&middot;&nbsp; " + priv + "</div>" +
			stats +
			"	</div>" +
			"	<div class='leader url' style='display:none' data-url='account/" + leader.username + "'>" +
			"		<div class='avatar avatar-40 -circled'><div class='image'><img src='" + AP.xthumb(leader.gavatar) + "'/></div></div>" +
			"		<div class='label'>Leader</div>" +
			"		<div class='li ap-xdot name'>" + leader.name + "</div>" +
			"		<div class='li ap-xdot info'>" + leader.title + "</div>" +
			"	</div>" +
			"	<div class='action -rarrow pointer url' data-url='company/g/" + e.path + "'></div>" +
			"</div>";
	};
};var Profile = new function __Profile(){
	
};Profile.cv=new function __ProfileCV(){
	this.find=function(type, id){
		if (!Client.pageData.cv[type]){
			return null;
		}
		
		
		var obj=Client.pageData.cv[type];
		
		return AP.array.find(obj, function(elem){
			return elem.id==id;
		});
	}
	
	this.add=function(type, values){
		var opt={
			"title": "Thêm thông tin học vấn",
			"rows":
				[
					{name: "name", label: "Tên trường *", "type":"text"},
					{name: "major", label: "Chuyên ngành *", "type":"text"},
					{name: "time", label: "Thời gian (bắt đầu - kết thúc) *", "type":"text"},
			]
		};
		
		if (type=='work'){
			opt={
					"title": "Thêm thông tin công việc &amp; nghề nghiệp",
					"rows":
						[
							{name: "name", label: "Tên tổ chức / doanh nghiệp *", "type":"text"},
							{name: "position", label: "Vị trí hoặc vai trò *", "type":"text"},
							{name: "time", label: "Thời gian (bắt đầu - kết thúc)", "type":"text"},
							{name: "desc", label: "Thông tin thêm", "type":"textarea"}
					]
				};
		}
		

		if (type=='award'){
			opt={
					"title": "Thêm thông tin giải thưởng hoặc thành tích",
					"rows":
						[
							{name: "name", label: "Tên giải thưởng hoặc thành tích *", "type":"text"},
							{name: "time", label: "Thời điểm *", "type":"text"},
							{name: "desc", label: "Thông tin thêm", "type":"textarea"}
					]
				};
		}
		
		showForm(opt, type, values);
	};
	
	
	this.edit=function(ref, dir){
		var $item=$(ref).closest(".item");
		var id=$item.data("id");
		var type=$item.data("type");
		var row=this.find(type, id);
		
		if (!row){
			return;
		}
		
		this.add(type, row);
	};
	
	
	this.editLinks=function(id){
		var data={};
		if (id){
			data.id=id;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/user/edit.links'})
		.row(
			Form.label({label: "Website cá nhân"}),
			Form.input({name: 'homepage'}).value(Client.pageData.cvlinks.homepage)
		)
		.row(
			Form.label({label: "Facebook URL"}),
			Form.input({name: 'facebook'}).value(Client.pageData.cvlinks.facebook)
		)
		.row(
			Form.label({label: "Linkedin URL"}),
			Form.input({name: 'linkedin'}).value(Client.pageData.cvlinks.linkedin)
		)
		.row(
			Form.label({label: "Twitter URL"}),
			Form.input({name: 'twitter'}).value(Client.pageData.cvlinks.twitter)
		)
		.render(function(fobj){
			setTimeout(function(){
				fobj.focus('homepage');
			},300);
		})
		.hiddens(data)
		.buttons([
			 {label: "Hoàn thành", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Liên kết mạng xã hội', layout: 'flat'}).setForm(form).show();
	};
	
	
	
	this.editContact=function(id){
		var data={};
		if (id){
			data.id=id;
		}
		
		var form=Form.create('create-team-fx',{action: 'api/user/edit.contact'})
		.row(
			Form.label({label: "Số điện thoại công ty"}),
			Form.input({name: 'office_phone'}).value(Client.pageData.contact.office_phone)
		)
		.row(
			Form.label({label: "Số điện thoại nhà"}),
			Form.input({name: 'home_phone'}).value(Client.pageData.contact.home_phone)
		)
		.row(
			Form.label({label: "Skype username / number"}),
			Form.input({name: 'skype'}).value(Client.pageData.contact.skype)
		)
		.row(
			Form.label({label: "Viber username / number"}),
			Form.input({name: 'viber'}).value(Client.pageData.contact.viber)
		)
		.row(
			Form.label({label: "Whatsapp username / number"}),
			Form.input({name: 'whatsapp'}).value(Client.pageData.contact.whatsapp)
		)
		.row(
			Form.label({label: "Zalo username / number"}),
			Form.input({name: 'zalo'}).value(Client.pageData.contact.zalo)
		)
		.render(function(fobj){
			setTimeout(function(){
				fobj.focus('company_phone');
			},300);
		})
		.hiddens(data)
		.buttons([
			 {label: "Hoàn thành", action: function(){
				 Form.submit("#create-team-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("create-team-fx");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded -bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("create-team-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id: 'create-team-fx-dx', width: 600, label: 'Thông tin liên hệ', layout: 'flat'}).setForm(form).show();
	};
	
	
	
	this.move=function(ref, dir){
		var $item=$(ref).closest(".item");
		var id=$item.data("id");
		var type=$item.data("type");
		
		UI.ajaxShow();
		AP.post("api/me/profile/cv.move",{id: id, type: type, dir: dir}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			moveElement($item, dir);
		});
	};
	
	
	
	this.remove=function(ref, dir){
		var $item=$(ref).closest(".item");
		var id=$item.data("id");
		var type=$item.data("type");
		
		UI.ajaxShow();
		AP.post("api/me/profile/cv.remove",{id: id, type: type, action: 'remove'}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			UI.flash("Remove successfully ...");
			$item.slideUp(300);
		});
	};
	
	
	function showForm(opt, type, values){
		var hiddens={'type': type};
		if (Client.pageData.user && Client.pageData.user.id){
			hiddens.id=Client.pageData.user.id;
		}
		
		var cta="Thêm";
		
		if (values && values.id){
			hiddens.id=values.id;
			cta="Sửa";
		}
		
		var form=Form.create('edit-profile-fx',{'action':'api/user/cv.edit'});
		for (var i=0; i<opt.rows.length; i++){
			var r=opt.rows[i];
			if (r.type=="textarea"){
				form.row( 
						Form.label({label: r.label}),
						Form.input({name: r.name, type: r.type}).css({height: 100})
				);	
			}else{
				form.row(
						Form.label({label: r.label}),
						Form.input({name: r.name, type: r.type})
				);
			}
		}
		
		form.hiddens(hiddens)
		.buttons([
			 {label: cta, action: function(){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("edit-profile-fx");
					 
					 UI.flash("Edited successfully");
					 AP.xRefresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).render(function(fobj){
			if (values && values.id){
				for (var i=0; i<opt.rows.length; i++){
					fobj.find(opt.rows[i].name).val(values[opt.rows[i].name]);
				}
			}
			
			setTimeout(function(){
				fobj.focus(opt.rows[0].name);
			},300);
		});
	
		Form.pop({id:'edit-profile-dx', width: 600, label: opt.title, layout: 'flat'}).setForm(form).show();
		
	};
	
	
	function moveElement($item, dir){
		if (dir=="up"){
			var $x=$item.prev();
			if (!$x.length || !$x.hasClass("item")){
				return;
			}
			$x.insertAfter($item);
		}else{
			var $x=$item.next();
			if (!$x.length || !$x.hasClass("item")){
				return;
			}
			$x.insertBefore($item);
		}
	};
};var Network=new  function __Network(){
	this.favorMe=function(){
		if (!Client.data.network){
			return;
		}
		
		if (Me.favor(Client.data.network)){
			var id=Client.data.network.id;
			Me.removeFavorite(id, function(fs){
				Client.favors=fs;
				UI.flash("Team removed to from favourite!");
				
				$("#team-"+id).removeClass("-favour").slideUp(150, function(){
					$(this).prependTo("#teams").slideDown(400);
				});
			});
		}else{
			var id=Client.data.network.id;
			Me.setFavorite(id, function(fs){
				UI.ajaxHide();
				Client.favors=code.favors;
				UI.flash("Team set to favourite!");
				$("#team-"+id).addClass("-favour").slideUp(150, function(){
					$(this).insertAfter("#menu .section.-favorite .last").slideDown(400);
				});
			});
		}
	};
	
	this.leave=function(){
		if (!Client.data.network){
			return;
		}
		
		if (this.root()){
			return AP.alertError("You can not leave the company.");
		}
		
		AP.confirm("Are you sure that you want to leave the team <b>"+Client.data.network.name+"</b> now? This action cannot be undone.", function(){
			AP.ajaxShow();
			AP.post("api/network/member/leave",{hid: Client.data.network.hid, token: Client.data.network.token}, function(code){
				AP.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				AP.alertSuccess("You've just left the team!", function(){
					AP.redirect("home");
				});
			});
		});
		
	};
	
	this.root=function(network){
		if (network){
			return AP.data.equal(network.type, this.type.types.root)
		}
		return Client.data.network && AP.data.equal(Client.data.network.type, this.type.types.root);
	};
	
	
	this.select=function(title, callback){
		if (!callback){
			callback=null;
		}
		
		var actions=[];
		for (var i=0; i<Client.networks.length; i++){
			var e=Client.networks[i];
			actions.push({id:e.id, hid: e.hid, token: e.token, label: e.name, name:e.name, sublabel: Client.system.domain+"/"+e.path+" &middot; "+e.num_people+" people", value: 1});
		}
		
		AP.selectAction(actions, function(action){
			if (callback){
				callback(action);
			}
		},{title: title});
	};
	
	
	this.invite=function(){
		if (this.root() || !Client.data.network){
			return Company.member.inviteDialog();
		}else{
			return this.member.inviteDialog();
		}
	};
	
	
	this.inviteList=function(content, callback, error){
		AP.post("api/network/member/invite",{list: 1, network: Client.data.network.id, token: Client.data.network.token, usernames: content}, function(code){
			if (!code.good()){
				if (error){
					error(code.message);
				}
				return AP.alertError(code.message);
			}
			
			callback(code.usernames);
		});
	};
	
	
	
	this.get=function(id){
		if (AP.data.isInt(id)){
			return AP.array.findObj(Client.networks, id);	
		}
		
		for (var i=0; i<Client.networks.length; i++){
			if (Client.networks[i].path==id){
				return Client.networks[i];
			}
		}
		
		return null;
	};
	
	this.getByPath=function(path){
		for (var i=0; i<Client.networks.length; i++){
			if (Client.networks[i].path==path){
				return Client.networks[i];
			}
		}
		
		return null;
	};
	
	
	this.settings=function(){
		var admin=false;
		if (Client.data.network && Me.isNetworkAdmin(Client.data.network)){
			admin=true;
		}
		
		if (Me.isSystemOwner()){
			admin=true;
		}
		
		if (admin){
			var options=[];
			options.push({"label":"Edit this user group", "icon":"cog", action: function(){
				Network.editSelf();
			}});
			
			if (Me.isSystemOwner()){
				options.push({"label":"Mass setup IP range", "icon":"shield", action: function(){
					Admin.sa.setGroupIPRange(Client.data.network.id, Client.data.network.name);
				}});
			}
			
			options.push({"label":"Invite more people", "icon":"person_add", action: function(){
				Network.invite();
			}});
			
//			options.push({"label":"Team preferences &amp; settings", "icon":"lock_outline", action: function(){
//				Network.preference();
//			}});
			
//			options.push({"label":"My personal preferences", "icon":"favorite_outline", action: function(){
//				Network.personalPreference();
//			}});
			
			if (!Network.root()){
				if (Client.data.network && Client.pageData.settings_team && Client.pageData.settings_team.leave=="yes"){
					options.push({"label":"Leave the team now", "icon":"power_settings_new", action: function(){
						Network.leave();
					}});
				}

				if (Me.isSystemOwner()) {
					options.push({"label":"<span class='red'>Delete this team (System Owner only)</span>", "icon":"cloud_off", action: function() {
						Network.ownerRemove();
					}});
				}
			}
			
			AP.actionMenu(options);
			return;
		}else{
			var options=[];
			options.push({"label":"My personal preferences", "icon":"favorite_outline", action: function(){
				Network.personalPreference();
			}});
			
			if (Client.data.network && Client.pageData.settings_team && Client.pageData.settings_team.leave=="yes"){
				options.push({"label":"Leave the team now", "icon":"power_settings_new", action: function(){
					Network.leave();
				}});
			}
			
			AP.actionMenu(options);
			return;
		};	
	};
	
	
	
	this.preference=function(){
		UI.setting("Team preferences &amp; settings")
		.add({
			title: "Who can create regular posts?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.update,
			name:"update",
			url: "api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can create new topics?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.topic,
			name:"topic",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can post announcements?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.announcement,
			name:"announcement",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Grant posting announcements permission to some extra users? <small><i>Note.</i> This is an exception.</small>", 
			options: ":custom:users", 
			value: Client.pageData.settings_team.announcement_extra,
			name:"announcement_extra",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Who can use tag <b>@all</b> to tag everyone?", 
			options: {"everyone":"Everyone","admin":"Team admins and owners", "owner":"Only team owners"}, 
			value: Client.pageData.settings_team.tagall,
			name:"tagall",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Share posts of this team to its members' home feeds? <small><i>Note.</i> Each member can also have his/her own preference.</small>", 
			options: {"yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.share,
			name:"share",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Allow team members to delete their own posts?", 
			options: {"yes":"Yes","no":"No"},
			value: Client.pageData.settings_team.delete_post,
			name:"delete_post",
			url:"api/network/setting/"+Client.data.network.hid
		})
		.add({
			title: "Allow team members to leave? <small><i>Note.</i> If allowed, team members can leave the team by themselves. In any cases, team owners can remove members.</small>", 
			options: {"yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.leave,
			name:"leave",
			url:"api/network/setting/"+Client.data.network.hid,
		})
		.show();
	};
	
	
	
	
	this.personalPreference=function(){
		UI.setting("Personal preferences")
		.add({
			title: "Share posts from this team to my home's newsfeeds? <small>Note: Automatic means that this setting is based on the team's current setting.</small>", 
			options: {"auto":"Automatic","yes":"Yes","no":"No"}, 
			value: Client.pageData.settings_team.update,
			name:"update",
			url: "api/network/preference/"+Client.data.network.hid
		})
		.show();
	};
	
	
	
	
	this.editSelf=function(){
		Company.editNetwork(Client.data.network);
	};


	this.ownerRemove = function () {
		if (!Client.data.network) {
			return;
		}

		if (!Me.isSystemOwner()) {
			return AP.alertError("You do not have enough permission.");
		}

		if (this.root()) {
			return AP.alertError("You can not remove root network.");
		}

		AP.confirm("Are you sure that you want to delete the team <b>" + Client.data.network.name + "</b> now? This action cannot be undone.", function () {
			AP.ajaxShow();
			AP.post("api/network/owner.remove", {
				hid: Client.data.network.hid,
				token: Client.data.network.token
			}, function (code) {
				AP.ajaxHide();
				if (!code.good()) {
					return AP.alertError(code.message);
				}

				AP.alertSuccess("The team was deleted!", function () {
					AP.redirect("home");
				});
			});
		});

	};
};Network.type=new function __NetworkType(){
	this.types={
		'head':13,
		'root':13,
		'office_public':1,
		'office_private':2,
		'office_restriced':3
	};
	
	this.typeName=function(type){
		if (AP.data.equal(type, this.types.head)){
			return "Head office";
		}
		
		if (AP.data.equal(type, this.types.office_public)){
			return "Public office";
		}
		
		if (AP.data.equal(type, this.types.office_private)){
			return "Private office";
		}
		
		return "Restricted office";
	};
};Network.member=new  function __WnetworkMember(){
	this.invite=function(ref){
		Form.submitFrom(ref, function(code){
			if (!code.good()){
   			 return AP.alertError(code.message);
   		 }
   		 
   		 AP.alertSuccess(code.message);
		});
	};
	
	
	this.inviteDialog=function(){
		var form=Form.create('d-invite-fx',{'action':'api/network/member/invite'})
		.row(
			Form.noLabel(),
			Form.input({name: 'usernames', "type":"text", "placeholder":"Type @ to tag all people you want to invite"})
		)
		.hiddens({
			network: Client.data.network.id,
			'token': Client.data.network.token
		})
		.buttons([
			 {label: "Invite to "+Client.data.network.name, action: function(){
				 Form.submit("d-invite-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
				
					 Form.hide("d-invite-fx");
					 return AP.alertSuccess("Invite people successfully", function(){
						 AP.refresh();
					 });
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("d-invite-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings({"block": true});
	
		Form.pop({id:'d-invite-fx-dx', width: 600, 
			label: "Invite people to "+Client.data.network.name
		}).setForm(form).show().focus('usernames');
		
		Tag.user(form.find('usernames'), Client.people);
	};
	
};var Role=new function __Role(){
	
	this.OWNER=13;
	this.ADMIN = 10;
	this.REGULAR=1;
	this.BLOCKED=-1; 
	
	this.lists=[
		 	{id: 13, key:'owner', name:'Team Owner'},
		 	{id: 10, key:'admin', name:'Admin'},
		 	{id: 1, key:'member', name:'Member'},
		 	{id: -1, key:'blocked', name:'Blocked Member'},
		];
};





Role.collection=new function __RoleCollection(){
	this.get=function(id){
		id=parseInt(id);
		for (var i=0; i<Role.lists.length; i++){
			if (Role.lists[i].id==id){
				return Role.lists[i]; 
			}
		}
		
		return {id: 0, key:'unknown', name:'Unknown Role'};
	};
};var Layout= new function __Layout(){
	this.init=function(){
		$(document.body).delegate("input","blur", function(){
			setTimeout(function(){
				$("#context-tag > .tags").hide();
			},200);
		}).on("click", function(){
			setTimeout(function(){
				$("#context-tag > .tags").hide();
			},200);
		});
		
		Layout.scrollable('.scrollable');
		
		$(window).blur(function(){
			AP.fire("PAGE.UNFOCUS");
		});
		
		$(window).focus(function(){
			AP.fire("PAGE.FOCUS");
		});
		
		$("#pagescroll > .scrollin").on("scroll", function(){
			var h=$(this)[0].scrollHeight-$(this).scrollTop()-$(this).outerHeight();
			if (h<=50){
				AP.fire("PAGE.OVERSCROLL");
			}
			
			AP.fire("PAGE.SCROLL", [$(this).scrollTop(), $(this)[0].scrollHeight]);
		});
		
		AP.html.resize(function(){
			Layout.checkWidth();
		}, true);
		
		
		AP.sys.fire("system.init");
	};
	
	
	this.checkWidth=function(){
		$("#document").removeClass();
		
		if ($(window).width()<1100){
			$("#document").addClass("screen-ld");
		}else if ($(window).width()<1280){
			$("#document").addClass("screen-md");
		}else if ($(window).width()<1500){
			$("#document").addClass("screen-sd");
		}else{
			$("#document").addClass("screen-hd");
		}
		
	};
	
	
	this.start=function(){
		Layout.scrollable('.scrollable');
		$("#page").removeClass();
		
		this.checkWidth();
		$("#document").removeClass('extented');
		
				
		// this.startCountdown("#document");
		
//		AP.html.resize(function(){
//			if ($("#page .display.-double").length){
//				$("#page .display.-double").css("min-height", $(window).height()-48);
//				var w=$("#page").width();
//				if (w>1370){
//					$("#page .display.-double").addClass("-equal");
//				}else{
//					$("#page .display.-double").removeClass("-equal");
//				}	
//			}
//		});
		
		AP.sys.fire("system.start");
		
		if (Client.pageData.capp && Client.pageData.capp.length){
			Clog.log('capp', safe(Client.pageData.capp));
		}else{
			if (Client.path.app!="welcome"){
				Clog.log('capp', '');	
			}
		}
	};
	
	
	
	this.setColor=function(color){
		$("#document").removeClass().addClass("document-"+color);
	};
	
	
	this.scrollable=function(box){
		if (Client.native){
			return;
		}
		
		$(box).each(function(){
			if ($(this).hasClass('__set')){
				return;
			}
			
			
			$(this).addClass('__set');
			$(this).wrapInner("<div class='scrollin absolute'></div>");
			$(this).find(".scrollin").css({"right":-$.sbWidth(), top:0, left:0, bottom:0});
			AP.scrollBar($(this).find('.scrollin')).init();
		});
	};
	
	
	this.updateScroll=function(canvas){
		if (Client.native){
			return;
		}
		
		$(canvas).find(".scrollin").each(function(){
			$(this).css({"right":-$.sbWidth(), top:0, left:0, bottom:0});
			$(this).scroll();
		});
	};
	
	
	this.scrollDown=function(box){
		var h=$(".__apscrollbar_wrap", box).height();
		$(".scrollin", box).animate({scrollTop: h}, 1000);
	};
	
	this.scrollTo=function(box, offset, anim_time){
		if (!offset){
			offset=0;
		}
		if (typeof anim_time=="undefined"){
			anim_time=500;
		}
		
		var $box=$(box);
		if (!$box.length){
			return;
		}
		
		var $p=$box.closest('.scrollin');
		var h=$box.position().top;
		$p.animate({scrollTop: h-offset}, anim_time);
	};

	
	
	this.scrollTop=function(box){
		if (!box){
			$("#pagescroll > .scrollin").animate({scrollTop: 0}, 500);
			return;
		}
		var $p=$(box).closest('.scrollin');
		$p.animate({scrollTop: 0}, 500);
	};
	
	
	this.hideSide=function(){
		$('#appdialog').hide();
	};
	
	
	this.bcanvas=function(){
		$('#appdialog').hide();
		$("#bcanvas").show();
		$("#bcanvas .full").hide();
		// $("#bside").css("height", $("#bside").parent().height());
		Layout.updateScroll("#bcanvas");
	};
};



var AppManager=new function __AppManager(){
	
	this.list=function(){
		var html=AP.render(Client.system.applist, function(e){
			return getApp(e);
		});
		
		$("#js-applist").html(html);
	};
	
	
	this.manageAdmins=function(ref){
		var key=$(ref).closest(".js-app").data("key");
		var admins=AP.array.select(Client.people, function(e){
			if (isAppAdmin(e, key)){
				return e.username;
			}
			
			return null;
		});
		
		var form=Form.create('edit-profile-fx',{'action':'api/sysadmin/sas.edit'})
		.row(
			Form.label({label: "App admins",sublabel: "Select app admins"}),
			Form.input({name: 'usernames', role:"tag", placeholder:"Type @ to tag"}).value(admins)
		)
		.hiddens({app: key})
		.buttons([
			 {label: "Update", action: function($this){
				 Form.submit("edit-profile-fx", function(code){
					 if (!code.good()){
						 return AP.alertError(code.message);
					 }
					 
					 Form.hide("edit-profile-fx");
					 AP.alertSuccess("Update successfully");
					 AP.refresh();
				 });
			 }, style: 'ok -success -rounded bold'},
			 {label: "Cancel", action: function(){
				 Form.hide("edit-profile-fx");
			 }, style:'cancel -passive-2 -rounded'}
		]).settings();
	
		Form.pop({id:'edit-fx-dx', width: 420, label: 'Manage app admins'}).setForm(form).show();
	};
	
	
	
	this.manageMembers=function(ref){
		var appkey=$(ref).closest(".js-app").data("key");
		Admin.sa.manageUserApps(appkey);
	};
	
	
	function getApp(e){
		if (e.key=="base"){
			return "";
		}
		
		
		var sub=getSub(e);
		var limit_type="Company-wide";
		
		var subinfo="<div class='subname'>No information</div> <div class='membership'>Expired date not specified</div>";
		
		var user_limit=Client.system.user_limit;
		
		
		if (sub){
			if (Client.system.limit_type!="company" && limitedType(e.key)){
				if (sub.limit){
					user_limit=sub.limit;
				}
				
				limit_type="App-specific ("+(user_limit)+" users)";
			}
			
			var expired_info="<div class='expired'>Expired <b>"+(AP.i18n.date(sub.expired))+"</b></div>";
			if (!sub.expired){
				expired_info="<div class='membership'>Expired date not specified</div>";
			}
			
			subinfo="<div class='subname'>"+(sub.sub)+"</div> "+(expired_info)+" <div class='membership'>"+(limit_type)+"</div>";
		}
		
		var users_html="<div class='appxtra'><div class='users-none'>Everyone in "+(Client.system.name)+"</div></div>";
		if (sub && Client.system.limit_type!="company" && limitedType(e.key)){
			users_html=getUsers(sub.users);
		}
		
		var custom_admins=AP.render(Client.people, function(u){
			if (isAppAdmin(u, e.key)){
				return ", <span class='url'>"+(u.name)+"</span>";
			}
			
			return "";
		});
		
		
		var link="<span class='url link' data-url='"+(Base.domain(e.key))+"'>"+(e.key)+"."+(Client.domain)+"</span>";
		var mng_members="";
		if (Client.system.limit_type!="company" && limitedType(e.key)){
			mng_members="<div class='action' onclick='AppManager.manageMembers(this);'>Manage members</div>";
		}
		
		var owner_actions='';
		if (Me.isSystemOwner()){
			owner_actions ="<div class='action' onclick='AppManager.manageAdmins(this);'>Manage admins</div> "+(mng_members)+"";
		}else if (Me.isAppAdmin()){
			owner_actions =""+(mng_members)+"";
		}
		
		var html="<div class='appwrapper js-app' data-key='"+(e.key)+"'> <div class='app'> <div class='appinfo'> <div class='image'><img src='"+(Client.share_url)+"/apps/"+(e.icon)+"'></div> <div class='name'> <span class='url' data-blank='1' data-url='"+(Base.domain(e.key))+"'>"+(e.name)+"</span> </div> <div class='info'>"+(link)+" &middot; "+(e.title)+"</div> <div class='info'>Managed by <span class='url' data-url='company?s=owners'>System owners</span>"+(custom_admins)+"</div> </div> <div class='subinfo'> "+(subinfo)+" </div> </div> <div class='appaction'> <div class='showuser url' data-url=':active:parent:parent'> Show members </div> <div class='side'> "+(owner_actions)+" </div> </div> "+(users_html)+" </div>";
		
		
		return html;
	};
	
	
	function getSub(e){
		return AP.array.single(Client.subs, function(f){
			return f.app==e.key;
		});
	};
	
	
	function limitedType(key){
		var accepted=["wework", "inside", "request", "workflow", "hiring", "testcenter", "office", "booking"];
		if (accepted.indexOf(key)==-1){
			return false;
		}
		
		return true;
	};
	
	
	function getUsers(users){
		if (!users){
			return "<div class='appxtra'><div class='users-none'>Not specified</div></div>";
		}
		
		var html=AP.render(users, function(uid){
			var u=People.get(uid);
			if (!u||!parseInt(u.uid)){
				return '';
			}
			
			return "<div class='user url' data-username='"+(u.username)+"'> <div class='image'><img src='"+(AP.xthumb(u.gavatar))+"'/></div> <div class='name'>"+(u.name)+"</div> <div class='info'>"+(u.title)+"</div> </div>";
		});
		
		return "<div class='appxtra'><div class='users'>"+(html)+"</div></div>"; 
	};
	
	
	function isAppAdmin(u, appkey){
		if (AP.array.single(u.sas, function(app){
			return app==appkey || app==appkey+".admin";
		})){
			return true;
		}
		
		return false;
	};
	
	
};


var DeviceManager=new function __DeviceManager(){
	this.list=function(){
		var html=AP.render(Client.viewer.devices, function(e, index){
			return getHTML(e, index);
		});
		
		$("#js-linked-devices").html(html);
	};
	
	
	this.unlink=function(ref){
		var $row=$(ref).closest(".js-device");
		if (!$row || !$row.length){
			return;
		}
		
		AP.confirm("Confirm unlink device? Push notification will be stopped on this device.", function(){
			UI.ajaxShow();
			AP.post("api/me/device/unlink", {id: $row.data("id")}, function(code){
				UI.ajaxHide();
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Update successfully");
				AP.xRefresh();
			});
		});
	};
	
	
	
	function getHTML(e, index){
		return "<tr class='js-device' data-uuid='"+(e.uuid)+"' data-id='"+(e.id)+"'> <td>["+(AP.data.zeroPrefix(index+1))+"] <b>"+(e.name)+"</b> &mdash; "+(e.os)+"</td> <td>Version: "+(e.os)+" "+(e.version)+" &middot; First linked: "+(AP.i18n.datetime(e.since))+" &middot; Last update: "+(AP.i18n.datetime(e.last_update))+" &middot; Device key: "+(e.uuid)+"</td> <td> <div class='a action url std normal' onclick='DeviceManager.unlink(this);'>Bỏ liên kết</div> </td> </tr>";
	};
};
var Message=new function __Message(){
	this.__mode="native";
	this.httpbase=(parseInt(Client.https)?"https":"http");
	this.api=(Client.base && (Client.base.app=="message" || Client.base.app=="msg"))?"":(this.httpbase+"://" + CONFIG.api + "."+Client.domain+"/ajax/");
	
	this.mode=function(){
		if (arguments.length==0){
			return this.__mode;
		}
		
		return (this.mode==arguments[0]);
	};
	
	
	/**
	 * @desc Add a new message
	 */
	this.addMessage=function(message, channel){
		this.html.addMessage(message, channel);
	};
	
	
	/**
	 * @desc Create an event listener
	 */
	this.on=function(event, fx, $this){
		this.event.bind(event, fx, $this);
		return this;
	};
	
	
	/**
	 * @desc Trigger an event 
	 */
	this.trigger=function(event, data){
		this.event.trigger(event, data);
		return this;
	};
	
	
	/**
	 * @desc Alias of trigger
	 */
	this.fire=function(event, data){
		this.event.trigger(event, data);
		return this;
	};
	
	
	/**
	 * @desc Forward a file to another channel
	 */
	this.forwardFile=function(ref){
		var $box=$(ref).closest(".message").find(".attachments .att").first();
		var file={id: $box.data("file_id"), name: $box.data("file_name")};
		forwardNow(file);
	};
	
	
	this.forwardFileOnSidebar=function(ref){
		var $box=$(ref).closest(".file");
		var file={id: $box.data("file_id"), name: $box.data("file_name")};
		forwardNow(file);
	};
	
	
	function forwardNow(file){
		if (!file || !file.id){
			return;
		}
		
		if (!Channel.manager.channels || !Channel.manager.channels.length){
			return;
		}
		
		UI.picker(Channel.manager.channels, function(c){
			UI.ajaxShow();
			AP.post(Base.domain("message")+"/ajax/api/message/file/forward", {id: file.id, channel_id: c.id, name:file.name}, function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				UI.flash("Forward successfully ...");
			});
		}, {
			title:"Select one channel to send the file"
		});
	};
	
};



Message.socket = new function __MessageSocket(){
	this.send=function(event, data, callback){
		Live.emit(event, data);
		if (callback){
			this.on(event, callback)
		}
	};
	
	
	this.emit=function(event, data, callback){
		this.send(event, data, callback);
	};
	
	
	this.emitMe=function(event, data){
		data.event=event;
		Live.emit("justme", data);
	};
	
	
	this.localEmit=function(event, data, callback){
		this.emit("local.emit."+event, data, callback);
	};
	
	
	this.on=function(event, callback){
		Live.me.on(event, callback); 
	};
};


Message.event=new function __MsgEvent(){
	this.events={};
	this.__fired={};
	
	this.clear=function(){
		this.events={};
		this.__fired={};
	};
	
	this.removeListener=function(ev){
		if (this.events[ev] && this.events[ev].length){
			this.events[ev]=[];
			delete this.events[ev];
		}
	};
	
	this.off= this.removeListener;
	
	this.trigger=function(ev, data){
		$.log("Event "+ev+" fired at "+AP.time.time("%H:%i:%s"));
		
		if (this.events[ev] && this.events[ev].length){
			for (var i=0; i<this.events[ev].length; i++){
				var fn=this.events[ev][i];
				if (!fn){
					break;
				}
				
				if (fn._caller){
					fn.apply(fn._caller, data);
				}else{
					if (AP.data.isArray(data)){
						fn.apply(undefined, data);
					}else{
						fn(data);	
					}
					
				}
			}
		}
		
		this.__fired[ev]=1;
		return this;
	};
	
	
	this.release=function(ev){
		if (this.events[ev] && this.events[ev].length){
			while (true){
				var fn=this.events[ev].shift();
				if (!fn){
					break;
				}
				
				if (fn._caller){
					fn.apply(fn._caller);
				}else{
					fn();
				}
			}
		}
		
		this.__fired[ev]=1;
		return this;
	};
	
	
	this.bind=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}
		
		if (_caller){
			fx._caller=_caller;
		}
		
		this.events[ev].push(fx);
		
		return this;
	};
	
	
	this.bindAll=function(ev, fx, _caller){
		if (!this.events[ev]){
			this.events[ev]=[];
		}
		
		if (_caller){
			fx._caller=_caller;
		}
		
		this.events[ev]=[fx]; // Replace
		
		return this;
	};
	
	
	this.fired=function(ev){
		if (this.__fired[ev]){
			return true;
		}
		return false;
	};
};










Message.eventOnce=new function __MsgEvent(){
	this.events={};
	
	this.clear=function(){
		this.events={};
	};
	
	this.removeListener=function(ev){
		if (this.events[ev]){
			this.events[ev]=null;
			delete this.events[ev];
		}
	};
	
	this.trigger=function(ev, data){
		if (this.events[ev]){
			var fn=this.events[ev];
			if (!fn){
				return;
			}
			
			if (fn._caller){
				fn.apply(fn._caller, data);
			}else{
				if (AP.data.isArray(data)){
					fn.apply(undefined, data);
				}else{
					fn(data);	
				}
				
			}
			
			delete this.events[ev];
		}
		
		return this;
	};
	
	
	
	this.bind=function(ev, fx, _caller){
		if (_caller){
			fx._caller=_caller;
		}
		
		this.events[ev]=fx;
		
		return this;
	};
	
	
};


Message.bindEvents=function(){
	Message.socket.on("message.updated", function(msgdata){
		var channel=msgdata.channel;
		var message=msgdata.message;
		var notis=msgdata.notis;
		var actives=msgdata.actives;
		var seens=msgdata.seens;
		
		// FORCE UPDATE
		if (message.__action && message.__action=="update"){
			if (message.__action_notis){
				Message.notify.reaction(message, channel, message.__action_notis);
			}
			
			return Message.html.onUpdate(message, channel);
		}
		
		if (message.__action && message.__action=="remove"){
			return Message.html.onRemove(message, channel);
		}
	});
	
	
	Message.socket.on("message.received", function(msgdata){
		var channel=msgdata.channel;
		var message=msgdata.message;
		var notis=msgdata.notis;
		var actives=msgdata.actives;
		var seens=msgdata.seens;
		
		if (message && message.intent && message.intent=="call" && parseInt(message.user.id)!=parseInt(Client.viewer.id)){
			Message.notify.ringing(message);
		}
		
		if (message.__action && message.__action=="update"){
			return Message.html.onUpdate(message, channel);
		}
		
		if (message.__action && message.__action=="remove"){
			return Message.html.onRemove(message, channel);
		}
		
		
		if (Message.checkpoint.received(message)){
			Base.console("WOW -- RECEIVED MESSAGE & INGORED @L15 --"+message.id);
			return;
		}
		
		if (message.content=="buzz!"){
			DN.bip(6, message.id);
		}
		
		if (msgdata.notis_opt && msgdata.notis_opt=='on'){
			Message.notify.now(message, channel, notis);	
		}
		
		if (!Channel.isDisplayed(channel.id)){
			if (msgdata.notis_opt=="off"){
				Message.canvas.onMessage(message, channel);
				return; // SILENT
			}
			Channel.open(channel.id, {intent: "message", "just_open": 1}, function(){
				Message.html.forceScrollBottom(channel.id);
				setTimeout(function(){
					Message.html.forceScrollBottom(channel.id);
				},1000);
				
				setTimeout(function(){
					Message.html.forceScrollBottom(channel.id);
				},3000);
			});
		}else{
			Message.html.addMessage(message, channel);
		}
		
		
		// Message.panel.onMessage(message, channel);
		// Message.panel.onMessageReceive(message, channel);
		// Channel.fixUnread(channel);
		// Base.title.update();
		
		Message.canvas.onMessage(message, channel);
		
		seens=AP.array.filter(seens, function(e){
			return AP.array.contain(channel.followers, e, function(f, e){
				return parseInt(f)==parseInt(e);
			});
		});
		
		Message.seen.render(channel.id, seens, actives);
	});
	
	
	Message.socket.on("message.deleted", function(msgdata){
	});
	
	
	Message.socket.on("typings", function(data){
		Message.form.updateTypings(data.channel_id, data.users);
	});
	
	
	
	Message.socket.on("call.closed", function(data){
		DN.bipInf("ringing", false);
		AP.dialog("#alert").hide();
	});
	
	Message.socket.on("call.close", function(data){
		DN.bipInf("ringing", false);
		AP.dialog("#alert").hide();
	});
	
	
	Message.socket.on("channel.me.close", function(data){
		if ($("#channel-"+data.id).length){
			Message.render.destroy("#channel-"+data.id+" .js-channel-close");
		}
	});
};



AP.rewrite('r/file/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)', 'messages/file?c=$1&file=$2', function(qs){
	Channel.open(qs.c, function(){
		BaseFile.open(qs.file);
	});
});


Message.notify= new function __MessageParser(){
	this.badge=function(){
		var total=Channel.countUniqueUnreads();
		
		if (total>0){
			if ($("#base-message-badge").length){
				$("#base-message-badge").html(total).show();
			}
		}else{
			if ($("#base-message-badge").length){
				$("#base-message-badge").html("").hide();
			}
		}
	};
	
	this.ringing=function(message){
		if (notified(message.id)){
			return;
		}
		
		logNotified(message.id);
		
		DN.bipInf("ringing", true);
		AP.alert(message.plaintext, [
          {label: "Cancel",  action: function(){
        	  Message.socket.emitMe("call.close", {id: 0});
        	  
        	  DN.bipInf("ringing", false);
        	  AP.dialog("#alert").hide();
          }, style: "er confirm-button"},
          {label: "Join call",  action: function(){
        	  Message.socket.emitMe("call.close", {id: 0});
        	  
        	  DN.bipInf("ringing", false);
        	  AP.dialog("#alert").hide();
        	  AP.toURL(message.intentdata.call);
          }, style: "ss confirm-button"}
        ],"<div class='ring-animation'><div class='-ap icon-phone-handset'></div></div>",{
			closable: false
		});
	};
	
	
	this.now=function(message, channel, notis){
		if (this.ignored(channel)){
			return;
		}
		
		if (Channel.isActive(channel.id) || Base.systemActive()){
			notis.__is_base_message=1;
			notify(message, channel, notis);
		}else{
			setTimeout(function(){
				notify(message, channel, notis);
			},300);
		}
	};
	
	
	
	this.ignored=function(channel){
		return false;
	};
	
	
	this.reaction=function(message, channel, reaction){
		if (parseInt(message.user.id)!=parseInt(Client.viewer.id) || reaction.username==Client.viewer.username){
			return;
		}
		
		if (notified(message.id+"-"+reaction.reaction)){
			return;
		}
		
		var u=People.get(reaction.username);
		var notis={};
		
		notis.body=u.name+" reacted :"+reaction.reaction+": on your message";
		notis.icon=AP.thumb(u.gavatar);
		notis.title="[Base Message] "+Channel.engine.getDisplayName(channel);
		notis.url="base-message://messages/"+message.channel_id+"/"+message.id;
		
		DN.show(notis);
		DN.bip(3, message.id);
		logNotified(message.id);
	};
	
	
	
	function notify(message, channel, notis){
		if (notified(message.id)){
			Base.console("NEW MESSAGE NOTIFY SKIP --- "+message.id);
			return;
		}
		
		// Desktop notification or not?
		if (parseInt(channel.inspect.notis)){
			notis.body=notis.content;
			notis.icon=notis.image;
			if (!notis.url){
				notis.url=notis.link;
			}
			
			Base.console("NEW MESSAGE NOTIFY",notis);
			notis.title="[Base Message] "+Channel.engine.getDisplayName(channel);
			
			DN.show(notis);
			DN.bip(3, message.id);
			logNotified(message.id);
		}else{
			$$(function(){
				$.log("Ignore notification on direct message ...");
			});
		}
	};
	
	

	function notified(msgid){
		var lm=Clog.getCookie("__lm");
		if (!lm){
			lm=[];
		}else{
			lm=lm.split(" ");
		}
		
		if (AP.array.find(lm, msgid)){
			return true;
		}
		
		return false;
	};
	
	
	function logNotified(msgid){
		msgid=""+msgid+"";
		
		var lm=Clog.getCookie("__lm");
		if (!lm){
			lm=[];
		}else{
			lm=lm.split(" ");
		}
		
		lm.push(msgid);
		lm=AP.array.unique(lm, function(e1, e2){
			return e1==e2;
		});
		
		if (lm.length>=11){
			lm=lm.slice(lm.length-10);
		}
		
		Clog.setCookie("__lm", lm.join(" "));
	};
};


Message.checkpoint=new function __MessageCheckpoint(){
	this._received={};
	this._received_ids=[];
	this._received_len=90;
	this._received_max=100;
	
	
	/**
	 * @desc Fix multiple received. Allow once received only
	 * @use if (Message.received(msg)){}
	 */
	this.received=function(msg){
		if (this._received["msg@"+msg.id]){
			return true;
		}
		this._received["msg@"+msg.id]=1;
		this._received_ids.push(msg.id);
		
		if (this._received_ids.length>=this._received_max){
			var temp={};
			for (var i=this._received_ids.length-this._received_len; i<this._received_ids.length; i++){
				temp["msg@"+this._received_ids[i]]=this._received["msg@"+this._received_ids[i]];
			}
			
			this._received=temp;
			this._received_ids=this._received_ids.slice(this._received_ids.length-this._received_len);
		}
		
		return false;
	};
	
	
};


Message.sender=new function __MessageSender(){
	/**
	 * @desc Send a text message
	 */
	this.text=function(text, channel){
		Channel.setActive(channel.id);
		
		var state=AP.uuid();
		var data={
			state: state,
			content: text,
			channel_id: channel.id,
		};
		
		var pending_msg={
			state: state,
			content: text,
			channel_id: channel.id,
			id: state,
			since: AP.time.now(),
			user: Client.viewer,
			metatype: "message",
			type: "text",
			attachments: []
		};
		
		Message.form.onSending(pending_msg, channel);
		
		AP.post(Message.api+"api/message/message/save", data, function(code){
			if (!code.good()){
				Message.trigger("message.rejected", [data, data.state]);
				return AP.alertError(code.message);
			}
			
			Message.form.onSent(code.message, data.state);
		});
	};
	
	
	this.buzz=function(channel){
		this.text("buzz!", channel);
	};
	
	
	this.drive=function(channel){
		Base.drive.pick({
			multi: 1, 
			ext: 1,
			callback: function(files){
				if (!channel){
					return;
				}
				
				if (!files.length){
					return;
				}
				
				var state=AP.uuid();
				var data={
					state: state,
					content: "shared files",
					channel_id: channel.id,
					type: 'drivefile',
				};
				

				var bfs=fix_post_array(files, "bf");
				for (var key in bfs){
					data[key]=bfs[key];
				}
				
				var pending_msg={
					state: state,
					content: "shared files",
					channel_id: channel.id,
					id: state,
					since: AP.time.now(),
					user: Client.viewer,
					metatype: "message",
					type: "drivefile",
					attachments: files
				};
				
				Message.form.onSending(pending_msg, channel);
				
				AP.post(Message.api+"api/message/file/drive.upload", data, function(code){
					if (!code.good()){
						Message.trigger("message.rejected", [data, data.state]);
						return AP.alertError(code.message);
					}
					
					Message.form.onSent(code.message, data.state);
				});
            }
        });
	};
	
	
	this.sticker=function(channel, sticker_key, sticker_src){
		if (!channel){
			return;
		}
		
		var state=AP.uuid();
		var data={
			state: state,
			content: sticker_key,
			channel_id: channel.id,
			type: 'sticker',
		};
		
		
		var pending_msg={
			state: state,
			content: sticker_key,
			channel_id: channel.id,
			id: state,
			since: AP.time.now(),
			user: Client.viewer,
			metatype: "message",
			type: "sticker",
			sticker_src: sticker_src,
			attachments: []
		};
		
		Message.form.onSending(pending_msg, channel);
		
		AP.post(Message.api+"api/message/message/save", data, function(code){
			if (!code.good()){
				Message.trigger("message.rejected", [data, data.state]);
				return AP.alertError(code.message);
			}
			
			Message.form.onSent(code.message, data.state);
		});
	};
	
	
	this.event=function(event, data){
		return this.socket.send(event, data);
	};
	
	
    
    this.feedback = function(channel) {
        var hiddens = {id: channel.id};
        
        var form = Form.create('feedback-fx', {'action': Message.api + "api/message/channel/feedback"})
            .row(
                Form.noLabel(),
                Form.input({name: 'feedback', "type": "textarea", "placeholder": "The content of your feedback"}).css({height: 120})
            )
            .hiddens(hiddens)
            .buttons([
                {label: "Submit", action: function() {
                    Form.submit("feedback-fx", function(code) {
                    if (!code.good()) {
                        return AP.alertError(code.message);
                    }
                    
                    Form.hide("feedback-fx");
                    // UI.flash("Form submitted");
                    return AP.alertSuccess(code.message);
                    });
                }, style: 'ok -success -rounded bold'},
                {label: "Cancel", action: function() {
                    Form.hide("feedback-fx");
                }, style: 'cancel passive-3 rounded'}
            ]).settings({block: true});
        
        Form.pop({id:'feedback-fx-dx', width: 600, label: icon("entypo ticon-docs") + 'Send a feedback/report'}).setForm(form).show().focus('feedback');
    };
    
	function fix_post_array(files, name){
		var data={};
		for (var i=0; i<files.length; i++){
			for (var key in files[i]){
				data[name+""+i+"_"+key]=files[i][key];
			}
		}
		
		$.log(data);
		return data;
	};
};


Message.seen=new function __MsgSeen(){
	this.init=function(){
		Message.socket.on("channel.user.active", function(data){
			var channel_id=parseInt(data.channel_id);
			var user_id=parseInt(data.user_id);
			
			var $box=$("#channel-"+channel_id+" .channel-seens");
			if (!$box.length){
				return;
			}
			
			var seens=$box.data("seens");
			if (!seens){
				seens=[];
			}
			
			insertSeens($box, seens, user_id);
		});
		
		Message.socket.on("channel.seens", function(data){
			Message.seen.render(data.channel_id, data.seens);
		});
	};
	
	
	this.get=function(channel, callback){
		Message.socket.emit("channel.seens", {channel_id: channel.id, channel_token: channel.token});
	};
	
	
	this.render=function(channel_id, seens, actives){
		var $box=$("#channel-"+channel_id+" .channel-seens");
		if (!$box.length){
			return;
		}
		
		$box.data("seens", seens);
		display($box);
	};
	
	
	function display($box){
		var seens=$box.data("seens");
		if (!seens){
			return;
		}
		
		var html=AP.render(seens, function(e, index){			
			var u=People.get(e);
			if (!u.uid || !parseInt(u.uid)){
				return "";
			}
			
			return "<div class='avatar' title='Seen by "+(u.name)+" (@"+(u.username)+")'><img src='"+(AP.xthumb(u.gavatar))+"'></div>";
		});
		
		$box.html("<div class='avatars'>"+html+"</div>");
	};
	
	
	function insertSeens($box, seens, user_id){
		seens.push(parseInt(user_id));
		seens=AP.array.unique(seens);
		$box.data("seens", seens);
		display($box);
	};
};



Message.call=new function __ChannelCall(){
	this.click=function(channel){
		window.open(Base.domain("message")+"/videocall/"+channel.id,"","width=800,height=600");
		
		UI.ajaxShow();
		AP.post(Message.api+"api/message/call/start",{id: channel.id}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
		});
	};
	
	this.display=function(call_id){
		Message.socket.emitMe("call.close", {id: call_id});
	};
	
	
	this.show=function(call){
		Message.callrender.reset();
		Message.callrender.join(call, function(){
			Message.callrender.prepare();
		});
	};
	
	
	
	this.getCallInfo=function(call_id, callback){
		AP.post(Message.api+"api/message/call/info",{id: call_id}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.call);
		});
	};
};






Message.callrender = new function __MessageCallRender(){
	this.loaded=false;
	this.room=null;
	this.previewMedia=null;
	
	
	this.reset=function(call){
		if (!$("#call-canvas").length){
			$("<div id='call-canvas'></div>").appendTo("#document");
		}
		
		$("#call-canvas").empty().show().html("<div class='canvas loading'><div class='in'>" +
			"<div class='loading'><span class='ficon-spin ficon-spinner'></span> &nbsp; Waiting for participants ...</div>" +
			"<div class='video-area' id='remote-media'></div>" +
			"<div class='preview' id='my-media'></div>" +
		"</div></div>" +
		"<div class='buttons'>" +
		"	<div class='bt button-audio' onclick='Message.callrender.stopAudio();'><div class='signal'></div><span class='-ap icon-mic3'></span></div>" +
		"	<div class='bt -er' onclick='Message.callrender.disconnect();'><div class='signal'></div><span class='-ap icon-phone-hang-up'></span></div>" +
		"	<div class='bt button-video' onclick='Message.callrender.stopVideo();'><div class='signal'></div><span class='-ap icon-videocam'></span></div>" +
		"</div>").show();
	};
	
	
	this.join=function(call, callback){
		getToken(call, function(data){
			var videoClient = new Twilio.Video.Client(data.token);
			videoClient.connect({to: call.room}).then(function(room) {
				Message.callrender.room=room;
				
				// Draw local video, if not already previewing
				if (!Message.callrender.previewMedia) {
					room.localParticipant.media.attach('#my-media');
				}
				  
				room.participants.forEach(function (participant) {
					$.log("Already in Room: '" + participant.identity + "'");
					participant.media.attach('#remote-media');
					$("#call-canvas .canvas").removeClass("loading");
				});

				// When a participant joins, draw their video on screen
				room.on('participantConnected', function (participant) {
					$.log("Joining: '" + participant.identity + "'");
					participant.media.attach('#remote-media');
					$("#call-canvas .canvas").removeClass("loading");
				});

				// When a participant disconnects, note in log
				room.on('participantDisconnected', function (participant) {
					$.log("Participant '" + participant.identity + "' left the room");
					participant.media.detach();
				});
				
				room.on('disconnected', function () {
					room.localParticipant.media.detach();
					room.participants.forEach(function (participant) {
						participant.media.detach();
					});
					Message.callrender.room=null;
					$("#call-canvas").empty().hide();
				  });

				
				
				callback();
			}, function (error) {
				$.log('Could not connect to Twilio: ' + error.message);
				AP.alertError("Could now start the call. Make sure that the camera and speaker are ON.", function(){
					Message.callrender.disconnect();
				})
			});
		});
	};
	
	
	this.prepare=function(){
		return;
		
		if (!this.previewMedia) {
			this.previewMedia = new Twilio.Video.LocalMedia();
			Twilio.Video.getUserMedia().then(
				function (mediaStream) {
					Message.callrender.previewMedia.addStream(mediaStream);
					Message.callrender.previewMedia.attach('#my-media');
				},
				function (error) {
					console.error('Unable to access local media', error);
					log('Unable to access Camera and Microphone');
				}
			);
		};
	};
	
	
	this.disconnect=function(){
		if (this.room){
			this.room.disconnect();
		}
		
		$("#call-canvas").fadeOut(300, function(){
			$(this).remove();
		});
	};
	
	
	this.stopVideo=function(){
		if (!this.room){
			return;
		}
		
		$("#call-canvas .buttons .button-video").toggleClass("disabled");
		
		var localMedia=this.room.localParticipant.media;
		localMedia.videoTracks.forEach(function (track) {
			if (track.isEnabled) {
				track.disable();
			} else {
				track.enable();
			}
		});
	};
	
	this.stopAudio=function(){
		if (!this.room){
			return;
		}
		
		$("#call-canvas .buttons .button-audio").toggleClass("disabled");
		
		var localMedia=this.room.localParticipant.media;
		localMedia.audioTracks.forEach(function (track) {
			if (track.isEnabled) {
				track.disable();
			} else {
				track.enable();
			}
		});
	};
	
	function getToken(call, callback){
		initJS(function(){
			UI.ajaxShow();
			AP.post(Message.api+"api/message/call/token", {id: call.id},function(code){
				UI.ajaxHide();
				
				if (!code.good()){
					return AP.alertError(code.message);
				}
				
				callback(code.token);
			});
		});
	};
	
	
	function initJS(callback){
		if (Message.callrender.loaded){
			callback();
			return;
		}
		
		$.apScript("https://media.twiliocdn.com/sdk/js/video/releases/1.0.0-beta2/twilio-video.js", function(){
			Message.callrender.loaded=true;
			callback();
		}, "twilio-lib");
	};
};



Message.html=new function __MessageHTML(){
	this.onUpdate=function(message, channel){
		$("#msg-"+message.id+" .reaction-list").replaceWith(Like.reaction.getReactions(message));
		$("#msg-"+message.id+" .reaction-wrapper").html(Like.reaction.getReactionIcon(message));
		// $("#msg-"+message.id+" .linked.js-actions").html(getActions(message));
		
		if ($("#msg-"+message.id).hasClass("-linked")){
			var r=$("#msg-"+message.id+" .msg-reactions").width()+10;
			
			$("#msg-"+message.id+" .linked-time").css({right: 15+r});
		}
	};
	
	
	this.onRemove=function(message, channel){
		$("#msg-"+message.id+" .body").html("<span class='msg-body'>"+message.content+"</span>");
		$("#msg-"+message.id+" .attachments").remove();
	};
	
	
	
	this.addMessage=function(message, channel){
		addDaySeparation(message, channel);
		removePending(message, channel);
		
		var html=getMessageHTML(message, channel);
		var last=getLastMessage(channel);
		append(html, channel);
		
		if (linkable(message, last)){
			$("#msg-"+message.id).addClass("-linked");
			if (!last.elem.hasClass("-linked")){
				last.elem.addClass("-first");
			}
		}else{
			$("#msg-"+message.id).addClass("-leading");
		}
		
		$("#msg-"+message.id).addClass("__p");
		
		this.scrollDown(message.id, channel, 0);

	};
	
	
	/**
	 * @desc Prepend message
	 */
	this.prependMessage=function(message, channel){
		prependDaySeparation(message, channel);
		var html=getMessageHTML(message, channel);
		prepend(html, channel);
	};
	
	
	this.updateMessage=function(message, channel, state){
		var html=getMessageHTML(message, channel);
	};
	
	
	this.getHTML=function(message, channel, ns){
		return getMessageHTML(message, channel, ns);
	};
	
	
	/**
	 * @desc Linking a group of messages
	 */
	this.linkGroup=function(channel){
		var $box=$("#channel-"+channel.id+" .channel-messages");
		$box.children().each(function(){
			var $this=$(this);
			if ($this.hasClass("__p") || $this.hasClass("ds")){
				return;
			}
			
			$this.addClass("__p");
			
			var $prev=$this.prev();
			
			var _linkable=false;
			if ($prev && $prev.length && $prev.hasClass("message")){
				if ($prev.data("user")==$this.data("user") && AP.time.sameDay($prev.data("ts"), $this.data("ts"))){
					if ($this.data('metatype')==$prev.data('metatype') && !parseInt($this.data('attachments')) && $this.data('metatype')=="message"){
						_linkable=true;
					}
				}
			}
			
			if (_linkable){
				$this.addClass("-linked");
				if (!$prev.hasClass("-linked")){
					$prev.addClass("-first");
				}
			}else if ($this.hasClass("message")){
				$this.addClass("-leading");	
			}
		});
	};
	
	
	
	/**
	 * @desc Add a pending (fake) message
	 */
	this.addPendingMessage=function(message, channel){
		addDaySeparation(message, channel);
		if (message.content && message.content.length){
			message.content=safe(message.content);	
		}
		
		var html="<div class='message -saved' data-user='"+message.user.id+"' data-metatype='"+message.metatype+"' data-subtype='"+message.subtype+"' data-ts='"+message.since+"' id='msg-"+message.id+"'>" +
			"<div class='wrapper'>" +
			"	<div class='image'>"+getUser(message.user)+"</div>" +
			"	<div class='content'>" +
			"		<div class='header'>" +
			"			<em>"+message.user.name+"</em>" +
					"	<span class='time'>"+getTime(message.since)+"</span>" +
					"</div>" +
					"<div class='body'>"+getContent(message)+"</div>"+
			"		<div class='linked-time'>"+getTime(message.since)+"</div>" +
			"	</div>" +
			"</div>" +
		"</div>";
		
		var last=getLastMessage(channel);
		append(html, channel);
		
		if (linkable(message, last)){
			$("#msg-"+message.id).addClass("-linked");
			if (!last.elem.hasClass("-linked")){
				last.elem.addClass("-first");
			}
		}
		
		this.scrollDown(null, channel, 100);
	}
	
	
	
	
	
	this.scrollDown=function(msgid, channel, anim_time, callback, offset){
		var cid=Channel.id(channel);
		
		var $target=null;
		if (!msgid){
			$target=$("#channel-"+cid+" .channel-messages").children().last();
		}else{
			$target=$("#msg-"+msgid);
		}
		
		if (typeof anim_time=="undefined"){
			anim_time=500;
		}
		
		var $box=$target;
		if (!$box.length){
			return;
		}
		
		var h=$box.position().top;
		var $canvas=$box.closest('.scrollin');
		
		if (!offset){
			offset=10;
		}
		
		var st= h+$canvas.scrollTop()-offset;

		$canvas.animate({scrollTop: st}, anim_time, function(){
			if (callback){
				callback();
			}
		});
	};
	
	this.scrollBottom=function(channel_id, offset){
		this.scrollDown(0, channel_id, 100, null, -200);
		$("#channel-"+channel_id).removeClass("has_new_message");
	};
	
	
	this.forceScrollBottom=function(channel_id){
		var $c=$("#channel-"+channel_id+" .scrollin");
		if ($c && $c.length){
			$c.scrollTop($c[0].scrollHeight);	
		}
	};
	
	
	this.scrollTop=function(channel, anim_time, callback){
		this.scrollDown($("#channel-"+channel.id).find(".message").first(), channel, anim_time, callback);
	};
	
	
	function removePending(msg){
		if (!msg.state || !msg.state.length || parseInt(msg.user.id)!=parseInt(Client.viewer.id)){
			return; // No duplication
		}
		
		if ($("#msg-"+msg.state).length){
			$("#msg-"+msg.state).remove();
		}
	};
	
	
	function addDaySeparation(message, channel){
		var $last=getLastMessage(channel);
		if (!$last || !$last.ts){
			return;
		}
		
		var ts=$last.ts;
		
		if (AP.time.sameDay(message.since, ts)){
			return "";
		}
		
		append("<div class='ds'><div class='date'>"+AP.time.time("%D, %d/%m/%Y", message.since)+"</div></div>", message.channel_id);
	};
	
	
	function prependDaySeparation(message, channel){
		var $first=getFirstMessage(channel);
		if (!$first || !$first.ts){
			return;
		}
		
		var ts=$first.ts;
		
		if (AP.time.sameDay(message.since, ts)){
			return "";
		}
		
		prepend("<div class='ds'><div class='date'>"+AP.time.time("%D, %d/%m/%Y", message.since)+"</div></div>", message.channel_id);
	};
	
	
	
	function getLastMessage(channel){
		var $last=$("#channel-"+channel.id+" .message").last();
		if (!$last || !$last.data("metatype")){
			return {};
		}
		
		return {elem: $last, metatype: $last.data("metatype"), type: $last.data("type"), "ts": $last.data("ts"), "user": $last.data("user"), counter: 0}
	};
	
	
	
	function getFirstMessage(channel){
		var $first=$("#channel-"+channel.id+" .message").first();
		if (!$first || !$first.data("metatype")){
			return {};
		}
		
		
		return {elem: $first, metatype: $first.data("metatype"), type: $first.data("type"), "ts": $first.data("ts"), "user": $first.data("user"), counter: 0}
	};
	
	
	
	
	function linkable(msg, last){
		if (msg.subtype=="sticker"){
			return false;
		}
		
		if (!msg.attachments){
			return false; // Data error
		}
		
		if (!parseInt(last.user)){
			return false;
		}
		
		if (last.counter>=5){
			return false;
		}
		
		var ts=parseInt(last.ts);
		var mts=parseInt(msg.since);
		
		if (!AP.time.sameDay(ts, mts) || Math.abs(mts-ts)>=300){
			return false;
		}
		
		return msg.user.id==last.user && msg.metatype==last.metatype && !msg.attachments.length && msg.metatype=="message";
	};
	
	
	function getContent(message){
		if (message.content=="buzz!"){
			return "<span class='msg-buzz bold red upper'>BUZZ!</span>";
		}
		if (message.type=="sticker" && message.sticker_src && message.sticker_src.length){
			return "<div class='sticker'><img src='"+message.sticker_src+"'/></div>";
		}

		if (message.subtype=="sticker"){
			return "<div class='sticker'><img src='"+message.content+"'/></div>";
		}
		
		if (!message.content.length){
			return "";
		}
		
		if (message.subtype=="log"){
			return "<span class='log'>"+message.content+"</span>";
		}
		
		
		var mc=UI.emotion(UI.parse(message.content));
		if (mc.length){
			mc=mc.replace(/⑊/g,'&#92;').replace(/&#9290;/g, '&#92;');
		}
		return "<span class='msg-body'>"+mc+"</span>";
	};
	
	function getAttachments(message){
		if (!message.attachments.length) return "";
		
		return AP.render(message.attachments, function(att){
			return getAttachment(att);
		})
	};
	
	function getAttachment(att){
		return Message.attachment.get(att);
	};
	
	
	function getUser(user){
		if (user.bot){
			$.log(user);
			image=user.image;
			
			if (!image){
				image=Client.share_url+"/bots/"+user.username+".png";
			}
			return "<div class='avatar'><img src='"+image+"'/></div>";	
		}
		return "<div class='avatar'><img src='"+AP.thumb(user.gavatar)+"'/></div>";
	};
	
	
	function getActions(message){
		var hl="";
		if (parseInt(message.pinned)){
			hl="hl";
		}
		
		var shl="";
//		if (Channel.star.starred(message.id)){
//			shl="hl";
//		}
		
		return "<span class='action "+shl+"'' onclick='Message.toggleStar(this);'>" +
				"<span class='actiontt'><span class='ttb'>Star message</span></span>" +
				"<span class='-ap icon-star_outline'></span>" +
			"</span>"+
		"<span class='action "+hl+"' onclick='Message.togglePin(this);'>" +
			"<span class='actiontt'><span class='ttb'>Pin message</span></span>" +
			"<span class='-ap icon-pin-outline'></span>" +
		"</span>";
	};
	
	function getTime(time){
		return AP.time.time("%H:%i", time);
	};
	
	
	
	function append(text, channel){
		$("#channel-"+channel.id+" .channel-messages").append(text);
	};
	
	
	function prepend(text, channel){
		$("#channel-"+channel.id+" .channel-messages").prepend(text);
	};
	
	
	
	
	
	function getMessageHTML(message, channel, ns){
		var msguser=message.user;
		var user=null;
		var extra="";
		if (parseInt(msguser.id) && msguser.username){
			user=People.get(msguser.username);
			if (!user){
				return "";
			}
		}else if(parseInt(msguser.id)===0 && msguser.username=="_bot"){
			user=msguser.user_export;
			user.bot=1;
			if (msguser.gavatar){
				user.image=msguser.gavatar;
			}
			
			extra="<span class='bottype'>BOT</span>";
			if (user.instant){
				extra="<span class='bottype'>IBOT</span>";	
			}
		}
		
		var na=0;
		if (message.attachments){
			na=message.attachments.length;
		}
		
		if (!ns){
			ns="msg";
		}
		
		var forward="";
		if (message.attachments && message.attachments.length && message.intent=="file"){
			forward="&nbsp; <span class='action pointer' onclick='Message.forwardFile(this);' title='Forward this file ..'> <span class='-ap icon-forward'></span> </span>";
		}
		
		var html="<div class='message -saved' title='"+AP.time.time("%H:%i %d/%m",message.since)+" - "+AP.time.ago(message.since)+"' data-msgid='"+message.id+"' data-user='"+message.user.id+"' data-metatype='"+message.metatype+"' data-type='"+message.subtype+"' data-ts='"+message.since+"' data-attachments='"+na+"' id='"+ns+"-"+message.id+"'>" +
			"<div class='wrapper'>" +
			"	<div class='image'>"+getUser(user)+"</div>" +
			"	<div class='content'>" +
			"		<div class='header ap-xdot'>" +
			"			<em class='url' data-username='"+user.username+"'>"+user.name+"</em>" + extra +
					"	<span class='time ap-f12'>"+getTime(message.since)+forward+"</span>" +
					"	<span class='actions'>"+getActions(message)+"</span>" +
					"</div>" +
			"		<div class='body-wrapper'>" +
			"			<div class='msg-reaction-button scale-small'>"+Like.reaction.getReactionIcon(message)+"</div>"+
			"			<div class='body'>"+getContent(message)+"</div>" +
			"		</div>" +
			"		<div class='linked'>"+getActions(message)+"</div>" +
			"		<div class='linked-time'>"+getTime(message.since)+"</div>" +
			((message.attachments && message.attachments.length)?("<div class='attachments'>"+getAttachments(message)+"</div>"):"") +
				Like.reaction.getReactions(message)+
			"	</div>" +
			"</div>" +
		"</div>";
		
		return html;
	}
};


Message.attachment = new function __MessageAttachments(){
	this.get=function(att, index){
		if (!att || !att.metatype){
			return "";
		}
		
		if (att.metatype=="base"){
			return "<div class='att -fileatt -filedrive -idx"+index+" -with-file-icon' data-metatype='"+att.metatype+"'>" +
				"<div class='att-box'>" +
					"<div class='att-file-icon'><img src='"+Client.share_url+"/32/file-text2.png'/></div>"+
					"<div class='att-title'><span class='a url' onclick=\"Base.file.preview('"+att.src+"');\">"+att.name+"</span></div>"+
					"<div class='att-footer'><span class='a url' onclick=\"Base.file.preview('"+att.src+"');\">Chi tiết</span> &middot; <a target='_blank' href='"+att.download+"'>Download</a></div>"+
				"</div>" +
				getCollapse(att)+
			"</div>";
		}
		
		if (att.metatype=="dropbox" || att.metatype=="onedrive" || att.metatype=="googledrive"){
			return "<div class='att -fileatt -filedrive -idx"+index+" -with-file-icon' data-metatype='"+att.metatype+"'>" +
				"<div class='att-box'>" +
					"<div class='att-file-icon'><img src='"+Client.share_url+"/32/file-"+att.metatype+".png'/></div>"+
					"<div class='att-title'><span class='a url' data-url='"+att.weblink+"' target='_blank'>"+att.name+"</span></div>"+
					"<div class='att-footer'><a href='"+att.weblink+"' target='_blank'>Chi tiết</a> &middot; <a target='_blank' href='"+att.download+"'>Download</a></div>"+
				"</div>" +
				getCollapse(att)+
			"</div>";
		}
		
		if (att.metatype=="link" || att.metatype=="video" || att.metatype=="file" || att.metatype=="topic" || 1==1){
			var extra='';
			if (att.metatype=="file" && att.cache){
				extra="data-file_id='"+(att.cache.id)+"' data-file_name='"+(att.title)+"'";
			}
			
			return "<div class='att "+getClass(att)+"' data-metatype='"+att.metatype+"'"+extra+">" +
				getImage(att)+
				"<div class='att-box'>" +
					getLeft(att)+
					getHeader(att)+
					getDisplayFile(att)+
					getCover(att)+
					getTitle(att)+
					getText(att)+
					getFeatures(att)+
					getPlayVideo(att)+
					getFooter(att)+
				"</div>" +
				getCollapse(att)+
			"</div>";
		}
	};
	
	
	
	
	this.collapse=function(ref){
		var $att=$(ref).closest(".att");
		if ($att.hasClass("-collapsed")){
			$(".att-image", $att).slideDown(300);
			$(".att-text", $att).slideDown(300);
			$(".att-footer", $att).slideDown(300);
			$(".att-video", $att).slideDown(300);
			$(".att-display-file", $att).slideDown(300);
			$att.removeClass("-collapsed");
		}else{
			// $att.toggleClass("-collapsed");
			$(".att-image", $att).slideUp(300);
			$(".att-text", $att).slideUp(300);
			$(".att-footer", $att).slideUp(300);
			$(".att-video", $att).slideUp(300);
			$(".att-display-file", $att).slideUp(300);
			$att.addClass("-collapsed");
		}
	};
	
	
	function getClass(att){
		var cs=[];
		if (att.image && att.image.length && att.metatype!="video" && att.metatype!="file"){
			cs.push("-with-image");
		}else if (att.icon && att.icon.length){
			if (att.size && att.size=="small"){
				cs.push("-with-small-icon");
			}else{
				cs.push("-with-icon");	
			}
		}
		
		if (att.metatype=="file"){
			cs.push("-fileatt");
			
			if(typeof att !== 'undefined' && typeof att.image !== 'undefined') {
			    if (!att.image && !att.image.length){
	                cs.push("-with-file-icon");
	            }
			}
		}
		
		return cs.join(" ");
	};
	
	
	function getLeft(att){
		if (att.metatype=="file"){
			return "";
		}
		
		if (att.icon && att.icon.length){
			return "<div class='att-icon'><img src='"+Client.share_url+"/messages/"+att.icon+"'/></div>";
		}
		
		return "<div class='att-r'></div>";
	};
	
	function getImage(att){
		if (att.metatype=='video' || att.metatype=='file'){
			return "";
		}
		
		if (att.image && att.image.length){
			return "<div class='att-image'><div class='img'><img src='"+AP.thumb(att.image)+"'/></div></div>";
		}
		
		
		return "";
	};
	
	
	
	
	function getHeader(att){
		return "";
	};
	
	function getTitle(att){
		if (!att.title || !att.title.length){
			return "";
		}
		
		if (att.metatype=="file" && att.src){
			return "<div class='att-title'><span class='a url' data-url=':file' data-file='"+att.src+"'>"+att.title+"</span></div>";
		}
		
		if (!att.url){
			return "<div class='att-title'>"+att.title+"</div>";
		}
		
		return "<div class='att-title'>"+Base.a(att.url, att.title)+"</div>";
	};
	
	function getText(att){
		if (att.text && att.text.length){
			return "<div class='att-text'>"+att.text+"</div>";
		}
		
		return "";
	};
	
	
	function getFeatures(att){
		if (att.features && att.features.length){
			return "<div class='att-features'>"+AP.render(att.features, function(e){
				return getFeature(e);
			})+"</div>";
		}
		
		return "";
	};
	
	
	function getFeature(e){
		if (!e.label){
			return "";
		}
		
		if (parseInt(e.short)){
			return "<div class='feature -s'>" +
				"<div class='label ap-xdot'>"+e.label+"</div>" +
				"<div class='value ap-xdot' title='"+e.evalue+"'>"+e.value+"</div>" +
			"</div>";
		}
		
		return "<div class='feature -xs'>" +
			"<div class='label'>"+e.label+"</div>" +
			"<div class='value'>"+e.value+"</div>" +
		"</div>";
	};
	
	
	function getFooter(att){
		if (!att.footer || !att.footer.length){
			if (att.metatype=="file"){
				return "<div class='att-footer'>"+att.size+" KB &middot; <a href='"+att.download+"' target='_blank'>Download</a></div>";	
			}
			
			return "";
		}
		
		if (!att.footer_url || !att.footer_url.length){
			return "<div class='att-footer'>"+getFooterIcon(att)+""+att.footer+"</div>";
		}
		
		return "<div class='att-footer'>"+getFooterIcon(att)+"<a href='"+att.footer_url+"' target='_blank'>"+att.footer+"</a></div>";
		
	};
	
	
	function getFooterIcon(att){
		if (att.footer_icon && att.footer_icon.length){
			var parts=att.footer_icon.split(" ");
			if (parts.length==2){
				return "<span class='att-footer-icon'><span class='-ap icon-"+parts[0]+"'></span></span>";
			}else{
				return "<span class='att-footer-icon'><span class='-ap icon-"+parts[0]+"'></span></span>";
			}
		}

		return "";
	}
	
	function getPlayVideo(att){
		if (att.metatype!='video'){
			return "";
		}
		
		if (att.image && att.image.length){
			return "<div class='att-video'>" +
				"<div class='video-screen'><img src='"+att.image+"'/></div>" +
				"<div class='video-mask'></div>" +
				"<div class='play-button'>" +
				"	<div class='button-fix'></div>" +
				"	<div class='button' data-play-url='"+att.video_play_url+"'><span class='-ap icon-play_circle_filled'></span></div>" +
				"</div>" +
				"<div class='link-button'><a target='_blank' href='"+att.url+"'><span class='-ap icon-open_in_new'></span></a></div>" +
			"</div>";
		}
		
		return "";
	};
	
	
	/**
	 * @desc Special case, get displayed video
	 */
	function getDisplayFile(att){
		if (att.metatype!="file"){
			return "";
		}
		
		if (att.image && att.image.length){
			return "<div class='att-display-file'><span class='url' data-url=':file' data-file='"+att.src+"'><img src='"+att.image+"'/></span></div>";
		}else{
			var icon=UI.file.icon(UI.file.ext(att.name));
			return "<div class='att-file-icon'><img src='"+Client.share_url+"/32/file-"+icon+".png'/></div>";
		}
		
		
		return "";
	};
	
	
	function getCover(att){
		if (!att.cover || !att.cover.length){
			return "";
		}
		
		if (att.cover_url && att.cover_url.length){
			return "<div class='att-cover'><a href='"+att.cover_url+"'><img src='"+att.cover+"'/></a></div>";
		}else{
			return "<div class='att-cover'><span><img src='"+att.cover+"'/></span></div>";
		}
	};
	
	
	
	function getCollapse(att){
		if (!att.title || !att.title.length){
			return "";
		}
		return "<div class='att-collapse' onclick=\"Message.attachment.collapse(this);\"><span class='-ap icon-chevron-down2'></span></div>";
	};
};


Message.form = new function __MessageForm(){
	this.imTyping=false; // I'm currently not typing
	
	this.globalInit=function(){
		
	};
	
	
	/**
	 * @desc Only build after the Channel.channel is fully loaded
	 */
	this.build=function(channel){		
		this.untyping();
		this.imTyping=false;
		
		$("#channel-"+channel.id).data("channel", channel);
		
		this.initTyping(channel);
		$("#channel-"+channel.id+" .msg-input").on("input focus", function(){
			Message.form.updateState(this);
		}).on("blur", function(){
			Message.form.untyping(channel);
			Message.form.updateState(this);
		});
		
		Tag.user("#channel-"+channel.id+" .msg-input", People.collect(channel.followers));
		$("#channel-"+channel.id+" .msg-input").autoExpand();
		
		
		$("#channel-"+channel.id+" .msg-input").enter(function(){
			Message.form.send(this);
		}).screencopy(Message.api+"api/message/file/screenshot", function(code){
		},{
			channel_id: channel.id, channel_token: channel.token
		});
		
		AP.uploadable("#channel-"+channel.id+" .channel-upload-file",{
			action: Message.api+"api/message/file/upload",
			data: {channel_id: channel.id, dnd: 1, multi: 1},
			multi: 1
		}, function(code){
			$.log(code);
		});
		
		AP.uploadable("#channel-"+channel.id+" .channel-upload-image",{
			action: Message.api+"api/message/file/upload",
			data: {channel_id: channel.id, dnd: 1, multi: 1},
			multi: 1
		}, function(code){
			$.log(code);
		});

		$("#channel-"+channel.id+" .channel-buzz").click(function(){
			Message.sender.buzz(channel);
        });
        
        $("#channel-" + channel.id + " .channel-feedback").click(function(){
			Message.sender.feedback(channel);
		});
		
		$("#channel-"+channel.id+" .channel-like").click(function(){
			Message.sender.text("(Y)", channel);
		});
		
		
		$("#channel-"+channel.id+" .channel-upload-drive").click(function(){
			Message.sender.drive(channel);
		});
		
		this.initDnD(channel);
		Sticker.init(channel);
		
		$("#channel-"+channel.id+" .scrollin").on("scroll", function(e){
			if (e.originalEvent && e.originalEvent.isTrusted){
				$(this).data("last_scroll", AP.time.now());
			}
		});
		// .after("<div class='new_message_trigger' onclick='Message.form.forceScrollDown(this);'><span class='-ap icon-arrow_drop_down'></span> New message</div>");
	};
	
	
	this.initDnD=function(channel){
		AP.dnd("#channel-"+channel.id, Message.api+"api/message/file/upload",{
			"channel_id": channel.id,
			"channel_token": channel.token,
			"dnd": 1
		}, function(code){
			$.log(code);
		},{
			multi: true
		});
	};
	
	
	this.onSending=function(msgdata, channel){
		$("#channel-"+channel.id+" .msg-input").val("").trigger("keypress").focus().change().height(26);
		Message.html.addPendingMessage(msgdata, channel);
	};
	
	this.onSent=function(msg, state){
		this.untyping();
	};
	
	
	this.send=function(ref){
		var $canvas=$(ref).closest(".msg-channel");
		var channel=$canvas.data("channel");
		
		var content=$(ref).val();
		if (!content.length){
			return;
		}
		
		Message.sender.text(content, channel);
	};

	
	
	this.typing_last_time=AP.time.now();
	this.typing_last_event="none";
	this.typing_last_channel=0;
	this.typing_text=0;
	
	
	this.initTyping=function(channel){
		var id=Channel.id(channel);
		$("#channel-"+id+" .msg-input").on("keyup", function(e){
			Message.form.checkTyping(id);
		});
	};
	

	this.untyping=function(){
		if (this.imTyping){
			this.imTyping=false;
			Message.socket.send("imtyping", 0);
		}else{
			if (AP.time.now()-this.typing_last_time>3 || 1==1){
				this.typing_last_time=AP.time.now();
				this.typing_event="untyping";
				Message.socket.send("imtyping", 0);
			}
		}
		
		this.imTyping=false;
	};
	
	
	
	this.checkTyping=function(channel){		
		if (!Base.tabActive()){
			this.untyping();
			return;
		}
		
		var id=Channel.id(channel);
		
		var val=$("#channel-"+id+" .msg-input").val();
		if (val && val.length){
			this.typing_last_time=AP.time.now();
			this.typing_event="typing";
			
			if (!this.imTyping){
				this.imTyping=true;
				if (val != this.typing_text){
					typing_text=val;
					Message.socket.send("imtyping", id);
				}
				
				setTimeout(function(){
					if (Message.form.typing_event=="typing" && AP.time.now() - Message.typing_last_time >=5){
						Message.form.untyping();
					}
				}, 6000);
			}
		}else{
			this.untyping();
		}
	};
	
	

	this.updateTypings=function(channel_id, users){
		if (!$("#channel-typing-"+channel_id).length){
			return;
		}
		
		var typings=AP.array.filter(users, function(e){
			if (e.id==Client.viewer.id){
				return false;
			}
			return true;
		});
		
		if (!typings.length){
			$("#channel-typing-"+channel_id).slideUp(50);
			$("#channel-"+channel_id+" .channel-typing-fix").hide();
			return;
		};
		
		var text=AP.word.join(typings, ", ",function(e){
			var person=People.getID(e.id);
			return "<span class='av'><img src='"+AP.xthumb(person.gavatar)+"'/></span><em>"+person.first_name+"</em>";
		});
		
		// Get scroll position
		var offset_bottom=getOffsetBottom("#channel-typing-"+channel_id);
		var last_time=$("#channel-typing-"+channel_id).closest(".scrollin").data("last_scroll");
		
		if (offset_bottom>30 || (last_time && AP.time.now()-parseInt(last_time) > 30)){
			showNewMessageBelow(channel_id);
			$("#channel-typing-"+channel_id).show();
		}else{
			$("#channel-typing-"+channel_id).slideDown(100, function(){
				Message.html.forceScrollBottom(channel_id);
			});
		}
		
		if (typings.length>=2){
			$("#channel-typing-"+channel_id+" .typing .text").html(text+" are tyings <span class='dots'><span></span></span>");	
		}else{
			$("#channel-typing-"+channel_id+" .typing .text").html(text+" is typing <span class='dots'><span></span></span>");
		}
		
		$("#channel-"+channel_id+" .channel-typing-fix").show();
	};
	
	
	this.updateState=function(ref){
		var channel=getChannel(ref);
		if (!channel){
			return;
		}
		
		var val=$(ref).val();
		if (val && val.length){
			$("#msg-form-"+channel.id).addClass("active");
		}else{
			$("#msg-form-"+channel.id).removeClass("active");
		}
	};
	
	
	this.forceScrollDown=function(ref){
		var $box=$(ref).closest(".msg-channel");
		$box.removeClass("has_new_message");
		Message.html.forceScrollBottom($box.data("id"));
	};

	
	/**
	 * @desc Get offset relative to bottom
	 */
	function getOffsetBottom(eid){
		var $c=$(eid).closest(".scrollin");
		if (!$c.length){
			return;
		}
		
		var offset=$c[0].scrollHeight-$c[0].offsetHeight - $c[0].scrollTop;
		
		return offset;
	};
	
	
	
	function showNewMessageBelow(channel_id){
		// $("#channel-"+channel_id).addClass("has_new_message");
	};
};



Message.cache=new function __MessageCache(){
	this.data={};
	
	this.get=function(id){
		return null;
		
		if (AP.data.isObject(id)){
			return id;
		}
		var c=AP.array.findObj(Channel.manager.channels, id);
		if (c){
			return {channel: c, messages: [], page_token: 0};
		}
		
		return null;
	};
	
	
	this.getValue=function(obj, key){
		if (this.data["x"+obj.id+"_"+key]){
			return this.data["x"+obj.id+"_"+key];
		}
		
		return null;
	};
	
	this.setValue=function(obj, key, value){
		this.data["x"+obj.id+"_"+key]=value;
	};
	
	
	this.currentChannels=function(){
		var cs=Clog.getCookie("msgchannels");
		if (cs && cs.length){
			try{
				var r= JSON.parse(cs);
				if (r.length && !r[0].id){
					return [];
				}
				
				return r;	
			}catch(e){
				return [];
			}
		}
		
		return [];
	};
	
	
//	this.setCurrentChannels=function(ids){
//		Clog.setCookie("msgchannels", JSON.stringify(ids));
//	};
//	
	
	this.auto=function(){
		var r=[];
		
		$("#js-msg-boxes .msg-channel.is-channel").each(function(){
			var id=$(this).data("id");
			var c=0;
			if ($(this).hasClass("collapsed")){
				c=1;
			}
			
			r.push({id: id, c: c});
		});
		
		r=r.slice(0, 4);
		Clog.setCookie("msgchannels", JSON.stringify(r));
		
		if ($("#msg-panel").length && $("#msg-panel").hasClass("collapsed")){
			Clog.setCookie("msgpc", 1); 	
		}else{
			Clog.setCookie("msgpc", 0);
		}
	};
	
	
	this.removeCachedChannel=function(id){
		Clog.removeCookie("msgchannels");
	};
	
};



function getChannel(ref){
	return $(ref).closest(".msg-channel").data("channel");
};
	
var Channel = new function __Channel(){
	this.channel=null; // The currently active channel
	this.previous=null; // Cache only
	this.channels=[];
	this.current_id=null;
	
	if (typeof Client.base != 'undefined' && Client.base.channels){
		this.__channels=Client.base.channels; // The list of all initally loaded channels, can load more
		if (this.__channels){
			this.channels=this.__channels.slice();
		}	
	}
	
	this.id=function(channel){
		if (AP.data.isObject(channel)){
			return channel.id;
		}
		
		return channel;
	};
	
	
	/**
	 * @desc Check if the channel with ID is currently active
	 */
	this.isActive=function(id){
		// $.log([this.current.name, this.current.id, id]);
		return this.current_id==id;
	};
	
	
	this.setActive=function(channel_id){
		Message.socket.send("channel.active", channel_id);
		
		if (channel_id && parseInt(channel_id)){
			$("#js-msg-boxes .msg-channel").setActive("#channel-"+channel_id);
			Message.canvas.onChannelActive(channel_id);
		}else{
			$("#js-msg-boxes .msg-channel").removeClass("active");
		}
	};
	
	
	this.isDisplayed=function(id){
		return $("#channel-"+id).length>=1;
	};
	
	
	/**
	 * @desc Get channel with channel_id and callback 
	 */
	this.get=function(channel_id, callback, intent){
		if (!channel_id || !AP.data.isInt(channel_id)){
			return;
		}
		var obj = Message.cache.get(channel_id);
		if (obj){
			callback(obj.channel, obj.messages, obj.page_token);
			return;
		}
		
		UI.ajaxShow();
		AP.post(Message.api+"api/message/channel/get", {id: channel_id}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				// Clog.removeLog("__channel");
				if (intent && intent=="cache"){
					Message.cache.removeCachedChannel(channel_id);	
				}else{
					AP.alertError("We have trouble loading messages ["+channel_id+"] ... Please refresh to continue...");	
				}
				
				Channel.close(channel_id);
				return;
			}
			
			callback(code.channel, code.messages, code.page_token, code.stars);
		});
	};
	
	
	
	
	/**
	 * @desc Load the channel
	 */
	this.open=function(channel_id, opts, callback){
		if (this.isDisplayed(channel_id)){
			fixIntention(channel_id, opts.intent);
			return;
		}
		
		if (this.channel && this.channel.id==channel_id){
			if (callback){
				callback();
			}
			return;
		}
		
		this.get(channel_id, function(channel, messages, page_token, stars){
			Channel.openDirect(channel, messages, page_token, stars, callback, opts);
		}, opts.intent);
	};


	this.openDirect=function(channel, messages, page_token, stars, callback, opts){
		display(channel, messages, page_token, stars, callback, opts);
		// Channel.setActive(channel.id);
		// Message.socket.send("channel.active", channel.id);
	};
	
	
	this.close=function(channel){
		var id=Channel.id(channel);
//		var cs=Message.cache.currentChannels();
//		cs=AP.array.filter(cs, function(e){
//			return parseInt(e)!=parseInt(id);
//		});
//		
//		Message.cache.setCurrentChannels(cs);
		
		if (id){
			Message.socket.emitMe("channel.me.close", {id: id});
		}
	};
	
	
	
	this.showMessages=function(channel, messages){
		for (var i=messages.length-1; i>=0; i--){
			Message.addMessage(messages[i], channel);
		};
	};
	

	this.loadPrevious=function(channel){
		var loading=Message.cache.getValue(channel, "loading");
		var page_token=Message.cache.getValue(channel, "page_token");
		if (loading=="0"){
			loading=0;
		}
		
		if (loading || !page_token){
			return;
		}
		
		Message.cache.setValue(channel, "loading", 1);
		UI.ajaxShow();
		
		var $box=$("#channel-"+channel.id+" .scrollin");
		var current_offset=$box[0].scrollHeight;
		
		AP.post(Message.api+"api/message/message/previous", {token: page_token, id: channel.id}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				Message.cache.setValue(channel, "loading", 0);
				return AP.alertError("Cannot load previous message");
			}
			
			Message.cache.setValue(channel, "page_token", code.page_token);
			
			for (var i=0; i<code.messages.length; i++){
				Message.html.prependMessage(code.messages[i], channel);
			}
			
			Message.html.linkGroup(channel);
			
			if (code.messages.length){
				current_offset=$box[0].scrollHeight-current_offset;
				$box.scrollTop(current_offset);
				
				Message.cache.setValue(channel, "loading", 0);
			}else{
				Message.cache.setValue(channel, "loading", 0);
			}
			
		});
	};
	
	
	
	function display(channel, messages, page_token, stars, callback, opts){
		if ($("#channel-"+channel.id).length){
			if (opts.prepend){
				$("#channel-"+channel.id).removeClass("collapsed");
				Message.render.balance();
			}
			
			return;
		}
		
		Message.render.channel(channel, opts);
		
		if (!page_token){
			page_token=0;
		}
			
		Message.cache.setValue(channel, "page_token", page_token);
		Channel.showMessages(channel, messages);
		
		if (callback){
			callback();
		};
		
		
		fixIntention(channel.id, opts.intent);
		
	};
	
	
	
	function fixIntention(channel_id, intent){
		if (intent){
			if (intent=="panel"){
				if ($("#channel-"+channel_id).hasClass("collapsed")){
					$("#channel-"+channel_id).removeClass("collapsed");
					Message.canvas.balance();
				}
				
				setTimeout(function(){
					$.log("#channel-"+channel_id+" textarea.msg-input");
					$("#channel-"+channel_id+" textarea.msg-input").autofocus();
				}, 200);
				
				Channel.setActive(channel_id);
			}
		}
	};
	
	
	
};






Channel.manager=new function __ChannelManager(){
	this.channels=[];
	this.ready=0;
	
	this.load=function(callback, set){
		if (!set){
			set="";
		}

		AP.post(Message.api+"api/channel/channels", {'set': set}, function(code){
			if (!code.good()){
				return false;
			}
			
			Channel.manager.channels=code.channels.slice();
			Channel.manager.ready=1;
			Channel.manager.getUnreads(callback);
			return;
		});
	};
	
	
	
	/**
	 * @desc Getting unread counts and last messages of all channels to be cared
	 */
	this.getUnreads = function(callback){
		var ids=AP.select(this.channels, function(e){
			return e.id;
		});
		

		Message.socket.emit("channels.get",{ids: ids}, function(data){
			for (var i=0; i<data.length; i++){
				setUnreadCount(data[i].id, data[i].unread_count);
			}
			
			// Message.notify.badge();
			
			if (callback){
				callback(Channel.manager.channels);
			}
		});
	};
	
	
	this.getChannelUnread=function(channel_id){
		for (var i=0; i<this.channels.length; i++){
			if (this.channels[i].id==channel_id){
				return parseInt(this.channels[i].unread_count);
			}
		}
		
		return 0;
	};
	
	
	this.fixUnread=function(channel){
		for (var i=0; i<this.channels.length; i++){
			if (this.channels[i].id==channel.id){
				this.channels[i].unread_count=parseInt(channel.unread_count);
				break;
			}
		}
	};
	
	
	
	this.countUniqueUnreads=function(){
		var total=0;
		for (var i=0; i<this.channels.length; i++){
			if (parseInt(this.channels[i].unread_count)){
				total++;	
			}
		}	
		
		return total;
	};
	
	
	
	
	function setUnreadCount(channel_id, unread_count){
		for (var i=0; i<Channel.manager.channels.length; i++){
			if (Channel.manager.channels[i].id==channel_id){
				Channel.manager.channels[i].unread_count=parseInt(unread_count);
				return;
			}
		}
	};
};


Channel.fav=new function __ChannelFav(){
	this.favs=[];
	
	this.toggle=function(id){
	};
	
	this.reset=function(stars){
		if (stars){
			this.stars=stars;
		}else{
			this.stars=[];
		}
	}
	
	this.fav=function(id){
		return (this.stars.indexOf(id)!=-1);
	};
};


Channel.engine=new function __ChannelEngine(){
	this.isDeactivated=function(channel){
		if (channel.subtype =="peer"){
			for (var i=0; i<channel.followers.length; i++){
				var id=channel.followers[i];
				if (id!=Client.viewer.id){
					var u=People.get(id);
					if (!u || !u.id || u.username=="none"){
						return true;
					}
				}
			}
		}
		
		return false;
	};
	
	
	
	this.getImage=function(channel){
		if (channel.metatype=="channel" && channel.subtype=="user"){
			return getSelfImage(channel);
		}
		
		if (channel.metatype=="channel" || channel.metatype=="unit"){
			return getChannelImage(channel);
		}
		
		if (channel.metatype=="dm" && channel.subtype=="peer"){
			return getPeerImage(channel);
		}
		
		if (channel.metatype=="dm"){
			return getGroupImage(channel);
		}
		
		if (channel.metatype=="project"){
			return getProjectIcon(channel.subtype);
		}
		
		return "";
	};

	
	this.getDisplayName=function(channel){
		if (channel.metatype=="dm"){
			if (channel.subtype=="peer"){
				var ua = People.get(channel.followers[0]);
				var ub = People.get(channel.followers[1]);
				
				if (ua.id==Client.viewer.id){
					return ub.name;
				}else{
					return ua.name;
				}
			}
		}else if (channel.metatype=="channel" && channel.subtype=="user"){
			return "Cá nhân";
		}
		
		return channel.name;
	};
	
	
	this.lastMessage=function(channel){
		var last=channel.latest;
		if (!last){
			return "Conversation just started";	
		}
		
		if (last && last.content){
			user=People.get(last.username);
			if (!user){
				return "Conversation just started";
			}
			
			var sign=" ";
			if (last.content && last.content.charAt(0)==":"){
				sign="";
			}
			
			return getLastDisplay(user, sign+last.content);
		}
		
		return "Conversation just started";
	};
	
		
	this.fromMessage=function(last){
		var user;
		if (last && last.content){
			if (last.username){
				user=People.get(last.username);
			}else{
				user=People.get(last.user.username);	
			}
			
			if (!user){
				return "Conversation just started";
			}
			
			var sign=": ";
			if (last.content && last.content.charAt(0)==":"){
				sign="";
			}
			
			return getLastDisplay(user, sign+last.content);
		};
		
		return "Conversation just started";
	};
		
		
		
	function getLastDisplay(user, msg){
		if (!parseInt(user.id) && user.username=="_bot"){
			return "<div class='msg'> <div class='ap-xdot'><em>BOT</em> "+(msg)+"</div> </div>";
		}
		
		if (!msg){
			msg="Conversation just started";
		}
		if (msg){
			return "<div class='tinyavt'><img src='"+AP.xthumb(user.gavatar)+"'></div>" +
				"<div class='msg'><div class='ap-xdot'><em>"+user.first_name+"</em>"+msg+"</div></div>";
		}
		
		return "";
	};
	
	
	
	function getSelfImage(c){
		return "<div class='image'><div class='single'><img src='"+AP.thumb(Client.viewer.gavatar)+"'></div></div>";
	};
	
	
	function getPeerImage(c){
		var user=People.get(c.followers[0]);
		if (user.username==Client.viewer.username){
			user=People.get(c.followers[1]);
		}
		
		return "<div class='image'><div class='single'><img src='"+AP.thumb(user.gavatar)+"'></div></div>";
	};
	
	
	function getGroupImage(c){
		var teams=c.followers;
		
		if (teams.length==3){
			var u0=People.get(teams[0]);
			var u1=People.get(teams[1]);
			var u2=People.get(teams[2]);
			
			return "<div class='avatars -three'>" +
					"<div class='avatar -first'><img src='"+AP.thumb(u0.gavatar)+"'/></div>" +
					"<div class='avatar -second -bb -bl'><img src='"+AP.thumb(u1.gavatar)+"'/></div>" +
					"<div class='avatar -third -bl'><img src='"+AP.thumb(u2.gavatar)+"'/></div>" +
				"</div>";
		}
		
		if (teams.length>=4){
			var u0=People.get(teams[0]);
			var u1=People.get(teams[1]);
			var u2=People.get(teams[2]);
			var u3=People.get(teams[3]);
			
			return "<div class='avatars -four'>" +
					"<div class='avatar -first -bb -br'><img src='"+AP.thumb(u0.gavatar)+"'/></div>" +
					"<div class='avatar -second -bb'><img src='"+AP.thumb(u1.gavatar)+"'/></div>" +
					"<div class='avatar -third -bl'><img src='"+AP.thumb(u2.gavatar)+"'/></div>" +
					"<div class='avatar -forth'><img src='"+AP.thumb(u3.gavatar)+"'/></div>" +
				"</div>";
		}
		
		
		
		return "";
	};
	
	
	
	function getProjectIcon(type){
		return "<div class='full-mask -bg-alt"+Client.viewer.color+"'></div> <div class='box-text'><span class='-ap icon-timeline normal'></span></div>";
	};
	
	
	function getChannelImage(c){
		var txt=c.name.substr(0,2);
		var parts=c.name.split(" ", 2);
		if (parts.length>=2){
			txt=parts[0].charAt(0)+parts[1].charAt(0);
		}
		return "<div class='full-mask -bg-alt"+c.color+"'></div> <div class='box-text'><span>"+txt+"</span></div>";
	};
	
	
	
};




var BaseFile=new function __BaseFile(){
	this.getPage=function(page_id, callback){
		if (!Channel.channel){
			return;
		}
		
		UI.ajaxShow();
		AP.post(Message.api+"api/message/file/page", {channel_id: Channel.channel.id, page: page_id}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.files);
		});
	};
	
	
	this.open=function(file_id){
		this.get(file_id, function(file){
			BaseFile.display(file);
		});
	};
	
	
	this.get=function(file_id, callback){
		UI.ajaxShow();
		AP.post(Message.api+"api/message/file/get", {file_id: file_id}, function(code){
			UI.ajaxHide();
			
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.file);
		});
	};
	
	

	this.url=function(file){
		return "r/file/"+file.channel_id+"/"+file.id;
	};
	
	
	this.furl=function(folder){
		if (AP.data.isString(folder)){
			return "r/folder/"+Channel.channel.id+"/"+folder;
		}
		
		return "r/folder/"+folder.channel_id+"/"+folder.id;
	};
	
	
	this.initUploadButton=function(btn_id, channel_id, folder_id){
		if (!folder_id){
			folder_id=0;
		}
		
		$(btn_id).data("action", Message.api+"api/message/file/upload");
		
		AP.uploadable(btn_id, {
	        preview: 0,
	        action: "upload_url",
	        name: "file",
	        data: {channel_id: channel_id, folder_id: folder_id}
	    }, function(code){
	        AP.xRefresh();
	    });
	};
	
	this.preview = function(id) {
	    BaseFile.get(id, function(file) {
	        if(file.metatype == "upload") {
	            file.src = file.url;
	        }
	        
	        FileX.quickPreview(file);
	    });
	};
	
	this.manageOptions = function(obj) {
        var actions = [];
        var uid = $(obj).parent().data("uid");
        
        if(uid == Client.viewer.id || Me.isOwner(Client.pageData.project) || Me.isSystemAdmin()) {
            actions.push({label: "<span class='text-error'>Xoá tệp tin này</span>", sublabel: "", icon: "icon-cloud_off", action: function() {
                BaseFile.removeFile($(obj).parent().data("fid"));
            }});
            
            return Context.menu(obj, {top: 30, left: -250, menu: actions});
        }
    };
    
    this.removeFile = function(fid) {
        AP.confirm("Bạn có chắc muốn xoá tệp tin này?", function() {
            UI.ajaxShow();
            AP.post(Message.api + "api/message/file/remove", {channel_id: Channel.channel.id, id: fid, hid: Client.pageData.project.hid}, function(code){
                UI.ajaxHide();
                if (!code.good()){
                    return AP.alertError(code.message);
                }
                
                UI.flash("Đã xoá tệp tin...");
                
                AP.xRefresh();
            });
        });
    };
};


BaseFile.display=function(file){
	FileX.quickPreview(file.url);
};




var Sticker = new function __Sticker(){
	this.sets={};
	this.num_sets=0;
	
	this.init=function(channel){
		if ($("#msg-stickers-"+channel.id).hasClass("__sinit")){
			return;
		}
		
		$("#msg-stickers-"+channel.id).addClass("__sinit");
		$("#msg-form-"+channel.id+" .channel-smiley-input").click(function(){
			var c=getChannel(this);
			if ($("#msg-stickers-"+channel.id).is(":visible")){
				Sticker.hideSelections(c);	
			}else{
				Sticker.showSelections(c);
			}
		});
		
		$("#msg-form-"+channel.id+" .smiley-closable").click(function(){
			var c=getChannel(this);
			Sticker.hideSelections(c);
		});
		
		this.listStickerSets(channel);
		Sticker.set.display(channel, "popular");
		
		Layout.scrollable("#msg-stickers-"+channel.id+" .msg-selection-canvas");
	};
	
	
	this.showSelections=function(channel){
		$("#msg-stickers-"+channel.id).show();
		$("#msg-stickers-"+channel.id).parent().addClass("active");
	};
	
	this.hideSelections=function(channel){
		$("#msg-stickers-"+channel.id).hide();
		$("#msg-stickers-"+channel.id).parent().removeClass("active");
	};
	
	this.send=function(ref, sticker_key, sticker_src){
		var channel=getChannel(ref);
		this.hideSelections(channel);
		return Message.sender.sticker(channel, sticker_key, sticker_src);
	};
	
	
	this.load=function(key, configs){
		configs.key=key;
		configs.index=this.num_sets;
		
		this.sets[key]=configs;
		this.num_sets++;
	};
	
	
	this.getConfig=function(key){
		if (this.sets[key]){
			return this.sets[key];
		}
		
		return null;
	};
	
	
	this.listStickerSets=function(channel){
		var html="";
		var index=0;
		for (var key in this.sets){
			var e=this.sets[key];
			html+= "<div class='item ap-xdot' data-index='"+index+"' data-set='"+e.key+"' onclick=\"Sticker.set.choose(this, '"+e.key+"')\">"+e.name+"</div>";
			index++;
		}
		
		$("#msg-stickers-"+channel.id+" .sticker-set-slider").html(html);
	};
	
	this.countSets=function(){
		return this.num_sets;
	};
	
	function getChannel(ref){
		return $(ref).closest(".msg-channel").data("channel");
	};
};




Sticker.set=new function __StickerSet(){
	this.cur=0;
	
	this.display=function(channel, setkey){
		var config=Sticker.getConfig(setkey);
		var set=this.load(config);
		this.displaySelection(channel, set);
	};
	
	this.load=function(config){
		if (config===null){
			config="popular";
		}
		
		if (AP.data.isString(config)){
			config=Sticker.getConfig(config);
		}
		var set={};
		set.config=config;
		set.name=config.name;
		set.key=config.key;
		set.index=config.index;
		set.items=getItems(config);
		return set;
	};
	
	this.displaySelection=function(channel, set){
		var html= AP.render(set.items, function(e){
			return "<div class='item' onclick=\"Sticker.send(this, '"+e.key+"','"+e.src+"');\"><div class='img'><img src='"+e.src+"'/></div></div>";
		});
		
		$("#msg-stickers-"+channel.id+" .msg-sticker-selections").html(html);
		
		$("#msg-stickers-"+channel.id+" .sticker-set-slider .item").each(function(){
			if ($(this).data("set")==set.key){
				$(this).addClass("active");
			}else{
				$(this).removeClass("active");
			}
		})
	};
	
	
	
	this.choose=function(ref, setkey){
		var channel=getChannel(ref);
		var set=this.load(setkey);
		this.displaySelection(channel, set);
		refocus(channel, set);
	};
	
	
	this.move=function(ref, dir){
		var channel=null;
		if (ref.id && ref.token){
			channel=ref;
		}else{
			channel=getChannel(ref);
		}
		
		this.cur+=dir;
		if (this.cur >= Sticker.countSets()-4){
			this.cur=Sticker.countSets()-5;
		}
		if (this.cur<0){
			this.cur=0;
		}
		
		reposition(channel, this.cur);
	};
	
	function getChannel(ref){
		return $(ref).closest(".msg-channel").data("channel");
	};
	
	function refocus(channel, set){
		var cur=Sticker.set.cur;
		
		var index=set.index;
		if (index <= cur){
			if (index>0){
				Sticker.set.move(channel, -1);
			}else{
				reposition(channel, index);
			}
		}else{
			if (index >= cur+3 && index < Sticker.countSets()-2){
				Sticker.set.move(channel, 1);
			}
		}
	};
	
	
	function reposition(channel, index){
		if (index < Sticker.countSets()-4){
			Sticker.set.cur=index;
			var left=index * 80;
			$("#msg-stickers-"+channel.id+" .sticker-set-slider").animate({"left": -left}, 200, function(){});	
		}
	};
	
	
	function getItems(config){
		var items=[];
		
		for (var i=parseInt(config.start); i<=parseInt(config.end); i++){
			var src="png";
			if (config.file=="gif"){
				src="gif";
			}
			items.push({
				type: "image",
				key: config.key+"-"+i+"."+src,
				src: Client.share_url+"/stickers/"+config.key+"/"+i+"."+src
			});
		}
		
		return items;
	};
};


Sticker.load("special",{
	"name":"Special",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":68,
});


Sticker.load("popular",{
	"name":"Popular",
	"type":"popular",
	"file":"png",
	"start":1,
	"end":130,
});



Sticker.load("tuzki",{
	"name":"Tuzki",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":15,
});


Sticker.load("puppy",{
	"name":"Puppy",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":16,
});



Sticker.load("kitty",{
	"name":"Kitty",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":16,
});



Sticker.load("cute",{
	"name":"Cute",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":24,
});





Sticker.load("cotton",{
	"name":"Candy",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":24,
});





Sticker.load("nerd",{
	"name":"Nerdy",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":15,
});



Sticker.load("bunny",{
	"name":"Bunny",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":36,
});


Sticker.load("rabbit",{
	"name":"Rabbit",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":29,
});



Sticker.load("princess",{
	"name":"Princess",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":40,
});



Sticker.load("owl",{
	"name":"Owla",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":24,
});




Sticker.load("pancake",{
	"name":"Pancake",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":17,
});



Sticker.load("bigeye",{
	"name":"Big Eyes",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":16,
});


Sticker.load("alien",{
	"name":"Alien",
	"type":"simple",
	"file":"gif",
	"start":1,
	"end":43,
});






Sticker.load("fatcat",{
	"name":"Fatcat",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":36,
});



Sticker.load("snoppy",{
	"name":"Snoppy",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":28,
});


Sticker.load("jellyfish",{
	"name":"Jellyfish",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":40,
});


Sticker.load("ducky",{
	"name":"Ducky",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":32,
});



Sticker.load("meow",{
	"name":"Meow",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":26,
});


Sticker.load("potato",{
	"name":"Potato",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":50,
});


Sticker.load("troll",{
	"name":"Meme",
	"type":"simple",
	"file":"png",
	"start":1,
	"end":16,
});





/**
 * @desc General
 */

AP.rewrite('r/messages/([0-9]+)$', 'messages?c=$1', function(qs){
	Channel.open(qs.c, {intent: "notification"}, function(){
		$.log("Please focusing on ... "+qs.c);
	});
});


AP.rewrite('messages/([0-9]+)/([0-9]+)', 'messages?c=$1&msg=$2', function(qs){
	Channel.open(qs.c, {intent: "panel"}, function(){
		$.log("On notification  ... "+qs.msg);
	});
});


AP.rewrite('call/([a-zA-Z0-9\-]+)', 'call?code=$1', function(qs){
	Message.call.display(qs.code);
	window.open(Base.domain("message")+"/videocall/"+qs.code,"","width=900,height=500");
});


/**
 * @desc Rewrite files
 */

AP.rewrite('r/files/([a-zA-Z0-9]+)', 'messages/files?c=$1', function(qs){
});


AP.rewrite('r/folder/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)', 'messages/folder?c=$1&folder=$2', function(qs){
	$.log(qs);
	// TODO: display folder
});


AP.rewrite('r/file/([a-zA-Z0-9]+)/([a-zA-Z0-9]+)', 'messages/file?c=$1&file=$2', function(qs){
	BaseFile.open(qs.file);
//	Channel.open(qs.c, function(){
//		BaseFile.open(qs.file);
//	});
});









/**
 * @desc Live binding
 */
$("#channel-canvas").delegate(".msg-tag", 'click',function(){
	var val=$(this).text();
	Channel.search.search({
		type: "tag",
		q:  val
	});
});



Message.API=new function __MessageLinkingAPI(){
	this.__channels=null;
	
	/**
	 * @desc Linking a particular system/network
	 */
	this.dialog=function(system){
		var base=system.base;
		var selected=[];
		if (base && base.channels){
			selected=AP.select(base.channels, function(e){
				return e.id;
			});
		}
		

		
		this.getChannels(function(channels){
			var actions=[];
			for (var i=0; i<channels.length; i++){
				var c=channels[i];
				actions.push({
					label: c.name,
					value: c.id,
					id: c.id,
					channel: c
				});
			}
			
			AP.selectActions(actions, function(cs){
				var ids=AP.select(cs, function(e){
					return e.channel.id;
				});
				
				if (!ids.length){
					return;
				}
				
				Base.linking.link(system, ids);
			},{
				search: 1,
				selected: selected
			});
		});
		
	};
	
	
	
	this.link=function(system, ids){
		var links=ids;
		if (AP.data.isArray(ids)){
			links=ids.join(",");
		}
		
		UI.ajaxShow();
		AP.post("api/base/link", {sysid: system.id, systoken: system.token, links: links}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			AP.alertSuccess("Link successfully", function(){
				AP.refresh();
			});
		})
	};
	
	
	
	this.getChannels=function(callback){
		if (this.__channels){
			return callback(this.__channels)
		}
		
		UI.ajaxShow();
		AP.post(Message.api+"api/message/channel/mine", {}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			Message.API.__channels=code.channels;
			callback(code.channels);
		})
	};
	
	
	this.show=function(){
		$("#msg-root").show();
	};
	
	this.hide=function(){
		$("#msg-root").hide();
	};
};


Base.linking=new function __BaseLinking(){
	this.api=(Client.base && Client.base.app=="base")?"":((parseInt(Client.https)?"https":"http")+"://" + CONFIG.api + "." + Client.domain + "/ajax/");
	
	/**
	 * @desc Linking a particular system/network
	 */
	this.dialog=function(system){
		var base=system.base;
		var selected=[];
		if (base && base.channels){
			selected=AP.select(base.channels, function(e){
				return e.id;
			});
		}
		

		
		this.getChannels(function(channels){
			var actions=[];
			for (var i=0; i<channels.length; i++){
				var c=channels[i];
				actions.push({
					label: c.name,
					value: c.id,
					id: c.id,
					channel: c
				});
			}
			
			AP.selectActions(actions, function(cs){
				var ids=AP.select(cs, function(e){
					return e.channel.id;
				});
				
				if (!ids.length){
					return;
				}
				
				Base.linking.link(system, ids);
			},{
				search: 1,
				selected: selected
			});
		});
		
	};
	
	
	
	this.link=function(system, ids){
		UI.ajaxShow();
		AP.post("api/base/link", {sysid: system.id, systoken: system.token, links: ids.join(",")}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			AP.alertSuccess("Link successfully", function(){
				AP.refresh();
			});
		})
	};
	
	
	
	this.getChannels=function(callback){
		AP.ajaxSetup({
			__sessionid:  Client.secureData.session,
			__otp:  Client.secureData.otp,
		});
		
		UI.ajaxShow();
		AP.post(this.api+"api/message/channel/mine", {}, function(code){
			UI.ajaxHide();
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			callback(code.channels);
		})
	}
};

Message.canvas=new function __MessageCanvas(){
	this.inited=false;
	this.root="#document";
	
	this.init=function(){
		if (this.inited){
			return;
		}
		
		this.inited=true;
		
		Online.loaded(function(){
			build();
		});
	};
	
	this.setChannels=function(channels){
		var html=AP.render(Channel.manager.channels, function(e){
			return getChannelHTML(e);
		});
		
		$("#msg-panel .section-messages").html(html);
		
		
		html=AP.render(Channel.manager.channels, function(e){
			if (e.metatype!="channel"){
				return "";
			}
			return "<div class='item' onclick=\"Channel.open("+e.id+", {intent: 'panel'});\">" +
				"<div class='channel-image'>"+Channel.engine.getImage(e)+"</div>"+
				"<div class='name ap-xdot'>"+Channel.engine.getDisplayName(e)+"</div>" +
			"</div>";
		});
		
		$("#msg-panel .section-channels").html(html);
		countingTotalUnreads();
	};
	
	
	this.balance=function(){
		return Message.render.balance();
	};
	
	
	this.onMessage=function(message, channel){
		if ($("#msg-panel .item.is-channel.js-channel-"+channel.id).length){
			$("#msg-panel .item.is-channel.js-channel-"+channel.id).remove();
		}
		
		$("#msg-panel .section-messages").prepend(getChannelHTML(channel));
		countingTotalUnreads();
	};
	
	
	this.onChannelActive=function(channel_id){
		$("#msg-panel .item.is-channel.js-channel-"+channel_id).removeClass("-focus")
		
		if ($("#msg-panel .item.is-channel.js-channel-"+channel_id).length){
			$("#msg-panel .item.is-channel.js-channel-"+channel_id).removeClass("-unread");
			$("#msg-panel .item.is-channel.js-channel-"+channel_id).addClass("-focus");
			countingTotalUnreads();
		}
	};
	
	
	this.activateSearch=function(ref){
		if ($(ref).closest(".msg-channel").hasClass("collapsed")){
			$("#msg-panel").removeClass("collapsed");	
			$("#msg-root").removeClass("collapsed");
			Message.canvas.balance();
		}
		
		$("#msg-panel .channel-gsearch").show();
		$("#js-channel-gsearch").next().val("").autofocus();
	};
	
	
	
	function build(){
		var html="<div id='msg-root'>" +
			getPanel()+
			"<div id='js-msg-boxes' class='msg-boxes'></div>"+
		"</div>";
		
		$(Message.canvas.root).append(html);
		$("#msg-panel").find(".js-channel-minus").click(function(){
			$(this).closest(".msg-channel").toggleClass("collapsed");
			$("#msg-root").toggleClass("collapsed");
			Message.canvas.balance();
		});
		
		Layout.scrollable("#msg-panel .sections");
		
		$("#msg-panel .tabs .js-tab").click(function(){
			$(this).siblings().removeClass("active");
			$(this).addClass("active");
			var tab=$(this).data("tab");
			$("#msg-panel .sections .section").setActive(".section-"+tab);
		});
		
		
		buildPeople();
		
		var collapsed=Clog.getCookie("msgpc");
		if (collapsed && parseInt(collapsed)){
			collapsed=1;
		}else{
			collapsed=0;
		}
		
		if (collapsed){
			$("#msg-root").addClass("collapsed");
		}
		
		
		$("#msg-panel .channel-header .title").click(function(){
			if ($(this).closest(".msg-channel").hasClass("collapsed")){
				$("#msg-panel").removeClass("collapsed");	
				$("#msg-root").removeClass("collapsed");
				Message.canvas.balance();
			}
		});
		
		$("#msg-panel .channel-gsearch .close").click(function(){
			$("#msg-panel .channel-gsearch").hide();
		});
		
		
		$("#js-channel-gsearch").livesearch(Message.api+"/api/channel/search",{
			select: function(e){
				Channel.open(e.id,{intent: "panel"});
				$("#msg-panel .channel-gsearch").hide();
			}
		});
	};
	
	
	function getPanel(){
		var collapsed=Clog.getCookie("msgpc");
		if (collapsed && parseInt(collapsed)){
			collapsed=1;
		}else{
			collapsed=0;
		}
	
		var people="";
		var html="<div class='msg-channel "+(collapsed?" collapsed":" ")+"' id='msg-panel'>" +
			"<div class='channel-header'>" +
			"	<div class='channel-gsearch hidden'><div class='input'><input placeholder='Find chat groups' id='js-channel-gsearch' name='q'/></div> <div class='close'><span class='-ap icon-uniF108'></span></div></div>" +
			"	<div class='title ap-xdot'>" +
			"		<div class='channel-explain -on-collapsed'><div class='cr'></div><div class='cus'><div class='cx'>Mở rộng</div></div></div>" +
			"		<span class='count js-total-unread-count'></span>"+Client.system.name+"" +
				"</div>" +
			"	<div class='icons'>" +
			"		<div class='icon js-channel-minus'><div class='hexp'><div class='txt'>Phóng to / Thu nhỏ</div></div><span class='ficon-minus'></span></div>" +
			"		<div class='icon js-channel-search' onclick='Message.canvas.activateSearch(this);'><div class='hexp'><div class='txt'>Tìm nhóm chat</div></div><span class='ficon-search'></span></div>" +
			"		<div class='icon js-channel-expand url' data-url='"+Base.domain("message")+"/home'><div class='hexp'><div class='txt'>Chuyển đến trang Message</div></div><span class='-ap icon-open'></span></div>" +
			"	</div>" +
			"</div>" +
			"<div class='tabs'>" +
			"	<div class='tab js-tab js-tab-messages active' data-tab='messages'>Messages</div>" +
			"	<div class='tab js-tab js-tab-channels' data-tab='channels' style='display: none'># Channels</div>" +
			"	<div class='tab js-tab js-tab-people' data-tab='people'><span class='-ap icon-controller-record text-success'></span>&nbsp; Online<span class='count js-online-count'></span></div>" +
			"	<div class='tab js-tab-create' onclick='Message.create.channel();'>+ New</div>" +
			"</div>" +
			"<div class='sections scrollable' data-autoscroll='1'>" +
			"	<div class='section section-messages active'></div>" +
			"	<div class='section section-channels'></div>" +
			"	<div class='section section-people'></div>" +
			"</div>" +
		"</div>";
		
		return html;
	};
	
	
	
	function buildPeople(){
		$("#msg-panel .js-online-count").html("&nbsp; "+Online.people.length+"");
		
		var html=AP.render(Online.people, function(e){
			var user=People.get(e.username);
			if (!user){
				return "";
			}
			
			return "<div class='item js-person' data-kw='"+user.keywords+"' onclick=\"Base.message.peer('"+user.id+"');\">" +
				"<div class='channel-image'><div class='image'><div class='single'><img src='"+AP.thumb(user.gavatar)+"'/></div></div></div>"+
				"<div class='name ap-xdot'>"+user.name+"</div>" +
				"<div class='signal -online'></div>" +
			"</div>";
		});
		
		html+="<div class='sep'>Offline</div>" + AP.render(Client.people, function(e){
			if (!Online.isOnline(e.username)){
				var user=People.get(e.username);
				return "<div class='item js-person' data-kw='"+user.keywords+"' onclick=\"Base.message.peer('"+user.id+"');\">" +
					"<div class='channel-image'><div class='image'><div class='single'><img src='"+AP.thumb(user.gavatar)+"'/></div></div></div>"+
					"<div class='name ap-xdot'>"+user.name+"</div>" +
					"<div class='signal -offline'></div>" +
				"</div>";
			}
			
			return "";
		});
		

		$("#msg-panel .section-people").html("<div class='panel-search'><input type='text' placeholder='Tìm nhanh thành viên' name='search' id='js-panel-psearch'/></div>"+html);
		$("#js-panel-psearch").quickFilter("#msg-panel .js-person",function($e, q){
			var str=$e.data("kw");
			q=purify(q);
			return str.toLowerCase().indexOf(q)!=-1;
		})
	};
	
	
	
	function getChannelHTML(e){
		var unread_class=(parseInt(e.unread_count)?" -unread":"");
		var unread_count=parseInt(e.unread_count);
		if (unread_count>=10){
			unread_count=9;
		}
		
		if (Channel.engine.isDeactivated(e)){
			return "";
		}
		
		return "<div class='item is-channel js-channel-"+e.id+" "+unread_class+"' onclick=\"Channel.open("+e.id+",{'intent':'panel'});\">" +
			"<div class='channel-image'>"+Channel.engine.getImage(e)+"</div>"+
			"<div class='name ap-xdot'>"+Channel.engine.getDisplayName(e)+"</div>" +
			"<div class='channel-lm'>"+Channel.engine.lastMessage(e)+"</div>" +
			"<div class='unread-count'>"+unread_count+"</div>" +
		"</div>";
	};
	
	
	function countingTotalUnreads(){
		var len=$("#msg-panel .section-messages .item.-unread").length;
		if (len){
			$("#msg-panel .js-total-unread-count").html(len).show();
		}else{
			$("#msg-panel .js-total-unread-count").html(0).hide();
		}
	};
};


Message.render=new function __MessageRender(){
	/**
	 * @desc Render a message channel
	 */
	this.channel=function(channel, opts){		
		if (!opts){
			opts=$.extend({}, {prepend: false}, opts);
		}
		
		var ec=[];
		if (parseInt(opts.collapsed)){
			ec.push("collapsed");
		}
		
		channel._followers=AP.select(channel.followers, function(e){
			var u=People.get(e);
			if (!u.id || !parseInt(u.uid)){
				return null;
			}
			
			return u;
		});
		
		var has_online=false;
		var users=AP.render(channel._followers,function(e, index){
			if (index>=5){
				return "";
			}
			
			if (e.id==Client.viewer.id && channel.subtype=="peer"){
				return "";
			}
			
			if (Online.isOnline(e.username)){
				has_online=true;
				return "<div class='li -online'>"+e.name+"</div>";	
			}
			
			return "<div class='li'>"+e.name+"</div>";
			
		});
		
		if (channel._followers.length>5){
			users+="<div class='li -more url' data-url='"+Base.domain('message')+"/messages/"+channel.id+"'>Xem thêm</div>";
		}
		
		
		var channel_explain="<div class='channel-explain'><div class='cr'></div><div class='cus'>"+users+"</div></div>";
		var online="";
	
		if (has_online && channel.subtype=="peer"){
			online=" -online";
		}
		
		var html="<div class='msg-channel is-channel "+ec.join(" ")+"' id='channel-"+channel.id+"' data-id='"+channel.id+"'>" +
				"<div class='channel-header'>" +
				"	<div class='title"+online+"' title='"+Channel.engine.getDisplayName(channel)+"'>"+channel_explain+"<div class='ap-xdot'><span class='url' data-url='"+Base.domain("message")+"/messages/"+channel.id+"'>"+Channel.engine.getDisplayName(channel)+"</span></div></div>" +
				"	<div class='count'></div>" +
				"	<div class='icons'>" +
				"		<div class='icon js-channel-minus'><div class='hexp'><div class='txt'>Thu nhỏ / phóng to</div></div><span class='ficon-minus'></span></div>" +
				"		<div class='icon js-channel-call hide-on-collapsed'><div class='hexp'><div class='txt'>Video call</div></div><span class='-ap icon-phone4'></span></div>"+
				"		<div class='icon js-channel-add-people hide-on-collapsed'><div class='hexp'><div class='txt'>Thêm thành viên</div></div><span class='ficon-plus'></span></div>" +
				"		<div class='icon js-channel-close'><div class='hexp'><div class='txt'>Đóng</div></div><span class='-ap icon-ion-android-close'></span></div>" +
				"	</div>" +
				"</div>" +
				"<div class='channel-useradd'>" +
				"	<div class='panel-search'><input type='text' name='useradd' placeholder='+ thành viên để chat'/></div>" +
				"	<div class='submit'>Thêm</div>" +
				"</div>" +
				"<div class='channel-body scrollable'>" +
				"	<div class='channel-messages' id='channel-messages-"+channel.id+"'></div>" +
				"	<div class='channel-typing' id='channel-typing-"+channel.id+"'>" +
				"		<div class='seen hidden'></div>"+
				"		<div class='typing'>" +
				"			<div class='bubbles'>" +
				"				<div class='box'><div class='b b1'></div><div class='b b2'></div><div class='b b3'></div></div>" +
				"			</div>" +
				"			<div class='text'></div>" +
				"		</div>" +
				"	</div>" +
				"	<div class='channel-typing-fix hidden' style='height: 10px;'></div>" +
				"	<div class='channel-seens'></div>" +
				"</div>" +
				"<div class='channel-form' id='channel-form-"+channel.id+"'>"+getForm(channel)+"</div>" +
			"</div>";
		
		if (opts.prepend){
			$("#js-msg-boxes").prepend(html);
		}else{
			$("#js-msg-boxes").append(html);	
		}
		
		
		$("#channel-"+channel.id).find(".js-channel-minus").click(function(){
			$(this).closest(".msg-channel").toggleClass("collapsed");
			Message.render.balance();
		});
		
		$("#channel-"+channel.id).find(".js-channel-add-people").click(function(){
			$(this).closest(".msg-channel").find(".channel-useradd").toggleClass("active");
			
			if ($(this).closest(".msg-channel").find(".channel-useradd").hasClass("active")){
				$(this).closest(".msg-channel").find(".channel-useradd input").focus();
			}
		});
		
		
		$("#channel-"+channel.id).find(".js-channel-close").click(function(){
			var elem=this;
			var val=$(this).closest(".msg-channel").find("textarea.msg-input").val();
			
			if (val && val.length){
				AP.confirm("Please confirm to close the chatbox? You currently have unsent message.", function(){
					Channel.close($(elem).closest(".msg-channel").data("channel"));
					Message.render.destroy(elem);
				});
			}else{
				Channel.close($(elem).closest(".msg-channel").data("channel"));
				Message.render.destroy(elem);	
			}
		});
		
		$("#channel-"+channel.id).find(".js-channel-call").click(function(){
			var c=$(this).closest(".msg-channel").data("channel");
			AP.confirm("Start a video call within the channel?", function(){
				Message.call.click(c);
			});
		});
		
		$("#channel-"+channel.id+ " .channel-header .title").css({"marginRight": $("#channel-"+channel.id+ " .channel-header .icons").width()});
		
		Layout.scrollable("#js-msg-boxes .channel-body");
		Message.form.build(channel);
		this.balance();
		infiniteScrolling(channel);
		
		Tag.user("#channel-"+channel.id+" .channel-useradd input[name=useradd]", Client.people);
		Message.seen.get(channel, function(seens){
			
		});
		
		$("#channel-"+channel.id+" .channel-useradd .submit").click(function(){
			var val=$(this).parent().find("input").val();
			var channel=getChannel(this);
			
			if (!channel || !val.length){
				$("#channel-"+channel.id+" .channel-useradd").removeClass("active");
				return;
			}
			
			// $("#channel-"+channel.id+" .channel-useradd").removeClass("active");
			
			if (channel.subtype=="peer"){
				val=AP.render(channel._followers, function(e){
					if (e.username==Client.viewer.username){
						return "";
					}
					
					return "@"+e.username+" ";
				})+val;
				
				if (channel.subtype=="peer"){
					return Message.create.channel({
						"usernames_text": val
					});
				}	
			}else{
				var ref=this;
				UI.ajaxShow();
				AP.post(Message.api+"api/message/channel/manage/add.people", {users: val, id: channel.id}, function(code){
					UI.ajaxHide();
					
					if (!code.good()){
						return AP.alertError(code.message);
					}
					
					Message.render.destroy(ref);
					Channel.open(code.channel.id, {
						intent: 'click'
					}, function(){
						
					});
				});
				
			}
			
		});
		
		
		$("#channel-"+channel.id+" .channel-body").click(function(){
			var id=$(this).closest(".msg-channel").data("id");
			Channel.setActive(id);
		});
		
		$("#channel-"+channel.id+" .channel-form").click(function(){
			var id=$(this).closest(".msg-channel").data("id");
			Channel.setActive(id);
		});
	};
	
	
	/**
	 * @desc Balance positions of all channel box
	 */
	this.balance=function(){
		var cr=0;
		$("#js-msg-boxes .msg-channel").each(function(index){
			var w=$(this).width();
			if ($(this).hasClass("collapsed")){
				w=180;
			}else{
				w=270;
			}
			
			if ($(this).hasClass("hidden")){
				w=-15;
			}
			
			$(this).css("right", cr);
			cr+=w+15;
			
			$(this).find(".channel-header .title").css({"marginRight": $(this).find(".channel-header .icons").width()});
		});
		
		Message.cache.auto();
	};
	
	
	this.destroy=function(ref){
		var $box=$(ref).closest(".msg-channel");
		$box.remove();
		this.balance();
	};
	
	
	function getForm(channel){
		var mr=$.sbWidth();
		
		return "<div id='msg-form-"+channel.id+"' class='msg-form'>" +
			"<div class='wrapper'>" +
				"<div class='option'><span class='-ap icon-add'></span></div>"+
				"<div class='ctas-w' style='right:"+mr+"px'>"+getFormButtons(channel)+"</div>"+
				"<div class='send' onclick='Message.form.send(this)'>" +
				"	<div class='circle'><div class='c'><span class='-ap icon-navigation'></span></div></div>" +
				"	<div class='text'>Press enter to submit</div>" +
				"</div>" +
				"<div class='textarea'><div class='inputw'>" +
				"	<div class='input'>" +
				"		<textarea rows='1' class='msg-input' data-tagdir='bottom' data-full='1' name='content' placeholder='Type to send message'></textarea>" +
				"		<div class='help hidden'></div>" +
				"	</div>" +
				"</div></div>" +
			"</div>" +
		"</div>";
	};
	
	
	function getFormButtons(channel){
		return "<div class='ctas'>" +
			"<div class='action buzz channel-buzz' data-action='buzz'>" +
				"<span class='-ap icon-new'></span>" +
			"</div>" +
			"<div class='action channel-upload-drive' data-action='drive'>" +
				"<span class='-ap icon-uniF10D2'></span>" +
			"</div>" +
			"<div class='action att channel-upload-file'>" +
				"<span class='-ap icon-uniF10A'></span>" +
			"</div>" +
			"<div class='action image channel-upload-image'>" +
				"<span class='-ap icon-images'></span>" +
			"</div>" +
			"<div class='smiley-wrapper'>" +
			"	<div class='smiley-closable'></div>" +
			"	<div class='action smiley channel-smiley-input'>" +
				"	<span class='-ap icon-insert_emoticon'></span>" +
				"</div>" +
				"<div id='msg-stickers-"+channel.id+"' class='msg-stickers unselectable'>" +
				"	<div class='triangle'></div>" +
				"	<div class='nav prev' onclick='Sticker.set.move(this, -1);'><span class='-ap icon-circle-left'></span></div>" +
				"	<div class='nav next' onclick='Sticker.set.move(this, 1);'><span class='-ap icon-circle-right'></span></div>" +
				"	<div class='box'>" +
				"		<div class='header'><div class='sticker-set-slider'></div></div>" +
				"		<div class='msg-selection-canvas' class='scrollable' data-autoscroll='1' data-autohide='1'>" +
				"			<div class='selection msg-sticker-selections'></div>" +
				"		</div>" +
				"	</div>" +
			"	</div>" +
			"</div>" +
				"<div class='action like channel-like' data-action='like'>" +
				"<span class='-ap icon-thumbs-up2'></span>" +
			"</div>" +
		"</div>";
	};
	
	
	function infiniteScrolling(channel){
		if ($("#channel-"+channel.id+" .channel-body").hasClass("__inf")){
			return;
		}
		
		$("#channel-"+channel.id+" .channel-body").addClass("__inf");
		$("#channel-"+channel.id+" .channel-body > .scrollin").scroll(function(){
			var t=$(this).scrollTop();
			if (t<=50){
				Channel.loadPrevious(channel);
			}
		});
	};
};


Message.create=new function __MessageCreate(){
	this.channel=function(options){
		if (!options){
			options={};
		}
		
		options=$.extend({}, {}, options);
		
		if (!$("#js-channel-create").length){
			var html=getHTML(options);
			$(html).prependTo("#js-msg-boxes");
			bindEvents(options);
			Message.canvas.balance();
		}else{
			$("#js-channel-create").prependTo("#js-msg-boxes").removeClass("hidden");
			reset();
			Message.canvas.balance();
		}
		
		autofocus(options);
		if (options.usernames_text){
			$("#js-channel-create input[name=to]").val(options.usernames_text);
			$("#js-channel-create textarea").focus();
		}
	};
	
	
	this.peer=function(code){
		Channel.openDirect(code.channel, code.messages, code.page_token, code.stars, function(){			
		}, {
			prepend: true
		});
	};
	
	
	function getHTML(options){
		return "<div class='msg-channel is-channel smart-create' id='js-channel-create'>" +
			"<div class='channel-header'>" +
			"	<div class='title'>New message</div>" +
			"	<div class='icons'><div class='icon js-create-close'><span class='-ap icon-ion-android-close'></span></div></div>" +
			"</div>" +
			"<div class='channel-create'>" +
			"	<div class='label'>To:</div>" +
			"	<div class='input'><input name='to' placeholder='Type @ to tag'/></div>" +
			"</div>" +
			"<div class='channel-body'></div>" +
			"<div class='channel-form'>" +
			"	<div class='msg-form'>" +
			"		<div class='textarea'>" +
			"			<div class='inputw'><textarea name='content' placeholder='Type to send message'></textarea></div>" +
			"		</div>" +
			"		<div class='smart-send'>Send</div>" +
			"	</div>" +
			"</div>"+
		"</div>";
	};
	
	
	function createNow(){
		var users=$("#js-channel-create input[name=to]").val();
		var content=$("#js-channel-create textarea[name=content]").val();
		
		AP.post(Message.api+"api/message/channel/create",{users: users, content: content}, function(code){
			if (!code.good()){
				return AP.alertError(code.message);
			}
			
			$("#js-channel-create").addClass("hidden");
			
			Channel.open(code.channel.id, {
				intent: "click",
				prepend: true
			});
			
//			Channel.openDirect(code.channel, code.messages, code.page_token, code.stars, function(){
//				
//			}, {
//				prepend: true
//			});
		});
	};
	
	
	function bindEvents(options){
		Tag.user("#js-channel-create input[name=to]", Client.people);
		
		$("#js-channel-create textarea[name=content]").enter(function(){
			createNow(this);
		});
		
		$("#js-channel-create .smart-send").click(function(){
			createNow(this);
		});
		
		$("#js-channel-create .js-create-close").click(function(){
			$("#js-channel-create").addClass("hidden");
			Message.canvas.balance();
		});
		
		$("#js-channel-create textarea[name=content]").height(24).autoExpand();
	};
	
	
	function autofocus(options){
		if (options.users){
			$("#js-channel-create input[name=to]").val(AP.word.join(options.users, " ", function(e){
				return "@"+e+"";
			})+" ");	
		}
		
		if (!options.users || !options.users.length){
			$("#js-channel-create input[name=to]").focus();	
		}else{
			$("#js-channel-create textarea[name=content]").focus();
		}
	};
	
	
	function reset(){
		$("#js-channel-create input[name=to]").val("");
		$("#js-channel-create textarea[name=content]").val("");
		$("#js-channel-create textarea[name=content]").height(26)
	};
};






Message.base=new function __MessageBase(){
	this.init=function(){
		if (parseInt(Client.viewer.disabled_message)==2){
			$.log("MESSAGE_DISABLED_ON_THIS_ACCOUNT");
			return;
		}
		
		AP.sys.on("socket.ready", function(){
			$(document).ready(function(){
				if (!Client.mobile && parseInt(Client.viewer.id)){
					if (Client.base){
						Message.base.run();
						
						$(window).on("blur", function(){
							Channel.setActive(0);
							Message.form.untyping();
						}).on("focus", function(){
							
						}).on("unload", function(){
							Message.form.untyping();
						});
						
					}
				}
			});
		});
	};
	
	
	this.run=function(){
		if (!Client.mobile && parseInt(Client.viewer.id)){
			Message.canvas.init();
			Message.seen.init();
			
			Channel.manager.load(function(channels){
				Message.canvas.setChannels(channels);
			});
			
			Message.bindEvents();
			var cs=Message.cache.currentChannels();
			
			for (var i=0; i<Math.min(cs.length,5); i++){
				var c=cs[i];
				if (!c || !c.id){
					continue;
				}
				
				Channel.open(c.id, {collapsed: parseInt(c.c), intent: "cache"});
			};
		};
	};
};




Message.mode("base");
Message.base.init();/*!
 * Socket.IO v2.1.1
 * (c) 2014-2018 Guillermo Rauch
 * Released under the MIT License.
 */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.io=e():t.io=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t,e){"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{};var n,r=i(t),s=r.source,p=r.id,h=r.path,f=u[p]&&h in u[p].nsps,l=e.forceNew||e["force new connection"]||!1===e.multiplex||f;return l?(c("ignoring socket cache for %s",s),n=a(s,e)):(u[p]||(c("new io instance for %s",s),u[p]=a(s,e)),n=u[p]),r.query&&!e.query&&(e.query=r.query),n.socket(r.path,e)}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(1),s=n(7),a=n(12),c=n(3)("socket.io-client");t.exports=e=r;var u=e.managers={};e.protocol=s.protocol,e.connect=r,e.Manager=n(12),e.Socket=n(37)},function(t,e,n){(function(e){"use strict";function r(t,n){var r=t;n=n||e.location,null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof n?n.protocol+"//"+t:"https://"+t),i("parse %s",t),r=o(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";var s=r.host.indexOf(":")!==-1,a=s?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+a+":"+r.port,r.href=r.protocol+"://"+a+(n&&n.port===r.port?"":":"+r.port),r}var o=n(2),i=n(3)("socket.io-client:url");t.exports=r}).call(e,function(){return this}())},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");o!=-1&&i!=-1&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},c=14;c--;)a[r[c]]=s[c]||"";return o!=-1&&i!=-1&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e,n){(function(r){function o(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function i(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),n){var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)}}function s(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(n){}}function c(){var t;try{t=e.storage.debug}catch(n){}return!t&&"undefined"!=typeof r&&"env"in r&&(t=r.env.DEBUG),t}function u(){try{return window.localStorage}catch(t){}}e=t.exports=n(5),e.log=s,e.formatArgs=i,e.save=a,e.load=c,e.useColors=o,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:u(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},e.enable(c())}).call(e,n(4))},function(t,e){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(t){if(p===setTimeout)return setTimeout(t,0);if((p===n||!p)&&setTimeout)return p=setTimeout,setTimeout(t,0);try{return p(t,0)}catch(e){try{return p.call(null,t,0)}catch(e){return p.call(this,t,0)}}}function i(t){if(h===clearTimeout)return clearTimeout(t);if((h===r||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(t);try{return h(t)}catch(e){try{return h.call(null,t)}catch(e){return h.call(this,t)}}}function s(){y&&l&&(y=!1,l.length?d=l.concat(d):m=-1,d.length&&a())}function a(){if(!y){var t=o(s);y=!0;for(var e=d.length;e;){for(l=d,d=[];++m<e;)l&&l[m].run();m=-1,e=d.length}l=null,y=!1,i(t)}}function c(t,e){this.fun=t,this.array=e}function u(){}var p,h,f=t.exports={};!function(){try{p="function"==typeof setTimeout?setTimeout:n}catch(t){p=n}try{h="function"==typeof clearTimeout?clearTimeout:r}catch(t){h=r}}();var l,d=[],y=!1,m=-1;f.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];d.push(new c(t,e)),1!==d.length||y||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.prependListener=u,f.prependOnceListener=u,f.listeners=function(t){return[]},f.binding=function(t){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(t){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(t,e,n){function r(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}function o(t){function n(){if(n.enabled){var t=n,r=+new Date,i=r-(o||r);t.diff=i,t.prev=o,t.curr=r,o=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;c++;var o=e.formatters[r];if("function"==typeof o){var i=s[c];n=o.call(t,i),s.splice(c,1),c--}return n}),e.formatArgs.call(t,s);var u=n.log||e.log||console.log.bind(console);u.apply(t,s)}}var o;return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=r(t),n.destroy=i,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function i(){var t=e.instances.indexOf(this);return t!==-1&&(e.instances.splice(t,1),!0)}function s(t){e.save(t),e.names=[],e.skips=[];var n,r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&(t=r[n].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}}function a(){e.enable("")}function c(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1}function u(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o.debug=o["default"]=o,e.coerce=u,e.disable=a,e.enable=s,e.enabled=c,e.humanize=n(6),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){function n(t){if(t=String(t),!(t.length>100)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*p;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;case"minutes":case"minute":case"mins":case"min":case"m":return n*a;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function r(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,p=365.25*u;t.exports=function(t,e){e=e||{};var i=typeof t;if("string"===i&&t.length>0)return n(t);if("number"===i&&isNaN(t)===!1)return e["long"]?o(t):r(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){function r(){}function o(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var r=i(t.data);if(r===!1)return g;n+=r}return f("encoded %j as %s",t,n),n}function i(t){try{return JSON.stringify(t)}catch(e){return!1}}function s(t,e){function n(t){var n=d.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}d.removeBlobs(t,n)}function a(){this.reconstructor=null}function c(t){var n=0,r={type:Number(t.charAt(0))};if(null==e.types[r.type])return h("unknown packet type "+r.type);if(e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type){for(var o="";"-"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!==t.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===t.charAt(n+1))for(r.nsp="";++n;){var i=t.charAt(n);if(","===i)break;if(r.nsp+=i,n===t.length)break}else r.nsp="/";var s=t.charAt(n+1);if(""!==s&&Number(s)==s){for(r.id="";++n;){var i=t.charAt(n);if(null==i||Number(i)!=i){--n;break}if(r.id+=t.charAt(n),n===t.length)break}r.id=Number(r.id)}if(t.charAt(++n)){var a=u(t.substr(n)),c=a!==!1&&(r.type===e.ERROR||y(a));if(!c)return h("invalid payload");r.data=a}return f("decoded %s as %j",t,r),r}function u(t){try{return JSON.parse(t)}catch(e){return!1}}function p(t){this.reconPack=t,this.buffers=[]}function h(t){return{type:e.ERROR,data:"parser error: "+t}}var f=n(3)("socket.io-parser"),l=n(8),d=n(9),y=n(10),m=n(11);e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=r,e.Decoder=a;var g=e.ERROR+'"encode error"';r.prototype.encode=function(t,n){if(f("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)s(t,n);else{var r=o(t);n([r])}},l(a.prototype),a.prototype.add=function(t){var n;if("string"==typeof t)n=c(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!m(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");n=this.reconstructor.takeBinaryData(t),n&&(this.reconstructor=null,this.emit("decoded",n))}},a.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=d.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){function r(t){if(t)return o(t)}function o(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n){n=n.slice(0);for(var r=0,o=n.length;r<o;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){(function(t){function r(t,e){if(!t)return t;if(s(t)){var n={_placeholder:!0,num:e.length};return e.push(t),n}if(i(t)){for(var o=new Array(t.length),a=0;a<t.length;a++)o[a]=r(t[a],e);return o}if("object"==typeof t&&!(t instanceof Date)){var o={};for(var c in t)o[c]=r(t[c],e);return o}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(i(t))for(var n=0;n<t.length;n++)t[n]=o(t[n],e);else if("object"==typeof t)for(var r in t)t[r]=o(t[r],e);return t}var i=n(10),s=n(11),a=Object.prototype.toString,c="function"==typeof t.Blob||"[object BlobConstructor]"===a.call(t.Blob),u="function"==typeof t.File||"[object FileConstructor]"===a.call(t.File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=r(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){function n(t,a,p){if(!t)return t;if(c&&t instanceof Blob||u&&t instanceof File){r++;var h=new FileReader;h.onload=function(){p?p[a]=this.result:o=this.result,--r||e(o)},h.readAsArrayBuffer(t)}else if(i(t))for(var f=0;f<t.length;f++)n(t[f],f,t);else if("object"==typeof t&&!s(t))for(var l in t)n(t[l],l,t)}var r=0,o=t;n(o),r||e(o)}}).call(e,function(){return this}())},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){(function(e){function n(t){return r&&e.Buffer.isBuffer(t)||o&&(t instanceof e.ArrayBuffer||i(t))}t.exports=n;var r="function"==typeof e.Buffer&&"function"==typeof e.Buffer.isBuffer,o="function"==typeof e.ArrayBuffer,i=function(){return o&&"function"==typeof e.ArrayBuffer.isView?e.ArrayBuffer.isView:function(t){return t.buffer instanceof e.ArrayBuffer}}()}).call(e,function(){return this}())},function(t,e,n){"use strict";function r(t,e){if(!(this instanceof r))return new r(t,e);t&&"object"===("undefined"==typeof t?"undefined":o(t))&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||c;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=e.autoConnect!==!1,this.autoConnect&&this.open()}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(13),s=n(37),a=n(8),c=n(7),u=n(39),p=n(40),h=n(3)("socket.io-client:manager"),f=n(36),l=n(41),d=Object.prototype.hasOwnProperty;t.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)d.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},r.prototype.updateSocketIds=function(){for(var t in this.nsps)d.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},r.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},a(r.prototype),r.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},r.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},r.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(t,e){if(h("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;h("opening %s",this.uri),this.engine=i(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var o=u(n,"open",function(){r.onopen(),t&&t()}),s=u(n,"error",function(e){if(h("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;h("connect attempt will timeout after %d",a);var c=setTimeout(function(){h("connect attempt timed out after %d",a),o.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",a)},a);this.subs.push({destroy:function(){clearTimeout(c)}})}return this.subs.push(o),this.subs.push(s),this},r.prototype.onopen=function(){h("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(u(t,"data",p(this,"ondata"))),this.subs.push(u(t,"ping",p(this,"onping"))),this.subs.push(u(t,"pong",p(this,"onpong"))),this.subs.push(u(t,"error",p(this,"onerror"))),this.subs.push(u(t,"close",p(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",p(this,"ondecoded")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},r.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},r.prototype.ondata=function(t){this.decoder.add(t)},r.prototype.ondecoded=function(t){this.emit("packet",t)},r.prototype.onerror=function(t){h("error",t),this.emitAll("error",t)},r.prototype.socket=function(t,e){function n(){~f(o.connecting,r)||o.connecting.push(r)}var r=this.nsps[t];if(!r){r=new s(this,t,e),this.nsps[t]=r;var o=this;r.on("connecting",n),r.on("connect",function(){r.id=o.generateId(t)}),this.autoConnect&&n()}return r},r.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},r.prototype.packet=function(t){h("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},r.prototype.cleanup=function(){h("cleanup");for(var t=this.subs.length,e=0;e<t;e++){var n=this.subs.shift();n.destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){h("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(t){h("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)h("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();h("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(h("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(h("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(h("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){t.exports=n(14),t.exports.parser=n(21)},function(t,e,n){(function(e){function r(t,n){if(!(this instanceof r))return new r(t,n);n=n||{},t&&"object"==typeof t&&(n=t,t=null),t?(t=p(t),n.hostname=t.host,n.secure="https"===t.protocol||"wss"===t.protocol,n.port=t.port,t.query&&(n.query=t.query)):n.host&&(n.hostname=p(n.host).host),this.secure=null!=n.secure?n.secure:e.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(e.location?location.hostname:"localhost"),this.port=n.port||(e.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var o="object"==typeof e&&e;o.global===o&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var i=n(15),s=n(8),a=n(3)("engine.io-client:socket"),c=n(36),u=n(21),p=n(2),h=n(30);t.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=u.protocol,r.Socket=r,r.Transport=n(20),r.transports=n(15),r.parser=n(21),r.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=u.protocol,e.transport=t;var n=this.transportOptions[t]||{};this.id&&(e.sid=this.id);var r=new i[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0});return r},r.prototype.open=function(){var t;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1)t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(n){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},r.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},r.prototype.probe=function(t){function e(){if(f.onlyBinaryUpgrades){var e=!this.supportsBinary&&f.transport.supportsBinary;h=h||e}h||(a('probe transport "%s" opened',t),p.send([{type:"ping",data:"probe"}]),p.once("packet",function(e){if(!h)if("pong"===e.type&&"probe"===e.data){if(a('probe transport "%s" pong',t),f.upgrading=!0,f.emit("upgrading",p),!p)return;r.priorWebsocketSuccess="websocket"===p.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){h||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),u(),f.setTransport(p),p.send([{type:"upgrade"}]),f.emit("upgrade",p),p=null,f.upgrading=!1,f.flush())})}else{a('probe transport "%s" failed',t);var n=new Error("probe error");n.transport=p.name,f.emit("upgradeError",n)}}))}function n(){h||(h=!0,u(),p.close(),p=null)}function o(e){var r=new Error("probe error: "+e);r.transport=p.name,n(),a('probe transport "%s" failed because of error: %s',t,e),f.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function c(t){p&&t.name!==p.name&&(a('"%s" works - aborting "%s"',t.name,p.name),n())}function u(){p.removeListener("open",e),p.removeListener("error",o),p.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",c)}a('probing transport "%s"',t);var p=this.createTransport(t,{probe:1}),h=!1,f=this;r.priorWebsocketSuccess=!1,p.once("open",e),p.once("error",o),p.once("close",i),this.once("close",s),this.once("upgrading",c),p.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},r.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},r.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},r.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},r.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){n=n||{},n.compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},r.prototype.close=function(){function t(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function e(){r.removeListener("upgrade",e),r.removeListener("upgradeError",e),t()}function n(){r.once("upgrade",e),r.once("upgradeError",e)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():t()}):this.upgrading?n():t()}return this},r.prototype.onError=function(t){a("socket error %j",t),r.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},r.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',t);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~c(this.transports,t[n])&&e.push(t[n]);return e}}).call(e,function(){return this}())},function(t,e,n){(function(t){function r(e){var n,r=!1,a=!1,c=!1!==e.jsonp;if(t.location){var u="https:"===location.protocol,p=location.port;
p||(p=u?443:80),r=e.hostname!==location.hostname||p!==e.port,a=e.secure!==u}if(e.xdomain=r,e.xscheme=a,n=new o(e),"open"in n&&!e.forceJSONP)return new i(e);if(!c)throw new Error("JSONP disabled");return new s(e)}var o=n(16),i=n(18),s=n(33),a=n(34);e.polling=r,e.websocket=a}).call(e,function(){return this}())},function(t,e,n){(function(e){var r=n(17);t.exports=function(t){var n=t.xdomain,o=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(s){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(s){}if(!n)try{return new(e[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(s){}}}).call(e,function(){return this}())},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(n){t.exports=!1}},function(t,e,n){(function(e){function r(){}function o(t){if(c.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,e.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=t.hostname!==e.location.hostname||r!==t.port,this.xs=t.secure!==n}}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=n(16),c=n(19),u=n(8),p=n(31),h=n(3)("engine.io-client:polling-xhr");t.exports=o,t.exports.Request=i,p(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new i(t)},o.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},o.prototype.doPoll=function(){h("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},u(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new a(t),r=this;try{h("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&n.setRequestHeader(o,this.extraHeaders[o])}}catch(s){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(s){}try{n.setRequestHeader("Accept","*/*")}catch(s){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){r.onLoad()},n.onerror=function(){r.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var t=n.getResponseHeader("Content-Type");r.supportsBinary&&"application/octet-stream"===t&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?r.onLoad():setTimeout(function(){r.onError(n.status)},0))},h("xhr data %s",this.data),n.send(this.data)}catch(s){return void setTimeout(function(){r.onError(s)},0)}e.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,t)try{this.xhr.abort()}catch(n){}e.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(n){}t="application/octet-stream"===e?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(n){this.onError(n)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return"undefined"!=typeof e.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},e.document&&(e.attachEvent?e.attachEvent("onunload",s):e.addEventListener&&e.addEventListener("beforeunload",s,!1))}).call(e,function(){return this}())},function(t,e,n){function r(t){var e=t&&t.forceBase64;p&&!e||(this.supportsBinary=!1),o.call(this,t)}var o=n(20),i=n(30),s=n(21),a=n(31),c=n(32),u=n(3)("engine.io-client:polling");t.exports=r;var p=function(){var t=n(16),e=new t({xdomain:!1});return null!=e.responseType}();a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(t){function e(){u("paused"),n.readyState="paused",t()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||e()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||e()}))}else e()},r.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(t){var e=this;u("polling got data %s",t);var n=function(t,n,r){return"opening"===e.readyState&&e.onOpen(),"close"===t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,n),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function t(){u("writing close packet"),e.write([{type:"close"}])}var e=this;"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},r.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t);var r=this.hostname.indexOf(":")!==-1;return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){function r(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}var o=n(21),i=n(8);t.exports=r,i(r.prototype),r.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},r.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},r.prototype.onPacket=function(t){this.emit("packet",t)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){(function(t){function r(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}function o(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=v[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){t.data=o.result,e.encodePacket(t,n,!0,r)},o.readAsArrayBuffer(t.data)}function s(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(g)return i(t,n,r);var o=new Uint8Array(1);o[0]=v[t.type];var s=new k([o.buffer,t.data]);return r(s)}function a(t){try{t=d.decode(t,{strict:!1})}catch(e){return!1}return t}function c(t,e,n){for(var r=new Array(t.length),o=l(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}var u,p=n(22),h=n(23),f=n(24),l=n(25),d=n(26);t&&t.ArrayBuffer&&(u=n(28));var y="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),m="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),g=y||m;e.protocol=3;var v=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=p(v),w={type:"error",data:"parser error"},k=n(29);e.encodePacket=function(e,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===e.data?void 0:e.data.buffer||e.data;if(t.ArrayBuffer&&c instanceof ArrayBuffer)return o(e,n,a);if(k&&c instanceof t.Blob)return s(e,n,a);if(c&&c.base64)return r(e,a);var u=v[e.type];return void 0!==e.data&&(u+=i?d.encode(String(e.data),{strict:!1}):String(e.data)),a(""+u)},e.encodeBase64Packet=function(n,r){var o="b"+e.packets[n.type];if(k&&n.data instanceof t.Blob){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(n.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(a){for(var c=new Uint8Array(n.data),u=new Array(c.length),p=0;p<c.length;p++)u[p]=c[p];s=String.fromCharCode.apply(null,u)}return o+=t.btoa(s),r(o)},e.decodePacket=function(t,n,r){if(void 0===t)return w;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&(t=a(t),t===!1))return w;var o=t.charAt(0);return Number(o)==o&&b[o]?t.length>1?{type:b[o],data:t.substring(1)}:{type:b[o]}:w}var i=new Uint8Array(t),o=i[0],s=f(t,1);return k&&"blob"===n&&(s=new k([s])),{type:b[o],data:s}},e.decodeBase64Packet=function(t,e){var n=b[t.charAt(0)];if(!u)return{type:n,data:{base64:!0,data:t.substr(1)}};var r=u.decode(t.substr(1));return"blob"===e&&k&&(r=new k([r])),{type:n,data:r}},e.encodePayload=function(t,n,r){function o(t){return t.length+":"+t}function i(t,r){e.encodePacket(t,!!s&&n,!1,function(t){r(null,o(t))})}"function"==typeof n&&(r=n,n=null);var s=h(t);return n&&s?k&&!g?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r):t.length?void c(t,i,function(t,e){return r(e.join(""))}):r("0:")},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);"function"==typeof n&&(r=n,n=null);var o;if(""===t)return r(w,0,1);for(var i,s,a="",c=0,u=t.length;c<u;c++){var p=t.charAt(c);if(":"===p){if(""===a||a!=(i=Number(a)))return r(w,0,1);if(s=t.substr(c+1,i),a!=s.length)return r(w,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),w.type===o.type&&w.data===o.data)return r(w,0,1);var h=r(o,c+i,u);if(!1===h)return}c+=i,a=""}else a+=p}return""!==a?r(w,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})}return t.length?void c(t,r,function(t,e){var r=e.reduce(function(t,e){var n;return n="string"==typeof e?e.length:e.byteLength,t+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}e?o[i++]=0:o[i++]=1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)}):n(new ArrayBuffer(0))},e.encodePayloadAsBlob=function(t,n){function r(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,k){var c=new k([e.buffer,a.buffer,t]);n(null,c)}})}c(t,r,function(t,e){return n(new k(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],c="",u=1;255!==s[u];u++){if(c.length>310)return r(w,0,1);c+=s[u]}o=f(o,2+c.length),c=parseInt(c);var p=f(o,0,c);if(a)try{p=String.fromCharCode.apply(null,new Uint8Array(p))}catch(h){var l=new Uint8Array(p);p="";for(var u=0;u<l.length;u++)p+=String.fromCharCode(l[u])}i.push(p),o=f(o,c)}var d=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,d)})}}).call(e,function(){return this}())},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e,n){(function(e){function r(t){if(!t||"object"!=typeof t)return!1;if(o(t)){for(var n=0,i=t.length;n<i;n++)if(r(t[n]))return!0;return!1}if("function"==typeof e.Buffer&&e.Buffer.isBuffer&&e.Buffer.isBuffer(t)||"function"==typeof e.ArrayBuffer&&t instanceof ArrayBuffer||s&&t instanceof Blob||a&&t instanceof File)return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return r(t.toJSON(),!0);for(var c in t)if(Object.prototype.hasOwnProperty.call(t,c)&&r(t[c]))return!0;return!1}var o=n(10),i=Object.prototype.toString,s="function"==typeof e.Blob||"[object BlobConstructor]"===i.call(e.Blob),a="function"==typeof e.File||"[object FileConstructor]"===i.call(e.File);t.exports=r}).call(e,function(){return this}())},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(t,e,n){function o(t,r){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=n):0!==o.count||i||e(null,r)}var i=!1;return n=n||r,o.count=t,0===t?e():o}function r(){}t.exports=n},function(t,e,n){var r;(function(t,o){!function(i){function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)e=t.charCodeAt(o++),e>=55296&&e<=56319&&o<i?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function a(t){for(var e,n=t.length,r=-1,o="";++r<n;)e=t[r],e>65535&&(e-=65536,o+=w(e>>>10&1023|55296),e=56320|1023&e),o+=w(e);return o}function c(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return w(t>>e&63|128)}function p(t,e){if(0==(4294967168&t))return w(t);var n="";return 0==(4294965248&t)?n=w(t>>6&31|192):0==(4294901760&t)?(c(t,e)||(t=65533),n=w(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=w(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=w(63&t|128)}function h(t,e){e=e||{};for(var n,r=!1!==e.strict,o=s(t),i=o.length,a=-1,c="";++a<i;)n=o[a],c+=p(n,r);return c}function f(){if(b>=v)throw Error("Invalid byte index");var t=255&g[b];if(b++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function l(t){var e,n,r,o,i;if(b>v)throw Error("Invalid byte index");if(b==v)return!1;if(e=255&g[b],b++,0==(128&e))return e;if(192==(224&e)){if(n=f(),i=(31&e)<<6|n,i>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if(n=f(),r=f(),i=(15&e)<<12|n<<6|r,i>=2048)return c(i,t)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(n=f(),r=f(),o=f(),i=(7&e)<<18|n<<12|r<<6|o,i>=65536&&i<=1114111))return i;throw Error("Invalid UTF-8 detected")}function d(t,e){e=e||{};var n=!1!==e.strict;g=s(t),v=g.length,b=0;for(var r,o=[];(r=l(n))!==!1;)o.push(r);return a(o)}var y="object"==typeof e&&e,m=("object"==typeof t&&t&&t.exports==y&&t,"object"==typeof o&&o);m.global!==m&&m.window!==m||(i=m);var g,v,b,w=String.fromCharCode,k={version:"2.1.2",encode:h,decode:d};r=function(){return k}.call(e,n,e,t),!(void 0!==r&&(t.exports=r))}(this)}).call(e,n(27)(t),function(){return this}())},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var p=new ArrayBuffer(a),h=new Uint8Array(p);for(e=0;e<c;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],h[u++]=r<<2|o>>4,h[u++]=(15&o)<<4|i>>2,h[u++]=(3&i)<<6|63&s;return p}}()},function(t,e){(function(e){function n(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}t[e]=r}}}function r(t,e){e=e||{};var r=new i;n(t);for(var o=0;o<t.length;o++)r.append(t[o]);return e.type?r.getBlob(e.type):r.getBlob()}function o(t,e){return n(t),new Blob(t,e||{})}var i=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder,s=function(){try{var t=new Blob(["hi"]);return 2===t.size}catch(e){return!1}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;t.exports=function(){return s?a?e.Blob:o:c?r:void 0}()}).call(e,function(){return this}())},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e){"use strict";function n(t){var e="";do e=s[t%a]+e,t=Math.floor(t/a);while(t>0);return e}function r(t){var e=0;for(p=0;p<t.length;p++)e=e*a+c[t.charAt(p)];return e}function o(){var t=n(+new Date);return t!==i?(u=0,i=t):t+"."+n(u++)}for(var i,s="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64,c={},u=0,p=0;p<a;p++)c[s[p]]=p;o.encode=n,o.decode=r,t.exports=o},function(t,e,n){(function(e){function r(){}function o(t){i.call(this,t),this.query=this.query||{},a||(e.___eio||(e.___eio=[]),a=e.___eio),this.index=a.length;var n=this;a.push(function(t){n.onData(t)}),this.query.j=this.index,e.document&&e.addEventListener&&e.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=r)},!1)}var i=n(19),s=n(31);t.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e;var r="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);r&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function n(){r(),e()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError("jsonp polling iframe removal error",t)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),p=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=p,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),t=t.replace(u,"\\\n"),this.area.value=t.replace(c,"\\n");try{this.form.submit()}catch(h){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(e,function(){return this}())},function(t,e,n){(function(e){function r(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=h&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(l=o),i.call(this,t)}var o,i=n(20),s=n(21),a=n(30),c=n(31),u=n(32),p=n(3)("engine.io-client:websocket"),h=e.WebSocket||e.MozWebSocket;if("undefined"==typeof window)try{o=n(35)}catch(f){}var l=h;l||"undefined"!=typeof window||(l=o),t.exports=r,c(r,i),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?e?new l(t,e):new l(t):new l(t,e,n)}catch(r){return this.emit("error",r)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},r.prototype.write=function(t){function n(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}var r=this;this.writable=!1;for(var o=t.length,i=0,a=o;i<a;i++)!function(t){s.encodePacket(t,r.supportsBinary,function(i){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate){var a="string"==typeof i?e.Buffer.byteLength(i):i.length;a<r.perMessageDeflate.threshold&&(s.compress=!1)}}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(c){p("websocket closed before onclose event")}--o||n()})}(t[i])},r.prototype.onClose=function(){i.prototype.onClose.call(this)},r.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close()},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),t=a.encode(t),t.length&&(t="?"+t);var r=this.hostname.indexOf(":")!==-1;return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t},r.prototype.check=function(){return!(!l||"__initialize"in l&&this.name===r.prototype.name)}}).call(e,function(){return this}())},function(t,e){},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){"use strict";function r(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=n(7),s=n(8),a=n(38),c=n(39),u=n(40),p=n(3)("socket.io-client:socket"),h=n(30),f=n(23);t.exports=e=r;var l={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=s.prototype.emit;s(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[c(t,"open",u(this,"onopen")),c(t,"packet",u(this,"onpacket")),c(t,"close",u(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},r.prototype.send=function(){var t=a(arguments);return t.unshift("message"),this.emit.apply(this,t),this},r.prototype.emit=function(t){if(l.hasOwnProperty(t))return d.apply(this,arguments),this;var e=a(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:f(e))?i.BINARY_EVENT:i.EVENT,data:e};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(p("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},r.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},r.prototype.onopen=function(){if(p("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"===o(this.query)?h.encode(this.query):this.query;p("sending connect packet with query %s",t),this.packet({type:i.CONNECT,query:t})}else this.packet({type:i.CONNECT})},r.prototype.onclose=function(t){p("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},r.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===i.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case i.CONNECT:this.onconnect();break;case i.EVENT:this.onevent(t);break;case i.BINARY_EVENT:this.onevent(t);break;case i.ACK:this.onack(t);break;case i.BINARY_ACK:this.onack(t);break;case i.DISCONNECT:this.ondisconnect();break;case i.ERROR:this.emit("error",t.data)}},r.prototype.onevent=function(t){var e=t.data||[];p("emitting event %j",e),null!=t.id&&(p("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?d.apply(this,e):this.receiveBuffer.push(e)},r.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=a(arguments);p("sending ack %j",r),e.packet({type:f(r)?i.BINARY_ACK:i.ACK,id:t,data:r})}}},r.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(p("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):p("bad ack %s",t.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)d.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){p("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(p("performing disconnect (%s)",this.nsp),this.packet({type:i.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},r.prototype.compress=function(t){return this.flags.compress=t,this},r.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){function n(t,e){var n=[];e=e||0;for(var r=e||0;r<t.length;r++)n[r-e]=t[r];return n}t.exports=n},function(t,e){"use strict";function n(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}t.exports=n},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}}])});var Live=new function __Live(){
	this.__enabled=1;
	this.__authenticated=0;
	this.__bind={};

	this.mode="socket"; // {rest, socket}
	
	this.online=[];
	
	this.off=function(){
		this.__enabled=0;
		if (this.me){
			this.me.io.autoConnect=false;
			this.me.io._reconnection=false;
			// this.me.reconnect=false;
			// this.me.reconnect(false);
			this.me.disconnect();
		}
	};
	
	var error_count=0;
	this.onConnectionError=function(){
		if (this.__enabled==0){
			return;
		}
		
		if (mobile()){
			return;
		}
		
		if (Client.base && Client.base.app=="message"){
			var html="<div id='socket-disconnected'> <div class='txt'>Real-time connection to server is interrupted due to unstable internet connection. Messages and notifications may not be real-time. Please refresh to continue.</div> <div class='cta url' data-url=':refresh'>Refresh</div> </div>";
			
			if ($("#socket-disconnected").length){
				// $("#socket-disconnected").remove();
				return;
			}else{
				error_count++;
				if (error_count>=2){
					$(document.body).append(html);
					$("#document").css("top", 50);
				}
			}
		}else{
			var $title=$("#msg-panel .title");
			if ($title.length){
				$title.prepend("<span class='inline' title='Real-time connection is interrupted'><span class='-ap icon-info'></span></span>");
			}
		}
	};
	
	
	/**
	 * @desc Create a live connection and try to authenticated
	 */
	this.join=function(url){
		if (!Client.viewer || !Client.system || N.__off || !this.__enabled){
			return;
		}
		
		var query="ns="+Client.system.id+"&nstoken="+Client.system.token+"&id="+Client.viewer.id+"&username="+Client.viewer.username+
		"&token="+Client.secureData.token+"&session="+Client.secureData.session+"&type=session&fake="+"justatest";
		
		if (Client.base){
			query="ns="+Client.system.id+"&nstoken="+Client.system.token+"&id="+Client.viewer.id+"&username="+Client.viewer.username+
			"&token="+Client.base.secureData.token+"&session="+Client.base.secureData.session+"&type=session&fake="+"justatest";	
		}
		
		var allow_reconnect=true;
		if (!this.__enabled){
			allow_reconnect=false;
		}
		
		var socket = io.connect(url, 
			{
				query:query, 
				reconnect: true, 
				reconnection: true,
				reconnectionAttempts: 200,
				reconnectionDelay: 5000,
				transports: ['websocket', 'flashsocket', 'htmlfile', 'xhr-polling', 'jsonp-polling', 'polling']
			}
		);
		 
		socket.data={};
		socket.data.url=url;
		socket.data.authenticated=false;
		
		authenticate(socket);
		
		socket.on('authenticated', function(data){
			console.log("Socket authenticated ...");
			socket.data.authenticated=true;
			
			if (!Live.__authenticated){
				Live.__authenticated=1;
				AP.sys.fire("socket.ready");
			}else{
				AP.sys.fire("socket.reconnection.ready");
			}
			
			N.ui.trigger(data);
			
		});	
		
		socket.on("authentication.error", function(msg){
			console.log("authentication.error");
			$.log(msg);
		});
		
		socket.on('connect_error', function(){
			console.log('connection_error');
			Live.onConnectionError();
		});
		
		socket.on('error', function(){
			console.log('connection_error');
			Live.onConnectionError();
		});
		
		socket.on("disconnect", function(){
			if (Live.__enabled || N.__off){
				return;
			}
			 
			$.log("Socket disconnected ...");
			 // reconnect(socket); 
		});
		 
		 
		socket.on("clog", function(message){
		});
		 
		socket.on("__log__", function(data){
			$.log(data);
		});		 
		
		return socket;
	};
	
	
	this.post=function(event, data, callback, once){
		if (this.auth()){
			this.emit(event, data);
			if (once){
				if (this.__bind[event]){
					// return;
				}
				
				this.me.off(event);
				
				this.__bind[event]=data;
				this.me.once(event, callback);
			}else{
				this.me.on(event, callback);
			}
		}
	};
	
	this.send=function(event, data, callback, once){
		return this.post(event, data, callback, once);
	};
	
	
	
	this.on=function(event, callback){
		if (!this.me){
			return;
		}
		this.me.on(event, callback);
	};
	
	
	this.auth=function(){ 
		return this.me && this.me.data.authenticated;
	};
	
	
	this.update=function(data){
		if (!data){
			data={};
		}
		if (Live.auth()){
			Live.emit("update",data);
		}
	};
	
	
	this.broadcast=function(users, data){
		if (Live.auth()){
			Live.emit("p2p",{
				 "users": users,
				 "data": data
			});
		}
	};
	
	
	this.emit=function(event, data){
		if (!Live.me){
			$.log("Unauthenticated socket");
			return;
		}
		
		$$(function(){
			$.log("socket-event ["+event+"], with data:");
			$.log(data);
		});
		
		Live.me.emit(event, data);
	}
	
	
	
	function authenticate(socket){
		var networks=[];
		if (!Client.networks){
			return;
		}
		
		for (var i=0; i<Client.networks.length; i++){
			 var n=Client.networks[i];
			 var is_root=0;
			 if (parseInt(n.type)==13){
				 is_root=1;
			 }
			 networks.push({"id": n.id, "token": n.token, "path": n.path, "name": n.name, "root": is_root});
		}
	};
	
	
	function reconnect(socket){
		$.log("Reconnecting ...");
	};
};



Live.response=new function __LiveResponse(){
	this.comment=function(comment){
		var $box=$("#auto-comments-"+comment.origin_hid);
		if (!comment.origin_hid || !$box.length){
			return;
		}
		
		var $canvas=$box.closest(".__comment_canvas");
		if (!$canvas.length){
			return;
		}
		
		var obj=$canvas.data("object");
		var opts=$canvas.data("options");
		
		if (!obj){
			return;
		}
		
		
		obj.stats.comments=parseInt(obj.stats.comments)+1;
		Comment.ui.insert($canvas, obj, comment);
		
		$("#comment-"+comment.id).addClass("animated");
		setTimeout(function(){
			$("#comment-"+comment.id).removeClass("animated");
		},3000);
		
		$(opts.counter).html(obj.stats.comments);
		$(".comment-counter-"+obj.id).html(obj.stats.comments);
		$(".comment-counter-"+obj.gid).html(obj.stats.comments);
	};
};
$(document).ready(function(){
	if (Client.https) {
	    Live.me = Live.join(Client.socket_url);
	} else {
	    Live.me = Live.join(Client.socket_url);
	}

	Live.on("notification", function(data){
		var notis={title: data.title, body: data.body, icon: data.image, url:data.link, id: data.id, __state: data.__state};
		
		DN.show(notis);
		DN.bip(3, data.id);
		
		if (data.user && parseInt(data.user.num_notis)){
			Base.title.notis(data.user.num_notis);
			N.ui.update(data.user);
		}
		
		if (data.data){
			AP.sys.fire(data.type, [data.data, data]);
			AP.sys.fire(data.type+":"+data.action, [data.extra]);
			
			if (data.action=="comment" && data.extra && data.extra.type=="comment"){
				Live.response.comment(data.extra);
			}
		}
	});
	
	
	Live.on("counter", function(data){
		Base.title.notis(data.num_notis);
		N.ui.update(data);
	});

	
	Live.on("p2p", function(data){
		if (data.action){
			if (data.action=='chat.focus' || data.action=='chat.unfocus'){
				Chat.live.handleAction(data.action, data);
			}
		}
	});


	AP.sys.on("socket.ready", function(){
		Live.send("system.getonline", {}, function(data){
			Online.setPeople(data);
			AP.fire("ONLINE.LOADED");
		});
		
		Live.on("user.online",function(data){
			Online.add(data.username);
		});
		
		Live.on("user.offline",function(data){
			Online.remove(data.username);
		});
		
		N.live.init();
		Reminder.init();
	});


});var Online=new function __Online(){
	this.people=[];
	this.__online={};
	this.__loaded=false;
	
	this.setPeople=function(people){
		this.people=filter(people);
		for (var i=0; i<this.people.length; i++){
			this.__online[this.people[i].username]=this.people[i];
		}
		
		this.__loaded=true;
		
		setTimeout(function(){
			Online.__loaded=true; 
		},30000);
	};
	
	this.add=function(username){
		if (this.online(username)){
			return;
		}
		
		this.people.push({'username': username, atime: AP.time.now()});
		
	};
	
	
	this.remove=function(username){
		var r=[];
		for (var i=0; i<this.people.length; i++){
			if (this.people[i].username==username){
				
			}else{
				r.push(this.people[i]);
			}
		}
		
		this.people=r;
	};
	
	
	
	this.online=function(username){
		if (!username || !username.length){
			return null;
		}
		
		for (var i=0; i<this.people.length; i++){
			if (this.people[i].username==username){
				return this.people[i];
			}
		}
		
		return null;
	};
	
	
	this.isOnline=function(username){
		var u=username;
		if (AP.data.isObject(username) && username.username){
			u=username.username;
		}
		
		if (this.__online[username]){
			return true;
		}
		
		return false;
	};
	
	
	
	this.loaded=function(callback){
		if (this.__loaded){
			callback();
		}
		
		AP.on("ONLINE.LOADED", function(){
			callback();
		});
	};
	
	
	this.updateStatus=function(selector){
		AP.on("ONLINE.LOADED", function(){
			$(selector).each(function(){
				var $this=$(this);
				var username=$this.data("username");
				
				if (!username){
					return;
				}
				if (username.charAt(0)=="@"){
					username=username.substr(1);
				}
				var $target=$this;
				if ($this.hasClass("avatar")){
				}else{
					$target=$this.find(".avatar");
				}
				
				if (Online.online(username)){
					$target.addClass("-online");
				}else{
					$target.removeClass("-online");
				}
			});
		});
	};
	
	
	
	this.reorder=function(users){
		if (!users || !users.length){
			return users;
		}
		
		for (var i=0; i<users.length; i++){
			var obj=this.online(users[i].username);
			
			if (obj){
				users[i].online=1;
				users[i].atime=obj.atime;
			}else{
				users[i].online=0;
				users[i].atime=0;
			}
		}
		
		users.sort(function(e1, e2){
			if (e2.online==1 && e1.online==1){
				return e2.atime-e1.atime;
			}
			return e2.online-e1.online;
		});
	};
	
	
	
	function filter(people){
		var r=[];
		for (var i=0; i<people.length; i++){
			var found=false;
			var person=people[i];
			for (var j=0; j<r.length; j++){
				if (r[j].username==person.username){
					found=true;
					
					if (parseInt(r[j].atime < parseInt(person.atime))){
						r[j].atime=person.atime;
					}
				}
			}
			
			if (!found){
				r.push(person);
			}
			
		}
		return r;
	};
	
};